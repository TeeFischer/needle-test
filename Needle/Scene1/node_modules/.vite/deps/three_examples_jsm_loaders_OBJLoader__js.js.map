{
  "version": 3,
  "sources": ["../../@needle-tools/engine/node_modules/three/examples/jsm/loaders/MTLLoader.js", "../../@needle-tools/engine/node_modules/three/examples/jsm/loaders/OBJLoader.js"],
  "sourcesContent": ["import {\r\n\tColor,\r\n\tColorManagement,\r\n\tDefaultLoadingManager,\r\n\tFileLoader,\r\n\tFrontSide,\r\n\tLoader,\r\n\tLoaderUtils,\r\n\tMeshPhongMaterial,\r\n\tRepeatWrapping,\r\n\tTextureLoader,\r\n\tVector2,\r\n\tSRGBColorSpace\r\n} from 'three';\r\n\r\n/**\r\n * Loads a Wavefront .mtl file specifying materials\r\n */\r\n\r\nclass MTLLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Loads and parses a MTL asset from a URL.\r\n\t *\r\n\t * @param {String} url - URL to the MTL file.\r\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\r\n\t * @param {Function} [onProgress] - Callback for download progress.\r\n\t * @param {Function} [onError] - Callback for download errors.\r\n\t *\r\n\t * @see setPath setResourcePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setResourcePath() explicitly prior to load.\r\n\t */\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( text, path ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tsetMaterialOptions( value ) {\r\n\r\n\t\tthis.materialOptions = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a MTL file.\r\n\t *\r\n\t * @param {String} text - Content of MTL file\r\n\t * @return {MaterialCreator}\r\n\t *\r\n\t * @see setPath setResourcePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setResourcePath() explicitly prior to parse.\r\n\t */\r\n\tparse( text, path ) {\r\n\r\n\t\tconst lines = text.split( '\\n' );\r\n\t\tlet info = {};\r\n\t\tconst delimiter_pattern = /\\s+/;\r\n\t\tconst materialsInfo = {};\r\n\r\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlet line = lines[ i ];\r\n\t\t\tline = line.trim();\r\n\r\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\r\n\r\n\t\t\t\t// Blank line or comment ignore\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pos = line.indexOf( ' ' );\r\n\r\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\r\n\t\t\tkey = key.toLowerCase();\r\n\r\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\r\n\t\t\tvalue = value.trim();\r\n\r\n\t\t\tif ( key === 'newmtl' ) {\r\n\r\n\t\t\t\t// New material\r\n\r\n\t\t\t\tinfo = { name: value };\r\n\t\t\t\tmaterialsInfo[ value ] = info;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\r\n\r\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\r\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tinfo[ key ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\r\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\r\n\t\tmaterialCreator.setManager( this.manager );\r\n\t\tmaterialCreator.setMaterials( materialsInfo );\r\n\t\treturn materialCreator;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Create a new MTLLoader.MaterialCreator\r\n * @param baseUrl - Url relative to which textures are loaded\r\n * @param options - Set of options on how to construct the materials\r\n *                  side: Which side to apply the material\r\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\r\n *                  wrap: What type of wrapping to apply for textures\r\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\r\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\r\n *                                Default: false, assumed to be already normalized\r\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\r\n *                                  Default: false\r\n * @constructor\r\n */\r\n\r\nclass MaterialCreator {\r\n\r\n\tconstructor( baseUrl = '', options = {} ) {\r\n\r\n\t\tthis.baseUrl = baseUrl;\r\n\t\tthis.options = options;\r\n\t\tthis.materialsInfo = {};\r\n\t\tthis.materials = {};\r\n\t\tthis.materialsArray = [];\r\n\t\tthis.nameLookup = {};\r\n\r\n\t\tthis.crossOrigin = 'anonymous';\r\n\r\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\r\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\r\n\r\n\t}\r\n\r\n\tsetCrossOrigin( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetManager( value ) {\r\n\r\n\t\tthis.manager = value;\r\n\r\n\t}\r\n\r\n\tsetMaterials( materialsInfo ) {\r\n\r\n\t\tthis.materialsInfo = this.convert( materialsInfo );\r\n\t\tthis.materials = {};\r\n\t\tthis.materialsArray = [];\r\n\t\tthis.nameLookup = {};\r\n\r\n\t}\r\n\r\n\tconvert( materialsInfo ) {\r\n\r\n\t\tif ( ! this.options ) return materialsInfo;\r\n\r\n\t\tconst converted = {};\r\n\r\n\t\tfor ( const mn in materialsInfo ) {\r\n\r\n\t\t\t// Convert materials info into normalized form based on options\r\n\r\n\t\t\tconst mat = materialsInfo[ mn ];\r\n\r\n\t\t\tconst covmat = {};\r\n\r\n\t\t\tconverted[ mn ] = covmat;\r\n\r\n\t\t\tfor ( const prop in mat ) {\r\n\r\n\t\t\t\tlet save = true;\r\n\t\t\t\tlet value = mat[ prop ];\r\n\t\t\t\tconst lprop = prop.toLowerCase();\r\n\r\n\t\t\t\tswitch ( lprop ) {\r\n\r\n\t\t\t\t\tcase 'kd':\r\n\t\t\t\t\tcase 'ka':\r\n\t\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\r\n\r\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\r\n\r\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// ignore\r\n\r\n\t\t\t\t\t\t\t\tsave = false;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( save ) {\r\n\r\n\t\t\t\t\tcovmat[ lprop ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn converted;\r\n\r\n\t}\r\n\r\n\tpreload() {\r\n\r\n\t\tfor ( const mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.create( mn );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetIndex( materialName ) {\r\n\r\n\t\treturn this.nameLookup[ materialName ];\r\n\r\n\t}\r\n\r\n\tgetAsArray() {\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tfor ( const mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\r\n\t\t\tthis.nameLookup[ mn ] = index;\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materialsArray;\r\n\r\n\t}\r\n\r\n\tcreate( materialName ) {\r\n\r\n\t\tif ( this.materials[ materialName ] === undefined ) {\r\n\r\n\t\t\tthis.createMaterial_( materialName );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t}\r\n\r\n\tcreateMaterial_( materialName ) {\r\n\r\n\t\t// Create material\r\n\r\n\t\tconst scope = this;\r\n\t\tconst mat = this.materialsInfo[ materialName ];\r\n\t\tconst params = {\r\n\r\n\t\t\tname: materialName,\r\n\t\t\tside: this.side\r\n\r\n\t\t};\r\n\r\n\t\tfunction resolveURL( baseUrl, url ) {\r\n\r\n\t\t\tif ( typeof url !== 'string' || url === '' )\r\n\t\t\t\treturn '';\r\n\r\n\t\t\t// Absolute URL\r\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\r\n\r\n\t\t\treturn baseUrl + url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMapForType( mapType, value ) {\r\n\r\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\r\n\r\n\t\t\tconst texParams = scope.getTextureParams( value, params );\r\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\r\n\r\n\t\t\tmap.repeat.copy( texParams.scale );\r\n\t\t\tmap.offset.copy( texParams.offset );\r\n\r\n\t\t\tmap.wrapS = scope.wrap;\r\n\t\t\tmap.wrapT = scope.wrap;\r\n\r\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\r\n\r\n\t\t\t\tmap.colorSpace = SRGBColorSpace;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tparams[ mapType ] = map;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const prop in mat ) {\r\n\r\n\t\t\tconst value = mat[ prop ];\r\n\t\t\tlet n;\r\n\r\n\t\t\tif ( value === '' ) continue;\r\n\r\n\t\t\tswitch ( prop.toLowerCase() ) {\r\n\r\n\t\t\t\t// Ns is material specular exponent\r\n\r\n\t\t\t\tcase 'kd':\r\n\r\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\tparams.color = ColorManagement.toWorkingColorSpace( new Color().fromArray( value ), SRGBColorSpace );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\r\n\t\t\t\t\tparams.specular = ColorManagement.toWorkingColorSpace( new Color().fromArray( value ), SRGBColorSpace );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ke':\r\n\r\n\t\t\t\t\t// Emissive using RGB values\r\n\t\t\t\t\tparams.emissive = ColorManagement.toWorkingColorSpace( new Color().fromArray( value ), SRGBColorSpace );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_kd':\r\n\r\n\t\t\t\t\t// Diffuse texture map\r\n\r\n\t\t\t\t\tsetMapForType( 'map', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ks':\r\n\r\n\t\t\t\t\t// Specular map\r\n\r\n\t\t\t\t\tsetMapForType( 'specularMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ke':\r\n\r\n\t\t\t\t\t// Emissive map\r\n\r\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'norm':\r\n\r\n\t\t\t\t\tsetMapForType( 'normalMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_bump':\r\n\t\t\t\tcase 'bump':\r\n\r\n\t\t\t\t\t// Bump texture map\r\n\r\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_d':\r\n\r\n\t\t\t\t\t// Alpha map\r\n\r\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\r\n\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ns':\r\n\r\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\r\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\r\n\r\n\t\t\t\t\tparams.shininess = parseFloat( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tn = parseFloat( value );\r\n\r\n\t\t\t\t\tif ( n < 1 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tr':\r\n\t\t\t\t\tn = parseFloat( value );\r\n\r\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\r\n\r\n\t\t\t\t\tif ( n > 0 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = 1 - n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t}\r\n\r\n\tgetTextureParams( value, matParams ) {\r\n\r\n\t\tconst texParams = {\r\n\r\n\t\t\tscale: new Vector2( 1, 1 ),\r\n\t\t\toffset: new Vector2( 0, 0 )\r\n\r\n\t\t };\r\n\r\n\t\tconst items = value.split( /\\s+/ );\r\n\t\tlet pos;\r\n\r\n\t\tpos = items.indexOf( '-bm' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\r\n\t\t\titems.splice( pos, 2 );\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-s' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-o' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\ttexParams.url = items.join( ' ' ).trim();\r\n\t\treturn texParams;\r\n\r\n\t}\r\n\r\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\r\n\t\tlet loader = manager.getHandler( url );\r\n\r\n\t\tif ( loader === null ) {\r\n\r\n\t\t\tloader = new TextureLoader( manager );\r\n\r\n\t\t}\r\n\r\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\r\n\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MTLLoader };\r\n", "import {\r\n\tBufferGeometry,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tGroup,\r\n\tLineBasicMaterial,\r\n\tLineSegments,\r\n\tLoader,\r\n\tMaterial,\r\n\tMesh,\r\n\tMeshPhongMaterial,\r\n\tPoints,\r\n\tPointsMaterial,\r\n\tVector3,\r\n\tColor,\r\n\tSRGBColorSpace\r\n} from 'three';\r\nimport { MTLLoader } from './MTLLoader.js';\r\n\r\n// o object_name | g group_name\r\nconst _object_pattern = /^[og]\\s*(.+)?/;\r\n// mtllib file_reference\r\nconst _material_library_pattern = /^mtllib /;\r\n// usemtl material_name\r\nconst _material_use_pattern = /^usemtl /;\r\n// usemap map_name\r\nconst _map_use_pattern = /^usemap /;\r\nconst _face_vertex_data_separator_pattern = /\\s+/;\r\n\r\nconst _vA = new Vector3();\r\nconst _vB = new Vector3();\r\nconst _vC = new Vector3();\r\n\r\nconst _ab = new Vector3();\r\nconst _cb = new Vector3();\r\n\r\nconst _color = new Color();\r\n\r\nfunction ParserState() {\r\n\r\n\tconst state = {\r\n\t\tobjects: [],\r\n\t\tobject: {},\r\n\r\n\t\tvertices: [],\r\n\t\tnormals: [],\r\n\t\tcolors: [],\r\n\t\tuvs: [],\r\n\r\n\t\tmaterials: {},\r\n\t\tmaterialLibraries: [],\r\n\r\n\t\tstartObject: function ( name, fromDeclaration ) {\r\n\r\n\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\r\n\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\r\n\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\r\n\r\n\t\t\t\tthis.object.name = name;\r\n\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\r\n\r\n\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\r\n\r\n\t\t\t\tthis.object._finalize( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.object = {\r\n\t\t\t\tname: name || '',\r\n\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\r\n\r\n\t\t\t\tgeometry: {\r\n\t\t\t\t\tvertices: [],\r\n\t\t\t\t\tnormals: [],\r\n\t\t\t\t\tcolors: [],\r\n\t\t\t\t\tuvs: [],\r\n\t\t\t\t\thasUVIndices: false\r\n\t\t\t\t},\r\n\t\t\t\tmaterials: [],\r\n\t\t\t\tsmooth: true,\r\n\r\n\t\t\t\tstartMaterial: function ( name, libraries ) {\r\n\r\n\t\t\t\t\tconst previous = this._finalize( false );\r\n\r\n\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\r\n\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\r\n\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\r\n\r\n\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst material = {\r\n\t\t\t\t\t\tindex: this.materials.length,\r\n\t\t\t\t\t\tname: name || '',\r\n\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\r\n\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\r\n\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\r\n\t\t\t\t\t\tgroupEnd: - 1,\r\n\t\t\t\t\t\tgroupCount: - 1,\r\n\t\t\t\t\t\tinherited: false,\r\n\r\n\t\t\t\t\t\tclone: function ( index ) {\r\n\r\n\t\t\t\t\t\t\tconst cloned = {\r\n\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\r\n\t\t\t\t\t\t\t\tname: this.name,\r\n\t\t\t\t\t\t\t\tmtllib: this.mtllib,\r\n\t\t\t\t\t\t\t\tsmooth: this.smooth,\r\n\t\t\t\t\t\t\t\tgroupStart: 0,\r\n\t\t\t\t\t\t\t\tgroupEnd: - 1,\r\n\t\t\t\t\t\t\t\tgroupCount: - 1,\r\n\t\t\t\t\t\t\t\tinherited: false\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\r\n\t\t\t\t\t\t\treturn cloned;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tthis.materials.push( material );\r\n\r\n\t\t\t\t\treturn material;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tcurrentMaterial: function () {\r\n\r\n\t\t\t\t\tif ( this.materials.length > 0 ) {\r\n\r\n\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn undefined;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\t_finalize: function ( end ) {\r\n\r\n\t\t\t\t\tconst lastMultiMaterial = this.currentMaterial();\r\n\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\r\n\r\n\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\r\n\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\r\n\t\t\t\t\t\tlastMultiMaterial.inherited = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\r\n\t\t\t\t\tif ( end && this.materials.length > 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( let mi = this.materials.length - 1; mi >= 0; mi -- ) {\r\n\r\n\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\r\n\r\n\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\r\n\t\t\t\t\tif ( end && this.materials.length === 0 ) {\r\n\r\n\t\t\t\t\t\tthis.materials.push( {\r\n\t\t\t\t\t\t\tname: '',\r\n\t\t\t\t\t\t\tsmooth: this.smooth\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn lastMultiMaterial;\r\n\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// Inherit previous objects material.\r\n\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\r\n\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\r\n\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\r\n\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\r\n\r\n\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\r\n\r\n\t\t\t\tconst declared = previousMaterial.clone( 0 );\r\n\t\t\t\tdeclared.inherited = true;\r\n\t\t\t\tthis.object.materials.push( declared );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.objects.push( this.object );\r\n\r\n\t\t},\r\n\r\n\t\tfinalize: function () {\r\n\r\n\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\r\n\r\n\t\t\t\tthis.object._finalize( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tparseVertexIndex: function ( value, len ) {\r\n\r\n\t\t\tconst index = parseInt( value, 10 );\r\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\r\n\r\n\t\t},\r\n\r\n\t\tparseNormalIndex: function ( value, len ) {\r\n\r\n\t\t\tconst index = parseInt( value, 10 );\r\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\r\n\r\n\t\t},\r\n\r\n\t\tparseUVIndex: function ( value, len ) {\r\n\r\n\t\t\tconst index = parseInt( value, 10 );\r\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\r\n\r\n\t\t},\r\n\r\n\t\taddVertex: function ( a, b, c ) {\r\n\r\n\t\t\tconst src = this.vertices;\r\n\t\t\tconst dst = this.object.geometry.vertices;\r\n\r\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\r\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\r\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\r\n\r\n\t\t},\r\n\r\n\t\taddVertexPoint: function ( a ) {\r\n\r\n\t\t\tconst src = this.vertices;\r\n\t\t\tconst dst = this.object.geometry.vertices;\r\n\r\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\r\n\r\n\t\t},\r\n\r\n\t\taddVertexLine: function ( a ) {\r\n\r\n\t\t\tconst src = this.vertices;\r\n\t\t\tconst dst = this.object.geometry.vertices;\r\n\r\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\r\n\r\n\t\t},\r\n\r\n\t\taddNormal: function ( a, b, c ) {\r\n\r\n\t\t\tconst src = this.normals;\r\n\t\t\tconst dst = this.object.geometry.normals;\r\n\r\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\r\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\r\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\r\n\r\n\t\t},\r\n\r\n\t\taddFaceNormal: function ( a, b, c ) {\r\n\r\n\t\t\tconst src = this.vertices;\r\n\t\t\tconst dst = this.object.geometry.normals;\r\n\r\n\t\t\t_vA.fromArray( src, a );\r\n\t\t\t_vB.fromArray( src, b );\r\n\t\t\t_vC.fromArray( src, c );\r\n\r\n\t\t\t_cb.subVectors( _vC, _vB );\r\n\t\t\t_ab.subVectors( _vA, _vB );\r\n\t\t\t_cb.cross( _ab );\r\n\r\n\t\t\t_cb.normalize();\r\n\r\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\r\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\r\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\r\n\r\n\t\t},\r\n\r\n\t\taddColor: function ( a, b, c ) {\r\n\r\n\t\t\tconst src = this.colors;\r\n\t\t\tconst dst = this.object.geometry.colors;\r\n\r\n\t\t\tif ( src[ a ] !== undefined ) dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\r\n\t\t\tif ( src[ b ] !== undefined ) dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\r\n\t\t\tif ( src[ c ] !== undefined ) dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\r\n\r\n\t\t},\r\n\r\n\t\taddUV: function ( a, b, c ) {\r\n\r\n\t\t\tconst src = this.uvs;\r\n\t\t\tconst dst = this.object.geometry.uvs;\r\n\r\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\r\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\r\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\r\n\r\n\t\t},\r\n\r\n\t\taddDefaultUV: function () {\r\n\r\n\t\t\tconst dst = this.object.geometry.uvs;\r\n\r\n\t\t\tdst.push( 0, 0 );\r\n\t\t\tdst.push( 0, 0 );\r\n\t\t\tdst.push( 0, 0 );\r\n\r\n\t\t},\r\n\r\n\t\taddUVLine: function ( a ) {\r\n\r\n\t\t\tconst src = this.uvs;\r\n\t\t\tconst dst = this.object.geometry.uvs;\r\n\r\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\r\n\r\n\t\t},\r\n\r\n\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\r\n\r\n\t\t\tconst vLen = this.vertices.length;\r\n\r\n\t\t\tlet ia = this.parseVertexIndex( a, vLen );\r\n\t\t\tlet ib = this.parseVertexIndex( b, vLen );\r\n\t\t\tlet ic = this.parseVertexIndex( c, vLen );\r\n\r\n\t\t\tthis.addVertex( ia, ib, ic );\r\n\t\t\tthis.addColor( ia, ib, ic );\r\n\r\n\t\t\t// normals\r\n\r\n\t\t\tif ( na !== undefined && na !== '' ) {\r\n\r\n\t\t\t\tconst nLen = this.normals.length;\r\n\r\n\t\t\t\tia = this.parseNormalIndex( na, nLen );\r\n\t\t\t\tib = this.parseNormalIndex( nb, nLen );\r\n\t\t\t\tic = this.parseNormalIndex( nc, nLen );\r\n\r\n\t\t\t\tthis.addNormal( ia, ib, ic );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.addFaceNormal( ia, ib, ic );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tif ( ua !== undefined && ua !== '' ) {\r\n\r\n\t\t\t\tconst uvLen = this.uvs.length;\r\n\r\n\t\t\t\tia = this.parseUVIndex( ua, uvLen );\r\n\t\t\t\tib = this.parseUVIndex( ub, uvLen );\r\n\t\t\t\tic = this.parseUVIndex( uc, uvLen );\r\n\r\n\t\t\t\tthis.addUV( ia, ib, ic );\r\n\r\n\t\t\t\tthis.object.geometry.hasUVIndices = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// add placeholder values (for inconsistent face definitions)\r\n\r\n\t\t\t\tthis.addDefaultUV();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\taddPointGeometry: function ( vertices ) {\r\n\r\n\t\t\tthis.object.geometry.type = 'Points';\r\n\r\n\t\t\tconst vLen = this.vertices.length;\r\n\r\n\t\t\tfor ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {\r\n\r\n\t\t\t\tconst index = this.parseVertexIndex( vertices[ vi ], vLen );\r\n\r\n\t\t\t\tthis.addVertexPoint( index );\r\n\t\t\t\tthis.addColor( index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\taddLineGeometry: function ( vertices, uvs ) {\r\n\r\n\t\t\tthis.object.geometry.type = 'Line';\r\n\r\n\t\t\tconst vLen = this.vertices.length;\r\n\t\t\tconst uvLen = this.uvs.length;\r\n\r\n\t\t\tfor ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {\r\n\r\n\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\r\n\r\n\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tstate.startObject( '', false );\r\n\r\n\treturn state;\r\n\r\n}\r\n\r\n//\r\n\r\nclass OBJLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.materials = null;\r\n\t\tthis.materialsLoader = new MTLLoader( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, async function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tconst state = scope.parse( text, true );\r\n\t\t\t\t\r\n\r\n\t\t\t\tfor ( let i = 0, l = state.materialLibraries.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst mtlfile = state.materialLibraries[ i ];\r\n\r\n\t\t\t\t\tconst newUrl = url.startsWith(\"blob:\") \r\n\t\t\t\t\t\t? (url + \"/\" + mtlfile) \r\n\t\t\t\t\t\t: new URL(mtlfile, url);\r\n\r\n\t\t\t\t\tconsole.debug( 'Loading MTL file: ' + newUrl );\r\n\r\n\t\t\t\t\tawait (new Promise((resolve, reject) => {\r\n\t\t\t\t\t\tscope.materialsLoader.load( newUrl.toString(), creator => {\r\n\r\n\t\t\t\t\t\t\tscope.setMaterials( creator );\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}, null, reject );\r\n\t\t\t\t\t}));\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tonLoad( scope.createObjects( state ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tsetMTLLoader ( loader ) { \r\n\r\n\t\tthis.materialsLoader = loader;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetMaterials( materials ) {\r\n\r\n\t\tthis.materials = materials;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tparse( text, parseOnly = false ) {\r\n\r\n\t\tconst state = new ParserState();\r\n\r\n\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\r\n\r\n\t\t\t// This is faster than String.split with regex that splits on both\r\n\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\r\n\r\n\t\t\t// join lines separated by a line continuation character (\\)\r\n\t\t\ttext = text.replace( /\\\\\\n/g, '' );\r\n\r\n\t\t}\r\n\r\n\t\tconst lines = text.split( '\\n' );\r\n\t\tlet result = [];\r\n\r\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst line = lines[ i ].trimStart();\r\n\r\n\t\t\tif ( line.length === 0 ) continue;\r\n\r\n\t\t\tconst lineFirstChar = line.charAt( 0 );\r\n\r\n\t\t\t// @todo invoke passed in handler if any\r\n\t\t\tif ( lineFirstChar === '#' ) continue; // skip comments\r\n\r\n\t\t\tif ( lineFirstChar === 'v' ) {\r\n\r\n\t\t\t\tconst data = line.split( _face_vertex_data_separator_pattern );\r\n\r\n\t\t\t\tswitch ( data[ 0 ] ) {\r\n\r\n\t\t\t\t\tcase 'v':\r\n\t\t\t\t\t\tstate.vertices.push(\r\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\r\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\r\n\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tif ( data.length >= 7 ) {\r\n\r\n\t\t\t\t\t\t\t_color.setRGB(\r\n\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\r\n\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\r\n\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] ),\r\n\t\t\t\t\t\t\t\tSRGBColorSpace\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tstate.colors.push( _color.r, _color.g, _color.b );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// if no colors are defined, add placeholders so color and vertex indices match\r\n\r\n\t\t\t\t\t\t\tstate.colors.push( undefined, undefined, undefined );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'vn':\r\n\t\t\t\t\t\tstate.normals.push(\r\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\r\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\r\n\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'vt':\r\n\t\t\t\t\t\tstate.uvs.push(\r\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\r\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( lineFirstChar === 'f' ) {\r\n\r\n\t\t\t\tconst lineData = line.slice( 1 ).trim();\r\n\t\t\t\tconst vertexData = lineData.split( _face_vertex_data_separator_pattern );\r\n\t\t\t\tconst faceVertices = [];\r\n\r\n\t\t\t\t// Parse the face vertex data into an easy to work with format\r\n\r\n\t\t\t\tfor ( let j = 0, jl = vertexData.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tconst vertex = vertexData[ j ];\r\n\r\n\t\t\t\t\tif ( vertex.length > 0 ) {\r\n\r\n\t\t\t\t\t\tconst vertexParts = vertex.split( '/' );\r\n\t\t\t\t\t\tfaceVertices.push( vertexParts );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\r\n\r\n\t\t\t\tconst v1 = faceVertices[ 0 ];\r\n\r\n\t\t\t\tfor ( let j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tconst v2 = faceVertices[ j ];\r\n\t\t\t\t\tconst v3 = faceVertices[ j + 1 ];\r\n\r\n\t\t\t\t\tstate.addFace(\r\n\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\r\n\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\r\n\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( lineFirstChar === 'l' ) {\r\n\r\n\t\t\t\tconst lineParts = line.substring( 1 ).trim().split( ' ' );\r\n\t\t\t\tlet lineVertices = [];\r\n\t\t\t\tconst lineUVs = [];\r\n\r\n\t\t\t\tif ( line.indexOf( '/' ) === - 1 ) {\r\n\r\n\t\t\t\t\tlineVertices = lineParts;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( let li = 0, llen = lineParts.length; li < llen; li ++ ) {\r\n\r\n\t\t\t\t\t\tconst parts = lineParts[ li ].split( '/' );\r\n\r\n\t\t\t\t\t\tif ( parts[ 0 ] !== '' ) lineVertices.push( parts[ 0 ] );\r\n\t\t\t\t\t\tif ( parts[ 1 ] !== '' ) lineUVs.push( parts[ 1 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\r\n\r\n\t\t\t} else if ( lineFirstChar === 'p' ) {\r\n\r\n\t\t\t\tconst lineData = line.slice( 1 ).trim();\r\n\t\t\t\tconst pointData = lineData.split( ' ' );\r\n\r\n\t\t\t\tstate.addPointGeometry( pointData );\r\n\r\n\t\t\t} else if ( ( result = _object_pattern.exec( line ) ) !== null ) {\r\n\r\n\t\t\t\t// o object_name\r\n\t\t\t\t// or\r\n\t\t\t\t// g group_name\r\n\r\n\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\r\n\t\t\t\t// let name = result[ 0 ].slice( 1 ).trim();\r\n\t\t\t\tconst name = ( ' ' + result[ 0 ].slice( 1 ).trim() ).slice( 1 );\r\n\r\n\t\t\t\tstate.startObject( name );\r\n\r\n\t\t\t} else if ( _material_use_pattern.test( line ) ) {\r\n\r\n\t\t\t\t// material\r\n\r\n\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\r\n\r\n\t\t\t} else if ( _material_library_pattern.test( line ) ) {\r\n\r\n\t\t\t\t// mtl file\r\n\r\n\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\r\n\r\n\t\t\t} else if ( _map_use_pattern.test( line ) ) {\r\n\r\n\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\r\n\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\r\n\r\n\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\r\n\r\n\t\t\t} else if ( lineFirstChar === 's' ) {\r\n\r\n\t\t\t\tresult = line.split( ' ' );\r\n\r\n\t\t\t\t// smooth shading\r\n\r\n\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\r\n\t\t\t\t// but does not define a usemtl for each face set.\r\n\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\r\n\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\r\n\t\t\t\t// where explicit usemtl defines geometry groups.\r\n\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\r\n\t\t\t\t\t *\r\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\r\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\r\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\r\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\r\n\t\t\t\t\t * than 0.\"\r\n\t\t\t\t\t */\r\n\t\t\t\tif ( result.length > 1 ) {\r\n\r\n\t\t\t\t\tconst value = result[ 1 ].trim().toLowerCase();\r\n\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\r\n\t\t\t\t\tstate.object.smooth = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst material = state.object.currentMaterial();\r\n\t\t\t\tif ( material ) material.smooth = state.object.smooth;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Handle null terminated files without exception\r\n\t\t\t\tif ( line === '\\0' ) continue;\r\n\r\n\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.finalize();\r\n\r\n\t\t// If the method is called from the load() function we do first load materials before creating the objects\r\n\t\t// This is to not modify the functionality of parse() e.g. by making it async\r\n\t\tif ( parseOnly ) return state;\r\n\r\n\t\treturn this.createObjects(state);\r\n\t}\r\n\r\n\r\n\tcreateObjects ( state ) {\r\n\t\r\n\t\tconst container = new Group();\r\n\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\r\n\r\n\t\tconst hasPrimitives = ! ( state.objects.length === 1 && state.objects[ 0 ].geometry.vertices.length === 0 );\r\n\r\n\t\tif ( hasPrimitives === true ) {\r\n\r\n\t\t\tfor ( let i = 0, l = state.objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst object = state.objects[ i ];\r\n\t\t\t\tconst geometry = object.geometry;\r\n\t\t\t\tconst materials = object.materials;\r\n\t\t\t\tconst isLine = ( geometry.type === 'Line' );\r\n\t\t\t\tconst isPoints = ( geometry.type === 'Points' );\r\n\t\t\t\tlet hasVertexColors = false;\r\n\r\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\r\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\r\n\r\n\t\t\t\tconst buffergeometry = new BufferGeometry();\r\n\r\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\r\n\r\n\t\t\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\t\t\thasVertexColors = true;\r\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.hasUVIndices === true ) {\r\n\r\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create materials\r\n\r\n\t\t\t\tconst createdMaterials = [];\r\n\r\n\t\t\t\tfor ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\r\n\r\n\t\t\t\t\tconst sourceMaterial = materials[ mi ];\r\n\t\t\t\t\tconst materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\r\n\t\t\t\t\tlet material = state.materials[ materialHash ];\r\n\r\n\t\t\t\t\tif ( this.materials !== null ) {\r\n\r\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\r\n\r\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\r\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\r\n\r\n\t\t\t\t\t\t\tconst materialLine = new LineBasicMaterial();\r\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\r\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\r\n\t\t\t\t\t\t\tmaterial = materialLine;\r\n\r\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\r\n\r\n\t\t\t\t\t\t\tconst materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\r\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\r\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\r\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\r\n\t\t\t\t\t\t\tmaterial = materialPoints;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( material === undefined ) {\r\n\r\n\t\t\t\t\t\tif ( isLine ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\r\n\r\n\t\t\t\t\t\t} else if ( isPoints ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\r\n\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\r\n\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\r\n\r\n\t\t\t\t\t\tstate.materials[ materialHash ] = material;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcreatedMaterials.push( material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create mesh\r\n\r\n\t\t\t\tlet mesh;\r\n\r\n\t\t\t\tif ( createdMaterials.length > 1 ) {\r\n\r\n\t\t\t\t\tfor ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\r\n\r\n\t\t\t\t\t\tconst sourceMaterial = materials[ mi ];\r\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( isLine ) {\r\n\r\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\r\n\r\n\t\t\t\t\t} else if ( isPoints ) {\r\n\r\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( isLine ) {\r\n\r\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\r\n\r\n\t\t\t\t\t} else if ( isPoints ) {\r\n\r\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmesh.name = object.name;\r\n\r\n\t\t\t\tcontainer.add( mesh );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// if there is only the default parser state object with no geometry data, interpret data as point cloud\r\n\r\n\t\t\tif ( state.vertices.length > 0 ) {\r\n\r\n\t\t\t\tconst material = new PointsMaterial( { size: 1, sizeAttenuation: false } );\r\n\r\n\t\t\t\tconst buffergeometry = new BufferGeometry();\r\n\r\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( state.vertices, 3 ) );\r\n\r\n\t\t\t\tif ( state.colors.length > 0 && state.colors[ 0 ] !== undefined ) {\r\n\r\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( state.colors, 3 ) );\r\n\t\t\t\t\tmaterial.vertexColors = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst points = new Points( buffergeometry, material );\r\n\t\t\t\tcontainer.add( points );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn container;\r\n\t}\r\n}\r\n\r\nexport { OBJLoader };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAM,YAAN,cAAwB,OAAO;AAAA,EAE9B,YAAa,SAAU;AAEtB,UAAO,OAAQ;AAAA,EAEhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,KAAM,KAAK,QAAQ,YAAY,SAAU;AAExC,UAAM,QAAQ;AAEd,UAAM,OAAS,KAAK,SAAS,KAAO,YAAY,eAAgB,GAAI,IAAI,KAAK;AAE7E,UAAM,SAAS,IAAI,WAAY,KAAK,OAAQ;AAC5C,WAAO,QAAS,KAAK,IAAK;AAC1B,WAAO,iBAAkB,KAAK,aAAc;AAC5C,WAAO,mBAAoB,KAAK,eAAgB;AAChD,WAAO,KAAM,KAAK,SAAW,MAAO;AAEnC,UAAI;AAEH,eAAQ,MAAM,MAAO,MAAM,IAAK,CAAE;AAAA,MAEnC,SAAU,GAAR;AAED,YAAK,SAAU;AAEd,kBAAS,CAAE;AAAA,QAEZ,OAAO;AAEN,kBAAQ,MAAO,CAAE;AAAA,QAElB;AAEA,cAAM,QAAQ,UAAW,GAAI;AAAA,MAE9B;AAAA,IAED,GAAG,YAAY,OAAQ;AAAA,EAExB;AAAA,EAEA,mBAAoB,OAAQ;AAE3B,SAAK,kBAAkB;AACvB,WAAO;AAAA,EAER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAO,MAAM,MAAO;AAEnB,UAAM,QAAQ,KAAK,MAAO,IAAK;AAC/B,QAAI,OAAO,CAAC;AACZ,UAAM,oBAAoB;AAC1B,UAAM,gBAAgB,CAAC;AAEvB,aAAU,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAO;AAEzC,UAAI,OAAO,MAAO,CAAE;AACpB,aAAO,KAAK,KAAK;AAEjB,UAAK,KAAK,WAAW,KAAK,KAAK,OAAQ,CAAE,MAAM,KAAM;AAGpD;AAAA,MAED;AAEA,YAAM,MAAM,KAAK,QAAS,GAAI;AAE9B,UAAI,MAAQ,OAAO,IAAM,KAAK,UAAW,GAAG,GAAI,IAAI;AACpD,YAAM,IAAI,YAAY;AAEtB,UAAI,QAAU,OAAO,IAAM,KAAK,UAAW,MAAM,CAAE,IAAI;AACvD,cAAQ,MAAM,KAAK;AAEnB,UAAK,QAAQ,UAAW;AAIvB,eAAO,EAAE,MAAM,MAAM;AACrB,sBAAe,KAAM,IAAI;AAAA,MAE1B,OAAO;AAEN,YAAK,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,MAAO;AAEnE,gBAAM,KAAK,MAAM,MAAO,mBAAmB,CAAE;AAC7C,eAAM,GAAI,IAAI,CAAE,WAAY,GAAI,CAAE,CAAE,GAAG,WAAY,GAAI,CAAE,CAAE,GAAG,WAAY,GAAI,CAAE,CAAE,CAAE;AAAA,QAErF,OAAO;AAEN,eAAM,GAAI,IAAI;AAAA,QAEf;AAAA,MAED;AAAA,IAED;AAEA,UAAM,kBAAkB,IAAI,gBAAiB,KAAK,gBAAgB,MAAM,KAAK,eAAgB;AAC7F,oBAAgB,eAAgB,KAAK,WAAY;AACjD,oBAAgB,WAAY,KAAK,OAAQ;AACzC,oBAAgB,aAAc,aAAc;AAC5C,WAAO;AAAA,EAER;AAED;AAiBA,IAAM,kBAAN,MAAsB;AAAA,EAErB,YAAa,UAAU,IAAI,UAAU,CAAC,GAAI;AAEzC,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,gBAAgB,CAAC;AACtB,SAAK,YAAY,CAAC;AAClB,SAAK,iBAAiB,CAAC;AACvB,SAAK,aAAa,CAAC;AAEnB,SAAK,cAAc;AAEnB,SAAK,OAAS,KAAK,QAAQ,SAAS,SAAc,KAAK,QAAQ,OAAO;AACtE,SAAK,OAAS,KAAK,QAAQ,SAAS,SAAc,KAAK,QAAQ,OAAO;AAAA,EAEvE;AAAA,EAEA,eAAgB,OAAQ;AAEvB,SAAK,cAAc;AACnB,WAAO;AAAA,EAER;AAAA,EAEA,WAAY,OAAQ;AAEnB,SAAK,UAAU;AAAA,EAEhB;AAAA,EAEA,aAAc,eAAgB;AAE7B,SAAK,gBAAgB,KAAK,QAAS,aAAc;AACjD,SAAK,YAAY,CAAC;AAClB,SAAK,iBAAiB,CAAC;AACvB,SAAK,aAAa,CAAC;AAAA,EAEpB;AAAA,EAEA,QAAS,eAAgB;AAExB,QAAK,CAAE,KAAK;AAAU,aAAO;AAE7B,UAAM,YAAY,CAAC;AAEnB,eAAY,MAAM,eAAgB;AAIjC,YAAM,MAAM,cAAe,EAAG;AAE9B,YAAM,SAAS,CAAC;AAEhB,gBAAW,EAAG,IAAI;AAElB,iBAAY,QAAQ,KAAM;AAEzB,YAAI,OAAO;AACX,YAAI,QAAQ,IAAK,IAAK;AACtB,cAAM,QAAQ,KAAK,YAAY;AAE/B,gBAAS,OAAQ;AAAA,UAEhB,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAIJ,gBAAK,KAAK,WAAW,KAAK,QAAQ,cAAe;AAEhD,sBAAQ,CAAE,MAAO,CAAE,IAAI,KAAK,MAAO,CAAE,IAAI,KAAK,MAAO,CAAE,IAAI,GAAI;AAAA,YAEhE;AAEA,gBAAK,KAAK,WAAW,KAAK,QAAQ,gBAAiB;AAElD,kBAAK,MAAO,CAAE,MAAM,KAAK,MAAO,CAAE,MAAM,KAAK,MAAO,CAAE,MAAM,GAAI;AAI/D,uBAAO;AAAA,cAER;AAAA,YAED;AAEA;AAAA,UAED;AAEC;AAAA,QAEF;AAEA,YAAK,MAAO;AAEX,iBAAQ,KAAM,IAAI;AAAA,QAEnB;AAAA,MAED;AAAA,IAED;AAEA,WAAO;AAAA,EAER;AAAA,EAEA,UAAU;AAET,eAAY,MAAM,KAAK,eAAgB;AAEtC,WAAK,OAAQ,EAAG;AAAA,IAEjB;AAAA,EAED;AAAA,EAEA,SAAU,cAAe;AAExB,WAAO,KAAK,WAAY,YAAa;AAAA,EAEtC;AAAA,EAEA,aAAa;AAEZ,QAAI,QAAQ;AAEZ,eAAY,MAAM,KAAK,eAAgB;AAEtC,WAAK,eAAgB,KAAM,IAAI,KAAK,OAAQ,EAAG;AAC/C,WAAK,WAAY,EAAG,IAAI;AACxB;AAAA,IAED;AAEA,WAAO,KAAK;AAAA,EAEb;AAAA,EAEA,OAAQ,cAAe;AAEtB,QAAK,KAAK,UAAW,YAAa,MAAM,QAAY;AAEnD,WAAK,gBAAiB,YAAa;AAAA,IAEpC;AAEA,WAAO,KAAK,UAAW,YAAa;AAAA,EAErC;AAAA,EAEA,gBAAiB,cAAe;AAI/B,UAAM,QAAQ;AACd,UAAM,MAAM,KAAK,cAAe,YAAa;AAC7C,UAAM,SAAS;AAAA,MAEd,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IAEZ;AAEA,aAAS,WAAY,SAAS,KAAM;AAEnC,UAAK,OAAO,QAAQ,YAAY,QAAQ;AACvC,eAAO;AAGR,UAAK,gBAAgB,KAAM,GAAI;AAAI,eAAO;AAE1C,aAAO,UAAU;AAAA,IAElB;AAEA,aAAS,cAAe,SAAS,OAAQ;AAExC,UAAK,OAAQ,OAAQ;AAAI;AAEzB,YAAM,YAAY,MAAM,iBAAkB,OAAO,MAAO;AACxD,YAAM,MAAM,MAAM,YAAa,WAAY,MAAM,SAAS,UAAU,GAAI,CAAE;AAE1E,UAAI,OAAO,KAAM,UAAU,KAAM;AACjC,UAAI,OAAO,KAAM,UAAU,MAAO;AAElC,UAAI,QAAQ,MAAM;AAClB,UAAI,QAAQ,MAAM;AAElB,UAAK,YAAY,SAAS,YAAY,eAAgB;AAErD,YAAI,aAAa;AAAA,MAElB;AAEA,aAAQ,OAAQ,IAAI;AAAA,IAErB;AAEA,eAAY,QAAQ,KAAM;AAEzB,YAAM,QAAQ,IAAK,IAAK;AACxB,UAAI;AAEJ,UAAK,UAAU;AAAK;AAEpB,cAAS,KAAK,YAAY,GAAI;AAAA,QAI7B,KAAK;AAIJ,iBAAO,QAAQ,gBAAgB,oBAAqB,IAAI,MAAM,EAAE,UAAW,KAAM,GAAG,cAAe;AAEnG;AAAA,QAED,KAAK;AAGJ,iBAAO,WAAW,gBAAgB,oBAAqB,IAAI,MAAM,EAAE,UAAW,KAAM,GAAG,cAAe;AAEtG;AAAA,QAED,KAAK;AAGJ,iBAAO,WAAW,gBAAgB,oBAAqB,IAAI,MAAM,EAAE,UAAW,KAAM,GAAG,cAAe;AAEtG;AAAA,QAED,KAAK;AAIJ,wBAAe,OAAO,KAAM;AAE5B;AAAA,QAED,KAAK;AAIJ,wBAAe,eAAe,KAAM;AAEpC;AAAA,QAED,KAAK;AAIJ,wBAAe,eAAe,KAAM;AAEpC;AAAA,QAED,KAAK;AAEJ,wBAAe,aAAa,KAAM;AAElC;AAAA,QAED,KAAK;AAAA,QACL,KAAK;AAIJ,wBAAe,WAAW,KAAM;AAEhC;AAAA,QAED,KAAK;AAIJ,wBAAe,YAAY,KAAM;AACjC,iBAAO,cAAc;AAErB;AAAA,QAED,KAAK;AAKJ,iBAAO,YAAY,WAAY,KAAM;AAErC;AAAA,QAED,KAAK;AACJ,cAAI,WAAY,KAAM;AAEtB,cAAK,IAAI,GAAI;AAEZ,mBAAO,UAAU;AACjB,mBAAO,cAAc;AAAA,UAEtB;AAEA;AAAA,QAED,KAAK;AACJ,cAAI,WAAY,KAAM;AAEtB,cAAK,KAAK,WAAW,KAAK,QAAQ;AAAmB,gBAAI,IAAI;AAE7D,cAAK,IAAI,GAAI;AAEZ,mBAAO,UAAU,IAAI;AACrB,mBAAO,cAAc;AAAA,UAEtB;AAEA;AAAA,QAED;AACC;AAAA,MAEF;AAAA,IAED;AAEA,SAAK,UAAW,YAAa,IAAI,IAAI,kBAAmB,MAAO;AAC/D,WAAO,KAAK,UAAW,YAAa;AAAA,EAErC;AAAA,EAEA,iBAAkB,OAAO,WAAY;AAEpC,UAAM,YAAY;AAAA,MAEjB,OAAO,IAAI,QAAS,GAAG,CAAE;AAAA,MACzB,QAAQ,IAAI,QAAS,GAAG,CAAE;AAAA,IAE1B;AAED,UAAM,QAAQ,MAAM,MAAO,KAAM;AACjC,QAAI;AAEJ,UAAM,MAAM,QAAS,KAAM;AAE3B,QAAK,OAAO,GAAI;AAEf,gBAAU,YAAY,WAAY,MAAO,MAAM,CAAE,CAAE;AACnD,YAAM,OAAQ,KAAK,CAAE;AAAA,IAEtB;AAEA,UAAM,MAAM,QAAS,IAAK;AAE1B,QAAK,OAAO,GAAI;AAEf,gBAAU,MAAM,IAAK,WAAY,MAAO,MAAM,CAAE,CAAE,GAAG,WAAY,MAAO,MAAM,CAAE,CAAE,CAAE;AACpF,YAAM,OAAQ,KAAK,CAAE;AAAA,IAEtB;AAEA,UAAM,MAAM,QAAS,IAAK;AAE1B,QAAK,OAAO,GAAI;AAEf,gBAAU,OAAO,IAAK,WAAY,MAAO,MAAM,CAAE,CAAE,GAAG,WAAY,MAAO,MAAM,CAAE,CAAE,CAAE;AACrF,YAAM,OAAQ,KAAK,CAAE;AAAA,IAEtB;AAEA,cAAU,MAAM,MAAM,KAAM,GAAI,EAAE,KAAK;AACvC,WAAO;AAAA,EAER;AAAA,EAEA,YAAa,KAAK,SAAS,QAAQ,YAAY,SAAU;AAExD,UAAM,UAAY,KAAK,YAAY,SAAc,KAAK,UAAU;AAChE,QAAI,SAAS,QAAQ,WAAY,GAAI;AAErC,QAAK,WAAW,MAAO;AAEtB,eAAS,IAAI,cAAe,OAAQ;AAAA,IAErC;AAEA,QAAK,OAAO;AAAiB,aAAO,eAAgB,KAAK,WAAY;AAErE,UAAM,UAAU,OAAO,KAAM,KAAK,QAAQ,YAAY,OAAQ;AAE9D,QAAK,YAAY;AAAY,cAAQ,UAAU;AAE/C,WAAO;AAAA,EAER;AAED;;;ACjiBA,IAAM,kBAAkB;AAExB,IAAM,4BAA4B;AAElC,IAAM,wBAAwB;AAE9B,IAAM,mBAAmB;AACzB,IAAM,sCAAsC;AAE5C,IAAM,MAAM,IAAI,QAAQ;AACxB,IAAM,MAAM,IAAI,QAAQ;AACxB,IAAM,MAAM,IAAI,QAAQ;AAExB,IAAM,MAAM,IAAI,QAAQ;AACxB,IAAM,MAAM,IAAI,QAAQ;AAExB,IAAM,SAAS,IAAI,MAAM;AAEzB,SAAS,cAAc;AAEtB,QAAM,QAAQ;AAAA,IACb,SAAS,CAAC;AAAA,IACV,QAAQ,CAAC;AAAA,IAET,UAAU,CAAC;AAAA,IACX,SAAS,CAAC;AAAA,IACV,QAAQ,CAAC;AAAA,IACT,KAAK,CAAC;AAAA,IAEN,WAAW,CAAC;AAAA,IACZ,mBAAmB,CAAC;AAAA,IAEpB,aAAa,SAAW,MAAM,iBAAkB;AAI/C,UAAK,KAAK,UAAU,KAAK,OAAO,oBAAoB,OAAQ;AAE3D,aAAK,OAAO,OAAO;AACnB,aAAK,OAAO,kBAAoB,oBAAoB;AACpD;AAAA,MAED;AAEA,YAAM,mBAAqB,KAAK,UAAU,OAAO,KAAK,OAAO,oBAAoB,aAAa,KAAK,OAAO,gBAAgB,IAAI;AAE9H,UAAK,KAAK,UAAU,OAAO,KAAK,OAAO,cAAc,YAAa;AAEjE,aAAK,OAAO,UAAW,IAAK;AAAA,MAE7B;AAEA,WAAK,SAAS;AAAA,QACb,MAAM,QAAQ;AAAA,QACd,iBAAmB,oBAAoB;AAAA,QAEvC,UAAU;AAAA,UACT,UAAU,CAAC;AAAA,UACX,SAAS,CAAC;AAAA,UACV,QAAQ,CAAC;AAAA,UACT,KAAK,CAAC;AAAA,UACN,cAAc;AAAA,QACf;AAAA,QACA,WAAW,CAAC;AAAA,QACZ,QAAQ;AAAA,QAER,eAAe,SAAWA,OAAM,WAAY;AAE3C,gBAAM,WAAW,KAAK,UAAW,KAAM;AAIvC,cAAK,aAAc,SAAS,aAAa,SAAS,cAAc,IAAM;AAErE,iBAAK,UAAU,OAAQ,SAAS,OAAO,CAAE;AAAA,UAE1C;AAEA,gBAAM,WAAW;AAAA,YAChB,OAAO,KAAK,UAAU;AAAA,YACtB,MAAMA,SAAQ;AAAA,YACd,QAAU,MAAM,QAAS,SAAU,KAAK,UAAU,SAAS,IAAI,UAAW,UAAU,SAAS,CAAE,IAAI;AAAA,YACnG,QAAU,aAAa,SAAY,SAAS,SAAS,KAAK;AAAA,YAC1D,YAAc,aAAa,SAAY,SAAS,WAAW;AAAA,YAC3D,UAAU;AAAA,YACV,YAAY;AAAA,YACZ,WAAW;AAAA,YAEX,OAAO,SAAW,OAAQ;AAEzB,oBAAM,SAAS;AAAA,gBACd,OAAS,OAAO,UAAU,WAAW,QAAQ,KAAK;AAAA,gBAClD,MAAM,KAAK;AAAA,gBACX,QAAQ,KAAK;AAAA,gBACb,QAAQ,KAAK;AAAA,gBACb,YAAY;AAAA,gBACZ,UAAU;AAAA,gBACV,YAAY;AAAA,gBACZ,WAAW;AAAA,cACZ;AACA,qBAAO,QAAQ,KAAK,MAAM,KAAM,MAAO;AACvC,qBAAO;AAAA,YAER;AAAA,UACD;AAEA,eAAK,UAAU,KAAM,QAAS;AAE9B,iBAAO;AAAA,QAER;AAAA,QAEA,iBAAiB,WAAY;AAE5B,cAAK,KAAK,UAAU,SAAS,GAAI;AAEhC,mBAAO,KAAK,UAAW,KAAK,UAAU,SAAS,CAAE;AAAA,UAElD;AAEA,iBAAO;AAAA,QAER;AAAA,QAEA,WAAW,SAAW,KAAM;AAE3B,gBAAM,oBAAoB,KAAK,gBAAgB;AAC/C,cAAK,qBAAqB,kBAAkB,aAAa,IAAM;AAE9D,8BAAkB,WAAW,KAAK,SAAS,SAAS,SAAS;AAC7D,8BAAkB,aAAa,kBAAkB,WAAW,kBAAkB;AAC9E,8BAAkB,YAAY;AAAA,UAE/B;AAGA,cAAK,OAAO,KAAK,UAAU,SAAS,GAAI;AAEvC,qBAAU,KAAK,KAAK,UAAU,SAAS,GAAG,MAAM,GAAG,MAAQ;AAE1D,kBAAK,KAAK,UAAW,EAAG,EAAE,cAAc,GAAI;AAE3C,qBAAK,UAAU,OAAQ,IAAI,CAAE;AAAA,cAE9B;AAAA,YAED;AAAA,UAED;AAGA,cAAK,OAAO,KAAK,UAAU,WAAW,GAAI;AAEzC,iBAAK,UAAU,KAAM;AAAA,cACpB,MAAM;AAAA,cACN,QAAQ,KAAK;AAAA,YACd,CAAE;AAAA,UAEH;AAEA,iBAAO;AAAA,QAER;AAAA,MACD;AAQA,UAAK,oBAAoB,iBAAiB,QAAQ,OAAO,iBAAiB,UAAU,YAAa;AAEhG,cAAM,WAAW,iBAAiB,MAAO,CAAE;AAC3C,iBAAS,YAAY;AACrB,aAAK,OAAO,UAAU,KAAM,QAAS;AAAA,MAEtC;AAEA,WAAK,QAAQ,KAAM,KAAK,MAAO;AAAA,IAEhC;AAAA,IAEA,UAAU,WAAY;AAErB,UAAK,KAAK,UAAU,OAAO,KAAK,OAAO,cAAc,YAAa;AAEjE,aAAK,OAAO,UAAW,IAAK;AAAA,MAE7B;AAAA,IAED;AAAA,IAEA,kBAAkB,SAAW,OAAO,KAAM;AAEzC,YAAM,QAAQ,SAAU,OAAO,EAAG;AAClC,cAAS,SAAS,IAAI,QAAQ,IAAI,QAAQ,MAAM,KAAM;AAAA,IAEvD;AAAA,IAEA,kBAAkB,SAAW,OAAO,KAAM;AAEzC,YAAM,QAAQ,SAAU,OAAO,EAAG;AAClC,cAAS,SAAS,IAAI,QAAQ,IAAI,QAAQ,MAAM,KAAM;AAAA,IAEvD;AAAA,IAEA,cAAc,SAAW,OAAO,KAAM;AAErC,YAAM,QAAQ,SAAU,OAAO,EAAG;AAClC,cAAS,SAAS,IAAI,QAAQ,IAAI,QAAQ,MAAM,KAAM;AAAA,IAEvD;AAAA,IAEA,WAAW,SAAW,GAAG,GAAG,GAAI;AAE/B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACnD,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACnD,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AAAA,IAEpD;AAAA,IAEA,gBAAgB,SAAW,GAAI;AAE9B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AAAA,IAEpD;AAAA,IAEA,eAAe,SAAW,GAAI;AAE7B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AAAA,IAEpD;AAAA,IAEA,WAAW,SAAW,GAAG,GAAG,GAAI;AAE/B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACnD,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACnD,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AAAA,IAEpD;AAAA,IAEA,eAAe,SAAW,GAAG,GAAG,GAAI;AAEnC,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,UAAW,KAAK,CAAE;AACtB,UAAI,UAAW,KAAK,CAAE;AACtB,UAAI,UAAW,KAAK,CAAE;AAEtB,UAAI,WAAY,KAAK,GAAI;AACzB,UAAI,WAAY,KAAK,GAAI;AACzB,UAAI,MAAO,GAAI;AAEf,UAAI,UAAU;AAEd,UAAI,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAC9B,UAAI,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAC9B,UAAI,KAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAAA,IAE/B;AAAA,IAEA,UAAU,SAAW,GAAG,GAAG,GAAI;AAE9B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAK,IAAK,CAAE,MAAM;AAAY,YAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACjF,UAAK,IAAK,CAAE,MAAM;AAAY,YAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACjF,UAAK,IAAK,CAAE,MAAM;AAAY,YAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AAAA,IAElF;AAAA,IAEA,OAAO,SAAW,GAAG,GAAG,GAAI;AAE3B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACrC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AACrC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AAAA,IAEtC;AAAA,IAEA,cAAc,WAAY;AAEzB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,KAAM,GAAG,CAAE;AACf,UAAI,KAAM,GAAG,CAAE;AACf,UAAI,KAAM,GAAG,CAAE;AAAA,IAEhB;AAAA,IAEA,WAAW,SAAW,GAAI;AAEzB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK,OAAO,SAAS;AAEjC,UAAI,KAAM,IAAK,IAAI,CAAE,GAAG,IAAK,IAAI,CAAE,CAAE;AAAA,IAEtC;AAAA,IAEA,SAAS,SAAW,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAK;AAErD,YAAM,OAAO,KAAK,SAAS;AAE3B,UAAI,KAAK,KAAK,iBAAkB,GAAG,IAAK;AACxC,UAAI,KAAK,KAAK,iBAAkB,GAAG,IAAK;AACxC,UAAI,KAAK,KAAK,iBAAkB,GAAG,IAAK;AAExC,WAAK,UAAW,IAAI,IAAI,EAAG;AAC3B,WAAK,SAAU,IAAI,IAAI,EAAG;AAI1B,UAAK,OAAO,UAAa,OAAO,IAAK;AAEpC,cAAM,OAAO,KAAK,QAAQ;AAE1B,aAAK,KAAK,iBAAkB,IAAI,IAAK;AACrC,aAAK,KAAK,iBAAkB,IAAI,IAAK;AACrC,aAAK,KAAK,iBAAkB,IAAI,IAAK;AAErC,aAAK,UAAW,IAAI,IAAI,EAAG;AAAA,MAE5B,OAAO;AAEN,aAAK,cAAe,IAAI,IAAI,EAAG;AAAA,MAEhC;AAIA,UAAK,OAAO,UAAa,OAAO,IAAK;AAEpC,cAAM,QAAQ,KAAK,IAAI;AAEvB,aAAK,KAAK,aAAc,IAAI,KAAM;AAClC,aAAK,KAAK,aAAc,IAAI,KAAM;AAClC,aAAK,KAAK,aAAc,IAAI,KAAM;AAElC,aAAK,MAAO,IAAI,IAAI,EAAG;AAEvB,aAAK,OAAO,SAAS,eAAe;AAAA,MAErC,OAAO;AAIN,aAAK,aAAa;AAAA,MAEnB;AAAA,IAED;AAAA,IAEA,kBAAkB,SAAW,UAAW;AAEvC,WAAK,OAAO,SAAS,OAAO;AAE5B,YAAM,OAAO,KAAK,SAAS;AAE3B,eAAU,KAAK,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG,MAAQ;AAEtD,cAAM,QAAQ,KAAK,iBAAkB,SAAU,EAAG,GAAG,IAAK;AAE1D,aAAK,eAAgB,KAAM;AAC3B,aAAK,SAAU,KAAM;AAAA,MAEtB;AAAA,IAED;AAAA,IAEA,iBAAiB,SAAW,UAAU,KAAM;AAE3C,WAAK,OAAO,SAAS,OAAO;AAE5B,YAAM,OAAO,KAAK,SAAS;AAC3B,YAAM,QAAQ,KAAK,IAAI;AAEvB,eAAU,KAAK,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG,MAAQ;AAEtD,aAAK,cAAe,KAAK,iBAAkB,SAAU,EAAG,GAAG,IAAK,CAAE;AAAA,MAEnE;AAEA,eAAU,MAAM,GAAG,IAAI,IAAI,QAAQ,MAAM,GAAG,OAAS;AAEpD,aAAK,UAAW,KAAK,aAAc,IAAK,GAAI,GAAG,KAAM,CAAE;AAAA,MAExD;AAAA,IAED;AAAA,EAED;AAEA,QAAM,YAAa,IAAI,KAAM;AAE7B,SAAO;AAER;AAIA,IAAM,YAAN,cAAwB,OAAO;AAAA,EAE9B,YAAa,SAAU;AAEtB,UAAO,OAAQ;AAEf,SAAK,YAAY;AACjB,SAAK,kBAAkB,IAAI,UAAW,OAAQ;AAAA,EAE/C;AAAA,EAEA,KAAM,KAAK,QAAQ,YAAY,SAAU;AAExC,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAY,KAAK,OAAQ;AAC5C,WAAO,QAAS,KAAK,IAAK;AAC1B,WAAO,iBAAkB,KAAK,aAAc;AAC5C,WAAO,mBAAoB,KAAK,eAAgB;AAChD,WAAO,KAAM,KAAK,eAAiB,MAAO;AAEzC,UAAI;AAEH,cAAM,QAAQ,MAAM,MAAO,MAAM,IAAK;AAGtC,iBAAU,IAAI,GAAG,IAAI,MAAM,kBAAkB,QAAQ,IAAI,GAAG,KAAO;AAElE,gBAAM,UAAU,MAAM,kBAAmB,CAAE;AAE3C,gBAAM,SAAS,IAAI,WAAW,OAAO,IACjC,MAAM,MAAM,UACb,IAAI,IAAI,SAAS,GAAG;AAEvB,kBAAQ,MAAO,uBAAuB,MAAO;AAE7C,gBAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,kBAAM,gBAAgB,KAAM,OAAO,SAAS,GAAG,aAAW;AAEzD,oBAAM,aAAc,OAAQ;AAC5B,sBAAQ;AAAA,YAET,GAAG,MAAM,MAAO;AAAA,UACjB,CAAC;AAAA,QAEF;AAEA,eAAQ,MAAM,cAAe,KAAM,CAAE;AAAA,MAEtC,SAAU,GAAR;AAED,YAAK,SAAU;AAEd,kBAAS,CAAE;AAAA,QAEZ,OAAO;AAEN,kBAAQ,MAAO,CAAE;AAAA,QAElB;AAEA,cAAM,QAAQ,UAAW,GAAI;AAAA,MAE9B;AAAA,IAED,GAAG,YAAY,OAAQ;AAAA,EAExB;AAAA,EAEA,aAAe,QAAS;AAEvB,SAAK,kBAAkB;AAEvB,WAAO;AAAA,EAER;AAAA,EAEA,aAAc,WAAY;AAEzB,SAAK,YAAY;AAEjB,WAAO;AAAA,EAER;AAAA,EAEA,MAAO,MAAM,YAAY,OAAQ;AAEhC,UAAM,QAAQ,IAAI,YAAY;AAE9B,QAAK,KAAK,QAAS,MAAO,MAAM,IAAM;AAGrC,aAAO,KAAK,QAAS,SAAS,IAAK;AAAA,IAEpC;AAEA,QAAK,KAAK,QAAS,MAAO,MAAM,IAAM;AAGrC,aAAO,KAAK,QAAS,SAAS,EAAG;AAAA,IAElC;AAEA,UAAM,QAAQ,KAAK,MAAO,IAAK;AAC/B,QAAI,SAAS,CAAC;AAEd,aAAU,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,KAAO;AAEhD,YAAM,OAAO,MAAO,CAAE,EAAE,UAAU;AAElC,UAAK,KAAK,WAAW;AAAI;AAEzB,YAAM,gBAAgB,KAAK,OAAQ,CAAE;AAGrC,UAAK,kBAAkB;AAAM;AAE7B,UAAK,kBAAkB,KAAM;AAE5B,cAAM,OAAO,KAAK,MAAO,mCAAoC;AAE7D,gBAAS,KAAM,CAAE,GAAI;AAAA,UAEpB,KAAK;AACJ,kBAAM,SAAS;AAAA,cACd,WAAY,KAAM,CAAE,CAAE;AAAA,cACtB,WAAY,KAAM,CAAE,CAAE;AAAA,cACtB,WAAY,KAAM,CAAE,CAAE;AAAA,YACvB;AACA,gBAAK,KAAK,UAAU,GAAI;AAEvB,qBAAO;AAAA,gBACN,WAAY,KAAM,CAAE,CAAE;AAAA,gBACtB,WAAY,KAAM,CAAE,CAAE;AAAA,gBACtB,WAAY,KAAM,CAAE,CAAE;AAAA,gBACtB;AAAA,cACD;AAEA,oBAAM,OAAO,KAAM,OAAO,GAAG,OAAO,GAAG,OAAO,CAAE;AAAA,YAEjD,OAAO;AAIN,oBAAM,OAAO,KAAM,QAAW,QAAW,MAAU;AAAA,YAEpD;AAEA;AAAA,UACD,KAAK;AACJ,kBAAM,QAAQ;AAAA,cACb,WAAY,KAAM,CAAE,CAAE;AAAA,cACtB,WAAY,KAAM,CAAE,CAAE;AAAA,cACtB,WAAY,KAAM,CAAE,CAAE;AAAA,YACvB;AACA;AAAA,UACD,KAAK;AACJ,kBAAM,IAAI;AAAA,cACT,WAAY,KAAM,CAAE,CAAE;AAAA,cACtB,WAAY,KAAM,CAAE,CAAE;AAAA,YACvB;AACA;AAAA,QAEF;AAAA,MAED,WAAY,kBAAkB,KAAM;AAEnC,cAAM,WAAW,KAAK,MAAO,CAAE,EAAE,KAAK;AACtC,cAAM,aAAa,SAAS,MAAO,mCAAoC;AACvE,cAAM,eAAe,CAAC;AAItB,iBAAU,IAAI,GAAG,KAAK,WAAW,QAAQ,IAAI,IAAI,KAAO;AAEvD,gBAAM,SAAS,WAAY,CAAE;AAE7B,cAAK,OAAO,SAAS,GAAI;AAExB,kBAAM,cAAc,OAAO,MAAO,GAAI;AACtC,yBAAa,KAAM,WAAY;AAAA,UAEhC;AAAA,QAED;AAIA,cAAM,KAAK,aAAc,CAAE;AAE3B,iBAAU,IAAI,GAAG,KAAK,aAAa,SAAS,GAAG,IAAI,IAAI,KAAO;AAE7D,gBAAM,KAAK,aAAc,CAAE;AAC3B,gBAAM,KAAK,aAAc,IAAI,CAAE;AAE/B,gBAAM;AAAA,YACL,GAAI,CAAE;AAAA,YAAG,GAAI,CAAE;AAAA,YAAG,GAAI,CAAE;AAAA,YACxB,GAAI,CAAE;AAAA,YAAG,GAAI,CAAE;AAAA,YAAG,GAAI,CAAE;AAAA,YACxB,GAAI,CAAE;AAAA,YAAG,GAAI,CAAE;AAAA,YAAG,GAAI,CAAE;AAAA,UACzB;AAAA,QAED;AAAA,MAED,WAAY,kBAAkB,KAAM;AAEnC,cAAM,YAAY,KAAK,UAAW,CAAE,EAAE,KAAK,EAAE,MAAO,GAAI;AACxD,YAAI,eAAe,CAAC;AACpB,cAAM,UAAU,CAAC;AAEjB,YAAK,KAAK,QAAS,GAAI,MAAM,IAAM;AAElC,yBAAe;AAAA,QAEhB,OAAO;AAEN,mBAAU,KAAK,GAAG,OAAO,UAAU,QAAQ,KAAK,MAAM,MAAQ;AAE7D,kBAAM,QAAQ,UAAW,EAAG,EAAE,MAAO,GAAI;AAEzC,gBAAK,MAAO,CAAE,MAAM;AAAK,2BAAa,KAAM,MAAO,CAAE,CAAE;AACvD,gBAAK,MAAO,CAAE,MAAM;AAAK,sBAAQ,KAAM,MAAO,CAAE,CAAE;AAAA,UAEnD;AAAA,QAED;AAEA,cAAM,gBAAiB,cAAc,OAAQ;AAAA,MAE9C,WAAY,kBAAkB,KAAM;AAEnC,cAAM,WAAW,KAAK,MAAO,CAAE,EAAE,KAAK;AACtC,cAAM,YAAY,SAAS,MAAO,GAAI;AAEtC,cAAM,iBAAkB,SAAU;AAAA,MAEnC,YAAc,SAAS,gBAAgB,KAAM,IAAK,OAAQ,MAAO;AAQhE,cAAM,QAAS,MAAM,OAAQ,CAAE,EAAE,MAAO,CAAE,EAAE,KAAK,GAAI,MAAO,CAAE;AAE9D,cAAM,YAAa,IAAK;AAAA,MAEzB,WAAY,sBAAsB,KAAM,IAAK,GAAI;AAIhD,cAAM,OAAO,cAAe,KAAK,UAAW,CAAE,EAAE,KAAK,GAAG,MAAM,iBAAkB;AAAA,MAEjF,WAAY,0BAA0B,KAAM,IAAK,GAAI;AAIpD,cAAM,kBAAkB,KAAM,KAAK,UAAW,CAAE,EAAE,KAAK,CAAE;AAAA,MAE1D,WAAY,iBAAiB,KAAM,IAAK,GAAI;AAK3C,gBAAQ,KAAM,sGAAuG;AAAA,MAEtH,WAAY,kBAAkB,KAAM;AAEnC,iBAAS,KAAK,MAAO,GAAI;AAoBzB,YAAK,OAAO,SAAS,GAAI;AAExB,gBAAM,QAAQ,OAAQ,CAAE,EAAE,KAAK,EAAE,YAAY;AAC7C,gBAAM,OAAO,SAAW,UAAU,OAAO,UAAU;AAAA,QAEpD,OAAO;AAGN,gBAAM,OAAO,SAAS;AAAA,QAEvB;AAEA,cAAM,WAAW,MAAM,OAAO,gBAAgB;AAC9C,YAAK;AAAW,mBAAS,SAAS,MAAM,OAAO;AAAA,MAEhD,OAAO;AAGN,YAAK,SAAS;AAAO;AAErB,gBAAQ,KAAM,wCAAwC,OAAO,GAAI;AAAA,MAElE;AAAA,IAED;AAEA,UAAM,SAAS;AAIf,QAAK;AAAY,aAAO;AAExB,WAAO,KAAK,cAAc,KAAK;AAAA,EAChC;AAAA,EAGA,cAAgB,OAAQ;AAEvB,UAAM,YAAY,IAAI,MAAM;AAC5B,cAAU,oBAAoB,CAAC,EAAE,OAAQ,MAAM,iBAAkB;AAEjE,UAAM,gBAAgB,EAAI,MAAM,QAAQ,WAAW,KAAK,MAAM,QAAS,CAAE,EAAE,SAAS,SAAS,WAAW;AAExG,QAAK,kBAAkB,MAAO;AAE7B,eAAU,IAAI,GAAG,IAAI,MAAM,QAAQ,QAAQ,IAAI,GAAG,KAAO;AAExD,cAAM,SAAS,MAAM,QAAS,CAAE;AAChC,cAAM,WAAW,OAAO;AACxB,cAAM,YAAY,OAAO;AACzB,cAAM,SAAW,SAAS,SAAS;AACnC,cAAM,WAAa,SAAS,SAAS;AACrC,YAAI,kBAAkB;AAGtB,YAAK,SAAS,SAAS,WAAW;AAAI;AAEtC,cAAM,iBAAiB,IAAI,eAAe;AAE1C,uBAAe,aAAc,YAAY,IAAI,uBAAwB,SAAS,UAAU,CAAE,CAAE;AAE5F,YAAK,SAAS,QAAQ,SAAS,GAAI;AAElC,yBAAe,aAAc,UAAU,IAAI,uBAAwB,SAAS,SAAS,CAAE,CAAE;AAAA,QAE1F;AAEA,YAAK,SAAS,OAAO,SAAS,GAAI;AAEjC,4BAAkB;AAClB,yBAAe,aAAc,SAAS,IAAI,uBAAwB,SAAS,QAAQ,CAAE,CAAE;AAAA,QAExF;AAEA,YAAK,SAAS,iBAAiB,MAAO;AAErC,yBAAe,aAAc,MAAM,IAAI,uBAAwB,SAAS,KAAK,CAAE,CAAE;AAAA,QAElF;AAIA,cAAM,mBAAmB,CAAC;AAE1B,iBAAU,KAAK,GAAG,QAAQ,UAAU,QAAQ,KAAK,OAAO,MAAQ;AAE/D,gBAAM,iBAAiB,UAAW,EAAG;AACrC,gBAAM,eAAe,eAAe,OAAO,MAAM,eAAe,SAAS,MAAM;AAC/E,cAAI,WAAW,MAAM,UAAW,YAAa;AAE7C,cAAK,KAAK,cAAc,MAAO;AAE9B,uBAAW,KAAK,UAAU,OAAQ,eAAe,IAAK;AAGtD,gBAAK,UAAU,YAAY,EAAI,oBAAoB,oBAAsB;AAExE,oBAAM,eAAe,IAAI,kBAAkB;AAC3C,uBAAS,UAAU,KAAK,KAAM,cAAc,QAAS;AACrD,2BAAa,MAAM,KAAM,SAAS,KAAM;AACxC,yBAAW;AAAA,YAEZ,WAAY,YAAY,YAAY,EAAI,oBAAoB,iBAAmB;AAE9E,oBAAM,iBAAiB,IAAI,eAAgB,EAAE,MAAM,IAAI,iBAAiB,MAAM,CAAE;AAChF,uBAAS,UAAU,KAAK,KAAM,gBAAgB,QAAS;AACvD,6BAAe,MAAM,KAAM,SAAS,KAAM;AAC1C,6BAAe,MAAM,SAAS;AAC9B,yBAAW;AAAA,YAEZ;AAAA,UAED;AAEA,cAAK,aAAa,QAAY;AAE7B,gBAAK,QAAS;AAEb,yBAAW,IAAI,kBAAkB;AAAA,YAElC,WAAY,UAAW;AAEtB,yBAAW,IAAI,eAAgB,EAAE,MAAM,GAAG,iBAAiB,MAAM,CAAE;AAAA,YAEpE,OAAO;AAEN,yBAAW,IAAI,kBAAkB;AAAA,YAElC;AAEA,qBAAS,OAAO,eAAe;AAC/B,qBAAS,cAAc,eAAe,SAAS,QAAQ;AACvD,qBAAS,eAAe;AAExB,kBAAM,UAAW,YAAa,IAAI;AAAA,UAEnC;AAEA,2BAAiB,KAAM,QAAS;AAAA,QAEjC;AAIA,YAAI;AAEJ,YAAK,iBAAiB,SAAS,GAAI;AAElC,mBAAU,KAAK,GAAG,QAAQ,UAAU,QAAQ,KAAK,OAAO,MAAQ;AAE/D,kBAAM,iBAAiB,UAAW,EAAG;AACrC,2BAAe,SAAU,eAAe,YAAY,eAAe,YAAY,EAAG;AAAA,UAEnF;AAEA,cAAK,QAAS;AAEb,mBAAO,IAAI,aAAc,gBAAgB,gBAAiB;AAAA,UAE3D,WAAY,UAAW;AAEtB,mBAAO,IAAI,OAAQ,gBAAgB,gBAAiB;AAAA,UAErD,OAAO;AAEN,mBAAO,IAAI,KAAM,gBAAgB,gBAAiB;AAAA,UAEnD;AAAA,QAED,OAAO;AAEN,cAAK,QAAS;AAEb,mBAAO,IAAI,aAAc,gBAAgB,iBAAkB,CAAE,CAAE;AAAA,UAEhE,WAAY,UAAW;AAEtB,mBAAO,IAAI,OAAQ,gBAAgB,iBAAkB,CAAE,CAAE;AAAA,UAE1D,OAAO;AAEN,mBAAO,IAAI,KAAM,gBAAgB,iBAAkB,CAAE,CAAE;AAAA,UAExD;AAAA,QAED;AAEA,aAAK,OAAO,OAAO;AAEnB,kBAAU,IAAK,IAAK;AAAA,MAErB;AAAA,IAED,OAAO;AAIN,UAAK,MAAM,SAAS,SAAS,GAAI;AAEhC,cAAM,WAAW,IAAI,eAAgB,EAAE,MAAM,GAAG,iBAAiB,MAAM,CAAE;AAEzE,cAAM,iBAAiB,IAAI,eAAe;AAE1C,uBAAe,aAAc,YAAY,IAAI,uBAAwB,MAAM,UAAU,CAAE,CAAE;AAEzF,YAAK,MAAM,OAAO,SAAS,KAAK,MAAM,OAAQ,CAAE,MAAM,QAAY;AAEjE,yBAAe,aAAc,SAAS,IAAI,uBAAwB,MAAM,QAAQ,CAAE,CAAE;AACpF,mBAAS,eAAe;AAAA,QAEzB;AAEA,cAAM,SAAS,IAAI,OAAQ,gBAAgB,QAAS;AACpD,kBAAU,IAAK,MAAO;AAAA,MAEvB;AAAA,IAED;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": ["name"]
}
