{
  "version": 3,
  "sources": ["../../@needle-tools/engine/node_modules/three/src/constants.js", "../../@needle-tools/engine/node_modules/three/src/core/EventDispatcher.js", "../../@needle-tools/engine/node_modules/three/src/math/MathUtils.js", "../../@needle-tools/engine/node_modules/three/src/math/Vector2.js", "../../@needle-tools/engine/node_modules/three/src/math/Matrix3.js", "../../@needle-tools/engine/node_modules/three/src/utils.js", "../../@needle-tools/engine/node_modules/three/src/math/ColorManagement.js", "../../@needle-tools/engine/node_modules/three/src/extras/ImageUtils.js", "../../@needle-tools/engine/node_modules/three/src/textures/Source.js", "../../@needle-tools/engine/node_modules/three/src/textures/Texture.js", "../../@needle-tools/engine/node_modules/three/src/math/Vector4.js", "../../@needle-tools/engine/node_modules/three/src/core/RenderTarget.js", "../../@needle-tools/engine/node_modules/three/src/renderers/WebGLRenderTarget.js", "../../@needle-tools/engine/node_modules/three/src/textures/DataArrayTexture.js", "../../@needle-tools/engine/node_modules/three/src/renderers/WebGLArrayRenderTarget.js", "../../@needle-tools/engine/node_modules/three/src/textures/Data3DTexture.js", "../../@needle-tools/engine/node_modules/three/src/renderers/WebGL3DRenderTarget.js", "../../@needle-tools/engine/node_modules/three/src/math/Quaternion.js", "../../@needle-tools/engine/node_modules/three/src/math/Vector3.js", "../../@needle-tools/engine/node_modules/three/src/math/Box3.js", "../../@needle-tools/engine/node_modules/three/src/math/Sphere.js", "../../@needle-tools/engine/node_modules/three/src/math/Ray.js", "../../@needle-tools/engine/node_modules/three/src/math/Matrix4.js", "../../@needle-tools/engine/node_modules/three/src/math/Euler.js", "../../@needle-tools/engine/node_modules/three/src/core/Layers.js", "../../@needle-tools/engine/node_modules/three/src/core/Object3D.js", "../../@needle-tools/engine/node_modules/three/src/math/Triangle.js", "../../@needle-tools/engine/node_modules/three/src/math/Color.js", "../../@needle-tools/engine/node_modules/three/src/materials/Material.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshBasicMaterial.js", "../../@needle-tools/engine/node_modules/three/src/extras/DataUtils.js", "../../@needle-tools/engine/node_modules/three/src/core/BufferAttribute.js", "../../@needle-tools/engine/node_modules/three/src/core/BufferGeometry.js", "../../@needle-tools/engine/node_modules/three/src/objects/Mesh.js", "../../@needle-tools/engine/node_modules/three/src/geometries/BoxGeometry.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/UniformsUtils.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/default_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/default_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/materials/ShaderMaterial.js", "../../@needle-tools/engine/node_modules/three/src/cameras/Camera.js", "../../@needle-tools/engine/node_modules/three/src/cameras/PerspectiveCamera.js", "../../@needle-tools/engine/node_modules/three/src/cameras/CubeCamera.js", "../../@needle-tools/engine/node_modules/three/src/textures/CubeTexture.js", "../../@needle-tools/engine/node_modules/three/src/renderers/WebGLCubeRenderTarget.js", "../../@needle-tools/engine/node_modules/three/src/math/Plane.js", "../../@needle-tools/engine/node_modules/three/src/math/Frustum.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLAnimation.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLAttributes.js", "../../@needle-tools/engine/node_modules/three/src/geometries/PlaneGeometry.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/alphahash_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/alphahash_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/alphatest_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/aomap_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/batching_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/batching_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/begin_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/bsdfs.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/iridescence_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/color_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/color_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/common.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/colorspace_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/colorspace_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/envmap_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/envmap_common_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/envmap_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/fog_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/fog_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/fog_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/gradientmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_lambert_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_lambert_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_pars_begin.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/envmap_physical_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_toon_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_toon_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_fragment_begin.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_fragment_maps.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/lights_fragment_end.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/map_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/morphinstance_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/morphcolor_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/normal_fragment_begin.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/normal_fragment_maps.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/normal_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/normal_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/normal_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/clearcoat_normal_fragment_begin.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/clearcoat_normal_fragment_maps.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/clearcoat_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/iridescence_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/opaque_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/packing.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/project_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/dithering_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/dithering_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/skinning_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/transmission_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/transmission_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/uv_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/background.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/backgroundCube.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/cube.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/depth.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/distanceRGBA.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/equirect.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/linedashed.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/meshbasic.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/meshlambert.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/meshmatcap.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/meshnormal.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/meshphong.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/meshphysical.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/meshtoon.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/points.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/shadow.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/sprite.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderChunk.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/UniformsLib.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLBackground.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLBindingStates.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLBufferRenderer.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLCapabilities.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLClipping.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLCubeMaps.js", "../../@needle-tools/engine/node_modules/three/src/cameras/OrthographicCamera.js", "../../@needle-tools/engine/node_modules/three/src/extras/PMREMGenerator.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLCubeUVMaps.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLExtensions.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLGeometries.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLIndexedBufferRenderer.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLInfo.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLMorphtargets.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLObjects.js", "../../@needle-tools/engine/node_modules/three/src/textures/DepthTexture.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLUniforms.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLShader.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLProgram.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLShaderCache.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLPrograms.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLProperties.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLRenderLists.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLLights.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLRenderStates.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshDepthMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshDistanceMaterial.js", "../../@needle-tools/engine/node_modules/three/src/renderers/shaders/ShaderLib/vsm.glsl.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLShadowMap.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLState.js", "../../@needle-tools/engine/node_modules/three/src/extras/TextureUtils.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLTextures.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLUtils.js", "../../@needle-tools/engine/node_modules/three/src/cameras/ArrayCamera.js", "../../@needle-tools/engine/node_modules/three/src/objects/Group.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webxr/WebXRController.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webxr/WebXRDepthSensing.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webxr/WebXRManager.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLMaterials.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgl/WebGLUniformsGroups.js", "../../@needle-tools/engine/node_modules/three/src/renderers/WebGLRenderer.js", "../../@needle-tools/engine/node_modules/three/src/scenes/FogExp2.js", "../../@needle-tools/engine/node_modules/three/src/scenes/Fog.js", "../../@needle-tools/engine/node_modules/three/src/scenes/Scene.js", "../../@needle-tools/engine/node_modules/three/src/core/InterleavedBuffer.js", "../../@needle-tools/engine/node_modules/three/src/core/InterleavedBufferAttribute.js", "../../@needle-tools/engine/node_modules/three/src/materials/SpriteMaterial.js", "../../@needle-tools/engine/node_modules/three/src/objects/Sprite.js", "../../@needle-tools/engine/node_modules/three/src/objects/LOD.js", "../../@needle-tools/engine/node_modules/three/src/objects/SkinnedMesh.js", "../../@needle-tools/engine/node_modules/three/src/objects/Bone.js", "../../@needle-tools/engine/node_modules/three/src/textures/DataTexture.js", "../../@needle-tools/engine/node_modules/three/src/objects/Skeleton.js", "../../@needle-tools/engine/node_modules/three/src/core/InstancedBufferAttribute.js", "../../@needle-tools/engine/node_modules/three/src/objects/InstancedMesh.js", "../../@needle-tools/engine/node_modules/three/src/objects/BatchedMesh.js", "../../@needle-tools/engine/node_modules/three/src/materials/LineBasicMaterial.js", "../../@needle-tools/engine/node_modules/three/src/objects/Line.js", "../../@needle-tools/engine/node_modules/three/src/objects/LineSegments.js", "../../@needle-tools/engine/node_modules/three/src/objects/LineLoop.js", "../../@needle-tools/engine/node_modules/three/src/materials/PointsMaterial.js", "../../@needle-tools/engine/node_modules/three/src/objects/Points.js", "../../@needle-tools/engine/node_modules/three/src/textures/VideoTexture.js", "../../@needle-tools/engine/node_modules/three/src/textures/FramebufferTexture.js", "../../@needle-tools/engine/node_modules/three/src/textures/CompressedTexture.js", "../../@needle-tools/engine/node_modules/three/src/textures/CompressedArrayTexture.js", "../../@needle-tools/engine/node_modules/three/src/textures/CompressedCubeTexture.js", "../../@needle-tools/engine/node_modules/three/src/textures/CanvasTexture.js", "../../@needle-tools/engine/node_modules/three/src/extras/core/Curve.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/EllipseCurve.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/ArcCurve.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/CatmullRomCurve3.js", "../../@needle-tools/engine/node_modules/three/src/extras/core/Interpolations.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/CubicBezierCurve.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/CubicBezierCurve3.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/LineCurve.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/LineCurve3.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/QuadraticBezierCurve.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/QuadraticBezierCurve3.js", "../../@needle-tools/engine/node_modules/three/src/extras/curves/SplineCurve.js", "../../@needle-tools/engine/node_modules/three/src/extras/core/CurvePath.js", "../../@needle-tools/engine/node_modules/three/src/extras/core/Path.js", "../../@needle-tools/engine/node_modules/three/src/geometries/LatheGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/CapsuleGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/CircleGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/CylinderGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/ConeGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/PolyhedronGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/DodecahedronGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/EdgesGeometry.js", "../../@needle-tools/engine/node_modules/three/src/extras/core/Shape.js", "../../@needle-tools/engine/node_modules/three/src/extras/Earcut.js", "../../@needle-tools/engine/node_modules/three/src/extras/ShapeUtils.js", "../../@needle-tools/engine/node_modules/three/src/geometries/ExtrudeGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/IcosahedronGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/OctahedronGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/RingGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/ShapeGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/SphereGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/TetrahedronGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/TorusGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/TorusKnotGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/TubeGeometry.js", "../../@needle-tools/engine/node_modules/three/src/geometries/WireframeGeometry.js", "../../@needle-tools/engine/node_modules/three/src/materials/ShadowMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/RawShaderMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshStandardMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshPhysicalMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshPhongMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshToonMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshNormalMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshLambertMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/MeshMatcapMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/LineDashedMaterial.js", "../../@needle-tools/engine/node_modules/three/src/animation/AnimationUtils.js", "../../@needle-tools/engine/node_modules/three/src/math/Interpolant.js", "../../@needle-tools/engine/node_modules/three/src/math/interpolants/CubicInterpolant.js", "../../@needle-tools/engine/node_modules/three/src/math/interpolants/LinearInterpolant.js", "../../@needle-tools/engine/node_modules/three/src/math/interpolants/DiscreteInterpolant.js", "../../@needle-tools/engine/node_modules/three/src/animation/KeyframeTrack.js", "../../@needle-tools/engine/node_modules/three/src/animation/tracks/BooleanKeyframeTrack.js", "../../@needle-tools/engine/node_modules/three/src/animation/tracks/ColorKeyframeTrack.js", "../../@needle-tools/engine/node_modules/three/src/animation/tracks/NumberKeyframeTrack.js", "../../@needle-tools/engine/node_modules/three/src/math/interpolants/QuaternionLinearInterpolant.js", "../../@needle-tools/engine/node_modules/three/src/animation/tracks/QuaternionKeyframeTrack.js", "../../@needle-tools/engine/node_modules/three/src/animation/tracks/StringKeyframeTrack.js", "../../@needle-tools/engine/node_modules/three/src/animation/tracks/VectorKeyframeTrack.js", "../../@needle-tools/engine/node_modules/three/src/animation/AnimationClip.js", "../../@needle-tools/engine/node_modules/three/src/loaders/Cache.js", "../../@needle-tools/engine/node_modules/three/src/loaders/LoadingManager.js", "../../@needle-tools/engine/node_modules/three/src/loaders/Loader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/FileLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/AnimationLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/CompressedTextureLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/ImageLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/CubeTextureLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/DataTextureLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/TextureLoader.js", "../../@needle-tools/engine/node_modules/three/src/lights/Light.js", "../../@needle-tools/engine/node_modules/three/src/lights/HemisphereLight.js", "../../@needle-tools/engine/node_modules/three/src/lights/LightShadow.js", "../../@needle-tools/engine/node_modules/three/src/lights/SpotLightShadow.js", "../../@needle-tools/engine/node_modules/three/src/lights/SpotLight.js", "../../@needle-tools/engine/node_modules/three/src/lights/PointLightShadow.js", "../../@needle-tools/engine/node_modules/three/src/lights/PointLight.js", "../../@needle-tools/engine/node_modules/three/src/lights/DirectionalLightShadow.js", "../../@needle-tools/engine/node_modules/three/src/lights/DirectionalLight.js", "../../@needle-tools/engine/node_modules/three/src/lights/AmbientLight.js", "../../@needle-tools/engine/node_modules/three/src/lights/RectAreaLight.js", "../../@needle-tools/engine/node_modules/three/src/math/SphericalHarmonics3.js", "../../@needle-tools/engine/node_modules/three/src/lights/LightProbe.js", "../../@needle-tools/engine/node_modules/three/src/loaders/MaterialLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/LoaderUtils.js", "../../@needle-tools/engine/node_modules/three/src/core/InstancedBufferGeometry.js", "../../@needle-tools/engine/node_modules/three/src/loaders/BufferGeometryLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/ObjectLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/ImageBitmapLoader.js", "../../@needle-tools/engine/node_modules/three/src/audio/AudioContext.js", "../../@needle-tools/engine/node_modules/three/src/loaders/AudioLoader.js", "../../@needle-tools/engine/node_modules/three/src/cameras/StereoCamera.js", "../../@needle-tools/engine/node_modules/three/src/core/Clock.js", "../../@needle-tools/engine/node_modules/three/src/audio/AudioListener.js", "../../@needle-tools/engine/node_modules/three/src/audio/Audio.js", "../../@needle-tools/engine/node_modules/three/src/audio/PositionalAudio.js", "../../@needle-tools/engine/node_modules/three/src/audio/AudioAnalyser.js", "../../@needle-tools/engine/node_modules/three/src/animation/PropertyMixer.js", "../../@needle-tools/engine/node_modules/three/src/animation/PropertyBinding.js", "../../@needle-tools/engine/node_modules/three/src/animation/AnimationObjectGroup.js", "../../@needle-tools/engine/node_modules/three/src/animation/AnimationAction.js", "../../@needle-tools/engine/node_modules/three/src/animation/AnimationMixer.js", "../../@needle-tools/engine/node_modules/three/src/core/Uniform.js", "../../@needle-tools/engine/node_modules/three/src/core/UniformsGroup.js", "../../@needle-tools/engine/node_modules/three/src/core/InstancedInterleavedBuffer.js", "../../@needle-tools/engine/node_modules/three/src/core/GLBufferAttribute.js", "../../@needle-tools/engine/node_modules/three/src/core/Raycaster.js", "../../@needle-tools/engine/node_modules/three/src/math/Spherical.js", "../../@needle-tools/engine/node_modules/three/src/math/Cylindrical.js", "../../@needle-tools/engine/node_modules/three/src/math/Matrix2.js", "../../@needle-tools/engine/node_modules/three/src/math/Box2.js", "../../@needle-tools/engine/node_modules/three/src/math/Line3.js", "../../@needle-tools/engine/node_modules/three/src/helpers/SpotLightHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/SkeletonHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/PointLightHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/HemisphereLightHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/GridHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/PolarGridHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/DirectionalLightHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/CameraHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/BoxHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/Box3Helper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/PlaneHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/ArrowHelper.js", "../../@needle-tools/engine/node_modules/three/src/helpers/AxesHelper.js", "../../@needle-tools/engine/node_modules/three/src/extras/core/ShapePath.js", "../../@needle-tools/engine/node_modules/three/src/extras/Controls.js", "../../@needle-tools/engine/node_modules/three/src/Three.Legacy.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/manager/NodeMaterialObserver.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/constants.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/Node.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/ArrayElementNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/ConvertNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/TempNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/JoinNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/SplitNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/SetNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/FlipNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/InputNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/ConstNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/tsl/TSLCore.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/UniformGroupNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/UniformNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/PropertyNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/AssignNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/code/FunctionCallNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/math/OperatorNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/math/MathNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/math/ConditionalNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/ContextNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/VarNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/VaryingNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ColorSpaceNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/ReferenceBaseNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/RendererReferenceNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ToneMappingNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/BufferAttributeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/gpgpu/ComputeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/CacheNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/BypassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/RemapNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/code/ExpressionNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/Discard.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/RenderOutputNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/tsl/TSLBase.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/AttributeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/UV.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/TextureSizeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/MaxMipLevelNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/TextureNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Camera.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Object3DNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/ModelNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Position.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/FrontFacingNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Normal.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/MaterialProperties.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/ReflectVector.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/CubeTextureNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/BufferNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/UniformArrayNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/ReferenceNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/MaterialReferenceNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Tangent.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Bitangent.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/AccessorsUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/NormalMapNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/BumpMapNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/MaterialNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/ModelViewProjectionNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/IndexNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/InstanceNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/BatchNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/SkinningNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/LoopNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/MorphNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/LightsNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/LightingNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/AONode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/LightingContextNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/IrradianceNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ScreenNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ViewportTextureNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ViewportDepthTextureNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ViewportDepthNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/ClippingNode.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/NodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/InstancedPointsNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/LineBasicNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/LineDashedNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/Line2NodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/Packing.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshNormalNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/EquirectUVNode.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/CubeRenderTarget.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/CubeMapNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/BasicEnvironmentNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/BasicLightMapNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/LightingModel.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BasicLightingModel.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshBasicNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/F_Schlick.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/BRDF_Lambert.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/PhongLightingModel.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshLambertNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshPhongNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/material/getGeometryRoughness.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/material/getRoughness.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated_Anisotropic.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/D_GGX.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/D_GGX_Anisotropic.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/BRDF_GGX.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/DFGApprox.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/EnvironmentBRDF.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/Schlick_to_F0.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/BRDF_Sheen.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/BSDF/LTC.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/TextureBicubic.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/PhysicalLightingModel.js", "../../@needle-tools/engine/node_modules/three/src/nodes/pmrem/PMREMUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/pmrem/PMREMNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/EnvironmentNode.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshStandardNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshPhysicalNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshSSSNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/ToonLightingModel.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshToonNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/MatcapUVNode.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/MeshMatcapNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/PointsNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/RotateNode.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/SpriteNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/ShadowMaskModel.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/ShadowNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Texture3DNode.js", "../../@needle-tools/engine/node_modules/three/src/materials/nodes/VolumeNodeMaterial.js", "../../@needle-tools/engine/node_modules/three/src/loaders/nodes/NodeLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/nodes/NodeMaterialLoader.js", "../../@needle-tools/engine/node_modules/three/src/loaders/nodes/NodeObjectLoader.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeAttribute.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeUniform.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeVar.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeVarying.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeCode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeCache.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/ParameterNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/code/CodeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/code/FunctionNode.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/Uniform.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/nodes/NodeUniform.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/StackNode.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/ChainMap.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/extras/PMREMGenerator.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/BindGroup.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeBuilder.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeFrame.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeFunctionInput.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/StructTypeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/OutputStructNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/MRTNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/FunctionOverloadingNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/TimerNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/OscNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/SpriteSheetUVNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/StorageArrayElementNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/TriplanarTexturesNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/ReflectorNode.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/QuadMesh.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/RTTNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/VertexColorNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/PointUVNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/SceneNode.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgpu/utils/WebGPUConstants.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/StorageBufferNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/StorageTextureNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/UserDataNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/PosterizeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ViewportSharedTextureNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/PassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/GaussianBlurNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/AfterImageNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ColorAdjustment.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/AnamorphicNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/SobelOperatorNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/DepthOfFieldNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/DotScreenNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/RGBShiftNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/FilmNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/Lut3DNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/GTAONode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/DenoiseNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/FXAANode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/BloomNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/TransitionNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/PixelationPassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/SSAAPassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/StereoPassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/StereoCompositePassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/AnaglyphPassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ParallaxBarrierPassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ToonOutlinePassNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/code/ScriptableValueNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/code/ScriptableNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/fog/FogNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/fog/FogRangeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/fog/FogExp2Node.js", "../../@needle-tools/engine/node_modules/three/src/nodes/geometry/RangeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/AnalyticLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/LightUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/Lights.js", "../../@needle-tools/engine/node_modules/three/src/nodes/math/Hash.js", "../../@needle-tools/engine/node_modules/three/src/nodes/math/MathUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/math/TriNoise3D.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/UVUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/SpriteUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/utils/ViewportUtils.js", "../../@needle-tools/engine/node_modules/three/src/nodes/accessors/VelocityNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/BlendMode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/MotionBlur.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/BleachBypass.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/Sepia.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ColorSpaceFunctions.js", "../../@needle-tools/engine/node_modules/three/src/nodes/display/ToneMappingFunctions.js", "../../@needle-tools/engine/node_modules/three/src/nodes/gpgpu/ComputeBuiltinNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/gpgpu/BarrierNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/gpgpu/WorkgroupInfoNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/gpgpu/AtomicFunctionNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/procedural/Checker.js", "../../@needle-tools/engine/node_modules/three/src/nodes/materialx/lib/mx_noise.js", "../../@needle-tools/engine/node_modules/three/src/nodes/materialx/lib/mx_hsv.js", "../../@needle-tools/engine/node_modules/three/src/nodes/materialx/lib/mx_transform_color.js", "../../@needle-tools/engine/node_modules/three/src/nodes/materialx/MaterialXNodes.js", "../../@needle-tools/engine/node_modules/three/src/nodes/functions/material/getShIrradianceAt.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/PointLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/DirectionalLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/RectAreaLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/SpotLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/IESSpotLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/AmbientLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/HemisphereLightNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/lighting/LightProbeNode.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeParser.js", "../../@needle-tools/engine/node_modules/three/src/nodes/core/NodeFunction.js", "../../@needle-tools/engine/node_modules/three/src/nodes/parsers/GLSLNodeFunction.js", "../../@needle-tools/engine/node_modules/three/src/nodes/parsers/GLSLNodeParser.js", "../../@needle-tools/engine/node_modules/three/src/renderers/common/nodes/NodeLibrary.js", "../../@needle-tools/engine/node_modules/three/src/lights/webgpu/IESSpotLight.js", "../../@needle-tools/engine/node_modules/three/src/renderers/webgpu/nodes/BasicNodeLibrary.js", "../../@needle-tools/engine/node_modules/three/src/Three.js"],
  "sourcesContent": ["export const REVISION = '169';\r\n\r\nexport const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\nexport const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\nexport const CullFaceNone = 0;\r\nexport const CullFaceBack = 1;\r\nexport const CullFaceFront = 2;\r\nexport const CullFaceFrontBack = 3;\r\nexport const BasicShadowMap = 0;\r\nexport const PCFShadowMap = 1;\r\nexport const PCFSoftShadowMap = 2;\r\nexport const VSMShadowMap = 3;\r\nexport const FrontSide = 0;\r\nexport const BackSide = 1;\r\nexport const DoubleSide = 2;\r\nexport const NoBlending = 0;\r\nexport const NormalBlending = 1;\r\nexport const AdditiveBlending = 2;\r\nexport const SubtractiveBlending = 3;\r\nexport const MultiplyBlending = 4;\r\nexport const CustomBlending = 5;\r\nexport const AddEquation = 100;\r\nexport const SubtractEquation = 101;\r\nexport const ReverseSubtractEquation = 102;\r\nexport const MinEquation = 103;\r\nexport const MaxEquation = 104;\r\nexport const ZeroFactor = 200;\r\nexport const OneFactor = 201;\r\nexport const SrcColorFactor = 202;\r\nexport const OneMinusSrcColorFactor = 203;\r\nexport const SrcAlphaFactor = 204;\r\nexport const OneMinusSrcAlphaFactor = 205;\r\nexport const DstAlphaFactor = 206;\r\nexport const OneMinusDstAlphaFactor = 207;\r\nexport const DstColorFactor = 208;\r\nexport const OneMinusDstColorFactor = 209;\r\nexport const SrcAlphaSaturateFactor = 210;\r\nexport const ConstantColorFactor = 211;\r\nexport const OneMinusConstantColorFactor = 212;\r\nexport const ConstantAlphaFactor = 213;\r\nexport const OneMinusConstantAlphaFactor = 214;\r\nexport const NeverDepth = 0;\r\nexport const AlwaysDepth = 1;\r\nexport const LessDepth = 2;\r\nexport const LessEqualDepth = 3;\r\nexport const EqualDepth = 4;\r\nexport const GreaterEqualDepth = 5;\r\nexport const GreaterDepth = 6;\r\nexport const NotEqualDepth = 7;\r\nexport const MultiplyOperation = 0;\r\nexport const MixOperation = 1;\r\nexport const AddOperation = 2;\r\nexport const NoToneMapping = 0;\r\nexport const LinearToneMapping = 1;\r\nexport const ReinhardToneMapping = 2;\r\nexport const CineonToneMapping = 3;\r\nexport const ACESFilmicToneMapping = 4;\r\nexport const CustomToneMapping = 5;\r\nexport const AgXToneMapping = 6;\r\nexport const NeutralToneMapping = 7;\r\nexport const AttachedBindMode = 'attached';\r\nexport const DetachedBindMode = 'detached';\r\n\r\nexport const UVMapping = 300;\r\nexport const CubeReflectionMapping = 301;\r\nexport const CubeRefractionMapping = 302;\r\nexport const EquirectangularReflectionMapping = 303;\r\nexport const EquirectangularRefractionMapping = 304;\r\nexport const CubeUVReflectionMapping = 306;\r\nexport const RepeatWrapping = 1000;\r\nexport const ClampToEdgeWrapping = 1001;\r\nexport const MirroredRepeatWrapping = 1002;\r\nexport const NearestFilter = 1003;\r\nexport const NearestMipmapNearestFilter = 1004;\r\nexport const NearestMipMapNearestFilter = 1004;\r\nexport const NearestMipmapLinearFilter = 1005;\r\nexport const NearestMipMapLinearFilter = 1005;\r\nexport const LinearFilter = 1006;\r\nexport const LinearMipmapNearestFilter = 1007;\r\nexport const LinearMipMapNearestFilter = 1007;\r\nexport const LinearMipmapLinearFilter = 1008;\r\nexport const LinearMipMapLinearFilter = 1008;\r\nexport const UnsignedByteType = 1009;\r\nexport const ByteType = 1010;\r\nexport const ShortType = 1011;\r\nexport const UnsignedShortType = 1012;\r\nexport const IntType = 1013;\r\nexport const UnsignedIntType = 1014;\r\nexport const FloatType = 1015;\r\nexport const HalfFloatType = 1016;\r\nexport const UnsignedShort4444Type = 1017;\r\nexport const UnsignedShort5551Type = 1018;\r\nexport const UnsignedInt248Type = 1020;\r\nexport const UnsignedInt5999Type = 35902;\r\n\r\n/**\r\n * An unsigned int 10_11_11 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedInt101111Type = 35899;\r\n\r\nexport const AlphaFormat = 1021;\r\nexport const RGBFormat = 1022;\r\nexport const RGBAFormat = 1023;\r\nexport const LuminanceFormat = 1024;\r\nexport const LuminanceAlphaFormat = 1025;\r\nexport const DepthFormat = 1026;\r\nexport const DepthStencilFormat = 1027;\r\nexport const RedFormat = 1028;\r\nexport const RedIntegerFormat = 1029;\r\nexport const RGFormat = 1030;\r\nexport const RGIntegerFormat = 1031;\r\nexport const RGBIntegerFormat = 1032;\r\nexport const RGBAIntegerFormat = 1033;\r\n\r\nexport const RGB_S3TC_DXT1_Format = 33776;\r\nexport const RGBA_S3TC_DXT1_Format = 33777;\r\nexport const RGBA_S3TC_DXT3_Format = 33778;\r\nexport const RGBA_S3TC_DXT5_Format = 33779;\r\nexport const RGB_PVRTC_4BPPV1_Format = 35840;\r\nexport const RGB_PVRTC_2BPPV1_Format = 35841;\r\nexport const RGBA_PVRTC_4BPPV1_Format = 35842;\r\nexport const RGBA_PVRTC_2BPPV1_Format = 35843;\r\nexport const RGB_ETC1_Format = 36196;\r\nexport const RGB_ETC2_Format = 37492;\r\nexport const RGBA_ETC2_EAC_Format = 37496;\r\nexport const RGBA_ASTC_4x4_Format = 37808;\r\nexport const RGBA_ASTC_5x4_Format = 37809;\r\nexport const RGBA_ASTC_5x5_Format = 37810;\r\nexport const RGBA_ASTC_6x5_Format = 37811;\r\nexport const RGBA_ASTC_6x6_Format = 37812;\r\nexport const RGBA_ASTC_8x5_Format = 37813;\r\nexport const RGBA_ASTC_8x6_Format = 37814;\r\nexport const RGBA_ASTC_8x8_Format = 37815;\r\nexport const RGBA_ASTC_10x5_Format = 37816;\r\nexport const RGBA_ASTC_10x6_Format = 37817;\r\nexport const RGBA_ASTC_10x8_Format = 37818;\r\nexport const RGBA_ASTC_10x10_Format = 37819;\r\nexport const RGBA_ASTC_12x10_Format = 37820;\r\nexport const RGBA_ASTC_12x12_Format = 37821;\r\nexport const RGBA_BPTC_Format = 36492;\r\nexport const RGB_BPTC_SIGNED_Format = 36494;\r\nexport const RGB_BPTC_UNSIGNED_Format = 36495;\r\nexport const RED_RGTC1_Format = 36283;\r\nexport const SIGNED_RED_RGTC1_Format = 36284;\r\nexport const RED_GREEN_RGTC2_Format = 36285;\r\nexport const SIGNED_RED_GREEN_RGTC2_Format = 36286;\r\nexport const LoopOnce = 2200;\r\nexport const LoopRepeat = 2201;\r\nexport const LoopPingPong = 2202;\r\nexport const InterpolateDiscrete = 2300;\r\nexport const InterpolateLinear = 2301;\r\nexport const InterpolateSmooth = 2302;\r\nexport const ZeroCurvatureEnding = 2400;\r\nexport const ZeroSlopeEnding = 2401;\r\nexport const WrapAroundEnding = 2402;\r\nexport const NormalAnimationBlendMode = 2500;\r\nexport const AdditiveAnimationBlendMode = 2501;\r\nexport const TrianglesDrawMode = 0;\r\nexport const TriangleStripDrawMode = 1;\r\nexport const TriangleFanDrawMode = 2;\r\nexport const BasicDepthPacking = 3200;\r\nexport const RGBADepthPacking = 3201;\r\nexport const RGBDepthPacking = 3202;\r\nexport const RGDepthPacking = 3203;\r\nexport const TangentSpaceNormalMap = 0;\r\nexport const ObjectSpaceNormalMap = 1;\r\n\r\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\r\nexport const NoColorSpace = '';\r\nexport const SRGBColorSpace = 'srgb';\r\nexport const LinearSRGBColorSpace = 'srgb-linear';\r\nexport const DisplayP3ColorSpace = 'display-p3';\r\nexport const LinearDisplayP3ColorSpace = 'display-p3-linear';\r\n\r\nexport const LinearTransfer = 'linear';\r\nexport const SRGBTransfer = 'srgb';\r\n\r\nexport const Rec709Primaries = 'rec709';\r\nexport const P3Primaries = 'p3';\r\n\r\nexport const ZeroStencilOp = 0;\r\nexport const KeepStencilOp = 7680;\r\nexport const ReplaceStencilOp = 7681;\r\nexport const IncrementStencilOp = 7682;\r\nexport const DecrementStencilOp = 7683;\r\nexport const IncrementWrapStencilOp = 34055;\r\nexport const DecrementWrapStencilOp = 34056;\r\nexport const InvertStencilOp = 5386;\r\n\r\nexport const NeverStencilFunc = 512;\r\nexport const LessStencilFunc = 513;\r\nexport const EqualStencilFunc = 514;\r\nexport const LessEqualStencilFunc = 515;\r\nexport const GreaterStencilFunc = 516;\r\nexport const NotEqualStencilFunc = 517;\r\nexport const GreaterEqualStencilFunc = 518;\r\nexport const AlwaysStencilFunc = 519;\r\n\r\nexport const NeverCompare = 512;\r\nexport const LessCompare = 513;\r\nexport const EqualCompare = 514;\r\nexport const LessEqualCompare = 515;\r\nexport const GreaterCompare = 516;\r\nexport const NotEqualCompare = 517;\r\nexport const GreaterEqualCompare = 518;\r\nexport const AlwaysCompare = 519;\r\n\r\nexport const StaticDrawUsage = 35044;\r\nexport const DynamicDrawUsage = 35048;\r\nexport const StreamDrawUsage = 35040;\r\nexport const StaticReadUsage = 35045;\r\nexport const DynamicReadUsage = 35049;\r\nexport const StreamReadUsage = 35041;\r\nexport const StaticCopyUsage = 35046;\r\nexport const DynamicCopyUsage = 35050;\r\nexport const StreamCopyUsage = 35042;\r\n\r\nexport const GLSL1 = '100';\r\nexport const GLSL3 = '300 es';\r\n\r\nexport const WebGLCoordinateSystem = 2000;\r\nexport const WebGPUCoordinateSystem = 2001;\r\n", "/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nclass EventDispatcher {\r\n\r\n\taddEventListener( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\thasEventListener( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t}\r\n\r\n\tremoveEventListener( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tconst listeners = this._listeners;\r\n\t\tconst listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tconst index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispatchEvent( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tconst listeners = this._listeners;\r\n\t\tconst listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\t// Make a copy, in case listeners are removed while iterating.\r\n\t\t\tconst array = listenerArray.slice( 0 );\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tevent.target = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { EventDispatcher };\r\n", "const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\r\n\r\nlet _seed = 1234567;\r\n\r\n\r\nconst DEG2RAD = Math.PI / 180;\r\nconst RAD2DEG = 180 / Math.PI;\r\n\r\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\nfunction generateUUID() {\r\n\r\n\tconst d0 = Math.random() * 0xffffffff | 0;\r\n\tconst d1 = Math.random() * 0xffffffff | 0;\r\n\tconst d2 = Math.random() * 0xffffffff | 0;\r\n\tconst d3 = Math.random() * 0xffffffff | 0;\r\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\r\n\r\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\r\n\treturn uuid.toLowerCase();\r\n\r\n}\r\n\r\nfunction clamp( value, min, max ) {\r\n\r\n\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n}\r\n\r\n// compute euclidean modulo of m % n\r\n// https://en.wikipedia.org/wiki/Modulo_operation\r\nfunction euclideanModulo( n, m ) {\r\n\r\n\treturn ( ( n % m ) + m ) % m;\r\n\r\n}\r\n\r\n// Linear mapping from range <a1, a2> to range <b1, b2>\r\nfunction mapLinear( x, a1, a2, b1, b2 ) {\r\n\r\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n}\r\n\r\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\r\nfunction inverseLerp( x, y, value ) {\r\n\r\n\tif ( x !== y ) {\r\n\r\n\t\treturn ( value - x ) / ( y - x );\r\n\r\n\t} else {\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// https://en.wikipedia.org/wiki/Linear_interpolation\r\nfunction lerp( x, y, t ) {\r\n\r\n\treturn ( 1 - t ) * x + t * y;\r\n\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nfunction damp( x, y, lambda, dt ) {\r\n\r\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\r\n\r\n}\r\n\r\n// https://www.desmos.com/calculator/vcsjnyz7x4\r\nfunction pingpong( x, length = 1 ) {\r\n\r\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\r\n\r\n}\r\n\r\n// http://en.wikipedia.org/wiki/Smoothstep\r\nfunction smoothstep( x, min, max ) {\r\n\r\n\tif ( x <= min ) return 0;\r\n\tif ( x >= max ) return 1;\r\n\r\n\tx = ( x - min ) / ( max - min );\r\n\r\n\treturn x * x * ( 3 - 2 * x );\r\n\r\n}\r\n\r\nfunction smootherstep( x, min, max ) {\r\n\r\n\tif ( x <= min ) return 0;\r\n\tif ( x >= max ) return 1;\r\n\r\n\tx = ( x - min ) / ( max - min );\r\n\r\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n}\r\n\r\n// Random integer from <low, high> interval\r\nfunction randInt( low, high ) {\r\n\r\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n}\r\n\r\n// Random float from <low, high> interval\r\nfunction randFloat( low, high ) {\r\n\r\n\treturn low + Math.random() * ( high - low );\r\n\r\n}\r\n\r\n// Random float from <-range/2, range/2> interval\r\nfunction randFloatSpread( range ) {\r\n\r\n\treturn range * ( 0.5 - Math.random() );\r\n\r\n}\r\n\r\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\r\nfunction seededRandom( s ) {\r\n\r\n\tif ( s !== undefined ) _seed = s;\r\n\r\n\t// Mulberry32 generator\r\n\r\n\tlet t = _seed += 0x6D2B79F5;\r\n\r\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\r\n\r\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\r\n\r\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\r\n\r\n}\r\n\r\nfunction degToRad( degrees ) {\r\n\r\n\treturn degrees * DEG2RAD;\r\n\r\n}\r\n\r\nfunction radToDeg( radians ) {\r\n\r\n\treturn radians * RAD2DEG;\r\n\r\n}\r\n\r\nfunction isPowerOfTwo( value ) {\r\n\r\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n}\r\n\r\nfunction ceilPowerOfTwo( value ) {\r\n\r\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n}\r\n\r\nfunction floorPowerOfTwo( value ) {\r\n\r\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n}\r\n\r\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\r\n\r\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\r\n\r\n\t// rotations are applied to the axes in the order specified by 'order'\r\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\r\n\t// angles are in radians\r\n\r\n\tconst cos = Math.cos;\r\n\tconst sin = Math.sin;\r\n\r\n\tconst c2 = cos( b / 2 );\r\n\tconst s2 = sin( b / 2 );\r\n\r\n\tconst c13 = cos( ( a + c ) / 2 );\r\n\tconst s13 = sin( ( a + c ) / 2 );\r\n\r\n\tconst c1_3 = cos( ( a - c ) / 2 );\r\n\tconst s1_3 = sin( ( a - c ) / 2 );\r\n\r\n\tconst c3_1 = cos( ( c - a ) / 2 );\r\n\tconst s3_1 = sin( ( c - a ) / 2 );\r\n\r\n\tswitch ( order ) {\r\n\r\n\t\tcase 'XYX':\r\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'YZY':\r\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ZXZ':\r\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'XZX':\r\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'YXY':\r\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ZYZ':\r\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction denormalize( value, array ) {\r\n\r\n\tswitch ( array.constructor ) {\r\n\r\n\t\tcase Float32Array:\r\n\r\n\t\t\treturn value;\r\n\r\n\t\tcase Uint32Array:\r\n\r\n\t\t\treturn value / 4294967295.0;\r\n\r\n\t\tcase Uint16Array:\r\n\r\n\t\t\treturn value / 65535.0;\r\n\r\n\t\tcase Uint8Array:\r\n\r\n\t\t\treturn value / 255.0;\r\n\r\n\t\tcase Int32Array:\r\n\r\n\t\t\treturn Math.max( value / 2147483647.0, - 1.0 );\r\n\r\n\t\tcase Int16Array:\r\n\r\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\r\n\r\n\t\tcase Int8Array:\r\n\r\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthrow new Error( 'Invalid component type.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction normalize( value, array ) {\r\n\r\n\tswitch ( array.constructor ) {\r\n\r\n\t\tcase Float32Array:\r\n\r\n\t\t\treturn value;\r\n\r\n\t\tcase Uint32Array:\r\n\r\n\t\t\treturn Math.round( value * 4294967295.0 );\r\n\r\n\t\tcase Uint16Array:\r\n\r\n\t\t\treturn Math.round( value * 65535.0 );\r\n\r\n\t\tcase Uint8Array:\r\n\r\n\t\t\treturn Math.round( value * 255.0 );\r\n\r\n\t\tcase Int32Array:\r\n\r\n\t\t\treturn Math.round( value * 2147483647.0 );\r\n\r\n\t\tcase Int16Array:\r\n\r\n\t\t\treturn Math.round( value * 32767.0 );\r\n\r\n\t\tcase Int8Array:\r\n\r\n\t\t\treturn Math.round( value * 127.0 );\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthrow new Error( 'Invalid component type.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst MathUtils = {\r\n\tDEG2RAD: DEG2RAD,\r\n\tRAD2DEG: RAD2DEG,\r\n\tgenerateUUID: generateUUID,\r\n\tclamp: clamp,\r\n\teuclideanModulo: euclideanModulo,\r\n\tmapLinear: mapLinear,\r\n\tinverseLerp: inverseLerp,\r\n\tlerp: lerp,\r\n\tdamp: damp,\r\n\tpingpong: pingpong,\r\n\tsmoothstep: smoothstep,\r\n\tsmootherstep: smootherstep,\r\n\trandInt: randInt,\r\n\trandFloat: randFloat,\r\n\trandFloatSpread: randFloatSpread,\r\n\tseededRandom: seededRandom,\r\n\tdegToRad: degToRad,\r\n\tradToDeg: radToDeg,\r\n\tisPowerOfTwo: isPowerOfTwo,\r\n\tceilPowerOfTwo: ceilPowerOfTwo,\r\n\tfloorPowerOfTwo: floorPowerOfTwo,\r\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\r\n\tnormalize: normalize,\r\n\tdenormalize: denormalize\r\n};\r\n\r\nexport {\r\n\tDEG2RAD,\r\n\tRAD2DEG,\r\n\tgenerateUUID,\r\n\tclamp,\r\n\teuclideanModulo,\r\n\tmapLinear,\r\n\tinverseLerp,\r\n\tlerp,\r\n\tdamp,\r\n\tpingpong,\r\n\tsmoothstep,\r\n\tsmootherstep,\r\n\trandInt,\r\n\trandFloat,\r\n\trandFloatSpread,\r\n\tseededRandom,\r\n\tdegToRad,\r\n\tradToDeg,\r\n\tisPowerOfTwo,\r\n\tceilPowerOfTwo,\r\n\tfloorPowerOfTwo,\r\n\tsetQuaternionFromProperEuler,\r\n\tnormalize,\r\n\tdenormalize,\r\n\tMathUtils\r\n};\r\n", "import * as MathUtils from './MathUtils.js';\r\n\r\nclass Vector2 {\r\n\r\n\tconstructor( x = 0, y = 0 ) {\r\n\r\n\t\tVector2.prototype.isVector2 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t}\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.x;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.x = value;\r\n\r\n\t}\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.y;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.y = value;\r\n\r\n\t}\r\n\r\n\tset( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t}\r\n\r\n\tcross( v ) {\r\n\r\n\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tangle() {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t}\r\n\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t}\r\n\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateAround( center, angle ) {\r\n\r\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tconst x = this.x - center.x;\r\n\t\tconst y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Vector2 };\r\n", "class Matrix3 {\r\n\r\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tMatrix3.prototype.isMatrix3 = true;\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrix3Column( this, 0 );\r\n\t\tyAxis.setFromMatrix3Column( this, 1 );\r\n\t\tzAxis.setFromMatrix3Column( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrix4( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\r\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\r\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\tte[ 3 ] = t12 * detInv;\r\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\tte[ 6 ] = t13 * detInv;\r\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranspose() {\r\n\r\n\t\tlet tmp;\r\n\t\tconst m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetNormalMatrix( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\r\n\r\n\t}\r\n\r\n\ttransposeIntoArray( r ) {\r\n\r\n\t\tconst m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\tconst c = Math.cos( rotation );\r\n\t\tconst s = Math.sin( rotation );\r\n\r\n\t\tthis.set(\r\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tscale( sx, sy ) {\r\n\r\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotate( theta ) {\r\n\r\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( tx, ty ) {\r\n\r\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// for 2D Transforms\r\n\r\n\tmakeTranslation( x, y ) {\r\n\r\n\t\tif ( x.isVector2 ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, x.x,\r\n\t\t\t\t0, 1, x.y,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, x,\r\n\t\t\t\t0, 1, y,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotation( theta ) {\r\n\r\n\t\t// counterclockwise\r\n\r\n\t\tconst c = Math.cos( theta );\r\n\t\tconst s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0,\r\n\t\t\ts, c, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeScale( x, y ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0,\r\n\t\t\t0, y, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _m3 = /*@__PURE__*/ new Matrix3();\r\n\r\nexport { Matrix3 };\r\n", "function arrayMin( array ) {\r\n\r\n\tif ( array.length === 0 ) return Infinity;\r\n\r\n\tlet min = array[ 0 ];\r\n\r\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] < min ) min = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn min;\r\n\r\n}\r\n\r\nfunction arrayMax( array ) {\r\n\r\n\tif ( array.length === 0 ) return - Infinity;\r\n\r\n\tlet max = array[ 0 ];\r\n\r\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] > max ) max = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn max;\r\n\r\n}\r\n\r\nfunction arrayNeedsUint32( array ) {\r\n\r\n\t// assumes larger values usually on last\r\n\r\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\r\n\r\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\r\n\r\n\t}\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\nconst TYPED_ARRAYS = {\r\n\tInt8Array: Int8Array,\r\n\tUint8Array: Uint8Array,\r\n\tUint8ClampedArray: Uint8ClampedArray,\r\n\tInt16Array: Int16Array,\r\n\tUint16Array: Uint16Array,\r\n\tInt32Array: Int32Array,\r\n\tUint32Array: Uint32Array,\r\n\tFloat32Array: Float32Array,\r\n\tFloat64Array: Float64Array\r\n};\r\n\r\nfunction getTypedArray( type, buffer ) {\r\n\r\n\treturn new TYPED_ARRAYS[ type ]( buffer );\r\n\r\n}\r\n\r\nfunction createElementNS( name ) {\r\n\r\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\r\n\r\n}\r\n\r\nfunction createCanvasElement() {\r\n\r\n\tconst canvas = createElementNS( 'canvas' );\r\n\tcanvas.style.display = 'block';\r\n\treturn canvas;\r\n\r\n}\r\n\r\nconst _cache = {};\r\n\r\nfunction warnOnce( message ) {\r\n\r\n\tif ( message in _cache ) return;\r\n\r\n\t_cache[ message ] = true;\r\n\r\n\tconsole.warn( message );\r\n\r\n}\r\n\r\nfunction probeAsync( gl, sync, interval ) {\r\n\r\n\treturn new Promise( function ( resolve, reject ) {\r\n\r\n\t\tfunction probe() {\r\n\r\n\t\t\tswitch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {\r\n\r\n\t\t\t\tcase gl.WAIT_FAILED:\r\n\t\t\t\t\treject();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.TIMEOUT_EXPIRED:\r\n\t\t\t\t\tsetTimeout( probe, interval );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tresolve();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsetTimeout( probe, interval );\r\n\r\n\t} );\r\n\r\n}\r\n\r\nfunction toNormalizedProjectionMatrix( projectionMatrix ) {\r\n\r\n\tconst m = projectionMatrix.elements;\r\n\r\n\t// Convert [-1, 1] to [0, 1] projection matrix\r\n\tm[ 2 ] = 0.5 * m[ 2 ] + 0.5 * m[ 3 ];\r\n\tm[ 6 ] = 0.5 * m[ 6 ] + 0.5 * m[ 7 ];\r\n\tm[ 10 ] = 0.5 * m[ 10 ] + 0.5 * m[ 11 ];\r\n\tm[ 14 ] = 0.5 * m[ 14 ] + 0.5 * m[ 15 ];\r\n\r\n}\r\n\r\nfunction toReversedProjectionMatrix( projectionMatrix ) {\r\n\r\n\tconst m = projectionMatrix.elements;\r\n\tconst isPerspectiveMatrix = m[ 11 ] === - 1;\r\n\r\n\t// Reverse [0, 1] projection matrix\r\n\tif ( isPerspectiveMatrix ) {\r\n\r\n\t\tm[ 10 ] = - m[ 10 ] - 1;\r\n\t\tm[ 14 ] = - m[ 14 ];\r\n\r\n\t} else {\r\n\r\n\t\tm[ 10 ] = - m[ 10 ];\r\n\t\tm[ 14 ] = - m[ 14 ] + 1;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { arrayMin, arrayMax, arrayNeedsUint32, getTypedArray, createElementNS, createCanvasElement, warnOnce, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix };\r\n", "import { SRGBColorSpace, LinearSRGBColorSpace, DisplayP3ColorSpace, LinearDisplayP3ColorSpace, Rec709Primaries, P3Primaries, SRGBTransfer, LinearTransfer, NoColorSpace, } from '../constants.js';\r\nimport { Matrix3 } from './Matrix3.js';\r\n\r\n/**\r\n * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping\r\n * or clipping. Based on W3C specifications for sRGB and Display P3,\r\n * and ICC specifications for the D50 connection space. Values in/out\r\n * are _linear_ sRGB and _linear_ Display P3.\r\n *\r\n * Note that both sRGB and Display P3 use the sRGB transfer functions.\r\n *\r\n * Reference:\r\n * - http://www.russellcottrell.com/photo/matrixCalculator.htm\r\n */\r\n\r\nconst LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().set(\r\n\t0.8224621, 0.177538, 0.0,\r\n\t0.0331941, 0.9668058, 0.0,\r\n\t0.0170827, 0.0723974, 0.9105199,\r\n);\r\n\r\nconst LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().set(\r\n\t1.2249401, - 0.2249404, 0.0,\r\n\t- 0.0420569, 1.0420571, 0.0,\r\n\t- 0.0196376, - 0.0786361, 1.0982735\r\n);\r\n\r\n/**\r\n * Defines supported color spaces by transfer function and primaries,\r\n * and provides conversions to/from the Linear-sRGB reference space.\r\n */\r\nconst COLOR_SPACES = {\r\n\t[ LinearSRGBColorSpace ]: {\r\n\t\ttransfer: LinearTransfer,\r\n\t\tprimaries: Rec709Primaries,\r\n\t\tluminanceCoefficients: [ 0.2126, 0.7152, 0.0722 ],\r\n\t\ttoReference: ( color ) => color,\r\n\t\tfromReference: ( color ) => color,\r\n\t},\r\n\t[ SRGBColorSpace ]: {\r\n\t\ttransfer: SRGBTransfer,\r\n\t\tprimaries: Rec709Primaries,\r\n\t\tluminanceCoefficients: [ 0.2126, 0.7152, 0.0722 ],\r\n\t\ttoReference: ( color ) => color.convertSRGBToLinear(),\r\n\t\tfromReference: ( color ) => color.convertLinearToSRGB(),\r\n\t},\r\n\t[ LinearDisplayP3ColorSpace ]: {\r\n\t\ttransfer: LinearTransfer,\r\n\t\tprimaries: P3Primaries,\r\n\t\tluminanceCoefficients: [ 0.2289, 0.6917, 0.0793 ],\r\n\t\ttoReference: ( color ) => color.applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),\r\n\t\tfromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ),\r\n\t},\r\n\t[ DisplayP3ColorSpace ]: {\r\n\t\ttransfer: SRGBTransfer,\r\n\t\tprimaries: P3Primaries,\r\n\t\tluminanceCoefficients: [ 0.2289, 0.6917, 0.0793 ],\r\n\t\ttoReference: ( color ) => color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),\r\n\t\tfromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB(),\r\n\t},\r\n};\r\n\r\nconst SUPPORTED_WORKING_COLOR_SPACES = new Set( [ LinearSRGBColorSpace, LinearDisplayP3ColorSpace ] );\r\n\r\nexport const ColorManagement = {\r\n\r\n\tenabled: true,\r\n\r\n\t_workingColorSpace: LinearSRGBColorSpace,\r\n\r\n\tget workingColorSpace() {\r\n\r\n\t\treturn this._workingColorSpace;\r\n\r\n\t},\r\n\r\n\tset workingColorSpace( colorSpace ) {\r\n\r\n\t\tif ( ! SUPPORTED_WORKING_COLOR_SPACES.has( colorSpace ) ) {\r\n\r\n\t\t\tthrow new Error( `Unsupported working color space, \"${ colorSpace }\".` );\r\n\r\n\t\t}\r\n\r\n\t\tthis._workingColorSpace = colorSpace;\r\n\r\n\t},\r\n\r\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\r\n\r\n\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t}\r\n\r\n\t\tconst sourceToReference = COLOR_SPACES[ sourceColorSpace ].toReference;\r\n\t\tconst targetFromReference = COLOR_SPACES[ targetColorSpace ].fromReference;\r\n\r\n\t\treturn targetFromReference( sourceToReference( color ) );\r\n\r\n\t},\r\n\r\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\r\n\r\n\t\treturn this.convert( color, this._workingColorSpace, targetColorSpace );\r\n\r\n\t},\r\n\r\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\r\n\r\n\t\treturn this.convert( color, sourceColorSpace, this._workingColorSpace );\r\n\r\n\t},\r\n\r\n\tgetPrimaries: function ( colorSpace ) {\r\n\r\n\t\treturn COLOR_SPACES[ colorSpace ].primaries;\r\n\r\n\t},\r\n\r\n\tgetTransfer: function ( colorSpace ) {\r\n\r\n\t\tif ( colorSpace === NoColorSpace ) return LinearTransfer;\r\n\r\n\t\treturn COLOR_SPACES[ colorSpace ].transfer;\r\n\r\n\t},\r\n\r\n\tgetLuminanceCoefficients: function ( target, colorSpace = this._workingColorSpace ) {\r\n\r\n\t\treturn target.fromArray( COLOR_SPACES[ colorSpace ].luminanceCoefficients );\r\n\r\n\t},\r\n\r\n};\r\n\r\n\r\nexport function SRGBToLinear( c ) {\r\n\r\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n}\r\n\r\nexport function LinearToSRGB( c ) {\r\n\r\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n}\r\n", "import { createElementNS } from '../utils.js';\r\nimport { SRGBToLinear } from '../math/ColorManagement.js';\r\n\r\nlet _canvas;\r\n\r\nclass ImageUtils {\r\n\r\n\tstatic getDataURL( image ) {\r\n\r\n\t\tif ( /^data:/i.test( image.src ) ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tlet canvas;\r\n\r\n\t\tif ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tcanvas = image;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\t_canvas.width = image.width;\r\n\t\t\t_canvas.height = image.height;\r\n\r\n\t\t\tconst context = _canvas.getContext( '2d' );\r\n\r\n\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcanvas = _canvas;\r\n\r\n\t\t}\r\n\r\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\r\n\r\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic sRGBToLinear( image ) {\r\n\r\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\tconst canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\tcanvas.width = image.width;\r\n\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\tconst context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\r\n\t\t\tconst data = imageData.data;\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcontext.putImageData( imageData, 0, 0 );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t} else if ( image.data ) {\r\n\r\n\t\t\tconst data = image.data.slice( 0 );\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\r\n\r\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// assuming float\r\n\r\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: data,\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ImageUtils };\r\n", "import { ImageUtils } from '../extras/ImageUtils.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet _sourceId = 0;\r\n\r\nclass Source {\r\n\r\n\tconstructor( data = null ) {\r\n\r\n\t\tthis.isSource = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.data = data;\r\n\t\tthis.dataReady = true;\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.images[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tconst output = {\r\n\t\t\tuuid: this.uuid,\r\n\t\t\turl: ''\r\n\t\t};\r\n\r\n\t\tconst data = this.data;\r\n\r\n\t\tif ( data !== null ) {\r\n\r\n\t\t\tlet url;\r\n\r\n\t\t\tif ( Array.isArray( data ) ) {\r\n\r\n\t\t\t\t// cube texture\r\n\r\n\t\t\t\turl = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// texture\r\n\r\n\t\t\t\turl = serializeImage( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.url = url;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\tmeta.images[ this.uuid ] = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction serializeImage( image ) {\r\n\r\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t// default images\r\n\r\n\t\treturn ImageUtils.getDataURL( image );\r\n\r\n\t} else {\r\n\r\n\t\tif ( image.data ) {\r\n\r\n\t\t\t// images of DataTexture\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: Array.from( image.data ),\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height,\r\n\t\t\t\ttype: image.data.constructor.name\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\r\n\t\t\treturn {};\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Source };\r\n", "import { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport {\r\n\tMirroredRepeatWrapping,\r\n\tClampToEdgeWrapping,\r\n\tRepeatWrapping,\r\n\tUnsignedByteType,\r\n\tRGBAFormat,\r\n\tLinearMipmapLinearFilter,\r\n\tLinearFilter,\r\n\tUVMapping,\r\n\tNoColorSpace,\r\n} from '../constants.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport { Source } from './Source.js';\r\n\r\nlet _textureId = 0;\r\n\r\nclass Texture extends EventDispatcher {\r\n\r\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isTexture = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _textureId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.source = new Source( image );\r\n\t\tthis.mipmaps = [];\r\n\r\n\t\tthis.mapping = mapping;\r\n\t\tthis.channel = 0;\r\n\r\n\t\tthis.wrapS = wrapS;\r\n\t\tthis.wrapT = wrapT;\r\n\r\n\t\tthis.magFilter = magFilter;\r\n\t\tthis.minFilter = minFilter;\r\n\r\n\t\tthis.anisotropy = anisotropy;\r\n\r\n\t\tthis.format = format;\r\n\t\tthis.internalFormat = null;\r\n\t\tthis.type = type;\r\n\r\n\t\tthis.offset = new Vector2( 0, 0 );\r\n\t\tthis.repeat = new Vector2( 1, 1 );\r\n\t\tthis.center = new Vector2( 0, 0 );\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.matrixAutoUpdate = true;\r\n\t\tthis.matrix = new Matrix3();\r\n\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\t\tthis.colorSpace = colorSpace;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\r\n\t\tthis.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\r\n\t\tthis.pmremVersion = 0; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\r\n\r\n\t}\r\n\r\n\tget image() {\r\n\r\n\t\treturn this.source.data;\r\n\r\n\t}\r\n\r\n\tset image( value = null ) {\r\n\r\n\t\tthis.source.data = value;\r\n\r\n\t}\r\n\r\n\tupdateMatrix() {\r\n\r\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.source = source.source;\r\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\tthis.mapping = source.mapping;\r\n\t\tthis.channel = source.channel;\r\n\r\n\t\tthis.wrapS = source.wrapS;\r\n\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\tthis.magFilter = source.magFilter;\r\n\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\tthis.format = source.format;\r\n\t\tthis.internalFormat = source.internalFormat;\r\n\t\tthis.type = source.type;\r\n\r\n\t\tthis.offset.copy( source.offset );\r\n\t\tthis.repeat.copy( source.repeat );\r\n\t\tthis.center.copy( source.center );\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrix.copy( source.matrix );\r\n\r\n\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\tthis.flipY = source.flipY;\r\n\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\tthis.colorSpace = source.colorSpace;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tconst output = {\r\n\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Texture',\r\n\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t},\r\n\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tname: this.name,\r\n\r\n\t\t\timage: this.source.toJSON( meta ).uuid,\r\n\r\n\t\t\tmapping: this.mapping,\r\n\t\t\tchannel: this.channel,\r\n\r\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\tcenter: [ this.center.x, this.center.y ],\r\n\t\t\trotation: this.rotation,\r\n\r\n\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\tformat: this.format,\r\n\t\t\tinternalFormat: this.internalFormat,\r\n\t\t\ttype: this.type,\r\n\t\t\tcolorSpace: this.colorSpace,\r\n\r\n\t\t\tminFilter: this.minFilter,\r\n\t\t\tmagFilter: this.magFilter,\r\n\t\t\tanisotropy: this.anisotropy,\r\n\r\n\t\t\tflipY: this.flipY,\r\n\r\n\t\t\tgenerateMipmaps: this.generateMipmaps,\r\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\r\n\t\t\tunpackAlignment: this.unpackAlignment\r\n\r\n\t\t};\r\n\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\r\n\r\n\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\ttransformUv( uv ) {\r\n\r\n\t\tif ( this.mapping !== UVMapping ) return uv;\r\n\r\n\t\tuv.applyMatrix3( this.matrix );\r\n\r\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.flipY ) {\r\n\r\n\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn uv;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.version ++;\r\n\t\t\tthis.source.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tset needsPMREMUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.pmremVersion ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nTexture.DEFAULT_IMAGE = null;\r\nTexture.DEFAULT_MAPPING = UVMapping;\r\nTexture.DEFAULT_ANISOTROPY = 4;\r\n\r\nexport { Texture };\r\n", "class Vector4 {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\tVector4.prototype.isVector4 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t}\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.z;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.z = value;\r\n\r\n\t}\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.w;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.w = value;\r\n\r\n\t}\r\n\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetW( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\t\tthis.w *= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\t\tthis.w *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tsetAxisAngleFromQuaternion( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\tthis.x = 1;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = q.x / s;\r\n\t\t\tthis.y = q.y / s;\r\n\t\t\tthis.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetAxisAngleFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tlet angle, x, y, z; // variables for result\r\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tconst xx = ( m11 + 1 ) / 2;\r\n\t\t\tconst yy = ( m22 + 1 ) / 2;\r\n\t\t\tconst zz = ( m33 + 1 ) / 2;\r\n\t\t\tconst xy = ( m12 + m21 ) / 4;\r\n\t\t\tconst xz = ( m13 + m31 ) / 4;\r\n\t\t\tconst yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\t\tthis.w = e[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\t\tthis.z = Math.trunc( this.z );\r\n\t\tthis.w = Math.trunc( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\t\tthis.w = attribute.getW( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\t\tthis.w = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\t\tyield this.w;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Vector4 };\r\n", "import { EventDispatcher } from './EventDispatcher.js';\r\nimport { Texture } from '../textures/Texture.js';\r\nimport { LinearFilter } from '../constants.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Source } from '../textures/Source.js';\r\n\r\n/*\r\n In options, we can specify:\r\n * Texture parameters for an auto-generated target texture\r\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n*/\r\nclass RenderTarget extends EventDispatcher {\r\n\r\n\tconstructor( width = 1, height = 1, options = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isRenderTarget = true;\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.depth = 1;\r\n\r\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\r\n\t\tthis.scissorTest = false;\r\n\r\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\r\n\r\n\t\tconst image = { width: width, height: height, depth: 1 };\r\n\r\n\t\toptions = Object.assign( {\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\tinternalFormat: null,\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tdepthBuffer: true,\r\n\t\t\tstencilBuffer: false,\r\n\t\t\tresolveDepthBuffer: true,\r\n\t\t\tresolveStencilBuffer: true,\r\n\t\t\tdepthTexture: null,\r\n\t\t\tsamples: 0,\r\n\t\t\tcount: 1\r\n\t\t}, options );\r\n\r\n\t\tconst texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\r\n\r\n\t\ttexture.flipY = false;\r\n\t\ttexture.generateMipmaps = options.generateMipmaps;\r\n\t\ttexture.internalFormat = options.internalFormat;\r\n\r\n\t\tthis.textures = [];\r\n\r\n\t\tconst count = options.count;\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.textures[ i ] = texture.clone();\r\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\r\n\r\n\t\t}\r\n\r\n\t\tthis.depthBuffer = options.depthBuffer;\r\n\t\tthis.stencilBuffer = options.stencilBuffer;\r\n\r\n\t\tthis.resolveDepthBuffer = options.resolveDepthBuffer;\r\n\t\tthis.resolveStencilBuffer = options.resolveStencilBuffer;\r\n\r\n\t\tthis.depthTexture = options.depthTexture;\r\n\r\n\t\tthis.samples = options.samples;\r\n\r\n\t}\r\n\r\n\tget texture() {\r\n\r\n\t\treturn this.textures[ 0 ];\r\n\r\n\t}\r\n\r\n\tset texture( value ) {\r\n\r\n\t\tthis.textures[ 0 ] = value;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height, depth = 1 ) {\r\n\r\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\t\t\tthis.depth = depth;\r\n\r\n\t\t\tfor ( let i = 0, il = this.textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.textures[ i ].image.width = width;\r\n\t\t\t\tthis.textures[ i ].image.height = height;\r\n\t\t\t\tthis.textures[ i ].image.depth = depth;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\t\tthis.depth = source.depth;\r\n\r\n\t\tthis.scissor.copy( source.scissor );\r\n\t\tthis.scissorTest = source.scissorTest;\r\n\r\n\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\tthis.textures.length = 0;\r\n\r\n\t\tfor ( let i = 0, il = source.textures.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.textures[ i ] = source.textures[ i ].clone();\r\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\r\n\r\n\t\t}\r\n\r\n\t\t// ensure image object is not shared, see #20328\r\n\r\n\t\tconst image = Object.assign( {}, source.texture.image );\r\n\t\tthis.texture.source = new Source( image );\r\n\r\n\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\r\n\t\tthis.resolveDepthBuffer = source.resolveDepthBuffer;\r\n\t\tthis.resolveStencilBuffer = source.resolveStencilBuffer;\r\n\r\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\r\n\r\n\t\tthis.samples = source.samples;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RenderTarget };\r\n", "import { RenderTarget } from '../core/RenderTarget.js';\r\n\r\nclass WebGLRenderTarget extends RenderTarget {\r\n\r\n\tconstructor( width = 1, height = 1, options = {} ) {\r\n\r\n\t\tsuper( width, height, options );\r\n\r\n\t\tthis.isWebGLRenderTarget = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGLRenderTarget };\r\n", "import { Texture } from './Texture.js';\r\nimport { ClampToEdgeWrapping, NearestFilter } from '../constants.js';\r\n\r\nclass DataArrayTexture extends Texture {\r\n\r\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\r\n\r\n\t\tsuper( null );\r\n\r\n\t\tthis.isDataArrayTexture = true;\r\n\r\n\t\tthis.image = { data, width, height, depth };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t\tthis.layerUpdates = new Set();\r\n\r\n\t}\r\n\r\n\taddLayerUpdate( layerIndex ) {\r\n\r\n\t\tthis.layerUpdates.add( layerIndex );\r\n\r\n\t}\r\n\r\n\tclearLayerUpdates() {\r\n\r\n\t\tthis.layerUpdates.clear();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DataArrayTexture };\r\n", "import { WebGLRenderTarget } from './WebGLRenderTarget.js';\r\nimport { DataArrayTexture } from '../textures/DataArrayTexture.js';\r\n\r\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\r\n\r\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\r\n\r\n\t\tsuper( width, height, options );\r\n\r\n\t\tthis.isWebGLArrayRenderTarget = true;\r\n\r\n\t\tthis.depth = depth;\r\n\r\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\r\n\r\n\t\tthis.texture.isRenderTargetTexture = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGLArrayRenderTarget };\r\n", "import { Texture } from './Texture.js';\r\nimport { ClampToEdgeWrapping, NearestFilter } from '../constants.js';\r\n\r\nclass Data3DTexture extends Texture {\r\n\r\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\r\n\r\n\t\t// We're going to add .setXXX() methods for setting properties later.\r\n\t\t// Users can still set in DataTexture3D directly.\r\n\t\t//\r\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\r\n\t\t// \ttexture.anisotropy = 16;\r\n\t\t//\r\n\t\t// See #14839\r\n\r\n\t\tsuper( null );\r\n\r\n\t\tthis.isData3DTexture = true;\r\n\r\n\t\tthis.image = { data, width, height, depth };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Data3DTexture };\r\n", "import { WebGLRenderTarget } from './WebGLRenderTarget.js';\r\nimport { Data3DTexture } from '../textures/Data3DTexture.js';\r\n\r\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\r\n\r\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\r\n\r\n\t\tsuper( width, height, options );\r\n\r\n\t\tthis.isWebGL3DRenderTarget = true;\r\n\r\n\t\tthis.depth = depth;\r\n\r\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\r\n\r\n\t\tthis.texture.isRenderTargetTexture = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGL3DRenderTarget };\r\n", "import * as MathUtils from './MathUtils.js';\r\n\r\nclass Quaternion {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\tthis.isQuaternion = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t}\r\n\r\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( t === 0 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x1;\r\n\t\t\tdst[ dstOffset + 1 ] = y1;\r\n\t\t\tdst[ dstOffset + 2 ] = z1;\r\n\t\t\tdst[ dstOffset + 3 ] = w1;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tlet s = 1 - t;\r\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\r\n\r\n\t\tconst x0 = src0[ srcOffset0 ];\r\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\r\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\r\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 ];\r\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\r\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\r\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\r\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\r\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\r\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget w() {\r\n\r\n\t\treturn this._w;\r\n\r\n\t}\r\n\r\n\tset w( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t}\r\n\r\n\tcopy( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromEuler( euler, update = true ) {\r\n\r\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tconst cos = Math.cos;\r\n\t\tconst sin = Math.sin;\r\n\r\n\t\tconst c1 = cos( x / 2 );\r\n\t\tconst c2 = cos( y / 2 );\r\n\t\tconst c3 = cos( z / 2 );\r\n\r\n\t\tconst s1 = sin( x / 2 );\r\n\t\tconst s2 = sin( y / 2 );\r\n\t\tconst s3 = sin( z / 2 );\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tif ( update === true ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tlet r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\tif ( r < Number.EPSILON ) {\r\n\r\n\t\t\t// vFrom and vTo point in opposite directions\r\n\r\n\t\t\tr = 0;\r\n\r\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tangleTo( q ) {\r\n\r\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t}\r\n\r\n\trotateTowards( q, step ) {\r\n\r\n\t\tconst angle = this.angleTo( q );\r\n\r\n\t\tif ( angle === 0 ) return this;\r\n\r\n\t\tconst t = Math.min( 1, step / angle );\r\n\r\n\t\tthis.slerp( q, t );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\treturn this.set( 0, 0, 0, 1 );\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\t// quaternion is assumed to have unit length\r\n\r\n\t\treturn this.conjugate();\r\n\r\n\t}\r\n\r\n\tconjugate() {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\tlet l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t}\r\n\r\n\tpremultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t}\r\n\r\n\tmultiplyQuaternions( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerp( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\tconst s = 1 - t;\r\n\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\tthis.normalize(); // normalize calls _onChangeCallback()\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerpQuaternions( qa, qb, t ) {\r\n\r\n\t\treturn this.copy( qa ).slerp( qb, t );\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\t// sets this quaternion to a uniform random unit quaternnion\r\n\r\n\t\t// Ken Shoemake\r\n\t\t// Uniform random rotations\r\n\t\t// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\r\n\r\n\t\tconst theta1 = 2 * Math.PI * Math.random();\r\n\t\tconst theta2 = 2 * Math.PI * Math.random();\r\n\r\n\t\tconst x0 = Math.random();\r\n\t\tconst r1 = Math.sqrt( 1 - x0 );\r\n\t\tconst r2 = Math.sqrt( x0 );\r\n\r\n\t\treturn this.set(\r\n\t\t\tr1 * Math.sin( theta1 ),\r\n\t\t\tr1 * Math.cos( theta1 ),\r\n\t\t\tr2 * Math.sin( theta2 ),\r\n\t\t\tr2 * Math.cos( theta2 ),\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tequals( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis._x = attribute.getX( index );\r\n\t\tthis._y = attribute.getY( index );\r\n\t\tthis._z = attribute.getZ( index );\r\n\t\tthis._w = attribute.getW( index );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\treturn this.toArray();\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._w;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Quaternion };\r\n", "import * as MathUtils from './MathUtils.js';\r\nimport { Quaternion } from './Quaternion.js';\r\n\r\nclass Vector3 {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0 ) {\r\n\r\n\t\tVector3.prototype.isVector3 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t}\r\n\r\n\tset( x, y, z ) {\r\n\r\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyEuler( euler ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t}\r\n\r\n\tapplyAxisAngle( axis, angle ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\t// quaternion q is assumed to have unit length\r\n\r\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\r\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// t = 2 * cross( q.xyz, v );\r\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\r\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\r\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\r\n\r\n\t\t// v + q.w * t + cross( q.xyz, t );\r\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\r\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\r\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t}\r\n\r\n\tunproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t}\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\t\tthis.z = Math.trunc( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t}\r\n\r\n\t// TODO lengthSquared?\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcross( v ) {\r\n\r\n\t\treturn this.crossVectors( this, v );\r\n\r\n\t}\r\n\r\n\tcrossVectors( a, b ) {\r\n\r\n\t\tconst ax = a.x, ay = a.y, az = a.z;\r\n\t\tconst bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tprojectOnVector( v ) {\r\n\r\n\t\tconst denominator = v.lengthSq();\r\n\r\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\r\n\r\n\t\tconst scalar = v.dot( this ) / denominator;\r\n\r\n\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t}\r\n\r\n\tprojectOnPlane( planeNormal ) {\r\n\r\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\treturn this.sub( _vector );\r\n\r\n\t}\r\n\r\n\treflect( normal ) {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t}\r\n\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t}\r\n\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t}\r\n\r\n\tsetFromSpherical( s ) {\r\n\r\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t}\r\n\r\n\tsetFromSphericalCoords( radius, phi, theta ) {\r\n\r\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCylindrical( c ) {\r\n\r\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t}\r\n\r\n\tsetFromCylindricalCoords( radius, theta, y ) {\r\n\r\n\t\tthis.x = radius * Math.sin( theta );\r\n\t\tthis.y = y;\r\n\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixScale( m ) {\r\n\r\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixColumn( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t}\r\n\r\n\tsetFromMatrix3Column( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 3 );\r\n\r\n\t}\r\n\r\n\tsetFromEuler( e ) {\r\n\r\n\t\tthis.x = e._x;\r\n\t\tthis.y = e._y;\r\n\t\tthis.z = e._z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromColor( c ) {\r\n\r\n\t\tthis.x = c.r;\r\n\t\tthis.y = c.g;\r\n\t\tthis.z = c.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandomDirection() {\r\n\r\n\t\t// https://mathworld.wolfram.com/SpherePointPicking.html\r\n\r\n\t\tconst theta = Math.random() * Math.PI * 2;\r\n\t\tconst u = Math.random() * 2 - 1;\r\n\t\tconst c = Math.sqrt( 1 - u * u );\r\n\r\n\t\tthis.x = c * Math.cos( theta );\r\n\t\tthis.y = u;\r\n\t\tthis.z = c * Math.sin( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nexport { Vector3 };\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\nclass Box3 {\r\n\r\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\r\n\r\n\t\tthis.isBox3 = true;\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tset( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromArray( array ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\r\n\r\n\t\t\tthis.expandByPoint( _vector.fromArray( array, i ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromBufferAttribute( attribute ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( _vector.fromBufferAttribute( attribute, i ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCenterAndSize( center, size ) {\r\n\r\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromObject( object, precise = false ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\treturn this.expandByObject( object, precise );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t}\r\n\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tgetSize( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByVector( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByScalar( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByObject( object, precise = false ) {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\tconst geometry = object.geometry;\r\n\r\n\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\r\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\r\n\r\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\r\n\r\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( object.isMesh === true ) {\r\n\r\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_vector.applyMatrix4( object.matrixWorld );\r\n\t\t\t\t\tthis.expandByPoint( _vector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( object.boundingBox !== undefined ) {\r\n\r\n\t\t\t\t\t// object-level bounding box\r\n\r\n\t\t\t\t\tif ( object.boundingBox === null ) {\r\n\r\n\t\t\t\t\t\tobject.computeBoundingBox();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_box.copy( object.boundingBox );\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// geometry-level bounding box\r\n\r\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_box.copy( geometry.boundingBox );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tthis.union( _box );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst children = object.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.expandByObject( children[ i ], precise );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\r\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\r\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\tcontainsBox( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\tgetParameter( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\r\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\r\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\tthis.clampPoint( sphere.center, _vector );\r\n\r\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tlet min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t}\r\n\r\n\tintersectsTriangle( triangle ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// compute box center and extents\r\n\t\tthis.getCenter( _center );\r\n\t\t_extents.subVectors( this.max, _center );\r\n\r\n\t\t// translate triangle to aabb origin\r\n\t\t_v0.subVectors( triangle.a, _center );\r\n\t\t_v1.subVectors( triangle.b, _center );\r\n\t\t_v2.subVectors( triangle.c, _center );\r\n\r\n\t\t// compute edge vectors for triangle\r\n\t\t_f0.subVectors( _v1, _v0 );\r\n\t\t_f1.subVectors( _v2, _v1 );\r\n\t\t_f2.subVectors( _v0, _v2 );\r\n\r\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\tlet axes = [\r\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\r\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\r\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\r\n\t\t];\r\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// test 3 face normals from the aabb\r\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// finally testing the face normal of the triangle\r\n\t\t// use already existing triangle edge vectors here\r\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\r\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\r\n\r\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.clampPoint( point, _vector ).distanceTo( point );\r\n\r\n\t}\r\n\r\n\tgetBoundingSphere( target ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\ttarget.makeEmpty();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tintersect( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\t// transform of empty box is an empty box.\r\n\t\tif ( this.isEmpty() ) return this;\r\n\r\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\tthis.setFromPoints( _points );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _points = [\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3()\r\n];\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nconst _box = /*@__PURE__*/ new Box3();\r\n\r\n// triangle centered vertices\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\n// triangle edge vectors\r\n\r\nconst _f0 = /*@__PURE__*/ new Vector3();\r\nconst _f1 = /*@__PURE__*/ new Vector3();\r\nconst _f2 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _center = /*@__PURE__*/ new Vector3();\r\nconst _extents = /*@__PURE__*/ new Vector3();\r\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\r\nconst _testAxis = /*@__PURE__*/ new Vector3();\r\n\r\nfunction satForAxes( axes, v0, v1, v2, extents ) {\r\n\r\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t_testAxis.fromArray( axes, i );\r\n\t\t// project the aabb onto the separating axis\r\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\r\n\t\t// project all 3 vertices of the triangle onto the separating axis\r\n\t\tconst p0 = v0.dot( _testAxis );\r\n\t\tconst p1 = v1.dot( _testAxis );\r\n\t\tconst p2 = v2.dot( _testAxis );\r\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t// the axis is separating and we can exit\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nexport { Box3 };\r\n", "import { Box3 } from './Box3.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\nclass Sphere {\r\n\r\n\tconstructor( center = new Vector3(), radius = - 1 ) {\r\n\r\n\t\tthis.isSphere = true;\r\n\r\n\t\tthis.center = center;\r\n\t\tthis.radius = radius;\r\n\r\n\t}\r\n\r\n\tset( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points, optionalCenter ) {\r\n\r\n\t\tconst center = this.center;\r\n\r\n\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_box.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t}\r\n\r\n\t\tlet maxRadiusSq = 0;\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\treturn ( this.radius < 0 );\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.center.set( 0, 0, 0 );\r\n\t\tthis.radius = - 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tconst radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\ttarget.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetBoundingBox( target ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t// Empty sphere produces empty bounding box\r\n\t\t\ttarget.makeEmpty();\r\n\t\t\treturn target;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.set( this.center, this.center );\r\n\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\tthis.center.copy( point );\r\n\r\n\t\t\tthis.radius = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t_v1.subVectors( point, this.center );\r\n\r\n\t\tconst lengthSq = _v1.lengthSq();\r\n\r\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\t// calculate the minimal sphere\r\n\r\n\t\t\tconst length = Math.sqrt( lengthSq );\r\n\r\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\r\n\r\n\t\t\tthis.center.addScaledVector( _v1, delta / length );\r\n\r\n\t\t\tthis.radius += delta;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( sphere ) {\r\n\r\n\t\tif ( sphere.isEmpty() ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\tthis.copy( sphere );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.center.equals( sphere.center ) === true ) {\r\n\r\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_v2.subVectors( sphere.center, this.center ).setLength( sphere.radius );\r\n\r\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).add( _v2 ) );\r\n\r\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).sub( _v2 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Sphere };\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _segCenter = /*@__PURE__*/ new Vector3();\r\nconst _segDir = /*@__PURE__*/ new Vector3();\r\nconst _diff = /*@__PURE__*/ new Vector3();\r\n\r\nconst _edge1 = /*@__PURE__*/ new Vector3();\r\nconst _edge2 = /*@__PURE__*/ new Vector3();\r\nconst _normal = /*@__PURE__*/ new Vector3();\r\n\r\nclass Ray {\r\n\r\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\r\n\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction;\r\n\r\n\t}\r\n\r\n\tset( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tat( t, target ) {\r\n\r\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\r\n\r\n\t}\r\n\r\n\tlookAt( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trecast( t ) {\r\n\r\n\t\tthis.origin.copy( this.at( t, _vector ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( point, target ) {\r\n\r\n\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\tconst directionDistance = target.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t}\r\n\r\n\tdistanceSqToPoint( point ) {\r\n\r\n\t\tconst directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t// point behind the ray\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t}\r\n\r\n\t\t_vector.copy( this.origin ).addScaledVector( this.direction, directionDistance );\r\n\r\n\t\treturn _vector.distanceToSquared( point );\r\n\r\n\t}\r\n\r\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t// It returns the min distance between the ray and the segment\r\n\t\t// defined by v0 and v1\r\n\t\t// It can also set two optional targets :\r\n\t\t// - The closest point on the ray\r\n\t\t// - The closest point on the segment\r\n\r\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t_diff.copy( this.origin ).sub( _segCenter );\r\n\r\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\tconst a01 = - this.direction.dot( _segDir );\r\n\t\tconst b0 = _diff.dot( this.direction );\r\n\t\tconst b1 = - _diff.dot( _segDir );\r\n\t\tconst c = _diff.lengthSq();\r\n\t\tconst det = Math.abs( 1 - a01 * a01 );\r\n\t\tlet s0, s1, sqrDist, extDet;\r\n\r\n\t\tif ( det > 0 ) {\r\n\r\n\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\textDet = segExtent * det;\r\n\r\n\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\tconst invDet = 1 / det;\r\n\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn sqrDist;\r\n\r\n\t}\r\n\r\n\tintersectSphere( sphere, target ) {\r\n\r\n\t\t_vector.subVectors( sphere.center, this.origin );\r\n\t\tconst tca = _vector.dot( this.direction );\r\n\t\tconst d2 = _vector.dot( _vector ) - tca * tca;\r\n\t\tconst radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\tconst thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\tconst t0 = tca - thc;\r\n\r\n\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\tconst t1 = tca + thc;\r\n\r\n\t\t// test to see if t1 is behind the ray - if so, return null\r\n\t\tif ( t1 < 0 ) return null;\r\n\r\n\t\t// test to see if t0 is behind the ray:\r\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\tif ( t0 < 0 ) return this.at( t1, target );\r\n\r\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\treturn this.at( t0, target );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\tdistanceToPlane( plane ) {\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t : null;\r\n\r\n\t}\r\n\r\n\tintersectPlane( plane, target ) {\r\n\r\n\t\tconst t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, target );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tintersectBox( box, target ) {\r\n\r\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tconst invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tconst origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn this.intersectBox( box, _vector ) !== null;\r\n\r\n\t}\r\n\r\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t_edge1.subVectors( b, a );\r\n\t\t_edge2.subVectors( c, a );\r\n\t\t_normal.crossVectors( _edge1, _edge2 );\r\n\r\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\tlet DdN = this.direction.dot( _normal );\r\n\t\tlet sign;\r\n\r\n\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\tsign = 1;\r\n\r\n\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\tsign = - 1;\r\n\t\t\tDdN = - DdN;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t_diff.subVectors( this.origin, a );\r\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\r\n\r\n\t\t// b1 < 0, no intersection\r\n\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\r\n\r\n\t\t// b2 < 0, no intersection\r\n\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// b1+b2 > 1, no intersection\r\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Line intersects triangle, check if ray does.\r\n\t\tconst QdN = - sign * _diff.dot( _normal );\r\n\r\n\t\t// t < 0, no intersection\r\n\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Ray intersects triangle.\r\n\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix4 ) {\r\n\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Ray };\r\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nclass Matrix4 {\r\n\r\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tMatrix4.prototype.isMatrix4 = true;\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyPosition( m ) {\r\n\r\n\t\tconst te = this.elements, me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrix3( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractRotation( m ) {\r\n\r\n\t\t// this method does not support reflection matrices\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tconst scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationFromEuler( euler ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\r\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\r\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\r\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// bottom row\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// last column\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationFromQuaternion( q ) {\r\n\r\n\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t}\r\n\r\n\tlookAt( eye, target, up ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\t_z.subVectors( eye, target );\r\n\r\n\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t_z.z = 1;\r\n\r\n\t\t}\r\n\r\n\t\t_z.normalize();\r\n\t\t_x.crossVectors( up, _z );\r\n\r\n\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t// up and z are parallel\r\n\r\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t}\r\n\r\n\t\t_x.normalize();\r\n\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n\ttranspose() {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tlet tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetPosition( x, y, z ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\tte[ 12 ] = x.x;\r\n\t\t\tte[ 13 ] = x.y;\r\n\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tte[ 12 ] = x;\r\n\t\t\tte[ 13 ] = y;\r\n\t\t\tte[ 14 ] = z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\r\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\r\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\r\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tscale( v ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMaxScaleOnAxis() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t}\r\n\r\n\tmakeTranslation( x, y, z ) {\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x.x,\r\n\t\t\t\t0, 1, 0, x.y,\r\n\t\t\t\t0, 0, 1, x.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationX( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s, c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationY( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationZ( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts, c, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationAxis( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tconst c = Math.cos( angle );\r\n\t\tconst s = Math.sin( angle );\r\n\t\tconst t = 1 - c;\r\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\r\n\t\tconst tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeScale( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, yx, zx, 0,\r\n\t\t\txy, 1, zy, 0,\r\n\t\t\txz, yz, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = position.x;\r\n\t\tte[ 13 ] = position.y;\r\n\t\tte[ 14 ] = position.z;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdecompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tlet sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\tconst sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\tconst sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t// if determine is negative, we need to invert one scale\r\n\t\tconst det = this.determinant();\r\n\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\tposition.x = te[ 12 ];\r\n\t\tposition.y = te[ 13 ];\r\n\t\tposition.z = te[ 14 ];\r\n\r\n\t\t// scale the rotation part\r\n\t\t_m1.copy( this );\r\n\r\n\t\tconst invSX = 1 / sx;\r\n\t\tconst invSY = 1 / sy;\r\n\t\tconst invSZ = 1 / sz;\r\n\r\n\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tscale.x = sx;\r\n\t\tscale.y = sy;\r\n\t\tscale.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = 2 * near / ( right - left );\r\n\t\tconst y = 2 * near / ( top - bottom );\r\n\r\n\t\tconst a = ( right + left ) / ( right - left );\r\n\t\tconst b = ( top + bottom ) / ( top - bottom );\r\n\r\n\t\tlet c, d;\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tc = - ( far + near ) / ( far - near );\r\n\t\t\td = ( - 2 * far * near ) / ( far - near );\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tc = - far / ( far - near );\r\n\t\t\td = ( - far * near ) / ( far - near );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst w = 1.0 / ( right - left );\r\n\t\tconst h = 1.0 / ( top - bottom );\r\n\t\tconst p = 1.0 / ( far - near );\r\n\r\n\t\tconst x = ( right + left ) * w;\r\n\t\tconst y = ( top + bottom ) * h;\r\n\r\n\t\tlet z, zInv;\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tz = ( far + near ) * p;\r\n\t\t\tzInv = - 2 * p;\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tz = near * p;\r\n\t\t\tzInv = - 1 * p;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\r\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\r\nconst _x = /*@__PURE__*/ new Vector3();\r\nconst _y = /*@__PURE__*/ new Vector3();\r\nconst _z = /*@__PURE__*/ new Vector3();\r\n\r\nexport { Matrix4 };\r\n", "import { Quaternion } from './Quaternion.js';\r\nimport { Matrix4 } from './Matrix4.js';\r\nimport { clamp } from './MathUtils.js';\r\n\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nclass Euler {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\r\n\r\n\t\tthis.isEuler = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t}\r\n\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget order() {\r\n\r\n\t\treturn this._order;\r\n\r\n\t}\r\n\r\n\tset order( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tset( x, y, z, order = this._order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t}\r\n\r\n\tcopy( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements;\r\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update === true ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromQuaternion( q, order, update ) {\r\n\r\n\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v, order = this._order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order );\r\n\r\n\t}\r\n\r\n\treorder( newOrder ) {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t_quaternion.setFromEuler( this );\r\n\r\n\t\treturn this.setFromQuaternion( _quaternion, newOrder );\r\n\r\n\t}\r\n\r\n\tequals( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t}\r\n\r\n\tfromArray( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._order;\r\n\r\n\t}\r\n\r\n}\r\n\r\nEuler.DEFAULT_ORDER = 'XYZ';\r\n\r\nexport { Euler };\r\n", "class Layers {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.mask = 1 | 0;\r\n\r\n\t}\r\n\r\n\tset( channel ) {\r\n\r\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\r\n\r\n\t}\r\n\r\n\tenable( channel ) {\r\n\r\n\t\tthis.mask |= 1 << channel | 0;\r\n\r\n\t}\r\n\r\n\tenableAll() {\r\n\r\n\t\tthis.mask = 0xffffffff | 0;\r\n\r\n\t}\r\n\r\n\ttoggle( channel ) {\r\n\r\n\t\tthis.mask ^= 1 << channel | 0;\r\n\r\n\t}\r\n\r\n\tdisable( channel ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\r\n\r\n\t}\r\n\r\n\tdisableAll() {\r\n\r\n\t\tthis.mask = 0;\r\n\r\n\t}\r\n\r\n\ttest( layers ) {\r\n\r\n\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t}\r\n\r\n\tisEnabled( channel ) {\r\n\r\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Layers };\r\n", "import { Quaternion } from '../math/Quaternion.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { EventDispatcher } from './EventDispatcher.js';\r\nimport { Euler } from '../math/Euler.js';\r\nimport { Layers } from './Layers.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet _object3DId = 0;\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _q1 = /*@__PURE__*/ new Quaternion();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _target = /*@__PURE__*/ new Vector3();\r\n\r\nconst _position = /*@__PURE__*/ new Vector3();\r\nconst _scale = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\r\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\r\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\r\n\r\nconst _addedEvent = { type: 'added' };\r\nconst _removedEvent = { type: 'removed' };\r\n\r\nconst _childaddedEvent = { type: 'childadded', child: null };\r\nconst _childremovedEvent = { type: 'childremoved', child: null };\r\n\r\nclass Object3D extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isObject3D = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\r\n\r\n\t\tconst position = new Vector3();\r\n\t\tconst rotation = new Euler();\r\n\t\tconst quaternion = new Quaternion();\r\n\t\tconst scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation._onChange( onRotationChange );\r\n\t\tquaternion._onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\r\n\r\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.layers = new Layers();\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\tthis.animations = [];\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\r\n\r\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\r\n\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tthis.matrix.premultiply( matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRotationFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t}\r\n\r\n\tsetRotationFromEuler( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t}\r\n\r\n\tsetRotationFromMatrix( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t}\r\n\r\n\tsetRotationFromQuaternion( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t}\r\n\r\n\trotateOnAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.multiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateOnWorldAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in world space\r\n\t\t// axis is assumed to be normalized\r\n\t\t// method assumes no rotated parent\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.premultiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateX( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _xAxis, angle );\r\n\r\n\t}\r\n\r\n\trotateY( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _yAxis, angle );\r\n\r\n\t}\r\n\r\n\trotateZ( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _zAxis, angle );\r\n\r\n\t}\r\n\r\n\ttranslateOnAxis( axis, distance ) {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_v1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\tthis.position.add( _v1.multiplyScalar( distance ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslateX( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _xAxis, distance );\r\n\r\n\t}\r\n\r\n\ttranslateY( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _yAxis, distance );\r\n\r\n\t}\r\n\r\n\ttranslateZ( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _zAxis, distance );\r\n\r\n\t}\r\n\r\n\tlocalToWorld( vector ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tworldToLocal( vector ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn vector.applyMatrix4( _m1.copy( this.matrixWorld ).invert() );\r\n\r\n\t}\r\n\r\n\tlookAt( x, y, z ) {\r\n\r\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t_target.copy( x );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_target.set( x, y, z );\r\n\r\n\t\t}\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_position.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t_m1.lookAt( _position, _target, this.up );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_m1.lookAt( _target, _position, this.up );\r\n\r\n\t\t}\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tif ( parent ) {\r\n\r\n\t\t\t_m1.extractRotation( parent.matrixWorld );\r\n\t\t\t_q1.setFromRotationMatrix( _m1 );\r\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tadd( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object && object.isObject3D ) {\r\n\r\n\t\t\tobject.removeFromParent();\r\n\t\t\tobject.parent = this;\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t\t_childaddedEvent.child = object;\r\n\t\t\tthis.dispatchEvent( _childaddedEvent );\r\n\t\t\t_childaddedEvent.child = null;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremove( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t\t_childremovedEvent.child = object;\r\n\t\t\tthis.dispatchEvent( _childremovedEvent );\r\n\t\t\t_childremovedEvent.child = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremoveFromParent() {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tparent.remove( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\treturn this.remove( ... this.children );\r\n\r\n\t}\r\n\r\n\tattach( object ) {\r\n\r\n\t\t// adds object as a child of this, while maintaining the object's world transform\r\n\r\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_m1.copy( this.matrixWorld ).invert();\r\n\r\n\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\tobject.parent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_m1.multiply( object.parent.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tobject.applyMatrix4( _m1 );\r\n\r\n\t\tobject.removeFromParent();\r\n\t\tobject.parent = this;\r\n\t\tthis.children.push( object );\r\n\r\n\t\tobject.updateWorldMatrix( false, true );\r\n\r\n\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t_childaddedEvent.child = object;\r\n\t\tthis.dispatchEvent( _childaddedEvent );\r\n\t\t_childaddedEvent.child = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetObjectById( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t}\r\n\r\n\tgetObjectByName( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t}\r\n\r\n\tgetObjectByProperty( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst child = this.children[ i ];\r\n\t\t\tconst object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tgetObjectsByProperty( name, value, result = [] ) {\r\n\r\n\t\tif ( this[ name ] === value ) result.push( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgetWorldPosition( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tgetWorldQuaternion( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, target, _scale );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetWorldScale( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, _quaternion, target );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetWorldDirection( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tconst e = this.matrixWorld.elements;\r\n\r\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t}\r\n\r\n\traycast( /* raycaster, intersects */ ) {}\r\n\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverseVisible( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverseAncestors( callback ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMatrix() {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\r\n\r\n\t\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// make sure descendants are updated if required\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst child = children[ i ];\r\n\r\n\t\t\tchild.updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateWorldMatrix( updateParents, updateChildren ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// make sure descendants are updated\r\n\r\n\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\tconst children = this.children;\r\n\r\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst child = children[ i ];\r\n\r\n\t\t\t\tchild.updateWorldMatrix( false, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\t// meta is a string when called from JSON.stringify\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tconst output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tshapes: {},\r\n\t\t\t\tskeletons: {},\r\n\t\t\t\tanimations: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tconst object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\r\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\r\n\r\n\t\tobject.layers = this.layers.mask;\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\t\tobject.up = this.up.toArray();\r\n\r\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\r\n\r\n\t\t// object specific properties\r\n\r\n\t\tif ( this.isInstancedMesh ) {\r\n\r\n\t\t\tobject.type = 'InstancedMesh';\r\n\t\t\tobject.count = this.count;\r\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\r\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isBatchedMesh ) {\r\n\r\n\t\t\tobject.type = 'BatchedMesh';\r\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\r\n\t\t\tobject.sortObjects = this.sortObjects;\r\n\r\n\t\t\tobject.drawRanges = this._drawRanges;\r\n\t\t\tobject.reservedRanges = this._reservedRanges;\r\n\r\n\t\t\tobject.visibility = this._visibility;\r\n\t\t\tobject.active = this._active;\r\n\t\t\tobject.bounds = this._bounds.map( bound => ( {\r\n\t\t\t\tboxInitialized: bound.boxInitialized,\r\n\t\t\t\tboxMin: bound.box.min.toArray(),\r\n\t\t\t\tboxMax: bound.box.max.toArray(),\r\n\r\n\t\t\t\tsphereInitialized: bound.sphereInitialized,\r\n\t\t\t\tsphereRadius: bound.sphere.radius,\r\n\t\t\t\tsphereCenter: bound.sphere.center.toArray()\r\n\t\t\t} ) );\r\n\r\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\r\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\r\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\r\n\r\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\r\n\t\t\tobject.geometryCount = this._geometryCount;\r\n\r\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\r\n\r\n\t\t\tif ( this._colorsTexture !== null ) object.colorsTexture = this._colorsTexture.toJSON( meta );\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tobject.boundingSphere = {\r\n\t\t\t\t\tcenter: object.boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: object.boundingSphere.radius\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tobject.boundingBox = {\r\n\t\t\t\t\tmin: object.boundingBox.min.toArray(),\r\n\t\t\t\t\tmax: object.boundingBox.max.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn element.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isScene ) {\r\n\r\n\t\t\tif ( this.background ) {\r\n\r\n\t\t\t\tif ( this.background.isColor ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON();\r\n\r\n\t\t\t\t} else if ( this.background.isTexture ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\r\n\r\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\tconst parameters = this.geometry.parameters;\r\n\r\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\tconst shapes = parameters.shapes;\r\n\r\n\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isSkinnedMesh ) {\r\n\r\n\t\t\tobject.bindMode = this.bindMode;\r\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\r\n\r\n\t\t\tif ( this.skeleton !== undefined ) {\r\n\r\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\r\n\r\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\tconst uuids = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.animations.length > 0 ) {\r\n\r\n\t\t\tobject.animations = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\r\n\r\n\t\t\t\tconst animation = this.animations[ i ];\r\n\r\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst geometries = extractFromCache( meta.geometries );\r\n\t\t\tconst materials = extractFromCache( meta.materials );\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst shapes = extractFromCache( meta.shapes );\r\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\r\n\t\t\tconst animations = extractFromCache( meta.animations );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\r\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\r\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\r\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive = true ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.rotation.order = source.rotation.order;\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.layers.mask = source.layers.mask;\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.animations = source.animations.slice();\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\r\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\r\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\r\n\r\nexport { Object3D };\r\n", "import { Vector3 } from './Vector3.js';\r\nimport { Vector4 } from './Vector4.js';\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vab = /*@__PURE__*/ new Vector3();\r\nconst _vac = /*@__PURE__*/ new Vector3();\r\nconst _vbc = /*@__PURE__*/ new Vector3();\r\nconst _vap = /*@__PURE__*/ new Vector3();\r\nconst _vbp = /*@__PURE__*/ new Vector3();\r\nconst _vcp = /*@__PURE__*/ new Vector3();\r\n\r\nconst _v40 = /*@__PURE__*/ new Vector4();\r\nconst _v41 = /*@__PURE__*/ new Vector4();\r\nconst _v42 = /*@__PURE__*/ new Vector4();\r\n\r\nclass Triangle {\r\n\r\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t}\r\n\r\n\tstatic getNormal( a, b, c, target ) {\r\n\r\n\t\ttarget.subVectors( c, b );\r\n\t\t_v0.subVectors( a, b );\r\n\t\ttarget.cross( _v0 );\r\n\r\n\t\tconst targetLengthSq = target.lengthSq();\r\n\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t}\r\n\r\n\t// static/instance method to calculate barycentric coordinates\r\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\tstatic getBarycoord( point, a, b, c, target ) {\r\n\r\n\t\t_v0.subVectors( c, a );\r\n\t\t_v1.subVectors( b, a );\r\n\t\t_v2.subVectors( point, a );\r\n\r\n\t\tconst dot00 = _v0.dot( _v0 );\r\n\t\tconst dot01 = _v0.dot( _v1 );\r\n\t\tconst dot02 = _v0.dot( _v2 );\r\n\t\tconst dot11 = _v1.dot( _v1 );\r\n\t\tconst dot12 = _v1.dot( _v2 );\r\n\r\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\ttarget.set( 0, 0, 0 );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst invDenom = 1 / denom;\r\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t}\r\n\r\n\tstatic containsPoint( point, a, b, c ) {\r\n\r\n\t\t// if the triangle is degenerate then we can't contain a point\r\n\t\tif ( this.getBarycoord( point, a, b, c, _v3 ) === null ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t}\r\n\r\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\r\n\r\n\t\tif ( this.getBarycoord( point, p1, p2, p3, _v3 ) === null ) {\r\n\r\n\t\t\ttarget.x = 0;\r\n\t\t\ttarget.y = 0;\r\n\t\t\tif ( 'z' in target ) target.z = 0;\r\n\t\t\tif ( 'w' in target ) target.w = 0;\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.setScalar( 0 );\r\n\t\ttarget.addScaledVector( v1, _v3.x );\r\n\t\ttarget.addScaledVector( v2, _v3.y );\r\n\t\ttarget.addScaledVector( v3, _v3.z );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tstatic getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {\r\n\r\n\t\t_v40.setScalar( 0 );\r\n\t\t_v41.setScalar( 0 );\r\n\t\t_v42.setScalar( 0 );\r\n\r\n\t\t_v40.fromBufferAttribute( attr, i1 );\r\n\t\t_v41.fromBufferAttribute( attr, i2 );\r\n\t\t_v42.fromBufferAttribute( attr, i3 );\r\n\r\n\t\ttarget.setScalar( 0 );\r\n\t\ttarget.addScaledVector( _v40, barycoord.x );\r\n\t\ttarget.addScaledVector( _v41, barycoord.y );\r\n\t\ttarget.addScaledVector( _v42, barycoord.z );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tstatic isFrontFacing( a, b, c, direction ) {\r\n\r\n\t\t_v0.subVectors( c, b );\r\n\t\t_v1.subVectors( a, b );\r\n\r\n\t\t// strictly front facing\r\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t}\r\n\r\n\tset( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\r\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\r\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetArea() {\r\n\r\n\t\t_v0.subVectors( this.c, this.b );\r\n\t\t_v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\r\n\r\n\t}\r\n\r\n\tgetMidpoint( target ) {\r\n\r\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t}\r\n\r\n\tgetNormal( target ) {\r\n\r\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetPlane( target ) {\r\n\r\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tgetBarycoord( point, target ) {\r\n\r\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetInterpolation( point, v1, v2, v3, target ) {\r\n\r\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tisFrontFacing( direction ) {\r\n\r\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsTriangle( this );\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( p, target ) {\r\n\r\n\t\tconst a = this.a, b = this.b, c = this.c;\r\n\t\tlet v, w;\r\n\r\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t_vab.subVectors( b, a );\r\n\t\t_vac.subVectors( c, a );\r\n\t\t_vap.subVectors( p, a );\r\n\t\tconst d1 = _vab.dot( _vap );\r\n\t\tconst d2 = _vac.dot( _vap );\r\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\treturn target.copy( a );\r\n\r\n\t\t}\r\n\r\n\t\t_vbp.subVectors( p, b );\r\n\t\tconst d3 = _vab.dot( _vbp );\r\n\t\tconst d4 = _vac.dot( _vbp );\r\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\treturn target.copy( b );\r\n\r\n\t\t}\r\n\r\n\t\tconst vc = d1 * d4 - d3 * d2;\r\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t}\r\n\r\n\t\t_vcp.subVectors( p, c );\r\n\t\tconst d5 = _vab.dot( _vcp );\r\n\t\tconst d6 = _vac.dot( _vcp );\r\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\treturn target.copy( c );\r\n\r\n\t\t}\r\n\r\n\t\tconst vb = d5 * d2 - d1 * d6;\r\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t}\r\n\r\n\t\tconst va = d3 * d6 - d5 * d4;\r\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t_vbc.subVectors( c, b );\r\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t}\r\n\r\n\t\t// face region\r\n\t\tconst denom = 1 / ( va + vb + vc );\r\n\t\t// u = va * denom\r\n\t\tv = vb * denom;\r\n\t\tw = vc * denom;\r\n\r\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t}\r\n\r\n\tequals( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Triangle };\r\n", "import { clamp, euclideanModulo, lerp } from './MathUtils.js';\r\nimport { ColorManagement, SRGBToLinear, LinearToSRGB } from './ColorManagement.js';\r\nimport { SRGBColorSpace } from '../constants.js';\r\n\r\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\nconst _hslA = { h: 0, s: 0, l: 0 };\r\nconst _hslB = { h: 0, s: 0, l: 0 };\r\n\r\nfunction hue2rgb( p, q, t ) {\r\n\r\n\tif ( t < 0 ) t += 1;\r\n\tif ( t > 1 ) t -= 1;\r\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\tif ( t < 1 / 2 ) return q;\r\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\treturn p;\r\n\r\n}\r\n\r\nclass Color {\r\n\r\n\tconstructor( r, g, b ) {\r\n\r\n\t\tthis.isColor = true;\r\n\r\n\t\tthis.r = 1;\r\n\t\tthis.g = 1;\r\n\t\tthis.b = 1;\r\n\r\n\t\treturn this.set( r, g, b );\r\n\r\n\t}\r\n\r\n\tset( r, g, b ) {\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\r\n\t\t\tconst value = r;\r\n\r\n\t\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\t\tthis.copy( value );\r\n\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\t\tthis.setHex( value );\r\n\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\t\tthis.setStyle( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.setRGB( r, g, b );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\th = euclideanModulo( h, 1 );\r\n\t\ts = clamp( s, 0, 1 );\r\n\t\tl = clamp( l, 0, 1 );\r\n\r\n\t\tif ( s === 0 ) {\r\n\r\n\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\tconst q = ( 2 * l ) - p;\r\n\r\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t}\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tlet m;\r\n\r\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tlet color;\r\n\t\t\tconst name = m[ 1 ];\r\n\t\t\tconst components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL(\r\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\r\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\r\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tconst hex = m[ 1 ];\r\n\t\t\tconst size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\r\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\r\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\r\n\t\t\t\t\tcolorSpace\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( style && style.length > 0 ) {\r\n\r\n\t\t\treturn this.setColorName( style, colorSpace );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\t// color keywords\r\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\r\n\r\n\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t// red\r\n\t\t\tthis.setHex( hex, colorSpace );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// unknown color\r\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t}\r\n\r\n\tcopy( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopySRGBToLinear( color ) {\r\n\r\n\t\tthis.r = SRGBToLinear( color.r );\r\n\t\tthis.g = SRGBToLinear( color.g );\r\n\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyLinearToSRGB( color ) {\r\n\r\n\t\tthis.r = LinearToSRGB( color.r );\r\n\t\tthis.g = LinearToSRGB( color.g );\r\n\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconvertSRGBToLinear() {\r\n\r\n\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconvertLinearToSRGB() {\r\n\r\n\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetHex( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\r\n\r\n\t}\r\n\r\n\tgetHexString( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\r\n\r\n\t}\r\n\r\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\r\n\r\n\t\tconst max = Math.max( r, g, b );\r\n\t\tconst min = Math.min( r, g, b );\r\n\r\n\t\tlet hue, saturation;\r\n\t\tconst lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.h = hue;\r\n\t\ttarget.s = saturation;\r\n\t\ttarget.l = lightness;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\ttarget.r = _color.r;\r\n\t\ttarget.g = _color.g;\r\n\t\ttarget.b = _color.b;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetStyle( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\r\n\r\n\t\tif ( colorSpace !== SRGBColorSpace ) {\r\n\r\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\r\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\r\n\r\n\t\t}\r\n\r\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\r\n\r\n\t}\r\n\r\n\toffsetHSL( h, s, l ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\r\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\r\n\r\n\t}\r\n\r\n\tadd( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddColors( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( color ) {\r\n\r\n\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerp( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpColors( color1, color2, alpha ) {\r\n\r\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\r\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\r\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpHSL( color, alpha ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\t\tcolor.getHSL( _hslB );\r\n\r\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\r\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\r\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\r\n\r\n\t\tthis.setHSL( h, s, l );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v ) {\r\n\r\n\t\tthis.r = v.x;\r\n\t\tthis.g = v.y;\r\n\t\tthis.b = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst r = this.r, g = this.g, b = this.b;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\r\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\r\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.r = attribute.getX( index );\r\n\t\tthis.g = attribute.getY( index );\r\n\t\tthis.b = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\treturn this.getHex();\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.r;\r\n\t\tyield this.g;\r\n\t\tyield this.b;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _color = /*@__PURE__*/ new Color();\r\n\r\nColor.NAMES = _colorKeywords;\r\n\r\nexport { Color };\r\n", "import { Color } from '../math/Color.js';\r\nimport { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport { FrontSide, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet _materialId = 0;\r\n\r\nclass Material extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMaterial = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\r\n\t\tthis.blending = NormalBlending;\r\n\t\tthis.side = FrontSide;\r\n\t\tthis.vertexColors = false;\r\n\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\t\tthis.alphaHash = false;\r\n\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\t\tthis.blendColor = new Color( 0, 0, 0 );\r\n\t\tthis.blendAlpha = 0;\r\n\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\tthis.stencilWriteMask = 0xff;\r\n\t\tthis.stencilFunc = AlwaysStencilFunc;\r\n\t\tthis.stencilRef = 0;\r\n\t\tthis.stencilFuncMask = 0xff;\r\n\t\tthis.stencilFail = KeepStencilOp;\r\n\t\tthis.stencilZFail = KeepStencilOp;\r\n\t\tthis.stencilZPass = KeepStencilOp;\r\n\t\tthis.stencilWrite = false;\r\n\r\n\t\tthis.clippingPlanes = null;\r\n\t\tthis.clipIntersection = false;\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\tthis.dithering = false;\r\n\r\n\t\tthis.alphaToCoverage = false;\r\n\t\tthis.premultipliedAlpha = false;\r\n\t\tthis.forceSinglePass = false;\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.toneMapped = true;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis._alphaTest = 0;\r\n\r\n\t}\r\n\r\n\tget alphaTest() {\r\n\r\n\t\treturn this._alphaTest;\r\n\r\n\t}\r\n\r\n\tset alphaTest( value ) {\r\n\r\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._alphaTest = value;\r\n\r\n\t}\r\n\r\n\tonBuild( /* shaderobject, renderer */ ) {}\r\n\r\n\t// onBeforeRender and onBeforeCompile only supported in WebGLRenderer\r\n\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\r\n\r\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\r\n\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.onBeforeCompile.toString();\r\n\r\n\t}\r\n\r\n\tsetValues( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( const key in values ) {\r\n\r\n\t\t\tconst newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\r\n\r\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\r\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\r\n\r\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\r\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\r\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\r\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\r\n\r\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\r\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\r\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\r\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\r\n\r\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.dispersion !== undefined ) data.dispersion = this.dispersion;\r\n\r\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\r\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\r\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\r\n\r\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\r\n\r\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\r\n\r\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\r\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\r\n\r\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\r\n\r\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\r\n\r\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\r\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();\r\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\r\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\r\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\r\n\r\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\r\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\r\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\r\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\r\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\r\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = true;\r\n\r\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\r\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\r\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\r\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\r\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\r\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\r\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\r\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\r\n\r\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\r\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\r\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\r\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\r\n\r\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\r\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\r\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\r\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\r\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\r\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\r\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\r\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\r\n\r\n\t\t// rotation (SpriteMaterial)\r\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\r\n\r\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\r\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\r\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\r\n\r\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\r\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\r\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\r\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\r\n\r\n\t\tif ( this.dithering === true ) data.dithering = true;\r\n\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\r\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\r\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\r\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\r\n\r\n\t\tif ( this.wireframe === true ) data.wireframe = true;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\r\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\t\tif ( this.flatShading === true ) data.flatShading = true;\r\n\r\n\t\tif ( this.visible === false ) data.visible = false;\r\n\r\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\r\n\r\n\t\tif ( this.fog === false ) data.fog = false;\r\n\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.blending = source.blending;\r\n\t\tthis.side = source.side;\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\t\tthis.blendColor.copy( source.blendColor );\r\n\t\tthis.blendAlpha = source.blendAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\r\n\t\tthis.stencilFunc = source.stencilFunc;\r\n\t\tthis.stencilRef = source.stencilRef;\r\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\r\n\t\tthis.stencilFail = source.stencilFail;\r\n\t\tthis.stencilZFail = source.stencilZFail;\r\n\t\tthis.stencilZPass = source.stencilZPass;\r\n\t\tthis.stencilWrite = source.stencilWrite;\r\n\r\n\t\tconst srcPlanes = source.clippingPlanes;\r\n\t\tlet dstPlanes = null;\r\n\r\n\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\tconst n = srcPlanes.length;\r\n\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.clippingPlanes = dstPlanes;\r\n\t\tthis.clipIntersection = source.clipIntersection;\r\n\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.dithering = source.dithering;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\t\tthis.alphaHash = source.alphaHash;\r\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\r\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\t\tthis.forceSinglePass = source.forceSinglePass;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.toneMapped = source.toneMapped;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Material };\r\n", "import { Material } from './Material.js';\r\nimport { MultiplyOperation } from '../constants.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshBasicMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshBasicMaterial = true;\r\n\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // emissive\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshBasicMaterial };\r\n", "import { clamp } from '../math/MathUtils.js';\r\n\r\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n\r\nconst _tables = /*@__PURE__*/ _generateTables();\r\n\r\nfunction _generateTables() {\r\n\r\n\t// float32 to float16 helpers\r\n\r\n\tconst buffer = new ArrayBuffer( 4 );\r\n\tconst floatView = new Float32Array( buffer );\r\n\tconst uint32View = new Uint32Array( buffer );\r\n\r\n\tconst baseTable = new Uint32Array( 512 );\r\n\tconst shiftTable = new Uint32Array( 512 );\r\n\r\n\tfor ( let i = 0; i < 256; ++ i ) {\r\n\r\n\t\tconst e = i - 127;\r\n\r\n\t\t// very small number (0, -0)\r\n\r\n\t\tif ( e < - 27 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x0000;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\r\n\t\t\tshiftTable[ i ] = 24;\r\n\t\t\tshiftTable[ i | 0x100 ] = 24;\r\n\r\n\t\t\t// small number (denorm)\r\n\r\n\t\t} else if ( e < - 14 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\r\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\r\n\t\t\tshiftTable[ i ] = - e - 1;\r\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\r\n\r\n\t\t\t// normal number\r\n\r\n\t\t} else if ( e <= 15 ) {\r\n\r\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\r\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\r\n\t\t\tshiftTable[ i ] = 13;\r\n\t\t\tshiftTable[ i | 0x100 ] = 13;\r\n\r\n\t\t\t// large number (Infinity, -Infinity)\r\n\r\n\t\t} else if ( e < 128 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x7c00;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\r\n\t\t\tshiftTable[ i ] = 24;\r\n\t\t\tshiftTable[ i | 0x100 ] = 24;\r\n\r\n\t\t\t// stay (NaN, Infinity, -Infinity)\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbaseTable[ i ] = 0x7c00;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\r\n\t\t\tshiftTable[ i ] = 13;\r\n\t\t\tshiftTable[ i | 0x100 ] = 13;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// float16 to float32 helpers\r\n\r\n\tconst mantissaTable = new Uint32Array( 2048 );\r\n\tconst exponentTable = new Uint32Array( 64 );\r\n\tconst offsetTable = new Uint32Array( 64 );\r\n\r\n\tfor ( let i = 1; i < 1024; ++ i ) {\r\n\r\n\t\tlet m = i << 13; // zero pad mantissa bits\r\n\t\tlet e = 0; // zero exponent\r\n\r\n\t\t// normalized\r\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\r\n\r\n\t\t\tm <<= 1;\r\n\t\t\te -= 0x00800000; // decrement exponent\r\n\r\n\t\t}\r\n\r\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\r\n\t\te += 0x38800000; // adjust bias\r\n\r\n\t\tmantissaTable[ i ] = m | e;\r\n\r\n\t}\r\n\r\n\tfor ( let i = 1024; i < 2048; ++ i ) {\r\n\r\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 1; i < 31; ++ i ) {\r\n\r\n\t\texponentTable[ i ] = i << 23;\r\n\r\n\t}\r\n\r\n\texponentTable[ 31 ] = 0x47800000;\r\n\texponentTable[ 32 ] = 0x80000000;\r\n\r\n\tfor ( let i = 33; i < 63; ++ i ) {\r\n\r\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\r\n\r\n\t}\r\n\r\n\texponentTable[ 63 ] = 0xc7800000;\r\n\r\n\tfor ( let i = 1; i < 64; ++ i ) {\r\n\r\n\t\tif ( i !== 32 ) {\r\n\r\n\t\t\toffsetTable[ i ] = 1024;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tfloatView: floatView,\r\n\t\tuint32View: uint32View,\r\n\t\tbaseTable: baseTable,\r\n\t\tshiftTable: shiftTable,\r\n\t\tmantissaTable: mantissaTable,\r\n\t\texponentTable: exponentTable,\r\n\t\toffsetTable: offsetTable\r\n\t};\r\n\r\n}\r\n\r\n// float32 to float16\r\n\r\nfunction toHalfFloat( val ) {\r\n\r\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\r\n\r\n\tval = clamp( val, - 65504, 65504 );\r\n\r\n\t_tables.floatView[ 0 ] = val;\r\n\tconst f = _tables.uint32View[ 0 ];\r\n\tconst e = ( f >> 23 ) & 0x1ff;\r\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\r\n\r\n}\r\n\r\n// float16 to float32\r\n\r\nfunction fromHalfFloat( val ) {\r\n\r\n\tconst m = val >> 10;\r\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\r\n\treturn _tables.floatView[ 0 ];\r\n\r\n}\r\n\r\nconst DataUtils = {\r\n\ttoHalfFloat: toHalfFloat,\r\n\tfromHalfFloat: fromHalfFloat,\r\n};\r\n\r\nexport {\r\n\ttoHalfFloat,\r\n\tfromHalfFloat,\r\n\tDataUtils\r\n};\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { denormalize, normalize } from '../math/MathUtils.js';\r\nimport { StaticDrawUsage, FloatType } from '../constants.js';\r\nimport { fromHalfFloat, toHalfFloat } from '../extras/DataUtils.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _vector2 = /*@__PURE__*/ new Vector2();\r\n\r\nclass BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized = false ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.isBufferAttribute = true;\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\t\tthis.normalized = normalized;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRanges = [];\r\n\t\tthis.gpuType = FloatType;\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tonUploadCallback() {}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddUpdateRange( start, count ) {\r\n\r\n\t\tthis.updateRanges.push( { start, count } );\r\n\r\n\t}\r\n\r\n\tclearUpdateRanges() {\r\n\r\n\t\tthis.updateRanges.length = 0;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\t\tthis.count = source.count;\r\n\t\tthis.normalized = source.normalized;\r\n\r\n\t\tthis.usage = source.usage;\r\n\t\tthis.gpuType = source.gpuType;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyAt( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyArray( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tif ( this.itemSize === 2 ) {\r\n\r\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector2.fromBufferAttribute( this, i );\r\n\t\t\t\t_vector2.applyMatrix3( m );\r\n\r\n\t\t\t\tthis.setXY( i, _vector2.x, _vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.itemSize === 3 ) {\r\n\r\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( this, i );\r\n\t\t\t\t_vector.applyMatrix3( m );\r\n\r\n\t\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyMatrix4( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyNormalMatrix( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.transformDirection( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( value, offset = 0 ) {\r\n\r\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index, component ) {\r\n\r\n\t\tlet value = this.array[ index * this.itemSize + component ];\r\n\r\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, component, value ) {\r\n\r\n\t\tif ( this.normalized ) value = normalize( value, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + component ] = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = this.array[ index * this.itemSize ];\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tonUpload( callback ) {\r\n\r\n\t\tthis.onUploadCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\titemSize: this.itemSize,\r\n\t\t\ttype: this.array.constructor.name,\r\n\t\t\tarray: Array.from( this.array ),\r\n\t\t\tnormalized: this.normalized\r\n\t\t};\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nclass Int8BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint8BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Int16BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint16BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Int32BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint32BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Float16BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t\tthis.isFloat16BufferAttribute = true;\r\n\r\n\t}\r\n\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\r\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass Float32BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nexport {\r\n\tFloat32BufferAttribute,\r\n\tFloat16BufferAttribute,\r\n\tUint32BufferAttribute,\r\n\tInt32BufferAttribute,\r\n\tUint16BufferAttribute,\r\n\tInt16BufferAttribute,\r\n\tUint8ClampedBufferAttribute,\r\n\tUint8BufferAttribute,\r\n\tInt8BufferAttribute,\r\n\tBufferAttribute\r\n};\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { EventDispatcher } from './EventDispatcher.js';\r\nimport { BufferAttribute, Float32BufferAttribute, Uint16BufferAttribute, Uint32BufferAttribute } from './BufferAttribute.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Object3D } from './Object3D.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { arrayNeedsUint32 } from '../utils.js';\r\n\r\nlet _id = 0;\r\n\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _obj = /*@__PURE__*/ new Object3D();\r\nconst _offset = /*@__PURE__*/ new Vector3();\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass BufferGeometry extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isBufferGeometry = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.morphTargetsRelative = false;\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tgetIndex() {\r\n\r\n\t\treturn this.index;\r\n\r\n\t}\r\n\r\n\tsetIndex( index ) {\r\n\r\n\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.index = index;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetAttribute( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t}\r\n\r\n\tsetAttribute( name, attribute ) {\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeleteAttribute( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\thasAttribute( name ) {\r\n\r\n\t\treturn this.attributes[ name ] !== undefined;\r\n\r\n\t}\r\n\r\n\taddGroup( start, count, materialIndex = 0 ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tclearGroups() {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t}\r\n\r\n\tsetDrawRange( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tconst position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tposition.applyMatrix4( matrix );\r\n\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst tangent = this.attributes.tangent;\r\n\r\n\t\tif ( tangent !== undefined ) {\r\n\r\n\t\t\ttangent.transformDirection( matrix );\r\n\r\n\t\t\ttangent.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\t_m1.makeRotationFromQuaternion( q );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateX( angle ) {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\t_m1.makeRotationX( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateY( angle ) {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\t_m1.makeRotationY( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateZ( angle ) {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\t_m1.makeRotationZ( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( x, y, z ) {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\t_m1.makeTranslation( x, y, z );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tscale( x, y, z ) {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\t_m1.makeScale( x, y, z );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlookAt( vector ) {\r\n\r\n\t\t_obj.lookAt( vector );\r\n\r\n\t\t_obj.updateMatrix();\r\n\r\n\t\tthis.applyMatrix4( _obj.matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcenter() {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tthis.boundingBox.getCenter( _offset ).negate();\r\n\r\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tconst position = [];\r\n\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = points[ i ];\r\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.attributes.position;\r\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\tif ( position && position.isGLBufferAttribute ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );\r\n\r\n\t\t\tthis.boundingBox.set(\r\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\r\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\r\n\t\t\t);\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t_box.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.min, _box.min );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.max, _box.max );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.min );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.max );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.attributes.position;\r\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\tif ( position && position.isGLBufferAttribute ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );\r\n\r\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( position ) {\r\n\r\n\t\t\t// first, find the center of the bounding sphere\r\n\r\n\t\t\tconst center = this.boundingSphere.center;\r\n\r\n\t\t\t_box.setFromBufferAttribute( position );\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t_vector.addVectors( _box.min, _boxMorphTargets.min );\r\n\t\t\t\t\t\t_box.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t\t_vector.addVectors( _box.max, _boxMorphTargets.max );\r\n\t\t\t\t\t\t_box.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.min );\r\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.max );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_box.getCenter( center );\r\n\r\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\r\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\tlet maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( position, i );\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t_vector.fromBufferAttribute( morphAttribute, j );\r\n\r\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\r\n\t\t\t\t\t\t\t_vector.add( _offset );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeTangents() {\r\n\r\n\t\tconst index = this.index;\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// (per vertex tangents)\r\n\r\n\t\tif ( index === null ||\r\n\t\t\t attributes.position === undefined ||\r\n\t\t\t attributes.normal === undefined ||\r\n\t\t\t attributes.uv === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst positionAttribute = attributes.position;\r\n\t\tconst normalAttribute = attributes.normal;\r\n\t\tconst uvAttribute = attributes.uv;\r\n\r\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\r\n\r\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst tangentAttribute = this.getAttribute( 'tangent' );\r\n\r\n\t\tconst tan1 = [], tan2 = [];\r\n\r\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\ttan1[ i ] = new Vector3();\r\n\t\t\ttan2[ i ] = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tconst vA = new Vector3(),\r\n\t\t\tvB = new Vector3(),\r\n\t\t\tvC = new Vector3(),\r\n\r\n\t\t\tuvA = new Vector2(),\r\n\t\t\tuvB = new Vector2(),\r\n\t\t\tuvC = new Vector2(),\r\n\r\n\t\t\tsdir = new Vector3(),\r\n\t\t\ttdir = new Vector3();\r\n\r\n\t\tfunction handleTriangle( a, b, c ) {\r\n\r\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\r\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\r\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\r\n\r\n\t\t\tuvA.fromBufferAttribute( uvAttribute, a );\r\n\t\t\tuvB.fromBufferAttribute( uvAttribute, b );\r\n\t\t\tuvC.fromBufferAttribute( uvAttribute, c );\r\n\r\n\t\t\tvB.sub( vA );\r\n\t\t\tvC.sub( vA );\r\n\r\n\t\t\tuvB.sub( uvA );\r\n\t\t\tuvC.sub( uvA );\r\n\r\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\r\n\r\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\r\n\r\n\t\t\tif ( ! isFinite( r ) ) return;\r\n\r\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\r\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tlet groups = this.groups;\r\n\r\n\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\tgroups = [ {\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tcount: index.count\r\n\t\t\t} ];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\tconst start = group.start;\r\n\t\t\tconst count = group.count;\r\n\r\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\thandleTriangle(\r\n\t\t\t\t\tindex.getX( j + 0 ),\r\n\t\t\t\t\tindex.getX( j + 1 ),\r\n\t\t\t\t\tindex.getX( j + 2 )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\r\n\t\tconst n = new Vector3(), n2 = new Vector3();\r\n\r\n\t\tfunction handleVertex( v ) {\r\n\r\n\t\t\tn.fromBufferAttribute( normalAttribute, v );\r\n\t\t\tn2.copy( n );\r\n\r\n\t\t\tconst t = tan1[ v ];\r\n\r\n\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\ttmp.copy( t );\r\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t// Calculate handedness\r\n\r\n\t\t\ttmp2.crossVectors( n2, t );\r\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\r\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\r\n\r\n\t\t\ttangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\tconst start = group.start;\r\n\t\t\tconst count = group.count;\r\n\r\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\thandleVertex( index.getX( j + 0 ) );\r\n\t\t\t\thandleVertex( index.getX( j + 1 ) );\r\n\t\t\t\thandleVertex( index.getX( j + 2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeVertexNormals() {\r\n\r\n\t\tconst index = this.index;\r\n\t\tconst positionAttribute = this.getAttribute( 'position' );\r\n\r\n\t\tif ( positionAttribute !== undefined ) {\r\n\r\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\r\n\r\n\t\t\tif ( normalAttribute === undefined ) {\r\n\r\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\r\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\r\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst vA = index.getX( i + 0 );\r\n\t\t\t\t\tconst vB = index.getX( i + 1 );\r\n\t\t\t\t\tconst vC = index.getX( i + 2 );\r\n\r\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\r\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\r\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\r\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\r\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\r\n\r\n\t\t\t\t\tnA.add( cb );\r\n\t\t\t\t\tnB.add( cb );\r\n\t\t\t\t\tnC.add( cb );\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\r\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\r\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tnormalAttribute.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tnormalizeNormals() {\r\n\r\n\t\tconst normals = this.attributes.normal;\r\n\r\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( normals, i );\r\n\r\n\t\t\t_vector.normalize();\r\n\r\n\t\t\tnormals.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoNonIndexed() {\r\n\r\n\t\tfunction convertBufferAttribute( attribute, indices ) {\r\n\r\n\t\t\tconst array = attribute.array;\r\n\t\t\tconst itemSize = attribute.itemSize;\r\n\t\t\tconst normalized = attribute.normalized;\r\n\r\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tlet index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.index === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry2 = new BufferGeometry();\r\n\r\n\t\tconst indices = this.index.array;\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\t// attributes\r\n\r\n\t\tfor ( const name in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ name ];\r\n\r\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\tgeometry2.setAttribute( name, newAttribute );\r\n\r\n\t\t}\r\n\r\n\t\t// morph attributes\r\n\r\n\t\tconst morphAttributes = this.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst morphArray = [];\r\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attribute = morphAttribute[ i ];\r\n\r\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\tmorphArray.push( newAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t// groups\r\n\r\n\t\tconst groups = this.groups;\r\n\r\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry2;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tconst parameters = this.parameters;\r\n\r\n\t\t\tfor ( const key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tconst index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\tfor ( const key in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ key ];\r\n\r\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\r\n\r\n\t\t}\r\n\r\n\t\tconst morphAttributes = {};\r\n\t\tlet hasMorphAttributes = false;\r\n\r\n\t\tfor ( const key in this.morphAttributes ) {\r\n\r\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attribute = attributeArray[ i ];\r\n\r\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( array.length > 0 ) {\r\n\r\n\t\t\t\tmorphAttributes[ key ] = array;\r\n\r\n\t\t\t\thasMorphAttributes = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( hasMorphAttributes ) {\r\n\r\n\t\t\tdata.data.morphAttributes = morphAttributes;\r\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t}\r\n\r\n\t\tconst groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\t// reset\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.groups = [];\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// used for storing cloned, shared data\r\n\r\n\t\tconst data = {};\r\n\r\n\t\t// name\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\t// index\r\n\r\n\t\tconst index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone( data ) );\r\n\r\n\t\t}\r\n\r\n\t\t// attributes\r\n\r\n\t\tconst attributes = source.attributes;\r\n\r\n\t\tfor ( const name in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ name ];\r\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\r\n\r\n\t\t}\r\n\r\n\t\t// morph attributes\r\n\r\n\t\tconst morphAttributes = source.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst array = [];\r\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\r\n\r\n\t\t// groups\r\n\r\n\t\tconst groups = source.groups;\r\n\r\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// bounding box\r\n\r\n\t\tconst boundingBox = source.boundingBox;\r\n\r\n\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// bounding sphere\r\n\r\n\t\tconst boundingSphere = source.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// draw range\r\n\r\n\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t// user data\r\n\r\n\t\tthis.userData = source.userData;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BufferGeometry };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { BackSide, FrontSide } from '../constants.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vA = /*@__PURE__*/ new Vector3();\r\nconst _vB = /*@__PURE__*/ new Vector3();\r\nconst _vC = /*@__PURE__*/ new Vector3();\r\n\r\nconst _tempA = /*@__PURE__*/ new Vector3();\r\nconst _morphA = /*@__PURE__*/ new Vector3();\r\n\r\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\r\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\r\n\r\nclass Mesh extends Object3D {\r\n\r\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMesh = true;\r\n\r\n\t\tthis.type = 'Mesh';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tif ( source.morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n\r\n\t\t}\r\n\r\n\t\tif ( source.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\r\n\r\n\t\t}\r\n\r\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\r\n\t\tthis.geometry = source.geometry;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\t\tconst keys = Object.keys( morphAttributes );\r\n\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetVertexPosition( index, target ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst position = geometry.attributes.position;\r\n\t\tconst morphPosition = geometry.morphAttributes.position;\r\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\r\n\r\n\t\ttarget.fromBufferAttribute( position, index );\r\n\r\n\t\tconst morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\tif ( morphPosition && morphInfluences ) {\r\n\r\n\t\t\t_morphA.set( 0, 0, 0 );\r\n\r\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst influence = morphInfluences[ i ];\r\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\r\n\r\n\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\r\n\r\n\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.add( _morphA );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst material = this.material;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\r\n\t\tif ( material === undefined ) return;\r\n\r\n\t\t// test with bounding sphere in world space\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t// check distance from ray origin to bounding sphere\r\n\r\n\t\t_ray.copy( raycaster.ray ).recast( raycaster.near );\r\n\r\n\t\tif ( _sphere.containsPoint( _ray.origin ) === false ) {\r\n\r\n\t\t\tif ( _ray.intersectSphere( _sphere, _sphereHitAt ) === null ) return;\r\n\r\n\t\t\tif ( _ray.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// convert ray to local space of mesh\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t// test with bounding box in local space\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// test for intersections with geometry\r\n\r\n\t\tthis._computeIntersections( raycaster, intersects, _ray );\r\n\r\n\t}\r\n\r\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\r\n\r\n\t\tlet intersection;\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst material = this.material;\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst position = geometry.attributes.position;\r\n\t\tconst uv = geometry.attributes.uv;\r\n\t\tconst uv1 = geometry.attributes.uv1;\r\n\t\tconst normal = geometry.attributes.normal;\r\n\t\tconst groups = geometry.groups;\r\n\t\tconst drawRange = geometry.drawRange;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\t// indexed buffer geometry\r\n\r\n\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\r\n\r\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tconst a = index.getX( j );\r\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\r\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\r\n\r\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst a = index.getX( i );\r\n\t\t\t\t\tconst b = index.getX( i + 1 );\r\n\t\t\t\t\tconst c = index.getX( i + 2 );\r\n\r\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t// non-indexed buffer geometry\r\n\r\n\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\r\n\r\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tconst a = j;\r\n\t\t\t\t\t\tconst b = j + 1;\r\n\t\t\t\t\t\tconst c = j + 2;\r\n\r\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst a = i;\r\n\t\t\t\t\tconst b = i + 1;\r\n\t\t\t\t\tconst c = i + 2;\r\n\r\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\tlet intersect;\r\n\r\n\tif ( material.side === BackSide ) {\r\n\r\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t} else {\r\n\r\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\r\n\r\n\t}\r\n\r\n\tif ( intersect === null ) return null;\r\n\r\n\t_intersectionPointWorld.copy( point );\r\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\r\n\r\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\treturn {\r\n\t\tdistance: distance,\r\n\t\tpoint: _intersectionPointWorld.clone(),\r\n\t\tobject: object\r\n\t};\r\n\r\n}\r\n\r\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\r\n\r\n\tobject.getVertexPosition( a, _vA );\r\n\tobject.getVertexPosition( b, _vB );\r\n\tobject.getVertexPosition( c, _vC );\r\n\r\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tconst barycoord = new Vector3();\r\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA, _vB, _vC, barycoord );\r\n\r\n\t\tif ( uv ) {\r\n\r\n\t\t\tintersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv1 ) {\r\n\r\n\t\t\tintersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( normal ) {\r\n\r\n\t\t\tintersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );\r\n\r\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\r\n\r\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst face = {\r\n\t\t\ta: a,\r\n\t\t\tb: b,\r\n\t\t\tc: c,\r\n\t\t\tnormal: new Vector3(),\r\n\t\t\tmaterialIndex: 0\r\n\t\t};\r\n\r\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\r\n\r\n\t\tintersection.face = face;\r\n\t\tintersection.barycoord = barycoord;\r\n\r\n\t}\r\n\r\n\treturn intersection;\r\n\r\n}\r\n\r\nexport { Mesh };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass BoxGeometry extends BufferGeometry {\r\n\r\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'BoxGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tdepth: depth,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tdepthSegments: depthSegments\r\n\t\t};\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\t// segments\r\n\r\n\t\twidthSegments = Math.floor( widthSegments );\r\n\t\theightSegments = Math.floor( heightSegments );\r\n\t\tdepthSegments = Math.floor( depthSegments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tlet numberOfVertices = 0;\r\n\t\tlet groupStart = 0;\r\n\r\n\t\t// build each side of the box geometry\r\n\r\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\r\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\r\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\r\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\r\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\r\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\t\tconst segmentWidth = width / gridX;\r\n\t\t\tconst segmentHeight = height / gridY;\r\n\r\n\t\t\tconst widthHalf = width / 2;\r\n\t\t\tconst heightHalf = height / 2;\r\n\t\t\tconst depthHalf = depth / 2;\r\n\r\n\t\t\tconst gridX1 = gridX + 1;\r\n\t\t\tconst gridY1 = gridY + 1;\r\n\r\n\t\t\tlet vertexCounter = 0;\r\n\t\t\tlet groupCount = 0;\r\n\r\n\t\t\tconst vector = new Vector3();\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t\t// now apply vector to vertex buffer\r\n\r\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t\t// now apply vector to normal buffer\r\n\r\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t\t\t// counters\r\n\r\n\t\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// indices\r\n\r\n\t\t\t// 1. you need three indices to draw a single face\r\n\t\t\t// 2. a single segment consists of two faces\r\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t// increase counter\r\n\r\n\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t\t// update total number of vertices\r\n\r\n\t\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BoxGeometry };\r\n", "import { ColorManagement } from '../../math/ColorManagement.js';\r\n\r\n/**\r\n * Uniform Utilities\r\n */\r\n\r\nexport function cloneUniforms( src ) {\r\n\r\n\tconst dst = {};\r\n\r\n\tfor ( const u in src ) {\r\n\r\n\t\tdst[ u ] = {};\r\n\r\n\t\tfor ( const p in src[ u ] ) {\r\n\r\n\t\t\tconst property = src[ u ][ p ];\r\n\r\n\t\t\tif ( property && ( property.isColor ||\r\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\r\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\r\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\r\n\r\n\t\t\t\tif ( property.isRenderTargetTexture ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\r\n\t\t\t\t\tdst[ u ][ p ] = null;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( Array.isArray( property ) ) {\r\n\r\n\t\t\t\tdst[ u ][ p ] = property.slice();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdst[ u ][ p ] = property;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn dst;\r\n\r\n}\r\n\r\nexport function mergeUniforms( uniforms ) {\r\n\r\n\tconst merged = {};\r\n\r\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\r\n\r\n\t\tfor ( const p in tmp ) {\r\n\r\n\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn merged;\r\n\r\n}\r\n\r\nexport function cloneUniformsGroups( src ) {\r\n\r\n\tconst dst = [];\r\n\r\n\tfor ( let u = 0; u < src.length; u ++ ) {\r\n\r\n\t\tdst.push( src[ u ].clone() );\r\n\r\n\t}\r\n\r\n\treturn dst;\r\n\r\n}\r\n\r\nexport function getUnlitUniformColorSpace( renderer ) {\r\n\r\n\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\tif ( currentRenderTarget === null ) {\r\n\r\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\r\n\t\treturn renderer.outputColorSpace;\r\n\r\n\t}\r\n\r\n\t// https://github.com/mrdoob/three.js/issues/27868\r\n\tif ( currentRenderTarget.isXRRenderTarget === true ) {\r\n\r\n\t\treturn currentRenderTarget.texture.colorSpace;\r\n\r\n\t}\r\n\r\n\treturn ColorManagement.workingColorSpace;\r\n\r\n}\r\n\r\n// Legacy\r\n\r\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\r\n\r\nexport { UniformsUtils };\r\n", "export default /* glsl */`\r\nvoid main() {\r\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}\r\n`;\r\n", "export default /* glsl */`\r\nvoid main() {\r\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\r\n}\r\n`;\r\n", "import { Material } from './Material.js';\r\nimport { cloneUniforms, cloneUniformsGroups } from '../renderers/shaders/UniformsUtils.js';\r\n\r\nimport default_vertex from '../renderers/shaders/ShaderChunk/default_vertex.glsl.js';\r\nimport default_fragment from '../renderers/shaders/ShaderChunk/default_fragment.glsl.js';\r\n\r\nclass ShaderMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isShaderMaterial = true;\r\n\r\n\t\tthis.type = 'ShaderMaterial';\r\n\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\t\tthis.uniformsGroups = [];\r\n\r\n\t\tthis.vertexShader = default_vertex;\r\n\t\tthis.fragmentShader = default_fragment;\r\n\r\n\t\tthis.linewidth = 1;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\t\tthis.forceSinglePass = true;\r\n\r\n\t\tthis.extensions = {\r\n\t\t\tclipCullDistance: false, // set to use vertex shader clipping\r\n\t\t\tmultiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\r\n\t\t};\r\n\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv1': [ 0, 0 ]\r\n\t\t};\r\n\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\tthis.uniformsNeedUpdate = false;\r\n\r\n\t\tthis.glslVersion = null;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tthis.setValues( parameters );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\r\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\r\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\r\n\r\n\t\tthis.defines = Object.assign( {}, source.defines );\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.fog = source.fog;\r\n\t\tthis.lights = source.lights;\r\n\t\tthis.clipping = source.clipping;\r\n\r\n\t\tthis.extensions = Object.assign( {}, source.extensions );\r\n\r\n\t\tthis.glslVersion = source.glslVersion;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.glslVersion = this.glslVersion;\r\n\t\tdata.uniforms = {};\r\n\r\n\t\tfor ( const name in this.uniforms ) {\r\n\r\n\t\t\tconst uniform = this.uniforms[ name ];\r\n\t\t\tconst value = uniform.value;\r\n\r\n\t\t\tif ( value && value.isTexture ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 't',\r\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isColor ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'c',\r\n\t\t\t\t\tvalue: value.getHex()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector2 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v2',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\r\n\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\t\tdata.lights = this.lights;\r\n\t\tdata.clipping = this.clipping;\r\n\r\n\t\tconst extensions = {};\r\n\r\n\t\tfor ( const key in this.extensions ) {\r\n\r\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ShaderMaterial };\r\n", "import { WebGLCoordinateSystem } from '../constants.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass Camera extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isCamera = true;\r\n\r\n\t\tthis.type = 'Camera';\r\n\r\n\t\tthis.matrixWorldInverse = new Matrix4();\r\n\r\n\t\tthis.projectionMatrix = new Matrix4();\r\n\t\tthis.projectionMatrixInverse = new Matrix4();\r\n\r\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\r\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\r\n\r\n\t\tthis.coordinateSystem = source.coordinateSystem;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetWorldDirection( target ) {\r\n\r\n\t\treturn super.getWorldDirection( target ).negate();\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t}\r\n\r\n\tupdateWorldMatrix( updateParents, updateChildren ) {\r\n\r\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\r\n\r\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Camera };\r\n", "import { Camera } from './Camera.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\nconst _minTarget = /*@__PURE__*/ new Vector2();\r\nconst _maxTarget = /*@__PURE__*/ new Vector2();\r\n\r\n\r\nclass PerspectiveCamera extends Camera {\r\n\r\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPerspectiveCamera = true;\r\n\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\r\n\t\tthis.fov = fov;\r\n\t\tthis.zoom = 1;\r\n\r\n\t\tthis.near = near;\r\n\t\tthis.far = far;\r\n\t\tthis.focus = 10;\r\n\r\n\t\tthis.aspect = aspect;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.fov = source.fov;\r\n\t\tthis.zoom = source.zoom;\r\n\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\tthis.focus = source.focus;\r\n\r\n\t\tthis.aspect = source.aspect;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\tthis.filmGauge = source.filmGauge;\r\n\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t *\r\n\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t * a 35mm (full frame) camera.\r\n\t *\r\n\t * Values for focal length and film gauge must have the same unit.\r\n\t */\r\n\tsetFocalLength( focalLength ) {\r\n\r\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\r\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t */\r\n\tgetFocalLength() {\r\n\r\n\t\tconst vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t}\r\n\r\n\tgetEffectiveFOV() {\r\n\r\n\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\r\n\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t}\r\n\r\n\tgetFilmWidth() {\r\n\r\n\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t}\r\n\r\n\tgetFilmHeight() {\r\n\r\n\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\r\n\t * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.\r\n\t */\r\n\tgetViewBounds( distance, minTarget, maxTarget ) {\r\n\r\n\t\t_v3.set( - 1, - 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\r\n\r\n\t\tminTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\r\n\r\n\t\t_v3.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\r\n\r\n\t\tmaxTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\r\n\t * Copies the result into the target Vector2, where x is width and y is height.\r\n\t */\r\n\tgetViewSize( distance, target ) {\r\n\r\n\t\tthis.getViewBounds( distance, _minTarget, _maxTarget );\r\n\r\n\t\treturn target.subVectors( _maxTarget, _minTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t * the monitors are in grid like this\r\n\t *\r\n\t *   +---+---+---+\r\n\t *   | A | B | C |\r\n\t *   +---+---+---+\r\n\t *   | D | E | F |\r\n\t *   +---+---+---+\r\n\t *\r\n\t * then for each monitor you would call it like this\r\n\t *\r\n\t *   const w = 1920;\r\n\t *   const h = 1080;\r\n\t *   const fullWidth = w * 3;\r\n\t *   const fullHeight = h * 2;\r\n\t *\r\n\t *   --A--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t *   --B--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t *   --C--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t *   --D--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t *   --E--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t *   --F--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t *\r\n\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t */\r\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\tif ( this.view === null ) {\r\n\r\n\t\t\tthis.view = {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tfullWidth: 1,\r\n\t\t\t\tfullHeight: 1,\r\n\t\t\t\toffsetX: 0,\r\n\t\t\t\toffsetY: 0,\r\n\t\t\t\twidth: 1,\r\n\t\t\t\theight: 1\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tthis.view.enabled = true;\r\n\t\tthis.view.fullWidth = fullWidth;\r\n\t\tthis.view.fullHeight = fullHeight;\r\n\t\tthis.view.offsetX = x;\r\n\t\tthis.view.offsetY = y;\r\n\t\tthis.view.width = width;\r\n\t\tthis.view.height = height;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tclearViewOffset() {\r\n\r\n\t\tif ( this.view !== null ) {\r\n\r\n\t\t\tthis.view.enabled = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tupdateProjectionMatrix() {\r\n\r\n\t\tconst near = this.near;\r\n\t\tlet top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom;\r\n\t\tlet height = 2 * top;\r\n\t\tlet width = this.aspect * height;\r\n\t\tlet left = - 0.5 * width;\r\n\t\tconst view = this.view;\r\n\r\n\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\tconst fullWidth = view.fullWidth,\r\n\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\twidth *= view.width / fullWidth;\r\n\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t}\r\n\r\n\t\tconst skew = this.filmOffset;\r\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\r\n\r\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\r\n\r\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.fov = this.fov;\r\n\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\tdata.object.focus = this.focus;\r\n\r\n\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PerspectiveCamera };\r\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { PerspectiveCamera } from './PerspectiveCamera.js';\r\n\r\nconst fov = - 90; // negative fov is not an error\r\nconst aspect = 1;\r\n\r\nclass CubeCamera extends Object3D {\r\n\r\n\tconstructor( near, far, renderTarget ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'CubeCamera';\r\n\r\n\t\tthis.renderTarget = renderTarget;\r\n\t\tthis.coordinateSystem = null;\r\n\t\tthis.activeMipmapLevel = 0;\r\n\r\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPX.layers = this.layers;\r\n\t\tthis.add( cameraPX );\r\n\r\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNX.layers = this.layers;\r\n\t\tthis.add( cameraNX );\r\n\r\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPY.layers = this.layers;\r\n\t\tthis.add( cameraPY );\r\n\r\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNY.layers = this.layers;\r\n\t\tthis.add( cameraNY );\r\n\r\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPZ.layers = this.layers;\r\n\t\tthis.add( cameraPZ );\r\n\r\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNZ.layers = this.layers;\r\n\t\tthis.add( cameraNZ );\r\n\r\n\t}\r\n\r\n\tupdateCoordinateSystem() {\r\n\r\n\t\tconst coordinateSystem = this.coordinateSystem;\r\n\r\n\t\tconst cameras = this.children.concat();\r\n\r\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;\r\n\r\n\t\tfor ( const camera of cameras ) this.remove( camera );\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tcameraPX.up.set( 0, 1, 0 );\r\n\t\t\tcameraPX.lookAt( 1, 0, 0 );\r\n\r\n\t\t\tcameraNX.up.set( 0, 1, 0 );\r\n\t\t\tcameraNX.lookAt( - 1, 0, 0 );\r\n\r\n\t\t\tcameraPY.up.set( 0, 0, - 1 );\r\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\r\n\r\n\t\t\tcameraNY.up.set( 0, 0, 1 );\r\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\r\n\r\n\t\t\tcameraPZ.up.set( 0, 1, 0 );\r\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\r\n\r\n\t\t\tcameraNZ.up.set( 0, 1, 0 );\r\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tcameraPX.up.set( 0, - 1, 0 );\r\n\t\t\tcameraPX.lookAt( - 1, 0, 0 );\r\n\r\n\t\t\tcameraNX.up.set( 0, - 1, 0 );\r\n\t\t\tcameraNX.lookAt( 1, 0, 0 );\r\n\r\n\t\t\tcameraPY.up.set( 0, 0, 1 );\r\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\r\n\r\n\t\t\tcameraNY.up.set( 0, 0, - 1 );\r\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\r\n\r\n\t\t\tcameraPZ.up.set( 0, - 1, 0 );\r\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\r\n\r\n\t\t\tcameraNZ.up.set( 0, - 1, 0 );\r\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const camera of cameras ) {\r\n\r\n\t\t\tthis.add( camera );\r\n\r\n\t\t\tcamera.updateMatrixWorld();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( renderer, scene ) {\r\n\r\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\r\n\t\tconst { renderTarget, activeMipmapLevel } = this;\r\n\r\n\t\tif ( this.coordinateSystem !== renderer.coordinateSystem ) {\r\n\r\n\t\t\tthis.coordinateSystem = renderer.coordinateSystem;\r\n\r\n\t\t\tthis.updateCoordinateSystem();\r\n\r\n\t\t}\r\n\r\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentActiveCubeFace = renderer.getActiveCubeFace();\r\n\t\tconst currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\r\n\r\n\t\tconst currentXrEnabled = renderer.xr.enabled;\r\n\r\n\t\trenderer.xr.enabled = false;\r\n\r\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );\r\n\t\trenderer.render( scene, cameraPX );\r\n\r\n\t\trenderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );\r\n\t\trenderer.render( scene, cameraNX );\r\n\r\n\t\trenderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );\r\n\t\trenderer.render( scene, cameraPY );\r\n\r\n\t\trenderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );\r\n\t\trenderer.render( scene, cameraNY );\r\n\r\n\t\trenderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );\r\n\t\trenderer.render( scene, cameraPZ );\r\n\r\n\t\t// mipmaps are generated during the last call of render()\r\n\t\t// at this point, all sides of the cube render target are defined\r\n\r\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );\r\n\t\trenderer.render( scene, cameraNZ );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );\r\n\r\n\t\trenderer.xr.enabled = currentXrEnabled;\r\n\r\n\t\trenderTarget.texture.needsPMREMUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubeCamera };\r\n", "import { Texture } from './Texture.js';\r\nimport { CubeReflectionMapping } from '../constants.js';\r\n\r\nclass CubeTexture extends Texture {\r\n\r\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\r\n\r\n\t\timages = images !== undefined ? images : [];\r\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\r\n\r\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\r\n\r\n\t\tthis.isCubeTexture = true;\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t}\r\n\r\n\tget images() {\r\n\r\n\t\treturn this.image;\r\n\r\n\t}\r\n\r\n\tset images( value ) {\r\n\r\n\t\tthis.image = value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubeTexture };\r\n", "import { BackSide, LinearFilter, LinearMipmapLinearFilter, NoBlending } from '../constants.js';\r\nimport { Mesh } from '../objects/Mesh.js';\r\nimport { BoxGeometry } from '../geometries/BoxGeometry.js';\r\nimport { ShaderMaterial } from '../materials/ShaderMaterial.js';\r\nimport { cloneUniforms } from './shaders/UniformsUtils.js';\r\nimport { WebGLRenderTarget } from './WebGLRenderTarget.js';\r\nimport { CubeCamera } from '../cameras/CubeCamera.js';\r\nimport { CubeTexture } from '../textures/CubeTexture.js';\r\n\r\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\r\n\r\n\tconstructor( size = 1, options = {} ) {\r\n\r\n\t\tsuper( size, size, options );\r\n\r\n\t\tthis.isWebGLCubeRenderTarget = true;\r\n\r\n\t\tconst image = { width: size, height: size, depth: 1 };\r\n\t\tconst images = [ image, image, image, image, image, image ];\r\n\r\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\r\n\r\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\r\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\r\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\r\n\r\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\r\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\r\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\r\n\r\n\t\tthis.texture.isRenderTargetTexture = true;\r\n\r\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\r\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\r\n\r\n\t}\r\n\r\n\tfromEquirectangularTexture( renderer, texture ) {\r\n\r\n\t\tthis.texture.type = texture.type;\r\n\t\tthis.texture.colorSpace = texture.colorSpace;\r\n\r\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\r\n\t\tthis.texture.minFilter = texture.minFilter;\r\n\t\tthis.texture.magFilter = texture.magFilter;\r\n\r\n\t\tconst shader = {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\r\n\t\t\t\tvarying vec3 vWorldDirection;\r\n\r\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\r\n\r\n\t\t\t\t\t#include <begin_vertex>\r\n\t\t\t\t\t#include <project_vertex>\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\t\tuniform sampler2D tEquirect;\r\n\r\n\t\t\t\tvarying vec3 vWorldDirection;\r\n\r\n\t\t\t\t#include <common>\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\r\n\r\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\r\n\r\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\r\n\r\n\t\t\t\t}\r\n\t\t\t`\r\n\t\t};\r\n\r\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\r\n\r\n\t\tconst material = new ShaderMaterial( {\r\n\r\n\t\t\tname: 'CubemapFromEquirect',\r\n\r\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader,\r\n\t\t\tside: BackSide,\r\n\t\t\tblending: NoBlending\r\n\r\n\t\t} );\r\n\r\n\t\tmaterial.uniforms.tEquirect.value = texture;\r\n\r\n\t\tconst mesh = new Mesh( geometry, material );\r\n\r\n\t\tconst currentMinFilter = texture.minFilter;\r\n\r\n\t\t// Avoid blurred poles\r\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\r\n\r\n\t\tconst camera = new CubeCamera( 1, 10, this );\r\n\t\tcamera.update( renderer, mesh );\r\n\r\n\t\ttexture.minFilter = currentMinFilter;\r\n\r\n\t\tmesh.geometry.dispose();\r\n\t\tmesh.material.dispose();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclear( renderer, color, depth, stencil ) {\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\trenderer.setRenderTarget( this, i );\r\n\r\n\t\t\trenderer.clear( color, depth, stencil );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGLCubeRenderTarget };\r\n", "import { Matrix3 } from './Matrix3.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nconst _vector1 = /*@__PURE__*/ new Vector3();\r\nconst _vector2 = /*@__PURE__*/ new Vector3();\r\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\r\n\r\nclass Plane {\r\n\r\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\r\n\r\n\t\tthis.isPlane = true;\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = normal;\r\n\t\tthis.constant = constant;\r\n\r\n\t}\r\n\r\n\tset( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponents( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCoplanarPoints( a, b, c ) {\r\n\r\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t}\r\n\r\n\tdistanceToSphere( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t}\r\n\r\n\tprojectPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\r\n\r\n\t}\r\n\r\n\tintersectLine( line, target ) {\r\n\r\n\t\tconst direction = line.delta( _vector1 );\r\n\r\n\t\tconst denominator = this.normal.dot( direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\r\n\r\n\t}\r\n\r\n\tintersectsLine( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tconst startSign = this.distanceToPoint( line.start );\r\n\t\tconst endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\tcoplanarPoint( target ) {\r\n\r\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\r\n\r\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Plane };\r\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\r\nimport { Vector3 } from './Vector3.js';\r\nimport { Sphere } from './Sphere.js';\r\nimport { Plane } from './Plane.js';\r\n\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass Frustum {\r\n\r\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\r\n\r\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\r\n\r\n\t}\r\n\r\n\tset( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tplanes[ 0 ].copy( p0 );\r\n\t\tplanes[ 1 ].copy( p1 );\r\n\t\tplanes[ 2 ].copy( p2 );\r\n\t\tplanes[ 3 ].copy( p3 );\r\n\t\tplanes[ 4 ].copy( p4 );\r\n\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( frustum ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\t\tconst me = m.elements;\r\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tintersectsObject( object ) {\r\n\r\n\t\tif ( object.boundingSphere !== undefined ) {\r\n\r\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\r\n\r\n\t\t\t_sphere.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.intersectsSphere( _sphere );\r\n\r\n\t}\r\n\r\n\tintersectsSprite( sprite ) {\r\n\r\n\t\t_sphere.center.set( 0, 0, 0 );\r\n\t\t_sphere.radius = 0.7071067811865476;\r\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\treturn this.intersectsSphere( _sphere );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\t\tconst center = sphere.center;\r\n\t\tconst negRadius = - sphere.radius;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst plane = planes[ i ];\r\n\r\n\t\t\t// corner at max distance\r\n\r\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Frustum };\r\n", "function WebGLAnimation() {\r\n\r\n\tlet context = null;\r\n\tlet isAnimating = false;\r\n\tlet animationLoop = null;\r\n\tlet requestId = null;\r\n\r\n\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\tanimationLoop( time, frame );\r\n\r\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tstart: function () {\r\n\r\n\t\t\tif ( isAnimating === true ) return;\r\n\t\t\tif ( animationLoop === null ) return;\r\n\r\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t\tisAnimating = true;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tcontext.cancelAnimationFrame( requestId );\r\n\r\n\t\t\tisAnimating = false;\r\n\r\n\t\t},\r\n\r\n\t\tsetAnimationLoop: function ( callback ) {\r\n\r\n\t\t\tanimationLoop = callback;\r\n\r\n\t\t},\r\n\r\n\t\tsetContext: function ( value ) {\r\n\r\n\t\t\tcontext = value;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLAnimation };\r\n", "function WebGLAttributes( gl ) {\r\n\r\n\tconst buffers = new WeakMap();\r\n\r\n\tfunction createBuffer( attribute, bufferType ) {\r\n\r\n\t\tconst array = attribute.array;\r\n\t\tconst usage = attribute.usage;\r\n\t\tconst size = array.byteLength;\r\n\r\n\t\tconst buffer = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( bufferType, buffer );\r\n\t\tgl.bufferData( bufferType, array, usage );\r\n\r\n\t\tattribute.onUploadCallback();\r\n\r\n\t\tlet type;\r\n\r\n\t\tif ( array instanceof Float32Array ) {\r\n\r\n\t\t\ttype = gl.FLOAT;\r\n\r\n\t\t} else if ( array instanceof Uint16Array ) {\r\n\r\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\r\n\r\n\t\t\t\ttype = gl.HALF_FLOAT;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( array instanceof Int16Array ) {\r\n\r\n\t\t\ttype = gl.SHORT;\r\n\r\n\t\t} else if ( array instanceof Uint32Array ) {\r\n\r\n\t\t\ttype = gl.UNSIGNED_INT;\r\n\r\n\t\t} else if ( array instanceof Int32Array ) {\r\n\r\n\t\t\ttype = gl.INT;\r\n\r\n\t\t} else if ( array instanceof Int8Array ) {\r\n\r\n\t\t\ttype = gl.BYTE;\r\n\r\n\t\t} else if ( array instanceof Uint8Array ) {\r\n\r\n\t\t\ttype = gl.UNSIGNED_BYTE;\r\n\r\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\r\n\r\n\t\t\ttype = gl.UNSIGNED_BYTE;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tbuffer: buffer,\r\n\t\t\ttype: type,\r\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\r\n\t\t\tversion: attribute.version,\r\n\t\t\tsize: size\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\r\n\r\n\t\tconst array = attribute.array;\r\n\t\tconst updateRanges = attribute.updateRanges;\r\n\r\n\t\tgl.bindBuffer( bufferType, buffer );\r\n\r\n\t\tif ( updateRanges.length === 0 ) {\r\n\r\n\t\t\t// Not using update ranges\r\n\t\t\tgl.bufferSubData( bufferType, 0, array );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Before applying update ranges, we merge any adjacent / overlapping\r\n\t\t\t// ranges to reduce load on `gl.bufferSubData`. Empirically, this has led\r\n\t\t\t// to performance improvements for applications which make heavy use of\r\n\t\t\t// update ranges. Likely due to GPU command overhead.\r\n\t\t\t//\r\n\t\t\t// Note that to reduce garbage collection between frames, we merge the\r\n\t\t\t// update ranges in-place. This is safe because this method will clear the\r\n\t\t\t// update ranges once updated.\r\n\r\n\t\t\tupdateRanges.sort( ( a, b ) => a.start - b.start );\r\n\r\n\t\t\t// To merge the update ranges in-place, we work from left to right in the\r\n\t\t\t// existing updateRanges array, merging ranges. This may result in a final\r\n\t\t\t// array which is smaller than the original. This index tracks the last\r\n\t\t\t// index representing a merged range, any data after this index can be\r\n\t\t\t// trimmed once the merge algorithm is completed.\r\n\t\t\tlet mergeIndex = 0;\r\n\r\n\t\t\tfor ( let i = 1; i < updateRanges.length; i ++ ) {\r\n\r\n\t\t\t\tconst previousRange = updateRanges[ mergeIndex ];\r\n\t\t\t\tconst range = updateRanges[ i ];\r\n\r\n\t\t\t\t// We add one here to merge adjacent ranges. This is safe because ranges\r\n\t\t\t\t// operate over positive integers.\r\n\t\t\t\tif ( range.start <= previousRange.start + previousRange.count + 1 ) {\r\n\r\n\t\t\t\t\tpreviousRange.count = Math.max(\r\n\t\t\t\t\t\tpreviousRange.count,\r\n\t\t\t\t\t\trange.start + range.count - previousRange.start\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t++ mergeIndex;\r\n\t\t\t\t\tupdateRanges[ mergeIndex ] = range;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Trim the array to only contain the merged ranges.\r\n\t\t\tupdateRanges.length = mergeIndex + 1;\r\n\r\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst range = updateRanges[ i ];\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\tarray, range.start, range.count );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattribute.clearUpdateRanges();\r\n\r\n\t\t}\r\n\r\n\t\tattribute.onUploadCallback();\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction get( attribute ) {\r\n\r\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\r\n\r\n\t\treturn buffers.get( attribute );\r\n\r\n\t}\r\n\r\n\tfunction remove( attribute ) {\r\n\r\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\r\n\r\n\t\tconst data = buffers.get( attribute );\r\n\r\n\t\tif ( data ) {\r\n\r\n\t\t\tgl.deleteBuffer( data.buffer );\r\n\r\n\t\t\tbuffers.delete( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction update( attribute, bufferType ) {\r\n\r\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\r\n\r\n\t\tif ( attribute.isGLBufferAttribute ) {\r\n\r\n\t\t\tconst cached = buffers.get( attribute );\r\n\r\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\r\n\r\n\t\t\t\tbuffers.set( attribute, {\r\n\t\t\t\t\tbuffer: attribute.buffer,\r\n\t\t\t\t\ttype: attribute.type,\r\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\r\n\t\t\t\t\tversion: attribute.version\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst data = buffers.get( attribute );\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\r\n\r\n\t\t} else if ( data.version < attribute.version ) {\r\n\r\n\t\t\tif ( data.size !== attribute.array.byteLength ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.WebGLAttributes: The size of the buffer attribute\\'s array buffer does not match the original size. Resizing buffer attributes is not supported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\r\n\r\n\t\t\tdata.version = attribute.version;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tget: get,\r\n\t\tremove: remove,\r\n\t\tupdate: update\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLAttributes };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nclass PlaneGeometry extends BufferGeometry {\r\n\r\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'PlaneGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\tconst width_half = width / 2;\r\n\t\tconst height_half = height / 2;\r\n\r\n\t\tconst gridX = Math.floor( widthSegments );\r\n\t\tconst gridY = Math.floor( heightSegments );\r\n\r\n\t\tconst gridX1 = gridX + 1;\r\n\t\tconst gridY1 = gridY + 1;\r\n\r\n\t\tconst segment_width = width / gridX;\r\n\t\tconst segment_height = height / gridY;\r\n\r\n\t\t//\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tconst y = iy * segment_height - height_half;\r\n\r\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tconst x = ix * segment_width - width_half;\r\n\r\n\t\t\t\tvertices.push( x, - y, 0 );\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\tconst a = ix + gridX1 * iy;\r\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PlaneGeometry };\r\n", "export default /* glsl */`\r\n#ifdef USE_ALPHAHASH\r\n\r\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ALPHAHASH\r\n\r\n\t/**\r\n\t * See: https://casual-effects.com/research/Wyman2017Hashed/index.html\r\n\t */\r\n\r\n\tconst float ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.\r\n\r\n\tfloat hash2D( vec2 value ) {\r\n\r\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\r\n\r\n\t}\r\n\r\n\tfloat hash3D( vec3 value ) {\r\n\r\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\r\n\r\n\t}\r\n\r\n\tfloat getAlphaHashThreshold( vec3 position ) {\r\n\r\n\t\t// Find the discretized derivatives of our coordinates\r\n\t\tfloat maxDeriv = max(\r\n\t\t\tlength( dFdx( position.xyz ) ),\r\n\t\t\tlength( dFdy( position.xyz ) )\r\n\t\t);\r\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\r\n\r\n\t\t// Find two nearest log-discretized noise scales\r\n\t\tvec2 pixScales = vec2(\r\n\t\t\texp2( floor( log2( pixScale ) ) ),\r\n\t\t\texp2( ceil( log2( pixScale ) ) )\r\n\t\t);\r\n\r\n\t\t// Compute alpha thresholds at our two noise scales\r\n\t\tvec2 alpha = vec2(\r\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\r\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\r\n\t\t);\r\n\r\n\t\t// Factor to interpolate lerp with\r\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\r\n\r\n\t\t// Interpolate alpha threshold from noise at two scales\r\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\r\n\r\n\t\t// Pass into CDF to compute uniformly distrib threshold\r\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\r\n\t\tvec3 cases = vec3(\r\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\r\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\r\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\r\n\t\t);\r\n\r\n\t\t// Find our final, uniformly distributed alpha threshold (ατ)\r\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\r\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\r\n\t\t\t: cases.z;\r\n\r\n\t\t// Avoids ατ == 0. Could also do ατ =1-ατ\r\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ALPHAMAP\r\n\r\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ALPHAMAP\r\n\r\n\tuniform sampler2D alphaMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ALPHATEST\r\n\r\n\t#ifdef ALPHA_TO_COVERAGE\r\n\r\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\r\n\tif ( diffuseColor.a == 0.0 ) discard;\r\n\r\n\t#else\r\n\r\n\tif ( diffuseColor.a < alphaTest ) discard;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ALPHATEST\r\n\tuniform float alphaTest;\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_AOMAP\r\n\r\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\r\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\r\n\r\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\r\n\r\n\t#if defined( USE_CLEARCOAT ) \r\n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\r\n\t#endif\r\n\r\n\t#if defined( USE_SHEEN ) \r\n\t\tsheenSpecularIndirect *= ambientOcclusion;\r\n\t#endif\r\n\r\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\r\n\r\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\r\n\r\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_AOMAP\r\n\r\n\tuniform sampler2D aoMap;\r\n\tuniform float aoMapIntensity;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_BATCHING\r\n\t#if ! defined( GL_ANGLE_multi_draw )\r\n\t#define gl_DrawID _gl_DrawID\r\n\tuniform int _gl_DrawID;\r\n\t#endif\r\n\r\n\tuniform highp sampler2D batchingTexture;\r\n\tuniform highp usampler2D batchingIdTexture;\r\n\tmat4 getBatchingMatrix( const in float i ) {\r\n\r\n\t\tint size = textureSize( batchingTexture, 0 ).x;\r\n\t\tint j = int( i ) * 4;\r\n\t\tint x = j % size;\r\n\t\tint y = j / size;\r\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\r\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\r\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\r\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\r\n\t\treturn mat4( v1, v2, v3, v4 );\r\n\r\n\t}\r\n\r\n\tfloat getIndirectIndex( const in int i ) {\r\n\r\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\r\n\t\tint x = i % size;\r\n\t\tint y = i / size;\r\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#ifdef USE_BATCHING_COLOR\r\n\r\n\tuniform sampler2D batchingColorTexture;\r\n\tvec3 getBatchingColor( const in float i ) {\r\n\r\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\r\n\t\tint j = int( i );\r\n\t\tint x = j % size;\r\n\t\tint y = j / size;\r\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_BATCHING\r\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nvec3 transformed = vec3( position );\r\n\r\n#ifdef USE_ALPHAHASH\r\n\r\n\tvPosition = vec3( position );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nvec3 objectNormal = vec3( normal );\r\n\r\n#ifdef USE_TANGENT\r\n\r\n\tvec3 objectTangent = vec3( tangent.xyz );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\r\n\r\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\r\n\treturn 0.25;\r\n\r\n}\r\n\r\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\r\n\r\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\r\n\r\n}\r\n\r\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\r\n\r\n\tvec3 halfDir = normalize( lightDir + viewDir );\r\n\r\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\r\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\r\n\r\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\r\n\r\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\r\n\r\n\tfloat D = D_BlinnPhong( shininess, dotNH );\r\n\r\n\treturn F * ( G * D );\r\n\r\n} // validated\r\n\r\n`;\r\n", "export default /* glsl */`\r\n\r\n#ifdef USE_IRIDESCENCE\r\n\r\n\t// XYZ to linear-sRGB color space\r\n\tconst mat3 XYZ_TO_REC709 = mat3(\r\n\t\t 3.2404542, -0.9692660,  0.0556434,\r\n\t\t-1.5371385,  1.8760108, -0.2040259,\r\n\t\t-0.4985314,  0.0415560,  1.0572252\r\n\t);\r\n\r\n\t// Assume air interface for top\r\n\t// Note: We don't handle the case fresnel0 == 1\r\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\r\n\r\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\r\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\r\n\r\n\t}\r\n\r\n\t// Conversion FO/IOR\r\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\r\n\r\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\r\n\r\n\t}\r\n\r\n\t// ior is a value between 1.0 and 3.0. 1.0 is air interface\r\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\r\n\r\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\r\n\r\n\t}\r\n\r\n\t// Fresnel equations for dielectric/dielectric interfaces.\r\n\t// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\r\n\t// Evaluation XYZ sensitivity curves in Fourier space\r\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\r\n\r\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\r\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\r\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\r\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\r\n\r\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\r\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\r\n\t\txyz /= 1.0685e-7;\r\n\r\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\r\n\t\treturn rgb;\r\n\r\n\t}\r\n\r\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\r\n\r\n\t\tvec3 I;\r\n\r\n\t\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\r\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\r\n\t\t// Evaluate the cosTheta on the base layer (Snell law)\r\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\r\n\r\n\t\t// Handle TIR:\r\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\r\n\t\tif ( cosTheta2Sq < 0.0 ) {\r\n\r\n\t\t\treturn vec3( 1.0 );\r\n\r\n\t\t}\r\n\r\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\r\n\r\n\t\t// First interface\r\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\r\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\r\n\t\tfloat T121 = 1.0 - R12;\r\n\t\tfloat phi12 = 0.0;\r\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\r\n\t\tfloat phi21 = PI - phi12;\r\n\r\n\t\t// Second interface\r\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0\r\n\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\r\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\r\n\t\tvec3 phi23 = vec3( 0.0 );\r\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\r\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\r\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\r\n\r\n\t\t// Phase shift\r\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\r\n\t\tvec3 phi = vec3( phi21 ) + phi23;\r\n\r\n\t\t// Compound terms\r\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\r\n\t\tvec3 r123 = sqrt( R123 );\r\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\r\n\r\n\t\t// Reflectance term for m = 0 (DC term amplitude)\r\n\t\tvec3 C0 = R12 + Rs;\r\n\t\tI = C0;\r\n\r\n\t\t// Reflectance term for m > 0 (pairs of diracs)\r\n\t\tvec3 Cm = Rs - T121;\r\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\r\n\r\n\t\t\tCm *= r123;\r\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\r\n\t\t\tI += Cm * Sm;\r\n\r\n\t\t}\r\n\r\n\t\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\r\n\t\treturn max( I, vec3( 0.0 ) );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_BUMPMAP\r\n\r\n\tuniform sampler2D bumpMap;\r\n\tuniform float bumpScale;\r\n\r\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\r\n\t// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\r\n\r\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n\tvec2 dHdxy_fwd() {\r\n\r\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\r\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\r\n\r\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\r\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\r\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\r\n\r\n\t\treturn vec2( dBx, dBy );\r\n\r\n\t}\r\n\r\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\r\n\r\n\t\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\r\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\r\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\r\n\t\tvec3 vN = surf_norm; // normalized\r\n\r\n\t\tvec3 R1 = cross( vSigmaY, vN );\r\n\t\tvec3 R2 = cross( vN, vSigmaX );\r\n\r\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\r\n\r\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\r\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if NUM_CLIPPING_PLANES > 0\r\n\r\n\tvec4 plane;\r\n\r\n\t#ifdef ALPHA_TO_COVERAGE\r\n\r\n\t\tfloat distanceToPlane, distanceGradient;\r\n\t\tfloat clipOpacity = 1.0;\r\n\r\n\t\t#pragma unroll_loop_start\r\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\r\n\r\n\t\t\tplane = clippingPlanes[ i ];\r\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\r\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\r\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\r\n\r\n\t\t\tif ( clipOpacity == 0.0 ) discard;\r\n\r\n\t\t}\r\n\t\t#pragma unroll_loop_end\r\n\r\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\r\n\r\n\t\t\tfloat unionClipOpacity = 1.0;\r\n\r\n\t\t\t#pragma unroll_loop_start\r\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\r\n\r\n\t\t\t\tplane = clippingPlanes[ i ];\r\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\r\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\r\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\r\n\r\n\t\t\t}\r\n\t\t\t#pragma unroll_loop_end\r\n\r\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\r\n\r\n\t\t#endif\r\n\r\n\t\tdiffuseColor.a *= clipOpacity;\r\n\r\n\t\tif ( diffuseColor.a == 0.0 ) discard;\r\n\r\n\t#else\r\n\r\n\t\t#pragma unroll_loop_start\r\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\r\n\r\n\t\t\tplane = clippingPlanes[ i ];\r\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\r\n\r\n\t\t}\r\n\t\t#pragma unroll_loop_end\r\n\r\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\r\n\r\n\t\t\tbool clipped = true;\r\n\r\n\t\t\t#pragma unroll_loop_start\r\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\r\n\r\n\t\t\t\tplane = clippingPlanes[ i ];\r\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\r\n\r\n\t\t\t}\r\n\t\t\t#pragma unroll_loop_end\r\n\r\n\t\t\tif ( clipped ) discard;\r\n\r\n\t\t#endif\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if NUM_CLIPPING_PLANES > 0\r\n\r\n\tvarying vec3 vClipPosition;\r\n\r\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if NUM_CLIPPING_PLANES > 0\r\n\r\n\tvarying vec3 vClipPosition;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if NUM_CLIPPING_PLANES > 0\r\n\r\n\tvClipPosition = - mvPosition.xyz;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_COLOR_ALPHA )\r\n\r\n\tdiffuseColor *= vColor;\r\n\r\n#elif defined( USE_COLOR )\r\n\r\n\tdiffuseColor.rgb *= vColor;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_COLOR_ALPHA )\r\n\r\n\tvarying vec4 vColor;\r\n\r\n#elif defined( USE_COLOR )\r\n\r\n\tvarying vec3 vColor;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_COLOR_ALPHA )\r\n\r\n\tvarying vec4 vColor;\r\n\r\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\r\n\r\n\tvarying vec3 vColor;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_COLOR_ALPHA )\r\n\r\n\tvColor = vec4( 1.0 );\r\n\r\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\r\n\r\n\tvColor = vec3( 1.0 );\r\n\r\n#endif\r\n\r\n#ifdef USE_COLOR\r\n\r\n\tvColor *= color;\r\n\r\n#endif\r\n\r\n#ifdef USE_INSTANCING_COLOR\r\n\r\n\tvColor.xyz *= instanceColor.xyz;\r\n\r\n#endif\r\n\r\n#ifdef USE_BATCHING_COLOR\r\n\r\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\r\n\r\n\tvColor.xyz *= batchingColor.xyz;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#define PI 3.141592653589793\r\n#define PI2 6.283185307179586\r\n#define PI_HALF 1.5707963267948966\r\n#define RECIPROCAL_PI 0.3183098861837907\r\n#define RECIPROCAL_PI2 0.15915494309189535\r\n#define EPSILON 1e-6\r\n\r\n#ifndef saturate\r\n// <tonemapping_pars_fragment> may have defined saturate() already\r\n#define saturate( a ) clamp( a, 0.0, 1.0 )\r\n#endif\r\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\r\n\r\nfloat pow2( const in float x ) { return x*x; }\r\nvec3 pow2( const in vec3 x ) { return x*x; }\r\nfloat pow3( const in float x ) { return x*x*x; }\r\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\r\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\r\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\r\n\r\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\r\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\r\nhighp float rand( const in vec2 uv ) {\r\n\r\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\r\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\r\n\r\n\treturn fract( sin( sn ) * c );\r\n\r\n}\r\n\r\n#ifdef HIGH_PRECISION\r\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\r\n#else\r\n\tfloat precisionSafeLength( vec3 v ) {\r\n\t\tfloat maxComponent = max3( abs( v ) );\r\n\t\treturn length( v / maxComponent ) * maxComponent;\r\n\t}\r\n#endif\r\n\r\nstruct IncidentLight {\r\n\tvec3 color;\r\n\tvec3 direction;\r\n\tbool visible;\r\n};\r\n\r\nstruct ReflectedLight {\r\n\tvec3 directDiffuse;\r\n\tvec3 directSpecular;\r\n\tvec3 indirectDiffuse;\r\n\tvec3 indirectSpecular;\r\n};\r\n\r\n#ifdef USE_ALPHAHASH\r\n\r\n\tvarying vec3 vPosition;\r\n\r\n#endif\r\n\r\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\r\n\r\n}\r\n\r\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n\t// dir can be either a direction vector or a normal vector\r\n\t// upper-left 3x3 of matrix is assumed to be orthogonal\r\n\r\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\r\n\r\n}\r\n\r\nmat3 transposeMat3( const in mat3 m ) {\r\n\r\n\tmat3 tmp;\r\n\r\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\r\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\r\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\r\n\r\n\treturn tmp;\r\n\r\n}\r\n\r\nbool isPerspectiveMatrix( mat4 m ) {\r\n\r\n\treturn m[ 2 ][ 3 ] == - 1.0;\r\n\r\n}\r\n\r\nvec2 equirectUv( in vec3 dir ) {\r\n\r\n\t// dir is assumed to be unit length\r\n\r\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\r\n\r\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\r\n\r\n\treturn vec2( u, v );\r\n\r\n}\r\n\r\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\r\n\r\n\treturn RECIPROCAL_PI * diffuseColor;\r\n\r\n} // validated\r\n\r\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\r\n\r\n\t// Original approximation by Christophe Schlick '94\r\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\r\n\r\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\r\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\r\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\r\n\r\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\r\n\r\n} // validated\r\n\r\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\r\n\r\n\t// Original approximation by Christophe Schlick '94\r\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\r\n\r\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\r\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\r\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\r\n\r\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\r\n\r\n} // validated\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef ENVMAP_TYPE_CUBE_UV\r\n\r\n\t#define cubeUV_minMipLevel 4.0\r\n\t#define cubeUV_minTileSize 16.0\r\n\r\n\t// These shader functions convert between the UV coordinates of a single face of\r\n\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\r\n\t// sampling a textureCube (not generally normalized ).\r\n\r\n\tfloat getFace( vec3 direction ) {\r\n\r\n\t\tvec3 absDirection = abs( direction );\r\n\r\n\t\tfloat face = - 1.0;\r\n\r\n\t\tif ( absDirection.x > absDirection.z ) {\r\n\r\n\t\t\tif ( absDirection.x > absDirection.y )\r\n\r\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( absDirection.z > absDirection.y )\r\n\r\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\r\n\r\n\t\t}\r\n\r\n\t\treturn face;\r\n\r\n\t}\r\n\r\n\t// RH coordinate system; PMREM face-indexing convention\r\n\tvec2 getUV( vec3 direction, float face ) {\r\n\r\n\t\tvec2 uv;\r\n\r\n\t\tif ( face == 0.0 ) {\r\n\r\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x\r\n\r\n\t\t} else if ( face == 1.0 ) {\r\n\r\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y\r\n\r\n\t\t} else if ( face == 2.0 ) {\r\n\r\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z\r\n\r\n\t\t} else if ( face == 3.0 ) {\r\n\r\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x\r\n\r\n\t\t} else if ( face == 4.0 ) {\r\n\r\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z\r\n\r\n\t\t}\r\n\r\n\t\treturn 0.5 * ( uv + 1.0 );\r\n\r\n\t}\r\n\r\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\r\n\r\n\t\tfloat face = getFace( direction );\r\n\r\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\r\n\r\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\r\n\r\n\t\tfloat faceSize = exp2( mipInt );\r\n\r\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0; // #25071\r\n\r\n\t\tif ( face > 2.0 ) {\r\n\r\n\t\t\tuv.y += faceSize;\r\n\r\n\t\t\tface -= 3.0;\r\n\r\n\t\t}\r\n\r\n\t\tuv.x += face * faceSize;\r\n\r\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\r\n\r\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\r\n\r\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\r\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\r\n\r\n\t\t#ifdef texture2DGradEXT\r\n\r\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb; // disable anisotropic filtering\r\n\r\n\t\t#else\r\n\r\n\t\t\treturn texture2D( envMap, uv ).rgb;\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\t// These defines must match with PMREMGenerator\r\n\r\n\t#define cubeUV_r0 1.0\r\n\t#define cubeUV_m0 - 2.0\r\n\t#define cubeUV_r1 0.8\r\n\t#define cubeUV_m1 - 1.0\r\n\t#define cubeUV_r4 0.4\r\n\t#define cubeUV_m4 2.0\r\n\t#define cubeUV_r5 0.305\r\n\t#define cubeUV_m5 3.0\r\n\t#define cubeUV_r6 0.21\r\n\t#define cubeUV_m6 4.0\r\n\r\n\tfloat roughnessToMip( float roughness ) {\r\n\r\n\t\tfloat mip = 0.0;\r\n\r\n\t\tif ( roughness >= cubeUV_r1 ) {\r\n\r\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\r\n\r\n\t\t} else if ( roughness >= cubeUV_r4 ) {\r\n\r\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\r\n\r\n\t\t} else if ( roughness >= cubeUV_r5 ) {\r\n\r\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\r\n\r\n\t\t} else if ( roughness >= cubeUV_r6 ) {\r\n\r\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25\r\n\t\t}\r\n\r\n\t\treturn mip;\r\n\r\n\t}\r\n\r\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\r\n\r\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\r\n\r\n\t\tfloat mipF = fract( mip );\r\n\r\n\t\tfloat mipInt = floor( mip );\r\n\r\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\r\n\r\n\t\tif ( mipF == 0.0 ) {\r\n\r\n\t\t\treturn vec4( color0, 1.0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\r\n\r\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\nvec3 transformedNormal = objectNormal;\r\n#ifdef USE_TANGENT\r\n\r\n\tvec3 transformedTangent = objectTangent;\r\n\r\n#endif\r\n\r\n#ifdef USE_BATCHING\r\n\r\n\t// this is in lieu of a per-instance normal-matrix\r\n\t// shear transforms in the instance matrix are not supported\r\n\r\n\tmat3 bm = mat3( batchingMatrix );\r\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\r\n\ttransformedNormal = bm * transformedNormal;\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\ttransformedTangent = bm * transformedTangent;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#ifdef USE_INSTANCING\r\n\r\n\t// this is in lieu of a per-instance normal-matrix\r\n\t// shear transforms in the instance matrix are not supported\r\n\r\n\tmat3 im = mat3( instanceMatrix );\r\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\r\n\ttransformedNormal = im * transformedNormal;\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\ttransformedTangent = im * transformedTangent;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\ntransformedNormal = normalMatrix * transformedNormal;\r\n\r\n#ifdef FLIP_SIDED\r\n\r\n\ttransformedNormal = - transformedNormal;\r\n\r\n#endif\r\n\r\n#ifdef USE_TANGENT\r\n\r\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\r\n\r\n\t#ifdef FLIP_SIDED\r\n\r\n\t\ttransformedTangent = - transformedTangent;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_DISPLACEMENTMAP\r\n\r\n\tuniform sampler2D displacementMap;\r\n\tuniform float displacementScale;\r\n\tuniform float displacementBias;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_DISPLACEMENTMAP\r\n\r\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_EMISSIVEMAP\r\n\r\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\r\n\r\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_EMISSIVEMAP\r\n\r\n\tuniform sampler2D emissiveMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\ngl_FragColor = linearToOutputTexel( gl_FragColor );\r\n`;\r\n", "export default /* glsl */`\r\n\r\n// http://www.russellcottrell.com/photo/matrixCalculator.htm\r\n\r\n// Linear sRGB => XYZ => Linear Display P3\r\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\r\n\tvec3( 0.8224621, 0.177538, 0.0 ),\r\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\r\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\r\n);\r\n\r\n// Linear Display P3 => XYZ => Linear sRGB\r\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\r\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\r\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\r\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\r\n);\r\n\r\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\r\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\r\n}\r\n\r\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\r\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\r\n}\r\n\r\nvec4 LinearTransferOETF( in vec4 value ) {\r\n\treturn value;\r\n}\r\n\r\nvec4 sRGBTransferOETF( in vec4 value ) {\r\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\r\n}\r\n\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ENVMAP\r\n\r\n\t#ifdef ENV_WORLDPOS\r\n\r\n\t\tvec3 cameraToFrag;\r\n\r\n\t\tif ( isOrthographic ) {\r\n\r\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\r\n\r\n\t\t}\r\n\r\n\t\t// Transforming Normal Vectors with the Inverse Transformation\r\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n\t\t#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\r\n\r\n\t\t#else\r\n\r\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\r\n\r\n\t\t#endif\r\n\r\n\t#else\r\n\r\n\t\tvec3 reflectVec = vReflect;\r\n\r\n\t#endif\r\n\r\n\t#ifdef ENVMAP_TYPE_CUBE\r\n\r\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\r\n\r\n\t#else\r\n\r\n\t\tvec4 envColor = vec4( 0.0 );\r\n\r\n\t#endif\r\n\r\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\r\n\r\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\r\n\r\n\t#elif defined( ENVMAP_BLENDING_MIX )\r\n\r\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\r\n\r\n\t#elif defined( ENVMAP_BLENDING_ADD )\r\n\r\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ENVMAP\r\n\r\n\tuniform float envMapIntensity;\r\n\tuniform float flipEnvMap;\r\n\tuniform mat3 envMapRotation;\r\n\r\n\t#ifdef ENVMAP_TYPE_CUBE\r\n\t\tuniform samplerCube envMap;\r\n\t#else\r\n\t\tuniform sampler2D envMap;\r\n\t#endif\r\n\t\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ENVMAP\r\n\r\n\tuniform float reflectivity;\r\n\r\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\r\n\r\n\t\t#define ENV_WORLDPOS\r\n\r\n\t#endif\r\n\r\n\t#ifdef ENV_WORLDPOS\r\n\r\n\t\tvarying vec3 vWorldPosition;\r\n\t\tuniform float refractionRatio;\r\n\t#else\r\n\t\tvarying vec3 vReflect;\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ENVMAP\r\n\r\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\r\n\r\n\t\t#define ENV_WORLDPOS\r\n\r\n\t#endif\r\n\r\n\t#ifdef ENV_WORLDPOS\r\n\t\t\r\n\t\tvarying vec3 vWorldPosition;\r\n\r\n\t#else\r\n\r\n\t\tvarying vec3 vReflect;\r\n\t\tuniform float refractionRatio;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ENVMAP\r\n\r\n\t#ifdef ENV_WORLDPOS\r\n\r\n\t\tvWorldPosition = worldPosition.xyz;\r\n\r\n\t#else\r\n\r\n\t\tvec3 cameraToVertex;\r\n\r\n\t\tif ( isOrthographic ) {\r\n\r\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\r\n\r\n\t\t}\r\n\r\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\r\n\r\n\t\t#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\r\n\r\n\t\t#else\r\n\r\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n\t\t#endif\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_FOG\r\n\r\n\tvFogDepth = - mvPosition.z;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_FOG\r\n\r\n\tvarying float vFogDepth;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_FOG\r\n\r\n\t#ifdef FOG_EXP2\r\n\r\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\r\n\r\n\t#else\r\n\r\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\r\n\r\n\t#endif\r\n\r\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_FOG\r\n\r\n\tuniform vec3 fogColor;\r\n\tvarying float vFogDepth;\r\n\r\n\t#ifdef FOG_EXP2\r\n\r\n\t\tuniform float fogDensity;\r\n\r\n\t#else\r\n\r\n\t\tuniform float fogNear;\r\n\t\tuniform float fogFar;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\n#ifdef USE_GRADIENTMAP\r\n\r\n\tuniform sampler2D gradientMap;\r\n\r\n#endif\r\n\r\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\r\n\r\n\t// dotNL will be from -1.0 to 1.0\r\n\tfloat dotNL = dot( normal, lightDirection );\r\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\r\n\r\n\t#ifdef USE_GRADIENTMAP\r\n\r\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\r\n\r\n\t#else\r\n\r\n\t\tvec2 fw = fwidth( coord ) * 0.5;\r\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\r\n\r\n\t#endif\r\n\r\n}\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_LIGHTMAP\r\n\r\n\tuniform sampler2D lightMap;\r\n\tuniform float lightMapIntensity;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nLambertMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb;\r\nmaterial.specularStrength = specularStrength;\r\n`;\r\n", "export default /* glsl */`\r\nvarying vec3 vViewPosition;\r\n\r\nstruct LambertMaterial {\r\n\r\n\tvec3 diffuseColor;\r\n\tfloat specularStrength;\r\n\r\n};\r\n\r\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\r\n\tvec3 irradiance = dotNL * directLight.color;\r\n\r\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\r\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert\r\n`;\r\n", "export default /* glsl */`\r\nuniform bool receiveShadow;\r\nuniform vec3 ambientLightColor;\r\n\r\n#if defined( USE_LIGHT_PROBES )\r\n\r\n\tuniform vec3 lightProbe[ 9 ];\r\n\r\n#endif\r\n\r\n// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere\r\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\r\n\r\n\t// normal is assumed to have unit length\r\n\r\n\tfloat x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t// band 0\r\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\r\n\r\n\t// band 1\r\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\r\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\r\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\r\n\r\n\t// band 2\r\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\r\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\r\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\r\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\r\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\r\n\r\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\r\n\r\n\treturn irradiance;\r\n\r\n}\r\n\r\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\r\n\r\n\tvec3 irradiance = ambientLightColor;\r\n\r\n\treturn irradiance;\r\n\r\n}\r\n\r\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\r\n\r\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\r\n\t// page 32, equation 26: E[window1]\r\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\r\n\r\n\tif ( cutoffDistance > 0.0 ) {\r\n\r\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\r\n\r\n\t}\r\n\r\n\treturn distanceFalloff;\r\n\r\n}\r\n\r\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\r\n\r\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\r\n\r\n}\r\n\r\n#if NUM_DIR_LIGHTS > 0\r\n\r\n\tstruct DirectionalLight {\r\n\t\tvec3 direction;\r\n\t\tvec3 color;\r\n\t};\r\n\r\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\r\n\r\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\r\n\r\n\t\tlight.color = directionalLight.color;\r\n\t\tlight.direction = directionalLight.direction;\r\n\t\tlight.visible = true;\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_POINT_LIGHTS > 0\r\n\r\n\tstruct PointLight {\r\n\t\tvec3 position;\r\n\t\tvec3 color;\r\n\t\tfloat distance;\r\n\t\tfloat decay;\r\n\t};\r\n\r\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\r\n\r\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\r\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\r\n\r\n\t\tvec3 lVector = pointLight.position - geometryPosition;\r\n\r\n\t\tlight.direction = normalize( lVector );\r\n\r\n\t\tfloat lightDistance = length( lVector );\r\n\r\n\t\tlight.color = pointLight.color;\r\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\r\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_SPOT_LIGHTS > 0\r\n\r\n\tstruct SpotLight {\r\n\t\tvec3 position;\r\n\t\tvec3 direction;\r\n\t\tvec3 color;\r\n\t\tfloat distance;\r\n\t\tfloat decay;\r\n\t\tfloat coneCos;\r\n\t\tfloat penumbraCos;\r\n\t};\r\n\r\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\r\n\r\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\r\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\r\n\r\n\t\tvec3 lVector = spotLight.position - geometryPosition;\r\n\r\n\t\tlight.direction = normalize( lVector );\r\n\r\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\r\n\r\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\r\n\r\n\t\tif ( spotAttenuation > 0.0 ) {\r\n\r\n\t\t\tfloat lightDistance = length( lVector );\r\n\r\n\t\t\tlight.color = spotLight.color * spotAttenuation;\r\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\r\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlight.color = vec3( 0.0 );\r\n\t\t\tlight.visible = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_RECT_AREA_LIGHTS > 0\r\n\r\n\tstruct RectAreaLight {\r\n\t\tvec3 color;\r\n\t\tvec3 position;\r\n\t\tvec3 halfWidth;\r\n\t\tvec3 halfHeight;\r\n\t};\r\n\r\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\r\n\t// BRDF approximation Texture is 64x64\r\n\tuniform sampler2D ltc_1; // RGBA Float\r\n\tuniform sampler2D ltc_2; // RGBA Float\r\n\r\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\r\n\r\n#endif\r\n\r\n\r\n#if NUM_HEMI_LIGHTS > 0\r\n\r\n\tstruct HemisphereLight {\r\n\t\tvec3 direction;\r\n\t\tvec3 skyColor;\r\n\t\tvec3 groundColor;\r\n\t};\r\n\r\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\r\n\r\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\r\n\r\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\r\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\r\n\r\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\r\n\r\n\t\treturn irradiance;\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ENVMAP\r\n\r\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\r\n\r\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\r\n\r\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\r\n\r\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\r\n\r\n\t\t#else\r\n\r\n\t\t\treturn vec3( 0.0 );\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\r\n\r\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\r\n\r\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\r\n\r\n\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\r\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\r\n\r\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n\r\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\r\n\r\n\t\t\treturn envMapColor.rgb * envMapIntensity;\r\n\r\n\t\t#else\r\n\r\n\t\t\treturn vec3( 0.0 );\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\t#ifdef USE_ANISOTROPY\r\n\r\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\r\n\r\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\r\n\r\n\t\t\t  // https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\r\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\r\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\r\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\r\n\r\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\treturn vec3( 0.0 );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nToonMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb;\r\n`;\r\n", "export default /* glsl */`\r\nvarying vec3 vViewPosition;\r\n\r\nstruct ToonMaterial {\r\n\r\n\tvec3 diffuseColor;\r\n\r\n};\r\n\r\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\r\n\r\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\n#define RE_Direct\t\t\t\tRE_Direct_Toon\r\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\r\n`;\r\n", "export default /* glsl */`\r\nBlinnPhongMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb;\r\nmaterial.specularColor = specular;\r\nmaterial.specularShininess = shininess;\r\nmaterial.specularStrength = specularStrength;\r\n`;\r\n", "export default /* glsl */`\r\nvarying vec3 vViewPosition;\r\n\r\nstruct BlinnPhongMaterial {\r\n\r\n\tvec3 diffuseColor;\r\n\tvec3 specularColor;\r\n\tfloat specularShininess;\r\n\tfloat specularStrength;\r\n\r\n};\r\n\r\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\r\n\tvec3 irradiance = dotNL * directLight.color;\r\n\r\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\r\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\r\n`;\r\n", "export default /* glsl */`\r\nPhysicalMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\r\n\r\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\r\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\r\n\r\nmaterial.roughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.\r\nmaterial.roughness += geometryRoughness;\r\nmaterial.roughness = min( material.roughness, 1.0 );\r\n\r\n#ifdef IOR\r\n\r\n\tmaterial.ior = ior;\r\n\r\n\t#ifdef USE_SPECULAR\r\n\r\n\t\tfloat specularIntensityFactor = specularIntensity;\r\n\t\tvec3 specularColorFactor = specularColor;\r\n\r\n\t\t#ifdef USE_SPECULAR_COLORMAP\r\n\r\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\r\n\r\n\t\t#endif\r\n\r\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\r\n\r\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\r\n\r\n\t\t#endif\r\n\r\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\r\n\r\n\t#else\r\n\r\n\t\tfloat specularIntensityFactor = 1.0;\r\n\t\tvec3 specularColorFactor = vec3( 1.0 );\r\n\t\tmaterial.specularF90 = 1.0;\r\n\r\n\t#endif\r\n\r\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\r\n\r\n#else\r\n\r\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\r\n\tmaterial.specularF90 = 1.0;\r\n\r\n#endif\r\n\r\n#ifdef USE_CLEARCOAT\r\n\r\n\tmaterial.clearcoat = clearcoat;\r\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\r\n\tmaterial.clearcoatF0 = vec3( 0.04 );\r\n\tmaterial.clearcoatF90 = 1.0;\r\n\r\n\t#ifdef USE_CLEARCOATMAP\r\n\r\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\r\n\r\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\r\n\r\n\t#endif\r\n\r\n\tmaterial.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model\r\n\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\r\n\tmaterial.clearcoatRoughness += geometryRoughness;\r\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\r\n\r\n#endif\r\n\r\n#ifdef USE_DISPERSION\r\n\r\n\tmaterial.dispersion = dispersion;\r\n\r\n#endif\r\n\r\n#ifdef USE_IRIDESCENCE\r\n\r\n\tmaterial.iridescence = iridescence;\r\n\tmaterial.iridescenceIOR = iridescenceIOR;\r\n\r\n\t#ifdef USE_IRIDESCENCEMAP\r\n\r\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\r\n\r\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\r\n\r\n\t#else\r\n\r\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#ifdef USE_SHEEN\r\n\r\n\tmaterial.sheenColor = sheenColor;\r\n\r\n\t#ifdef USE_SHEEN_COLORMAP\r\n\r\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\r\n\r\n\t#endif\r\n\r\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\r\n\r\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\r\n\r\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#ifdef USE_ANISOTROPY\r\n\r\n\t#ifdef USE_ANISOTROPYMAP\r\n\r\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\r\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\r\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\r\n\r\n\t#else\r\n\r\n\t\tvec2 anisotropyV = anisotropyVector;\r\n\r\n\t#endif\r\n\r\n\tmaterial.anisotropy = length( anisotropyV );\r\n\r\n\tif( material.anisotropy == 0.0 ) {\r\n\t\tanisotropyV = vec2( 1.0, 0.0 );\r\n\t} else {\r\n\t\tanisotropyV /= material.anisotropy;\r\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\r\n\t}\r\n\r\n\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\r\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\r\n\r\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\r\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\nstruct PhysicalMaterial {\r\n\r\n\tvec3 diffuseColor;\r\n\tfloat roughness;\r\n\tvec3 specularColor;\r\n\tfloat specularF90;\r\n\tfloat dispersion;\r\n\r\n\t#ifdef USE_CLEARCOAT\r\n\t\tfloat clearcoat;\r\n\t\tfloat clearcoatRoughness;\r\n\t\tvec3 clearcoatF0;\r\n\t\tfloat clearcoatF90;\r\n\t#endif\r\n\r\n\t#ifdef USE_IRIDESCENCE\r\n\t\tfloat iridescence;\r\n\t\tfloat iridescenceIOR;\r\n\t\tfloat iridescenceThickness;\r\n\t\tvec3 iridescenceFresnel;\r\n\t\tvec3 iridescenceF0;\r\n\t#endif\r\n\r\n\t#ifdef USE_SHEEN\r\n\t\tvec3 sheenColor;\r\n\t\tfloat sheenRoughness;\r\n\t#endif\r\n\r\n\t#ifdef IOR\r\n\t\tfloat ior;\r\n\t#endif\r\n\r\n\t#ifdef USE_TRANSMISSION\r\n\t\tfloat transmission;\r\n\t\tfloat transmissionAlpha;\r\n\t\tfloat thickness;\r\n\t\tfloat attenuationDistance;\r\n\t\tvec3 attenuationColor;\r\n\t#endif\r\n\r\n\t#ifdef USE_ANISOTROPY\r\n\t\tfloat anisotropy;\r\n\t\tfloat alphaT;\r\n\t\tvec3 anisotropyT;\r\n\t\tvec3 anisotropyB;\r\n\t#endif\r\n\r\n};\r\n\r\n// temporary\r\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\r\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\r\nvec3 sheenSpecularDirect = vec3( 0.0 );\r\nvec3 sheenSpecularIndirect = vec3(0.0 );\r\n\r\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\r\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\r\n    float x2 = x * x;\r\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\r\n\r\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\r\n}\r\n\r\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\r\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\r\n\r\n\tfloat a2 = pow2( alpha );\r\n\r\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\r\n\r\n\treturn 0.5 / max( gv + gl, EPSILON );\r\n\r\n}\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is \"roughness squared\" in Disney’s reparameterization\r\nfloat D_GGX( const in float alpha, const in float dotNH ) {\r\n\r\n\tfloat a2 = pow2( alpha );\r\n\r\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\r\n\r\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\r\n\r\n}\r\n\r\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\r\n#ifdef USE_ANISOTROPY\r\n\r\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\r\n\r\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\r\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\r\n\t\tfloat v = 0.5 / ( gv + gl );\r\n\r\n\t\treturn saturate(v);\r\n\r\n\t}\r\n\r\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\r\n\r\n\t\tfloat a2 = alphaT * alphaB;\r\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\r\n\t\thighp float v2 = dot( v, v );\r\n\t\tfloat w2 = a2 / v2;\r\n\r\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#ifdef USE_CLEARCOAT\r\n\r\n\t// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\r\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\r\n\r\n\t\tvec3 f0 = material.clearcoatF0;\r\n\t\tfloat f90 = material.clearcoatF90;\r\n\t\tfloat roughness = material.clearcoatRoughness;\r\n\r\n\t\tfloat alpha = pow2( roughness ); // UE4's roughness\r\n\r\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\r\n\r\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\r\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\r\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\r\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\r\n\r\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\r\n\r\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\r\n\r\n\t\tfloat D = D_GGX( alpha, dotNH );\r\n\r\n\t\treturn F * ( V * D );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\r\n\r\n\tvec3 f0 = material.specularColor;\r\n\tfloat f90 = material.specularF90;\r\n\tfloat roughness = material.roughness;\r\n\r\n\tfloat alpha = pow2( roughness ); // UE4's roughness\r\n\r\n\tvec3 halfDir = normalize( lightDir + viewDir );\r\n\r\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\r\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\r\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\r\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\r\n\r\n\tvec3 F = F_Schlick( f0, f90, dotVH );\r\n\r\n\t#ifdef USE_IRIDESCENCE\r\n\r\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_ANISOTROPY\r\n\r\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\r\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\r\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\r\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\r\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\r\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\r\n\r\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\r\n\r\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\r\n\r\n\t#else\r\n\r\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\r\n\r\n\t\tfloat D = D_GGX( alpha, dotNH );\r\n\r\n\t#endif\r\n\r\n\treturn F * ( V * D );\r\n\r\n}\r\n\r\n// Rect Area Light\r\n\r\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\r\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\r\n// code: https://github.com/selfshadow/ltc_code/\r\n\r\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\r\n\r\n\tconst float LUT_SIZE = 64.0;\r\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\r\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\r\n\r\n\tfloat dotNV = saturate( dot( N, V ) );\r\n\r\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\r\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\r\n\r\n\tuv = uv * LUT_SCALE + LUT_BIAS;\r\n\r\n\treturn uv;\r\n\r\n}\r\n\r\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\r\n\r\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\r\n\t// An approximation of the form factor of a horizon-clipped rectangle.\r\n\r\n\tfloat l = length( f );\r\n\r\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\r\n\r\n}\r\n\r\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\r\n\r\n\tfloat x = dot( v1, v2 );\r\n\r\n\tfloat y = abs( x );\r\n\r\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\r\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\r\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\r\n\tfloat v = a / b;\r\n\r\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\r\n\r\n\treturn cross( v1, v2 ) * theta_sintheta;\r\n\r\n}\r\n\r\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\r\n\r\n\t// bail if point is on back side of plane of light\r\n\t// assumes ccw winding order of light vertices\r\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\r\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\r\n\tvec3 lightNormal = cross( v1, v2 );\r\n\r\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\r\n\r\n\t// construct orthonormal basis around N\r\n\tvec3 T1, T2;\r\n\tT1 = normalize( V - N * dot( V, N ) );\r\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\r\n\r\n\t// compute transform\r\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\r\n\r\n\t// transform rect\r\n\tvec3 coords[ 4 ];\r\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\r\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\r\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\r\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\r\n\r\n\t// project rect onto sphere\r\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\r\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\r\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\r\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\r\n\r\n\t// calculate vector form factor\r\n\tvec3 vectorFormFactor = vec3( 0.0 );\r\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\r\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\r\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\r\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\r\n\r\n\t// adjust for horizon clipping\r\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\r\n\r\n/*\r\n\t// alternate method of adjusting for horizon clipping (see referece)\r\n\t// refactoring required\r\n\tfloat len = length( vectorFormFactor );\r\n\tfloat z = vectorFormFactor.z / len;\r\n\r\n\tconst float LUT_SIZE = 64.0;\r\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\r\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\r\n\r\n\t// tabulated horizon-clipped sphere, apparently...\r\n\tvec2 uv = vec2( z * 0.5 + 0.5, len );\r\n\tuv = uv * LUT_SCALE + LUT_BIAS;\r\n\r\n\tfloat scale = texture2D( ltc_2, uv ).w;\r\n\r\n\tfloat result = len * scale;\r\n*/\r\n\r\n\treturn vec3( result );\r\n\r\n}\r\n\r\n// End Rect Area Light\r\n\r\n#if defined( USE_SHEEN )\r\n\r\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\r\nfloat D_Charlie( float roughness, float dotNH ) {\r\n\r\n\tfloat alpha = pow2( roughness );\r\n\r\n\t// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\r\n\tfloat invAlpha = 1.0 / alpha;\r\n\tfloat cos2h = dotNH * dotNH;\r\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\r\n\r\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\r\n\r\n}\r\n\r\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\r\nfloat V_Neubelt( float dotNV, float dotNL ) {\r\n\r\n\t// Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\r\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\r\n\r\n}\r\n\r\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\r\n\r\n\tvec3 halfDir = normalize( lightDir + viewDir );\r\n\r\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\r\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\r\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\r\n\r\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\r\n\tfloat V = V_Neubelt( dotNV, dotNL );\r\n\r\n\treturn sheenColor * ( D * V );\r\n\r\n}\r\n\r\n#endif\r\n\r\n// This is a curve-fit approxmation to the \"Charlie sheen\" BRDF integrated over the hemisphere from \r\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\r\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\r\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\r\n\r\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\r\n\r\n\tfloat r2 = roughness * roughness;\r\n\r\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\r\n\r\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\r\n\r\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\r\n\r\n\treturn saturate( DG * RECIPROCAL_PI );\r\n\r\n}\r\n\r\n// Analytical approximation of the DFG LUT, one half of the\r\n// split-sum approximation used in indirect specular lighting.\r\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\r\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\r\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\r\n\r\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\r\n\r\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\r\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n\tvec4 r = roughness * c0 + c1;\r\n\r\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\r\n\r\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\r\n\r\n\treturn fab;\r\n\r\n}\r\n\r\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\r\n\r\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\r\n\r\n\treturn specularColor * fab.x + specularF90 * fab.y;\r\n\r\n}\r\n\r\n// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\r\n// Approximates multiscattering in order to preserve energy.\r\n// http://www.jcgt.org/published/0008/01/03/\r\n#ifdef USE_IRIDESCENCE\r\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\r\n#else\r\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\r\n#endif\r\n\r\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\r\n\r\n\t#ifdef USE_IRIDESCENCE\r\n\r\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\r\n\r\n\t#else\r\n\r\n\t\tvec3 Fr = specularColor;\r\n\r\n\t#endif\r\n\r\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\r\n\r\n\tfloat Ess = fab.x + fab.y;\r\n\tfloat Ems = 1.0 - Ess;\r\n\r\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21\r\n\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\r\n\r\n\tsingleScatter += FssEss;\r\n\tmultiScatter += Fms * Ems;\r\n\r\n}\r\n\r\n#if NUM_RECT_AREA_LIGHTS > 0\r\n\r\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\t\tvec3 normal = geometryNormal;\r\n\t\tvec3 viewDir = geometryViewDir;\r\n\t\tvec3 position = geometryPosition;\r\n\t\tvec3 lightPos = rectAreaLight.position;\r\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\r\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\r\n\t\tvec3 lightColor = rectAreaLight.color;\r\n\t\tfloat roughness = material.roughness;\r\n\r\n\t\tvec3 rectCoords[ 4 ];\r\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction\r\n\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\r\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\r\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\r\n\r\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\r\n\r\n\t\tvec4 t1 = texture2D( ltc_1, uv );\r\n\t\tvec4 t2 = texture2D( ltc_2, uv );\r\n\r\n\t\tmat3 mInv = mat3(\r\n\t\t\tvec3( t1.x, 0, t1.y ),\r\n\t\t\tvec3(    0, 1,    0 ),\r\n\t\t\tvec3( t1.z, 0, t1.w )\r\n\t\t);\r\n\r\n\t\t// LTC Fresnel Approximation by Stephen Hill\r\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\r\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\r\n\r\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\r\n\r\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\r\n\r\n\tvec3 irradiance = dotNL * directLight.color;\r\n\r\n\t#ifdef USE_CLEARCOAT\r\n\r\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\r\n\r\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\r\n\r\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_SHEEN\r\n\r\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\r\n\r\n\t#endif\r\n\r\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\r\n\r\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n}\r\n\r\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\r\n\r\n\t#ifdef USE_CLEARCOAT\r\n\r\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_SHEEN\r\n\r\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\r\n\r\n\t#endif\r\n\r\n\t// Both indirect specular and indirect diffuse light accumulate here\r\n\r\n\tvec3 singleScattering = vec3( 0.0 );\r\n\tvec3 multiScattering = vec3( 0.0 );\r\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\r\n\r\n\t#ifdef USE_IRIDESCENCE\r\n\r\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\r\n\r\n\t#else\r\n\r\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\r\n\r\n\t#endif\r\n\r\n\tvec3 totalScattering = singleScattering + multiScattering;\r\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\r\n\r\n\treflectedLight.indirectSpecular += radiance * singleScattering;\r\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\r\n\r\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\r\n\r\n}\r\n\r\n#define RE_Direct\t\t\t\tRE_Direct_Physical\r\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\r\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\r\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\r\n\r\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\r\n\r\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\r\n\r\n}\r\n`;\r\n", "export default /* glsl */`\r\n/**\r\n * This is a template that can be used to light a material, it uses pluggable\r\n * RenderEquations (RE)for specific lighting scenarios.\r\n *\r\n * Instructions for use:\r\n * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\r\n * - Create a material parameter that is to be passed as the third parameter to your lighting functions.\r\n *\r\n * TODO:\r\n * - Add area light support.\r\n * - Add sphere light support.\r\n * - Add diffuse light probe (irradiance cubemap) support.\r\n */\r\n\r\nvec3 geometryPosition = - vViewPosition;\r\nvec3 geometryNormal = normal;\r\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\r\n\r\nvec3 geometryClearcoatNormal = vec3( 0.0 );\r\n\r\n#ifdef USE_CLEARCOAT\r\n\r\n\tgeometryClearcoatNormal = clearcoatNormal;\r\n\r\n#endif\r\n\r\n#ifdef USE_IRIDESCENCE\r\n\r\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\r\n\r\n\tif ( material.iridescenceThickness == 0.0 ) {\r\n\r\n\t\tmaterial.iridescence = 0.0;\r\n\r\n\t} else {\r\n\r\n\t\tmaterial.iridescence = saturate( material.iridescence );\r\n\r\n\t}\r\n\r\n\tif ( material.iridescence > 0.0 ) {\r\n\r\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\r\n\r\n\t\t// Iridescence F0 approximation\r\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\nIncidentLight directLight;\r\n\r\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n\tPointLight pointLight;\r\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\r\n\tPointLightShadow pointLightShadow;\r\n\t#endif\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\tpointLight = pointLights[ i ];\r\n\r\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\r\n\r\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\r\n\t\tpointLightShadow = pointLightShadows[ i ];\r\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\r\n\t\t#endif\r\n\r\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n#endif\r\n\r\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n\tSpotLight spotLight;\r\n\tvec4 spotColor;\r\n\tvec3 spotLightCoord;\r\n\tbool inSpotLightMap;\r\n\r\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\r\n\tSpotLightShadow spotLightShadow;\r\n\t#endif\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n\t\tspotLight = spotLights[ i ];\r\n\r\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\r\n\r\n\t\t// spot lights are ordered [shadows with maps, shadows without maps, maps without shadows, none]\r\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\r\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\r\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\r\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\r\n\t\t#else\r\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\r\n\t\t#endif\r\n\r\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\r\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\r\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\r\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\r\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\r\n\t\t#endif\r\n\r\n\t\t#undef SPOT_LIGHT_MAP_INDEX\r\n\r\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\r\n\t\tspotLightShadow = spotLightShadows[ i ];\r\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\r\n\t\t#endif\r\n\r\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n#endif\r\n\r\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n\tDirectionalLight directionalLight;\r\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\r\n\tDirectionalLightShadow directionalLightShadow;\r\n\t#endif\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n\t\tdirectionalLight = directionalLights[ i ];\r\n\r\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\r\n\r\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\r\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\r\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n\t\t#endif\r\n\r\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n#endif\r\n\r\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\r\n\r\n\tRectAreaLight rectAreaLight;\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\r\n\r\n\t\trectAreaLight = rectAreaLights[ i ];\r\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n#endif\r\n\r\n#if defined( RE_IndirectDiffuse )\r\n\r\n\tvec3 iblIrradiance = vec3( 0.0 );\r\n\r\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n\t#if defined( USE_LIGHT_PROBES )\r\n\r\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\r\n\r\n\t#endif\r\n\r\n\t#if ( NUM_HEMI_LIGHTS > 0 )\r\n\r\n\t\t#pragma unroll_loop_start\r\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\r\n\r\n\t\t}\r\n\t\t#pragma unroll_loop_end\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#if defined( RE_IndirectSpecular )\r\n\r\n\tvec3 radiance = vec3( 0.0 );\r\n\tvec3 clearcoatRadiance = vec3( 0.0 );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( RE_IndirectDiffuse )\r\n\r\n\t#ifdef USE_LIGHTMAP\r\n\r\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\r\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\r\n\r\n\t\tirradiance += lightMapIrradiance;\r\n\r\n\t#endif\r\n\r\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\r\n\r\n\t#ifdef USE_ANISOTROPY\r\n\r\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\r\n\r\n\t#else\r\n\r\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_CLEARCOAT\r\n\r\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( RE_IndirectDiffuse )\r\n\r\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\r\n\r\n#endif\r\n\r\n#if defined( RE_IndirectSpecular )\r\n\r\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_LOGDEPTHBUF )\r\n\r\n\t// Doing a strict comparison with == 1.0 can cause noise artifacts\r\n\t// on some platforms. See issue #17623.\r\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_LOGDEPTHBUF )\r\n\r\n\tuniform float logDepthBufFC;\r\n\tvarying float vFragDepth;\r\n\tvarying float vIsPerspective;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_LOGDEPTHBUF\r\n\r\n\tvarying float vFragDepth;\r\n\tvarying float vIsPerspective;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_LOGDEPTHBUF\r\n\r\n\tvFragDepth = 1.0 + gl_Position.w;\r\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_MAP\r\n\r\n#ifdef USE_MIPMAP_BIAS\r\n    vec4 sampledDiffuseColor = texture2D( map, vMapUv, mipmapBias );\r\n#else\r\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\r\n#endif\r\n\r\n\t#ifdef DECODE_VIDEO_TEXTURE\r\n\r\n\t\t// use inline sRGB decode until browsers properly support SRGB8_ALPHA8 with video textures (#26516)\r\n\r\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\r\n\t\r\n\t#endif\r\n\r\n\tdiffuseColor *= sampledDiffuseColor;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_MAP\r\n\r\n\tuniform sampler2D map;\r\n        \r\n#ifdef USE_MIPMAP_BIAS\r\n    uniform float mipmapBias;\r\n#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\r\n\r\n\t#if defined( USE_POINTS_UV )\r\n\r\n\t\tvec2 uv = vUv;\r\n\r\n\t#else\r\n\r\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#ifdef USE_MAP\r\n\r\n\tdiffuseColor *= texture2D( map, uv );\r\n\r\n#endif\r\n\r\n#ifdef USE_ALPHAMAP\r\n\r\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_POINTS_UV )\r\n\r\n\tvarying vec2 vUv;\r\n\r\n#else\r\n\r\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\r\n\r\n\t\tuniform mat3 uvTransform;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#ifdef USE_MAP\r\n\r\n\tuniform sampler2D map;\r\n\r\n#endif\r\n\r\n#ifdef USE_ALPHAMAP\r\n\r\n\tuniform sampler2D alphaMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nfloat metalnessFactor = metalness;\r\n\r\n#ifdef USE_METALNESSMAP\r\n\r\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\r\n\r\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\r\n\tmetalnessFactor *= texelMetalness.b;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_METALNESSMAP\r\n\r\n\tuniform sampler2D metalnessMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_INSTANCING_MORPH\r\n\r\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\r\n\r\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\r\n\r\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\r\n\r\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\r\n\r\n\t}\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_MORPHCOLORS )\r\n\r\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\r\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\r\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\r\n\tvColor *= morphTargetBaseInfluence;\r\n\r\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\r\n\r\n\t\t#if defined( USE_COLOR_ALPHA )\r\n\r\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\r\n\r\n\t\t#elif defined( USE_COLOR )\r\n\r\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_MORPHNORMALS\r\n\r\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\r\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\r\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\r\n\tobjectNormal *= morphTargetBaseInfluence;\r\n\r\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\r\n\r\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_MORPHTARGETS\r\n\r\n\t#ifndef USE_INSTANCING_MORPH\r\n\r\n\t\tuniform float morphTargetBaseInfluence;\r\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\r\n\r\n\t#endif\r\n\r\n\tuniform sampler2DArray morphTargetsTexture;\r\n\tuniform ivec2 morphTargetsTextureSize;\r\n\r\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\r\n\r\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\r\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\r\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\r\n\r\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\r\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_MORPHTARGETS\r\n\r\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\r\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)\r\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\r\n\ttransformed *= morphTargetBaseInfluence;\r\n\r\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\r\n\r\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nfloat faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\r\n\r\n#ifdef FLAT_SHADED\r\n\r\n\tvec3 fdx = dFdx( vViewPosition );\r\n\tvec3 fdy = dFdy( vViewPosition );\r\n\tvec3 normal = normalize( cross( fdx, fdy ) );\r\n\r\n#else\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\r\n\t#ifdef DOUBLE_SIDED\r\n\r\n\t\tnormal *= faceDirection;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\r\n\r\n\t#else\r\n\r\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\r\n\t\t#if defined( USE_NORMALMAP )\r\n\t\t\tvNormalMapUv\r\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\r\n\t\t\tvClearcoatNormalMapUv\r\n\t\t#else\r\n\t\t\tvUv\r\n\t\t#endif\r\n\t\t);\r\n\r\n\t#endif\r\n\r\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\r\n\r\n\t\ttbn[0] *= faceDirection;\r\n\t\ttbn[1] *= faceDirection;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n#ifdef USE_CLEARCOAT_NORMALMAP\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\r\n\r\n\t#else\r\n\r\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\r\n\r\n\t#endif\r\n\r\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\r\n\r\n\t\ttbn2[0] *= faceDirection;\r\n\t\ttbn2[1] *= faceDirection;\r\n\r\n\t#endif\r\n\r\n#endif\r\n\r\n// non perturbed normal for clearcoat among others\r\n\r\nvec3 nonPerturbedNormal = normal;\r\n\r\n`;\r\n", "export default /* glsl */`\r\n\r\n#ifdef USE_NORMALMAP_OBJECTSPACE\r\n\r\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\r\n\r\n\t#ifdef FLIP_SIDED\r\n\r\n\t\tnormal = - normal;\r\n\r\n\t#endif\r\n\r\n\t#ifdef DOUBLE_SIDED\r\n\r\n\t\tnormal = normal * faceDirection;\r\n\r\n\t#endif\r\n\r\n\tnormal = normalize( normalMatrix * normal );\r\n\r\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\r\n\r\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\r\n\tmapN.xy *= normalScale;\r\n\r\n\tnormal = normalize( tbn * mapN );\r\n\r\n#elif defined( USE_BUMPMAP )\r\n\r\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\tvarying vec3 vTangent;\r\n\t\tvarying vec3 vBitangent;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\tvarying vec3 vTangent;\r\n\t\tvarying vec3 vBitangent;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifndef FLAT_SHADED // normal is computed with derivatives when FLAT_SHADED\r\n\r\n\tvNormal = normalize( transformedNormal );\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\tvTangent = normalize( transformedTangent );\r\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_NORMALMAP\r\n\r\n\tuniform sampler2D normalMap;\r\n\tuniform vec2 normalScale;\r\n\r\n#endif\r\n\r\n#ifdef USE_NORMALMAP_OBJECTSPACE\r\n\r\n\tuniform mat3 normalMatrix;\r\n\r\n#endif\r\n\r\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\r\n\r\n\t// Normal Mapping Without Precomputed Tangents\r\n\t// http://www.thetenthplanet.de/archives/1180\r\n\r\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\r\n\r\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\r\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\r\n\t\tvec2 st0 = dFdx( uv.st );\r\n\t\tvec2 st1 = dFdy( uv.st );\r\n\r\n\t\tvec3 N = surf_norm; // normalized\r\n\r\n\t\tvec3 q1perp = cross( q1, N );\r\n\t\tvec3 q0perp = cross( N, q0 );\r\n\r\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\r\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\r\n\r\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\r\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\r\n\r\n\t\treturn mat3( T * scale, B * scale, N );\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_CLEARCOAT\r\n\r\n\tvec3 clearcoatNormal = nonPerturbedNormal;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_CLEARCOAT_NORMALMAP\r\n\r\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\r\n\tclearcoatMapN.xy *= clearcoatNormalScale;\r\n\r\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\n#ifdef USE_CLEARCOATMAP\r\n\r\n\tuniform sampler2D clearcoatMap;\r\n\r\n#endif\r\n\r\n#ifdef USE_CLEARCOAT_NORMALMAP\r\n\r\n\tuniform sampler2D clearcoatNormalMap;\r\n\tuniform vec2 clearcoatNormalScale;\r\n\r\n#endif\r\n\r\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\r\n\r\n\tuniform sampler2D clearcoatRoughnessMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\n#ifdef USE_IRIDESCENCEMAP\r\n\r\n\tuniform sampler2D iridescenceMap;\r\n\r\n#endif\r\n\r\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\r\n\r\n\tuniform sampler2D iridescenceThicknessMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef OPAQUE\r\ndiffuseColor.a = 1.0;\r\n#endif\r\n\r\n#ifdef USE_TRANSMISSION\r\ndiffuseColor.a *= material.transmissionAlpha;\r\n#endif\r\n\r\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n`;\r\n", "export default /* glsl */`\r\nvec3 packNormalToRGB( const in vec3 normal ) {\r\n\treturn normalize( normal ) * 0.5 + 0.5;\r\n}\r\n\r\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\r\n\treturn 2.0 * rgb.xyz - 1.0;\r\n}\r\n\r\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\r\nconst float ShiftRight8 = 1. / 256.;\r\nconst float Inv255 = 1. / 255.;\r\n\r\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\r\n\r\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\r\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\r\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\r\n\r\nvec4 packDepthToRGBA( const in float v ) {\r\n\tif( v <= 0.0 )\r\n\t\treturn vec4( 0., 0., 0., 0. );\r\n\tif( v >= 1.0 )\r\n\t\treturn vec4( 1., 1., 1., 1. );\r\n\tfloat vuf;\r\n\tfloat af = modf( v * PackFactors.a, vuf );\r\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\r\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\r\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\r\n}\r\n\r\nvec3 packDepthToRGB( const in float v ) {\r\n\tif( v <= 0.0 )\r\n\t\treturn vec3( 0., 0., 0. );\r\n\tif( v >= 1.0 )\r\n\t\treturn vec3( 1., 1., 1. );\r\n\tfloat vuf;\r\n\tfloat bf = modf( v * PackFactors.b, vuf );\r\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\r\n\t// the 0.9999 tweak is unimportant, very tiny empirical improvement\r\n\t// return vec3( vuf * Inv255, gf * PackUpscale, bf * 0.9999 );\r\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\r\n}\r\n\r\nvec2 packDepthToRG( const in float v ) {\r\n\tif( v <= 0.0 )\r\n\t\treturn vec2( 0., 0. );\r\n\tif( v >= 1.0 )\r\n\t\treturn vec2( 1., 1. );\r\n\tfloat vuf;\r\n\tfloat gf = modf( v * 256., vuf );\r\n\treturn vec2( vuf * Inv255, gf );\r\n}\r\n\r\nfloat unpackRGBAToDepth( const in vec4 v ) {\r\n\treturn dot( v, UnpackFactors4 );\r\n}\r\n\r\nfloat unpackRGBToDepth( const in vec3 v ) {\r\n\treturn dot( v, UnpackFactors3 );\r\n}\r\n\r\nfloat unpackRGToDepth( const in vec2 v ) {\r\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\r\n}\r\n\r\nvec4 pack2HalfToRGBA( const in vec2 v ) {\r\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\r\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\r\n}\r\n\r\nvec2 unpackRGBATo2Half( const in vec4 v ) {\r\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\r\n}\r\n\r\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\r\n\r\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\r\n\t// -near maps to 0; -far maps to 1\r\n\treturn ( viewZ + near ) / ( near - far );\r\n}\r\n\r\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\r\n\t// maps orthographic depth in [ 0, 1 ] to viewZ\r\n\treturn depth * ( near - far ) - near;\r\n}\r\n\r\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\r\n\r\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\r\n\t// -near maps to 0; -far maps to 1\r\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\r\n}\r\n\r\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\r\n\t// maps perspective depth in [ 0, 1 ] to viewZ\r\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\r\n}\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef PREMULTIPLIED_ALPHA\r\n\r\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\r\n\tgl_FragColor.rgb *= gl_FragColor.a;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nvec4 mvPosition = vec4( transformed, 1.0 );\r\n\r\n#ifdef USE_BATCHING\r\n\r\n\tmvPosition = batchingMatrix * mvPosition;\r\n\r\n#endif\r\n\r\n#ifdef USE_INSTANCING\r\n\r\n\tmvPosition = instanceMatrix * mvPosition;\r\n\r\n#endif\r\n\r\nmvPosition = modelViewMatrix * mvPosition;\r\n\r\ngl_Position = projectionMatrix * mvPosition;\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef DITHERING\r\n\r\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef DITHERING\r\n\r\n\t// based on https://www.shadertoy.com/view/MslGR8\r\n\tvec3 dithering( vec3 color ) {\r\n\t\t//Calculate grid position\r\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\r\n\r\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\r\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\r\n\r\n\t\t//modify shift according to grid position.\r\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\r\n\r\n\t\t//shift the color by dither_shift\r\n\t\treturn color + dither_shift_RGB;\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nfloat roughnessFactor = roughness;\r\n\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\r\n\r\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\r\n\troughnessFactor *= texelRoughness.g;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n\tuniform sampler2D roughnessMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if NUM_SPOT_LIGHT_COORDS > 0\r\n\r\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\r\n\r\n#endif\r\n\r\n#if NUM_SPOT_LIGHT_MAPS > 0\r\n\r\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\r\n\r\n#endif\r\n\r\n#ifdef USE_SHADOWMAP\r\n\r\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\r\n\r\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\r\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\r\n\r\n\t\tstruct DirectionalLightShadow {\r\n\t\t\tfloat shadowIntensity;\r\n\t\t\tfloat shadowBias;\r\n\t\t\tfloat shadowNormalBias;\r\n\t\t\tfloat shadowRadius;\r\n\t\t\tvec2 shadowMapSize;\r\n\t\t};\r\n\r\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\r\n\r\n\t#endif\r\n\r\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\r\n\r\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\r\n\r\n\t\tstruct SpotLightShadow {\r\n\t\t\tfloat shadowIntensity;\r\n\t\t\tfloat shadowBias;\r\n\t\t\tfloat shadowNormalBias;\r\n\t\t\tfloat shadowRadius;\r\n\t\t\tvec2 shadowMapSize;\r\n\t\t};\r\n\r\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\r\n\r\n\t#endif\r\n\r\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\r\n\r\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\r\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\r\n\r\n\t\tstruct PointLightShadow {\r\n\t\t\tfloat shadowIntensity;\r\n\t\t\tfloat shadowBias;\r\n\t\t\tfloat shadowNormalBias;\r\n\t\t\tfloat shadowRadius;\r\n\t\t\tvec2 shadowMapSize;\r\n\t\t\tfloat shadowCameraNear;\r\n\t\t\tfloat shadowCameraFar;\r\n\t\t};\r\n\r\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\r\n\r\n\t#endif\r\n\r\n\t/*\r\n\t#if NUM_RECT_AREA_LIGHTS > 0\r\n\r\n\t\t// TODO (abelnation): create uniforms for area light shadows\r\n\r\n\t#endif\r\n\t*/\r\n\r\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\r\n\r\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\r\n\r\n\t}\r\n\r\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\r\n\r\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\r\n\r\n\t}\r\n\r\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\r\n\r\n\t\tfloat occlusion = 1.0;\r\n\r\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\r\n\r\n\t\tfloat hard_shadow = step( compare , distribution.x ); // Hard Shadow\r\n\r\n\t\tif (hard_shadow != 1.0 ) {\r\n\r\n\t\t\tfloat distance = compare - distribution.x ;\r\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\r\n\t\t\tfloat softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality\r\n\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed\r\n\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\r\n\r\n\t\t}\r\n\t\treturn occlusion;\r\n\r\n\t}\r\n\r\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\r\n\r\n\t\tfloat shadow = 1.0;\r\n\r\n\t\tshadowCoord.xyz /= shadowCoord.w;\r\n\t\tshadowCoord.z += shadowBias;\r\n\r\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\r\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\r\n\r\n\t\tif ( frustumTest ) {\r\n\r\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\r\n\r\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\r\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\r\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\r\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\r\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\r\n\t\t\tfloat dx2 = dx0 / 2.0;\r\n\t\t\tfloat dy2 = dy0 / 2.0;\r\n\t\t\tfloat dx3 = dx1 / 2.0;\r\n\t\t\tfloat dy3 = dy1 / 2.0;\r\n\r\n\t\t\tshadow = (\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\r\n\t\t\t) * ( 1.0 / 17.0 );\r\n\r\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\t\t\tfloat dx = texelSize.x;\r\n\t\t\tfloat dy = texelSize.y;\r\n\r\n\t\t\tvec2 uv = shadowCoord.xy;\r\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\r\n\t\t\tuv -= f * texelSize;\r\n\r\n\t\t\tshadow = (\r\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\r\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\r\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\r\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\r\n\t\t\t\t\t f.x ) +\r\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\r\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\r\n\t\t\t\t\t f.x ) +\r\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\r\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\r\n\t\t\t\t\t f.y ) +\r\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\r\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\r\n\t\t\t\t\t f.y ) +\r\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\r\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\r\n\t\t\t\t\t\t  f.x ),\r\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\r\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\r\n\t\t\t\t\t\t  f.x ),\r\n\t\t\t\t\t f.y )\r\n\t\t\t) * ( 1.0 / 9.0 );\r\n\r\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\r\n\r\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\r\n\r\n\t\t#else // no percentage-closer filtering:\r\n\r\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\r\n\r\n\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t\treturn mix( 1.0, shadow, shadowIntensity );\r\n\r\n\t}\r\n\r\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\r\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\r\n\t// 2D texture:\r\n\t//\r\n\t// xzXZ\r\n\t//  y Y\r\n\t//\r\n\t// Y - Positive y direction\r\n\t// y - Negative y direction\r\n\t// X - Positive x direction\r\n\t// x - Negative x direction\r\n\t// Z - Positive z direction\r\n\t// z - Negative z direction\r\n\t//\r\n\t// Source and test bed:\r\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\r\n\r\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\r\n\r\n\t\t// Number of texels to avoid at the edge of each square\r\n\r\n\t\tvec3 absV = abs( v );\r\n\r\n\t\t// Intersect unit cube\r\n\r\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\r\n\t\tabsV *= scaleToCube;\r\n\r\n\t\t// Apply scale to avoid seams\r\n\r\n\t\t// two texels less per square (one texel will do for NEAREST)\r\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\r\n\r\n\t\t// Unwrap\r\n\r\n\t\t// space: -1 ... 1 range for each square\r\n\t\t//\r\n\t\t// #X##\t\tdim    := ( 4 , 2 )\r\n\t\t//  # #\t\tcenter := ( 1 , 1 )\r\n\r\n\t\tvec2 planar = v.xy;\r\n\r\n\t\tfloat almostATexel = 1.5 * texelSizeY;\r\n\t\tfloat almostOne = 1.0 - almostATexel;\r\n\r\n\t\tif ( absV.z >= almostOne ) {\r\n\r\n\t\t\tif ( v.z > 0.0 )\r\n\t\t\t\tplanar.x = 4.0 - v.x;\r\n\r\n\t\t} else if ( absV.x >= almostOne ) {\r\n\r\n\t\t\tfloat signX = sign( v.x );\r\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\r\n\r\n\t\t} else if ( absV.y >= almostOne ) {\r\n\r\n\t\t\tfloat signY = sign( v.y );\r\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\r\n\t\t\tplanar.y = v.z * signY - 2.0;\r\n\r\n\t\t}\r\n\r\n\t\t// Transform to UV space\r\n\r\n\t\t// scale := 0.5 / dim\r\n\t\t// translate := ( center + 0.5 ) / dim\r\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\r\n\r\n\t}\r\n\r\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\r\n\r\n\t\tfloat shadow = 1.0;\r\n\r\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\r\n\t\t// the vector from the light to the world-space position of the fragment.\r\n\t\tvec3 lightToPosition = shadowCoord.xyz;\r\n\t\t\r\n\t\tfloat lightToPositionLength = length( lightToPosition );\r\n\r\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\r\n\r\n\t\t\t// dp = normalized distance from light to fragment position\r\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\r\n\t\t\tdp += shadowBias;\r\n\r\n\t\t\t// bd3D = base direction 3D\r\n\t\t\tvec3 bd3D = normalize( lightToPosition );\r\n\r\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\r\n\r\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\r\n\r\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\r\n\r\n\t\t\t\tshadow = (\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\r\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\r\n\t\t\t\t) * ( 1.0 / 9.0 );\r\n\r\n\t\t\t#else // no percentage-closer filtering\r\n\r\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t\treturn mix( 1.0, shadow, shadowIntensity );\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\n#if NUM_SPOT_LIGHT_COORDS > 0\r\n\r\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\r\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\r\n\r\n#endif\r\n\r\n#ifdef USE_SHADOWMAP\r\n\r\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\r\n\r\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\r\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\r\n\r\n\t\tstruct DirectionalLightShadow {\r\n\t\t\tfloat shadowIntensity;\r\n\t\t\tfloat shadowBias;\r\n\t\t\tfloat shadowNormalBias;\r\n\t\t\tfloat shadowRadius;\r\n\t\t\tvec2 shadowMapSize;\r\n\t\t};\r\n\r\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\r\n\r\n\t#endif\r\n\r\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\r\n\r\n\t\tstruct SpotLightShadow {\r\n\t\t\tfloat shadowIntensity;\r\n\t\t\tfloat shadowBias;\r\n\t\t\tfloat shadowNormalBias;\r\n\t\t\tfloat shadowRadius;\r\n\t\t\tvec2 shadowMapSize;\r\n\t\t};\r\n\r\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\r\n\r\n\t#endif\r\n\r\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\r\n\r\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\r\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\r\n\r\n\t\tstruct PointLightShadow {\r\n\t\t\tfloat shadowIntensity;\r\n\t\t\tfloat shadowBias;\r\n\t\t\tfloat shadowNormalBias;\r\n\t\t\tfloat shadowRadius;\r\n\t\t\tvec2 shadowMapSize;\r\n\t\t\tfloat shadowCameraNear;\r\n\t\t\tfloat shadowCameraFar;\r\n\t\t};\r\n\r\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\r\n\r\n\t#endif\r\n\r\n\t/*\r\n\t#if NUM_RECT_AREA_LIGHTS > 0\r\n\r\n\t\t// TODO (abelnation): uniforms for area light shadows\r\n\r\n\t#endif\r\n\t*/\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n\r\n#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\r\n\r\n\t// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\r\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\r\n\tvec4 shadowWorldPosition;\r\n\r\n#endif\r\n\r\n#if defined( USE_SHADOWMAP )\r\n\r\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\r\n\r\n\t\t#pragma unroll_loop_start\r\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\r\n\r\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\r\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\r\n\r\n\t\t}\r\n\t\t#pragma unroll_loop_end\r\n\r\n\t#endif\r\n\r\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\r\n\r\n\t\t#pragma unroll_loop_start\r\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\r\n\r\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\r\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\r\n\r\n\t\t}\r\n\t\t#pragma unroll_loop_end\r\n\r\n\t#endif\r\n\r\n\t/*\r\n\t#if NUM_RECT_AREA_LIGHTS > 0\r\n\r\n\t\t// TODO (abelnation): update vAreaShadowCoord with area light info\r\n\r\n\t#endif\r\n\t*/\r\n\r\n#endif\r\n\r\n// spot lights can be evaluated without active shadow mapping (when SpotLight.map is used)\r\n\r\n#if NUM_SPOT_LIGHT_COORDS > 0\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\r\n\r\n\t\tshadowWorldPosition = worldPosition;\r\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\r\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\r\n\t\t#endif\r\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n#endif\r\n\r\n\r\n`;\r\n", "export default /* glsl */`\r\nfloat getShadowMask() {\r\n\r\n\tfloat shadow = 1.0;\r\n\r\n\t#ifdef USE_SHADOWMAP\r\n\r\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\r\n\r\n\tDirectionalLightShadow directionalLight;\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\r\n\r\n\t\tdirectionalLight = directionalLightShadows[ i ];\r\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n\t#endif\r\n\r\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\r\n\r\n\tSpotLightShadow spotLight;\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\r\n\r\n\t\tspotLight = spotLightShadows[ i ];\r\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n\t#endif\r\n\r\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\r\n\r\n\tPointLightShadow pointLight;\r\n\r\n\t#pragma unroll_loop_start\r\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\r\n\r\n\t\tpointLight = pointLightShadows[ i ];\r\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\r\n\r\n\t}\r\n\t#pragma unroll_loop_end\r\n\r\n\t#endif\r\n\r\n\t/*\r\n\t#if NUM_RECT_AREA_LIGHTS > 0\r\n\r\n\t\t// TODO (abelnation): update shadow for Area light\r\n\r\n\t#endif\r\n\t*/\r\n\r\n\t#endif\r\n\r\n\treturn shadow;\r\n\r\n}\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_SKINNING\r\n\r\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\r\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\r\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\r\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_SKINNING\r\n\r\n\tuniform mat4 bindMatrix;\r\n\tuniform mat4 bindMatrixInverse;\r\n\r\n\tuniform highp sampler2D boneTexture;\r\n\r\n\tmat4 getBoneMatrix( const in float i ) {\r\n\r\n\t\tint size = textureSize( boneTexture, 0 ).x;\r\n\t\tint j = int( i ) * 4;\r\n\t\tint x = j % size;\r\n\t\tint y = j / size;\r\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\r\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\r\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\r\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\r\n\r\n\t\treturn mat4( v1, v2, v3, v4 );\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_SKINNING\r\n\r\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\r\n\r\n\tvec4 skinned = vec4( 0.0 );\r\n\tskinned += boneMatX * skinVertex * skinWeight.x;\r\n\tskinned += boneMatY * skinVertex * skinWeight.y;\r\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\r\n\tskinned += boneMatW * skinVertex * skinWeight.w;\r\n\r\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_SKINNING\r\n\r\n\tmat4 skinMatrix = mat4( 0.0 );\r\n\tskinMatrix += skinWeight.x * boneMatX;\r\n\tskinMatrix += skinWeight.y * boneMatY;\r\n\tskinMatrix += skinWeight.z * boneMatZ;\r\n\tskinMatrix += skinWeight.w * boneMatW;\r\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\r\n\r\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\r\n\r\n\t#ifdef USE_TANGENT\r\n\r\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\r\n\r\n\t#endif\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\nfloat specularStrength;\r\n\r\n#ifdef USE_SPECULARMAP\r\n\r\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\r\n\tspecularStrength = texelSpecular.r;\r\n\r\n#else\r\n\r\n\tspecularStrength = 1.0;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_SPECULARMAP\r\n\r\n\tuniform sampler2D specularMap;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( TONE_MAPPING )\r\n\r\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifndef saturate\r\n// <common> may have defined saturate() already\r\n#define saturate( a ) clamp( a, 0.0, 1.0 )\r\n#endif\r\n\r\nuniform float toneMappingExposure;\r\n\r\n// exposure only\r\nvec3 LinearToneMapping( vec3 color ) {\r\n\r\n\treturn saturate( toneMappingExposure * color );\r\n\r\n}\r\n\r\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\r\nvec3 ReinhardToneMapping( vec3 color ) {\r\n\r\n\tcolor *= toneMappingExposure;\r\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\r\n\r\n}\r\n\r\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\r\nvec3 CineonToneMapping( vec3 color ) {\r\n\r\n\t// filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\tcolor *= toneMappingExposure;\r\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\r\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\r\n\r\n}\r\n\r\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\r\nvec3 RRTAndODTFit( vec3 v ) {\r\n\r\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\r\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\r\n\treturn a / b;\r\n\r\n}\r\n\r\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\r\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\r\n\r\nvec3 ACESFilmicToneMapping( vec3 color ) {\r\n\r\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\r\n\tconst mat3 ACESInputMat = mat3(\r\n\t\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\r\n\t\tvec3( 0.35458, 0.90834, 0.13383 ),\r\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\r\n\t);\r\n\r\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\r\n\tconst mat3 ACESOutputMat = mat3(\r\n\t\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\r\n\t\tvec3( -0.53108,  1.10813, -0.07276 ),\r\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\r\n\t);\r\n\r\n\tcolor *= toneMappingExposure / 0.6;\r\n\r\n\tcolor = ACESInputMat * color;\r\n\r\n\t// Apply RRT and ODT\r\n\tcolor = RRTAndODTFit( color );\r\n\r\n\tcolor = ACESOutputMat * color;\r\n\r\n\t// Clamp to [0, 1]\r\n\treturn saturate( color );\r\n\r\n}\r\n\r\n// Matrices for rec 2020 <> rec 709 color space conversion\r\n// matrix provided in row-major order so it has been transposed\r\n// https://www.itu.int/pub/R-REP-BT.2407-2017\r\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\r\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\r\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\r\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\r\n);\r\n\r\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\r\n\tvec3( 0.6274, 0.0691, 0.0164 ),\r\n\tvec3( 0.3293, 0.9195, 0.0880 ),\r\n\tvec3( 0.0433, 0.0113, 0.8956 )\r\n);\r\n\r\n// https://iolite-engine.com/blog_posts/minimal_agx_implementation\r\n// Mean error^2: 3.6705141e-06\r\nvec3 agxDefaultContrastApprox( vec3 x ) {\r\n\r\n\tvec3 x2 = x * x;\r\n\tvec3 x4 = x2 * x2;\r\n\r\n\treturn + 15.5 * x4 * x2\r\n\t\t- 40.14 * x4 * x\r\n\t\t+ 31.96 * x4\r\n\t\t- 6.868 * x2 * x\r\n\t\t+ 0.4298 * x2\r\n\t\t+ 0.1191 * x\r\n\t\t- 0.00232;\r\n\r\n}\r\n\r\n// AgX Tone Mapping implementation based on Filament, which in turn is based\r\n// on Blender's implementation using rec 2020 primaries\r\n// https://github.com/google/filament/pull/7236\r\n// Inputs and outputs are encoded as Linear-sRGB.\r\n\r\nvec3 AgXToneMapping( vec3 color ) {\r\n\r\n\t// AgX constants\r\n\tconst mat3 AgXInsetMatrix = mat3(\r\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\r\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\r\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\r\n\t);\r\n\r\n\t// explicit AgXOutsetMatrix generated from Filaments AgXOutsetMatrixInv\r\n\tconst mat3 AgXOutsetMatrix = mat3(\r\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\r\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\r\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\r\n\t);\r\n\r\n\t// LOG2_MIN      = -10.0\r\n\t// LOG2_MAX      =  +6.5\r\n\t// MIDDLE_GRAY   =  0.18\r\n\tconst float AgxMinEv = - 12.47393;  // log2( pow( 2, LOG2_MIN ) * MIDDLE_GRAY )\r\n\tconst float AgxMaxEv = 4.026069;    // log2( pow( 2, LOG2_MAX ) * MIDDLE_GRAY )\r\n\r\n\tcolor *= toneMappingExposure;\r\n\r\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\r\n\r\n\tcolor = AgXInsetMatrix * color;\r\n\r\n\t// Log2 encoding\r\n\tcolor = max( color, 1e-10 ); // avoid 0 or negative numbers for log2\r\n\tcolor = log2( color );\r\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\r\n\r\n\tcolor = clamp( color, 0.0, 1.0 );\r\n\r\n\t// Apply sigmoid\r\n\tcolor = agxDefaultContrastApprox( color );\r\n\r\n\t// Apply AgX look\r\n\t// v = agxLook(v, look);\r\n\r\n\tcolor = AgXOutsetMatrix * color;\r\n\r\n\t// Linearize\r\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\r\n\r\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\r\n\r\n\t// Gamut mapping. Simple clamp for now.\r\n\tcolor = clamp( color, 0.0, 1.0 );\r\n\r\n\treturn color;\r\n\r\n}\r\n\r\n// https://modelviewer.dev/examples/tone-mapping\r\n\r\nvec3 NeutralToneMapping( vec3 color ) {\r\n\r\n\tconst float StartCompression = 0.8 - 0.04;\r\n\tconst float Desaturation = 0.15;\r\n\r\n\tcolor *= toneMappingExposure;\r\n\r\n\tfloat x = min( color.r, min( color.g, color.b ) );\r\n\r\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\r\n\r\n\tcolor -= offset;\r\n\r\n\tfloat peak = max( color.r, max( color.g, color.b ) );\r\n\r\n\tif ( peak < StartCompression ) return color;\r\n\r\n\tfloat d = 1. - StartCompression;\r\n\r\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\r\n\r\n\tcolor *= newPeak / peak;\r\n\r\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\r\n\r\n\treturn mix( color, vec3( newPeak ), g );\r\n\r\n}\r\n\r\nvec3 CustomToneMapping( vec3 color ) { return color; }\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_TRANSMISSION\r\n\r\n\tmaterial.transmission = transmission;\r\n\tmaterial.transmissionAlpha = 1.0;\r\n\tmaterial.thickness = thickness;\r\n\tmaterial.attenuationDistance = attenuationDistance;\r\n\tmaterial.attenuationColor = attenuationColor;\r\n\r\n\t#ifdef USE_TRANSMISSIONMAP\r\n\r\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_THICKNESSMAP\r\n\r\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\r\n\r\n\t#endif\r\n\r\n\tvec3 pos = vWorldPosition;\r\n\tvec3 v = normalize( cameraPosition - pos );\r\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\r\n\r\n\tvec4 transmitted = getIBLVolumeRefraction(\r\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\r\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\r\n\t\tmaterial.attenuationColor, material.attenuationDistance );\r\n\r\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\r\n\r\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#ifdef USE_TRANSMISSION\r\n\r\n\t// Transmission code is based on glTF-Sampler-Viewer\r\n\t// https://github.com/KhronosGroup/glTF-Sample-Viewer\r\n\r\n\tuniform float transmission;\r\n\tuniform float thickness;\r\n\tuniform float attenuationDistance;\r\n\tuniform vec3 attenuationColor;\r\n\r\n\t#ifdef USE_TRANSMISSIONMAP\r\n\r\n\t\tuniform sampler2D transmissionMap;\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_THICKNESSMAP\r\n\r\n\t\tuniform sampler2D thicknessMap;\r\n\r\n\t#endif\r\n\r\n\tuniform vec2 transmissionSamplerSize;\r\n\tuniform sampler2D transmissionSamplerMap;\r\n\r\n\tuniform mat4 modelMatrix;\r\n\tuniform mat4 projectionMatrix;\r\n\r\n\tvarying vec3 vWorldPosition;\r\n\r\n\t// Mipped Bicubic Texture Filtering by N8\r\n\t// https://www.shadertoy.com/view/Dl2SDW\r\n\r\n\tfloat w0( float a ) {\r\n\r\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\r\n\r\n\t}\r\n\r\n\tfloat w1( float a ) {\r\n\r\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\r\n\r\n\t}\r\n\r\n\tfloat w2( float a ){\r\n\r\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\r\n\r\n\t}\r\n\r\n\tfloat w3( float a ) {\r\n\r\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\r\n\r\n\t}\r\n\r\n\t// g0 and g1 are the two amplitude functions\r\n\tfloat g0( float a ) {\r\n\r\n\t\treturn w0( a ) + w1( a );\r\n\r\n\t}\r\n\r\n\tfloat g1( float a ) {\r\n\r\n\t\treturn w2( a ) + w3( a );\r\n\r\n\t}\r\n\r\n\t// h0 and h1 are the two offset functions\r\n\tfloat h0( float a ) {\r\n\r\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\r\n\r\n\t}\r\n\r\n\tfloat h1( float a ) {\r\n\r\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\r\n\r\n\t}\r\n\r\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\r\n\r\n\t\tuv = uv * texelSize.zw + 0.5;\r\n\r\n\t\tvec2 iuv = floor( uv );\r\n\t\tvec2 fuv = fract( uv );\r\n\r\n\t\tfloat g0x = g0( fuv.x );\r\n\t\tfloat g1x = g1( fuv.x );\r\n\t\tfloat h0x = h0( fuv.x );\r\n\t\tfloat h1x = h1( fuv.x );\r\n\t\tfloat h0y = h0( fuv.y );\r\n\t\tfloat h1y = h1( fuv.y );\r\n\r\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\r\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\r\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\r\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\r\n\r\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\r\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\r\n\r\n\t}\r\n\r\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\r\n\r\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\r\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\r\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\r\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\r\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\r\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\r\n\t\treturn mix( fSample, cSample, fract( lod ) );\r\n\r\n\t}\r\n\r\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\r\n\r\n\t\t// Direction of refracted light.\r\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\r\n\r\n\t\t// Compute rotation-independant scaling of the model matrix.\r\n\t\tvec3 modelScale;\r\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\r\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\r\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\r\n\r\n\t\t// The thickness is specified in local space.\r\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\r\n\r\n\t}\r\n\r\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\r\n\r\n\t\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\r\n\t\t// an IOR of 1.5 results in the default amount of microfacet refraction.\r\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\r\n\r\n\t}\r\n\r\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\r\n\r\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\r\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\r\n\r\n\t}\r\n\r\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\r\n\r\n\t\tif ( isinf( attenuationDistance ) ) {\r\n\r\n\t\t\t// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\r\n\t\t\treturn vec3( 1.0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Compute light attenuation using Beer's law.\r\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\r\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\r\n\t\t\treturn transmittance;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\r\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\r\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\r\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\r\n\r\n\t\tvec4 transmittedLight;\r\n\t\tvec3 transmittance;\r\n\r\n\t\t#ifdef USE_DISPERSION\r\n\r\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\r\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\r\n\r\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\r\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\r\n\t\t\r\n\t\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\r\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\r\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\r\n\t\t\t\trefractionCoords += 1.0;\r\n\t\t\t\trefractionCoords /= 2.0;\r\n\t\t\r\n\t\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\r\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\r\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\r\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\r\n\r\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttransmittedLight.a /= 3.0;\r\n\t\t\r\n\t\t#else\r\n\t\t\r\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\r\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\r\n\r\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\r\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\r\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\r\n\t\t\trefractionCoords += 1.0;\r\n\t\t\trefractionCoords /= 2.0;\r\n\r\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\r\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\r\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\r\n\t\t\r\n\t\t#endif\r\n\r\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\r\n\r\n\t\t// Get the specular component.\r\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\r\n\r\n\t\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job \r\n\t\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\r\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\r\n\r\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\r\n\r\n\t}\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_UV ) || defined( USE_ANISOTROPY )\r\n\r\n\tvarying vec2 vUv;\r\n\r\n#endif\r\n#ifdef USE_MAP\r\n\r\n\tvarying vec2 vMapUv;\r\n\r\n#endif\r\n#ifdef USE_ALPHAMAP\r\n\r\n\tvarying vec2 vAlphaMapUv;\r\n\r\n#endif\r\n#ifdef USE_LIGHTMAP\r\n\r\n\tvarying vec2 vLightMapUv;\r\n\r\n#endif\r\n#ifdef USE_AOMAP\r\n\r\n\tvarying vec2 vAoMapUv;\r\n\r\n#endif\r\n#ifdef USE_BUMPMAP\r\n\r\n\tvarying vec2 vBumpMapUv;\r\n\r\n#endif\r\n#ifdef USE_NORMALMAP\r\n\r\n\tvarying vec2 vNormalMapUv;\r\n\r\n#endif\r\n#ifdef USE_EMISSIVEMAP\r\n\r\n\tvarying vec2 vEmissiveMapUv;\r\n\r\n#endif\r\n#ifdef USE_METALNESSMAP\r\n\r\n\tvarying vec2 vMetalnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n\tvarying vec2 vRoughnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_ANISOTROPYMAP\r\n\r\n\tvarying vec2 vAnisotropyMapUv;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOATMAP\r\n\r\n\tvarying vec2 vClearcoatMapUv;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOAT_NORMALMAP\r\n\r\n\tvarying vec2 vClearcoatNormalMapUv;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\r\n\r\n\tvarying vec2 vClearcoatRoughnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_IRIDESCENCEMAP\r\n\r\n\tvarying vec2 vIridescenceMapUv;\r\n\r\n#endif\r\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\r\n\r\n\tvarying vec2 vIridescenceThicknessMapUv;\r\n\r\n#endif\r\n#ifdef USE_SHEEN_COLORMAP\r\n\r\n\tvarying vec2 vSheenColorMapUv;\r\n\r\n#endif\r\n#ifdef USE_SHEEN_ROUGHNESSMAP\r\n\r\n\tvarying vec2 vSheenRoughnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_SPECULARMAP\r\n\r\n\tvarying vec2 vSpecularMapUv;\r\n\r\n#endif\r\n#ifdef USE_SPECULAR_COLORMAP\r\n\r\n\tvarying vec2 vSpecularColorMapUv;\r\n\r\n#endif\r\n#ifdef USE_SPECULAR_INTENSITYMAP\r\n\r\n\tvarying vec2 vSpecularIntensityMapUv;\r\n\r\n#endif\r\n#ifdef USE_TRANSMISSIONMAP\r\n\r\n\tuniform mat3 transmissionMapTransform;\r\n\tvarying vec2 vTransmissionMapUv;\r\n\r\n#endif\r\n#ifdef USE_THICKNESSMAP\r\n\r\n\tuniform mat3 thicknessMapTransform;\r\n\tvarying vec2 vThicknessMapUv;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_UV ) || defined( USE_ANISOTROPY )\r\n\r\n\tvarying vec2 vUv;\r\n\r\n#endif\r\n#ifdef USE_MAP\r\n\r\n\tuniform mat3 mapTransform;\r\n\tvarying vec2 vMapUv;\r\n\r\n#endif\r\n#ifdef USE_ALPHAMAP\r\n\r\n\tuniform mat3 alphaMapTransform;\r\n\tvarying vec2 vAlphaMapUv;\r\n\r\n#endif\r\n#ifdef USE_LIGHTMAP\r\n\r\n\tuniform mat3 lightMapTransform;\r\n\tvarying vec2 vLightMapUv;\r\n\r\n#endif\r\n#ifdef USE_AOMAP\r\n\r\n\tuniform mat3 aoMapTransform;\r\n\tvarying vec2 vAoMapUv;\r\n\r\n#endif\r\n#ifdef USE_BUMPMAP\r\n\r\n\tuniform mat3 bumpMapTransform;\r\n\tvarying vec2 vBumpMapUv;\r\n\r\n#endif\r\n#ifdef USE_NORMALMAP\r\n\r\n\tuniform mat3 normalMapTransform;\r\n\tvarying vec2 vNormalMapUv;\r\n\r\n#endif\r\n#ifdef USE_DISPLACEMENTMAP\r\n\r\n\tuniform mat3 displacementMapTransform;\r\n\tvarying vec2 vDisplacementMapUv;\r\n\r\n#endif\r\n#ifdef USE_EMISSIVEMAP\r\n\r\n\tuniform mat3 emissiveMapTransform;\r\n\tvarying vec2 vEmissiveMapUv;\r\n\r\n#endif\r\n#ifdef USE_METALNESSMAP\r\n\r\n\tuniform mat3 metalnessMapTransform;\r\n\tvarying vec2 vMetalnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n\tuniform mat3 roughnessMapTransform;\r\n\tvarying vec2 vRoughnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_ANISOTROPYMAP\r\n\r\n\tuniform mat3 anisotropyMapTransform;\r\n\tvarying vec2 vAnisotropyMapUv;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOATMAP\r\n\r\n\tuniform mat3 clearcoatMapTransform;\r\n\tvarying vec2 vClearcoatMapUv;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOAT_NORMALMAP\r\n\r\n\tuniform mat3 clearcoatNormalMapTransform;\r\n\tvarying vec2 vClearcoatNormalMapUv;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\r\n\r\n\tuniform mat3 clearcoatRoughnessMapTransform;\r\n\tvarying vec2 vClearcoatRoughnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_SHEEN_COLORMAP\r\n\r\n\tuniform mat3 sheenColorMapTransform;\r\n\tvarying vec2 vSheenColorMapUv;\r\n\r\n#endif\r\n#ifdef USE_SHEEN_ROUGHNESSMAP\r\n\r\n\tuniform mat3 sheenRoughnessMapTransform;\r\n\tvarying vec2 vSheenRoughnessMapUv;\r\n\r\n#endif\r\n#ifdef USE_IRIDESCENCEMAP\r\n\r\n\tuniform mat3 iridescenceMapTransform;\r\n\tvarying vec2 vIridescenceMapUv;\r\n\r\n#endif\r\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\r\n\r\n\tuniform mat3 iridescenceThicknessMapTransform;\r\n\tvarying vec2 vIridescenceThicknessMapUv;\r\n\r\n#endif\r\n#ifdef USE_SPECULARMAP\r\n\r\n\tuniform mat3 specularMapTransform;\r\n\tvarying vec2 vSpecularMapUv;\r\n\r\n#endif\r\n#ifdef USE_SPECULAR_COLORMAP\r\n\r\n\tuniform mat3 specularColorMapTransform;\r\n\tvarying vec2 vSpecularColorMapUv;\r\n\r\n#endif\r\n#ifdef USE_SPECULAR_INTENSITYMAP\r\n\r\n\tuniform mat3 specularIntensityMapTransform;\r\n\tvarying vec2 vSpecularIntensityMapUv;\r\n\r\n#endif\r\n#ifdef USE_TRANSMISSIONMAP\r\n\r\n\tuniform mat3 transmissionMapTransform;\r\n\tvarying vec2 vTransmissionMapUv;\r\n\r\n#endif\r\n#ifdef USE_THICKNESSMAP\r\n\r\n\tuniform mat3 thicknessMapTransform;\r\n\tvarying vec2 vThicknessMapUv;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_UV ) || defined( USE_ANISOTROPY )\r\n\r\n\tvUv = vec3( uv, 1 ).xy;\r\n\r\n#endif\r\n#ifdef USE_MAP\r\n\r\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_ALPHAMAP\r\n\r\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_LIGHTMAP\r\n\r\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_AOMAP\r\n\r\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_BUMPMAP\r\n\r\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_NORMALMAP\r\n\r\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_DISPLACEMENTMAP\r\n\r\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_EMISSIVEMAP\r\n\r\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_METALNESSMAP\r\n\r\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_ANISOTROPYMAP\r\n\r\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOATMAP\r\n\r\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOAT_NORMALMAP\r\n\r\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\r\n\r\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_IRIDESCENCEMAP\r\n\r\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\r\n\r\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_SHEEN_COLORMAP\r\n\r\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_SHEEN_ROUGHNESSMAP\r\n\r\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_SPECULARMAP\r\n\r\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_SPECULAR_COLORMAP\r\n\r\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_SPECULAR_INTENSITYMAP\r\n\r\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_TRANSMISSIONMAP\r\n\r\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n#ifdef USE_THICKNESSMAP\r\n\r\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\r\n\r\n#endif\r\n`;\r\n", "export default /* glsl */`\r\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\r\n\r\n\tvec4 worldPosition = vec4( transformed, 1.0 );\r\n\r\n\t#ifdef USE_BATCHING\r\n\r\n\t\tworldPosition = batchingMatrix * worldPosition;\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_INSTANCING\r\n\r\n\t\tworldPosition = instanceMatrix * worldPosition;\r\n\r\n\t#endif\r\n\r\n\tworldPosition = modelMatrix * worldPosition;\r\n\r\n#endif\r\n`;\r\n", "export const vertex = /* glsl */`\r\nvarying vec2 vUv;\r\nuniform mat3 uvTransform;\r\n\r\nvoid main() {\r\n\r\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\r\n\r\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform sampler2D t2D;\r\nuniform float backgroundIntensity;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texColor = texture2D( t2D, vUv );\r\n\r\n\t#ifdef DECODE_VIDEO_TEXTURE\r\n\r\n\t\t// use inline sRGB decode until browsers properly support SRGB8_APLHA8 with video textures\r\n\r\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\r\n\r\n\t#endif\r\n\r\n\ttexColor.rgb *= backgroundIntensity;\r\n\r\n\tgl_FragColor = texColor;\r\n\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\nvarying vec3 vWorldDirection;\r\n\r\n#include <common>\r\n\r\nvoid main() {\r\n\r\n\tvWorldDirection = transformDirection( position, modelMatrix );\r\n\r\n\t#include <begin_vertex>\r\n\t#include <project_vertex>\r\n\r\n\tgl_Position.z = gl_Position.w; // set z to camera.far\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n\r\n#ifdef ENVMAP_TYPE_CUBE\r\n\r\n\tuniform samplerCube envMap;\r\n\r\n#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n\tuniform sampler2D envMap;\r\n\r\n#endif\r\n\r\nuniform float flipEnvMap;\r\nuniform float backgroundBlurriness;\r\nuniform float backgroundIntensity;\r\nuniform mat3 backgroundRotation;\r\n\r\nvarying vec3 vWorldDirection;\r\n\r\n#include <cube_uv_reflection_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#ifdef ENVMAP_TYPE_CUBE\r\n\r\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\r\n\r\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\r\n\r\n\t#else\r\n\r\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n\r\n\t#endif\r\n\r\n\ttexColor.rgb *= backgroundIntensity;\r\n\r\n\tgl_FragColor = texColor;\r\n\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\nvarying vec3 vWorldDirection;\r\n\r\n#include <common>\r\n\r\nvoid main() {\r\n\r\n\tvWorldDirection = transformDirection( position, modelMatrix );\r\n\r\n\t#include <begin_vertex>\r\n\t#include <project_vertex>\r\n\r\n\tgl_Position.z = gl_Position.w; // set z to camera.far\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform samplerCube tCube;\r\nuniform float tFlip;\r\nuniform float opacity;\r\n\r\nvarying vec3 vWorldDirection;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\r\n\r\n\tgl_FragColor = texColor;\r\n\tgl_FragColor.a *= opacity;\r\n\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\r\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\r\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\r\nvarying vec2 vHighPrecisionZW;\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\r\n\t#include <batching_vertex>\r\n\t#include <skinbase_vertex>\r\n\r\n\t#include <morphinstance_vertex>\r\n\r\n\t#ifdef USE_DISPLACEMENTMAP\r\n\r\n\t\t#include <beginnormal_vertex>\r\n\t\t#include <morphnormal_vertex>\r\n\t\t#include <skinnormal_vertex>\r\n\r\n\t#endif\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvHighPrecisionZW = gl_Position.zw;\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#if DEPTH_PACKING == 3200\r\n\r\n\tuniform float opacity;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvarying vec2 vHighPrecisionZW;\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( 1.0 );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\t#if DEPTH_PACKING == 3200\r\n\r\n\t\tdiffuseColor.a = opacity;\r\n\r\n\t#endif\r\n\r\n\t#include <map_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\r\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\r\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\r\n\r\n\t#if DEPTH_PACKING == 3200\r\n\r\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\r\n\r\n\t#elif DEPTH_PACKING == 3201\r\n\r\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\r\n\r\n\t#elif DEPTH_PACKING == 3202\r\n\r\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\r\n\r\n\t#elif DEPTH_PACKING == 3203\r\n\r\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\r\n\r\n\t#endif\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#define DISTANCE\r\n\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\r\n\t#include <batching_vertex>\r\n\t#include <skinbase_vertex>\r\n\r\n\t#include <morphinstance_vertex>\r\n\r\n\t#ifdef USE_DISPLACEMENTMAP\r\n\r\n\t\t#include <beginnormal_vertex>\r\n\t\t#include <morphnormal_vertex>\r\n\t\t#include <skinnormal_vertex>\r\n\r\n\t#endif\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <worldpos_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvWorldPosition = worldPosition.xyz;\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#define DISTANCE\r\n\r\nuniform vec3 referencePosition;\r\nuniform float nearDistance;\r\nuniform float farDistance;\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main () {\r\n\r\n\tvec4 diffuseColor = vec4( 1.0 );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\t#include <map_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\r\n\tfloat dist = length( vWorldPosition - referencePosition );\r\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\r\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\r\n\r\n\tgl_FragColor = packDepthToRGBA( dist );\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\nvarying vec3 vWorldDirection;\r\n\r\n#include <common>\r\n\r\nvoid main() {\r\n\r\n\tvWorldDirection = transformDirection( position, modelMatrix );\r\n\r\n\t#include <begin_vertex>\r\n\t#include <project_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform sampler2D tEquirect;\r\n\r\nvarying vec3 vWorldDirection;\r\n\r\n#include <common>\r\n\r\nvoid main() {\r\n\r\n\tvec3 direction = normalize( vWorldDirection );\r\n\r\n\tvec2 sampleUV = equirectUv( direction );\r\n\r\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\r\n\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\nuniform float scale;\r\nattribute float lineDistance;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tvLineDistance = scale * lineDistance;\r\n\r\n\t#include <uv_vertex>\r\n\t#include <color_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float dashSize;\r\nuniform float totalSize;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\r\n\r\n\t\tdiscard;\r\n\r\n\t}\r\n\r\n\tvec3 outgoingLight = vec3( 0.0 );\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\r\n\toutgoingLight = diffuseColor.rgb; // simple shader\r\n\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\t#include <color_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <batching_vertex>\r\n\r\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\r\n\r\n\t\t#include <beginnormal_vertex>\r\n\t\t#include <morphnormal_vertex>\r\n\t\t#include <skinbase_vertex>\r\n\t\t#include <skinnormal_vertex>\r\n\t\t#include <defaultnormal_vertex>\r\n\r\n\t#endif\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <envmap_common_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\t#include <specularmap_fragment>\r\n\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\r\n\t// accumulation (baked indirect lighting only)\r\n\t#ifdef USE_LIGHTMAP\r\n\r\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\r\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\r\n\r\n\t#else\r\n\r\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\r\n\r\n\t#endif\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\r\n\r\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\r\n\r\n\t#include <envmap_fragment>\r\n\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#define LAMBERT\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <normal_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\t#include <color_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <batching_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t#include <normal_vertex>\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#define LAMBERT\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_common_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <normal_pars_fragment>\r\n#include <lights_lambert_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\tvec3 totalEmissiveRadiance = emissive;\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\t#include <specularmap_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\t#include <emissivemap_fragment>\r\n\r\n\t// accumulation\r\n\t#include <lights_lambert_fragment>\r\n\t#include <lights_fragment_begin>\r\n\t#include <lights_fragment_maps>\r\n\t#include <lights_fragment_end>\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n\r\n\t#include <envmap_fragment>\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#define MATCAP\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <normal_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\t#include <color_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <batching_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t#include <normal_vertex>\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <fog_vertex>\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#define MATCAP\r\n\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\nuniform sampler2D matcap;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#include <common>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <normal_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\r\n\tvec3 viewDir = normalize( vViewPosition );\r\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\r\n\tvec3 y = cross( viewDir, x );\r\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\r\n\r\n\t#ifdef USE_MATCAP\r\n\r\n\t\tvec4 matcapColor = texture2D( matcap, uv );\r\n\r\n\t#else\r\n\r\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 ); // default if matcap is missing\r\n\r\n\t#endif\r\n\r\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\r\n\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#define NORMAL\r\n\r\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\r\n\r\n\tvarying vec3 vViewPosition;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <normal_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\t#include <batching_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t#include <normal_vertex>\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n#endif\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#define NORMAL\r\n\r\nuniform float opacity;\r\n\r\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\r\n\r\n\tvarying vec3 vViewPosition;\r\n\r\n#endif\r\n\r\n#include <packing>\r\n#include <uv_pars_fragment>\r\n#include <normal_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\r\n\r\n\t#include <clipping_planes_fragment>\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\r\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\r\n\r\n\t#ifdef OPAQUE\r\n\r\n\t\tgl_FragColor.a = 1.0;\r\n\r\n\t#endif\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <normal_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\t#include <color_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <batching_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t#include <normal_vertex>\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_common_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <normal_pars_fragment>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\tvec3 totalEmissiveRadiance = emissive;\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\t#include <specularmap_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\t#include <emissivemap_fragment>\r\n\r\n\t// accumulation\r\n\t#include <lights_phong_fragment>\r\n\t#include <lights_fragment_begin>\r\n\t#include <lights_fragment_maps>\r\n\t#include <lights_fragment_end>\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n\t#include <envmap_fragment>\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#define STANDARD\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifdef USE_TRANSMISSION\r\n\r\n\tvarying vec3 vWorldPosition;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <normal_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\t#include <color_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <batching_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t#include <normal_vertex>\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n#ifdef USE_TRANSMISSION\r\n\r\n\tvWorldPosition = worldPosition.xyz;\r\n\r\n#endif\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#define STANDARD\r\n\r\n#ifdef PHYSICAL\r\n\t#define IOR\r\n\t#define USE_SPECULAR\r\n#endif\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float roughness;\r\nuniform float metalness;\r\nuniform float opacity;\r\n\r\n#ifdef IOR\r\n\tuniform float ior;\r\n#endif\r\n\r\n#ifdef USE_SPECULAR\r\n\tuniform float specularIntensity;\r\n\tuniform vec3 specularColor;\r\n\r\n\t#ifdef USE_SPECULAR_COLORMAP\r\n\t\tuniform sampler2D specularColorMap;\r\n\t#endif\r\n\r\n\t#ifdef USE_SPECULAR_INTENSITYMAP\r\n\t\tuniform sampler2D specularIntensityMap;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef USE_CLEARCOAT\r\n\tuniform float clearcoat;\r\n\tuniform float clearcoatRoughness;\r\n#endif\r\n\r\n#ifdef USE_DISPERSION\r\n\tuniform float dispersion;\r\n#endif\r\n\r\n#ifdef USE_IRIDESCENCE\r\n\tuniform float iridescence;\r\n\tuniform float iridescenceIOR;\r\n\tuniform float iridescenceThicknessMinimum;\r\n\tuniform float iridescenceThicknessMaximum;\r\n#endif\r\n\r\n#ifdef USE_SHEEN\r\n\tuniform vec3 sheenColor;\r\n\tuniform float sheenRoughness;\r\n\r\n\t#ifdef USE_SHEEN_COLORMAP\r\n\t\tuniform sampler2D sheenColorMap;\r\n\t#endif\r\n\r\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\r\n\t\tuniform sampler2D sheenRoughnessMap;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef USE_ANISOTROPY\r\n\tuniform vec2 anisotropyVector;\r\n\r\n\t#ifdef USE_ANISOTROPYMAP\r\n\t\tuniform sampler2D anisotropyMap;\r\n\t#endif\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <iridescence_fragment>\r\n#include <cube_uv_reflection_fragment>\r\n#include <envmap_common_pars_fragment>\r\n#include <envmap_physical_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <lights_pars_begin>\r\n#include <normal_pars_fragment>\r\n#include <lights_physical_pars_fragment>\r\n#include <transmission_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <clearcoat_pars_fragment>\r\n#include <iridescence_pars_fragment>\r\n#include <roughnessmap_pars_fragment>\r\n#include <metalnessmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\tvec3 totalEmissiveRadiance = emissive;\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\t#include <roughnessmap_fragment>\r\n\t#include <metalnessmap_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\t#include <clearcoat_normal_fragment_begin>\r\n\t#include <clearcoat_normal_fragment_maps>\r\n\t#include <emissivemap_fragment>\r\n\r\n\t// accumulation\r\n\t#include <lights_physical_fragment>\r\n\t#include <lights_fragment_begin>\r\n\t#include <lights_fragment_maps>\r\n\t#include <lights_fragment_end>\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\r\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\r\n\r\n\t#include <transmission_fragment>\r\n\r\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\r\n\r\n\t#ifdef USE_SHEEN\r\n\r\n\t\t// Sheen energy compensation approximation calculation can be found at the end of\r\n\t\t// https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\r\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\r\n\r\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\r\n\r\n\t#endif\r\n\r\n\t#ifdef USE_CLEARCOAT\r\n\r\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\r\n\r\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\r\n\r\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\r\n\r\n\t#endif\r\n\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#define TOON\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <normal_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\t#include <color_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <batching_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t#include <normal_vertex>\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\n#define TOON\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <gradientmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <normal_pars_fragment>\r\n#include <lights_toon_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\tvec3 totalEmissiveRadiance = emissive;\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\t#include <emissivemap_fragment>\r\n\r\n\t// accumulation\r\n\t#include <lights_toon_fragment>\r\n\t#include <lights_fragment_begin>\r\n\t#include <lights_fragment_maps>\r\n\t#include <lights_fragment_end>\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\nuniform float size;\r\nuniform float scale;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\n#ifdef USE_POINTS_UV\r\n\r\n\tvarying vec2 vUv;\r\n\tuniform mat3 uvTransform;\r\n\r\n#endif\r\n\r\nvoid main() {\r\n\r\n\t#ifdef USE_POINTS_UV\r\n\r\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\r\n\r\n\t#endif\r\n\r\n\t#include <color_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphcolor_vertex>\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <project_vertex>\r\n\r\n\tgl_PointSize = size;\r\n\r\n\t#ifdef USE_SIZEATTENUATION\r\n\r\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\r\n\r\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\r\n\r\n\t#endif\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <worldpos_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <map_particle_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tvec3 outgoingLight = vec3( 0.0 );\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_particle_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\r\n\toutgoingLight = diffuseColor.rgb;\r\n\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\n#include <common>\r\n#include <batching_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <batching_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphinstance_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform vec3 color;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\r\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\r\n\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\r\n}\r\n`;\r\n", "export const vertex = /* glsl */`\r\nuniform float rotation;\r\nuniform vec2 center;\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\t#include <uv_vertex>\r\n\r\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\r\n\r\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\r\n\r\n\t#ifndef USE_SIZEATTENUATION\r\n\r\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\r\n\r\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\r\n\r\n\t#endif\r\n\r\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\r\n\r\n\tvec2 rotatedPosition;\r\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\r\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\r\n\r\n\tmvPosition.xy += rotatedPosition;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <alphatest_pars_fragment>\r\n#include <alphahash_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tvec3 outgoingLight = vec3( 0.0 );\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <alphahash_fragment>\r\n\r\n\toutgoingLight = diffuseColor.rgb;\r\n\r\n\t#include <opaque_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <colorspace_fragment>\r\n\t#include <fog_fragment>\r\n\r\n}\r\n`;\r\n", "import alphahash_fragment from './ShaderChunk/alphahash_fragment.glsl.js';\r\nimport alphahash_pars_fragment from './ShaderChunk/alphahash_pars_fragment.glsl.js';\r\nimport alphamap_fragment from './ShaderChunk/alphamap_fragment.glsl.js';\r\nimport alphamap_pars_fragment from './ShaderChunk/alphamap_pars_fragment.glsl.js';\r\nimport alphatest_fragment from './ShaderChunk/alphatest_fragment.glsl.js';\r\nimport alphatest_pars_fragment from './ShaderChunk/alphatest_pars_fragment.glsl.js';\r\nimport aomap_fragment from './ShaderChunk/aomap_fragment.glsl.js';\r\nimport aomap_pars_fragment from './ShaderChunk/aomap_pars_fragment.glsl.js';\r\nimport batching_pars_vertex from './ShaderChunk/batching_pars_vertex.glsl.js';\r\nimport batching_vertex from './ShaderChunk/batching_vertex.glsl.js';\r\nimport begin_vertex from './ShaderChunk/begin_vertex.glsl.js';\r\nimport beginnormal_vertex from './ShaderChunk/beginnormal_vertex.glsl.js';\r\nimport bsdfs from './ShaderChunk/bsdfs.glsl.js';\r\nimport iridescence_fragment from './ShaderChunk/iridescence_fragment.glsl.js';\r\nimport bumpmap_pars_fragment from './ShaderChunk/bumpmap_pars_fragment.glsl.js';\r\nimport clipping_planes_fragment from './ShaderChunk/clipping_planes_fragment.glsl.js';\r\nimport clipping_planes_pars_fragment from './ShaderChunk/clipping_planes_pars_fragment.glsl.js';\r\nimport clipping_planes_pars_vertex from './ShaderChunk/clipping_planes_pars_vertex.glsl.js';\r\nimport clipping_planes_vertex from './ShaderChunk/clipping_planes_vertex.glsl.js';\r\nimport color_fragment from './ShaderChunk/color_fragment.glsl.js';\r\nimport color_pars_fragment from './ShaderChunk/color_pars_fragment.glsl.js';\r\nimport color_pars_vertex from './ShaderChunk/color_pars_vertex.glsl.js';\r\nimport color_vertex from './ShaderChunk/color_vertex.glsl.js';\r\nimport common from './ShaderChunk/common.glsl.js';\r\nimport cube_uv_reflection_fragment from './ShaderChunk/cube_uv_reflection_fragment.glsl.js';\r\nimport defaultnormal_vertex from './ShaderChunk/defaultnormal_vertex.glsl.js';\r\nimport displacementmap_pars_vertex from './ShaderChunk/displacementmap_pars_vertex.glsl.js';\r\nimport displacementmap_vertex from './ShaderChunk/displacementmap_vertex.glsl.js';\r\nimport emissivemap_fragment from './ShaderChunk/emissivemap_fragment.glsl.js';\r\nimport emissivemap_pars_fragment from './ShaderChunk/emissivemap_pars_fragment.glsl.js';\r\nimport colorspace_fragment from './ShaderChunk/colorspace_fragment.glsl.js';\r\nimport colorspace_pars_fragment from './ShaderChunk/colorspace_pars_fragment.glsl.js';\r\nimport envmap_fragment from './ShaderChunk/envmap_fragment.glsl.js';\r\nimport envmap_common_pars_fragment from './ShaderChunk/envmap_common_pars_fragment.glsl.js';\r\nimport envmap_pars_fragment from './ShaderChunk/envmap_pars_fragment.glsl.js';\r\nimport envmap_pars_vertex from './ShaderChunk/envmap_pars_vertex.glsl.js';\r\nimport envmap_vertex from './ShaderChunk/envmap_vertex.glsl.js';\r\nimport fog_vertex from './ShaderChunk/fog_vertex.glsl.js';\r\nimport fog_pars_vertex from './ShaderChunk/fog_pars_vertex.glsl.js';\r\nimport fog_fragment from './ShaderChunk/fog_fragment.glsl.js';\r\nimport fog_pars_fragment from './ShaderChunk/fog_pars_fragment.glsl.js';\r\nimport gradientmap_pars_fragment from './ShaderChunk/gradientmap_pars_fragment.glsl.js';\r\nimport lightmap_pars_fragment from './ShaderChunk/lightmap_pars_fragment.glsl.js';\r\nimport lights_lambert_fragment from './ShaderChunk/lights_lambert_fragment.glsl.js';\r\nimport lights_lambert_pars_fragment from './ShaderChunk/lights_lambert_pars_fragment.glsl.js';\r\nimport lights_pars_begin from './ShaderChunk/lights_pars_begin.glsl.js';\r\nimport envmap_physical_pars_fragment from './ShaderChunk/envmap_physical_pars_fragment.glsl.js';\r\nimport lights_toon_fragment from './ShaderChunk/lights_toon_fragment.glsl.js';\r\nimport lights_toon_pars_fragment from './ShaderChunk/lights_toon_pars_fragment.glsl.js';\r\nimport lights_phong_fragment from './ShaderChunk/lights_phong_fragment.glsl.js';\r\nimport lights_phong_pars_fragment from './ShaderChunk/lights_phong_pars_fragment.glsl.js';\r\nimport lights_physical_fragment from './ShaderChunk/lights_physical_fragment.glsl.js';\r\nimport lights_physical_pars_fragment from './ShaderChunk/lights_physical_pars_fragment.glsl.js';\r\nimport lights_fragment_begin from './ShaderChunk/lights_fragment_begin.glsl.js';\r\nimport lights_fragment_maps from './ShaderChunk/lights_fragment_maps.glsl.js';\r\nimport lights_fragment_end from './ShaderChunk/lights_fragment_end.glsl.js';\r\nimport logdepthbuf_fragment from './ShaderChunk/logdepthbuf_fragment.glsl.js';\r\nimport logdepthbuf_pars_fragment from './ShaderChunk/logdepthbuf_pars_fragment.glsl.js';\r\nimport logdepthbuf_pars_vertex from './ShaderChunk/logdepthbuf_pars_vertex.glsl.js';\r\nimport logdepthbuf_vertex from './ShaderChunk/logdepthbuf_vertex.glsl.js';\r\nimport map_fragment from './ShaderChunk/map_fragment.glsl.js';\r\nimport map_pars_fragment from './ShaderChunk/map_pars_fragment.glsl.js';\r\nimport map_particle_fragment from './ShaderChunk/map_particle_fragment.glsl.js';\r\nimport map_particle_pars_fragment from './ShaderChunk/map_particle_pars_fragment.glsl.js';\r\nimport metalnessmap_fragment from './ShaderChunk/metalnessmap_fragment.glsl.js';\r\nimport metalnessmap_pars_fragment from './ShaderChunk/metalnessmap_pars_fragment.glsl.js';\r\nimport morphinstance_vertex from './ShaderChunk/morphinstance_vertex.glsl.js';\r\nimport morphcolor_vertex from './ShaderChunk/morphcolor_vertex.glsl.js';\r\nimport morphnormal_vertex from './ShaderChunk/morphnormal_vertex.glsl.js';\r\nimport morphtarget_pars_vertex from './ShaderChunk/morphtarget_pars_vertex.glsl.js';\r\nimport morphtarget_vertex from './ShaderChunk/morphtarget_vertex.glsl.js';\r\nimport normal_fragment_begin from './ShaderChunk/normal_fragment_begin.glsl.js';\r\nimport normal_fragment_maps from './ShaderChunk/normal_fragment_maps.glsl.js';\r\nimport normal_pars_fragment from './ShaderChunk/normal_pars_fragment.glsl.js';\r\nimport normal_pars_vertex from './ShaderChunk/normal_pars_vertex.glsl.js';\r\nimport normal_vertex from './ShaderChunk/normal_vertex.glsl.js';\r\nimport normalmap_pars_fragment from './ShaderChunk/normalmap_pars_fragment.glsl.js';\r\nimport clearcoat_normal_fragment_begin from './ShaderChunk/clearcoat_normal_fragment_begin.glsl.js';\r\nimport clearcoat_normal_fragment_maps from './ShaderChunk/clearcoat_normal_fragment_maps.glsl.js';\r\nimport clearcoat_pars_fragment from './ShaderChunk/clearcoat_pars_fragment.glsl.js';\r\nimport iridescence_pars_fragment from './ShaderChunk/iridescence_pars_fragment.glsl.js';\r\nimport opaque_fragment from './ShaderChunk/opaque_fragment.glsl.js';\r\nimport packing from './ShaderChunk/packing.glsl.js';\r\nimport premultiplied_alpha_fragment from './ShaderChunk/premultiplied_alpha_fragment.glsl.js';\r\nimport project_vertex from './ShaderChunk/project_vertex.glsl.js';\r\nimport dithering_fragment from './ShaderChunk/dithering_fragment.glsl.js';\r\nimport dithering_pars_fragment from './ShaderChunk/dithering_pars_fragment.glsl.js';\r\nimport roughnessmap_fragment from './ShaderChunk/roughnessmap_fragment.glsl.js';\r\nimport roughnessmap_pars_fragment from './ShaderChunk/roughnessmap_pars_fragment.glsl.js';\r\nimport shadowmap_pars_fragment from './ShaderChunk/shadowmap_pars_fragment.glsl.js';\r\nimport shadowmap_pars_vertex from './ShaderChunk/shadowmap_pars_vertex.glsl.js';\r\nimport shadowmap_vertex from './ShaderChunk/shadowmap_vertex.glsl.js';\r\nimport shadowmask_pars_fragment from './ShaderChunk/shadowmask_pars_fragment.glsl.js';\r\nimport skinbase_vertex from './ShaderChunk/skinbase_vertex.glsl.js';\r\nimport skinning_pars_vertex from './ShaderChunk/skinning_pars_vertex.glsl.js';\r\nimport skinning_vertex from './ShaderChunk/skinning_vertex.glsl.js';\r\nimport skinnormal_vertex from './ShaderChunk/skinnormal_vertex.glsl.js';\r\nimport specularmap_fragment from './ShaderChunk/specularmap_fragment.glsl.js';\r\nimport specularmap_pars_fragment from './ShaderChunk/specularmap_pars_fragment.glsl.js';\r\nimport tonemapping_fragment from './ShaderChunk/tonemapping_fragment.glsl.js';\r\nimport tonemapping_pars_fragment from './ShaderChunk/tonemapping_pars_fragment.glsl.js';\r\nimport transmission_fragment from './ShaderChunk/transmission_fragment.glsl.js';\r\nimport transmission_pars_fragment from './ShaderChunk/transmission_pars_fragment.glsl.js';\r\nimport uv_pars_fragment from './ShaderChunk/uv_pars_fragment.glsl.js';\r\nimport uv_pars_vertex from './ShaderChunk/uv_pars_vertex.glsl.js';\r\nimport uv_vertex from './ShaderChunk/uv_vertex.glsl.js';\r\nimport worldpos_vertex from './ShaderChunk/worldpos_vertex.glsl.js';\r\n\r\nimport * as background from './ShaderLib/background.glsl.js';\r\nimport * as backgroundCube from './ShaderLib/backgroundCube.glsl.js';\r\nimport * as cube from './ShaderLib/cube.glsl.js';\r\nimport * as depth from './ShaderLib/depth.glsl.js';\r\nimport * as distanceRGBA from './ShaderLib/distanceRGBA.glsl.js';\r\nimport * as equirect from './ShaderLib/equirect.glsl.js';\r\nimport * as linedashed from './ShaderLib/linedashed.glsl.js';\r\nimport * as meshbasic from './ShaderLib/meshbasic.glsl.js';\r\nimport * as meshlambert from './ShaderLib/meshlambert.glsl.js';\r\nimport * as meshmatcap from './ShaderLib/meshmatcap.glsl.js';\r\nimport * as meshnormal from './ShaderLib/meshnormal.glsl.js';\r\nimport * as meshphong from './ShaderLib/meshphong.glsl.js';\r\nimport * as meshphysical from './ShaderLib/meshphysical.glsl.js';\r\nimport * as meshtoon from './ShaderLib/meshtoon.glsl.js';\r\nimport * as points from './ShaderLib/points.glsl.js';\r\nimport * as shadow from './ShaderLib/shadow.glsl.js';\r\nimport * as sprite from './ShaderLib/sprite.glsl.js';\r\n\r\nexport const ShaderChunk = {\r\n\talphahash_fragment: alphahash_fragment,\r\n\talphahash_pars_fragment: alphahash_pars_fragment,\r\n\talphamap_fragment: alphamap_fragment,\r\n\talphamap_pars_fragment: alphamap_pars_fragment,\r\n\talphatest_fragment: alphatest_fragment,\r\n\talphatest_pars_fragment: alphatest_pars_fragment,\r\n\taomap_fragment: aomap_fragment,\r\n\taomap_pars_fragment: aomap_pars_fragment,\r\n\tbatching_pars_vertex: batching_pars_vertex,\r\n\tbatching_vertex: batching_vertex,\r\n\tbegin_vertex: begin_vertex,\r\n\tbeginnormal_vertex: beginnormal_vertex,\r\n\tbsdfs: bsdfs,\r\n\tiridescence_fragment: iridescence_fragment,\r\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\r\n\tclipping_planes_fragment: clipping_planes_fragment,\r\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\r\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\r\n\tclipping_planes_vertex: clipping_planes_vertex,\r\n\tcolor_fragment: color_fragment,\r\n\tcolor_pars_fragment: color_pars_fragment,\r\n\tcolor_pars_vertex: color_pars_vertex,\r\n\tcolor_vertex: color_vertex,\r\n\tcommon: common,\r\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\r\n\tdefaultnormal_vertex: defaultnormal_vertex,\r\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\r\n\tdisplacementmap_vertex: displacementmap_vertex,\r\n\temissivemap_fragment: emissivemap_fragment,\r\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\r\n\tcolorspace_fragment: colorspace_fragment,\r\n\tcolorspace_pars_fragment: colorspace_pars_fragment,\r\n\tenvmap_fragment: envmap_fragment,\r\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\r\n\tenvmap_pars_fragment: envmap_pars_fragment,\r\n\tenvmap_pars_vertex: envmap_pars_vertex,\r\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\r\n\tenvmap_vertex: envmap_vertex,\r\n\tfog_vertex: fog_vertex,\r\n\tfog_pars_vertex: fog_pars_vertex,\r\n\tfog_fragment: fog_fragment,\r\n\tfog_pars_fragment: fog_pars_fragment,\r\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\r\n\tlightmap_pars_fragment: lightmap_pars_fragment,\r\n\tlights_lambert_fragment: lights_lambert_fragment,\r\n\tlights_lambert_pars_fragment: lights_lambert_pars_fragment,\r\n\tlights_pars_begin: lights_pars_begin,\r\n\tlights_toon_fragment: lights_toon_fragment,\r\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\r\n\tlights_phong_fragment: lights_phong_fragment,\r\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\r\n\tlights_physical_fragment: lights_physical_fragment,\r\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\r\n\tlights_fragment_begin: lights_fragment_begin,\r\n\tlights_fragment_maps: lights_fragment_maps,\r\n\tlights_fragment_end: lights_fragment_end,\r\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\r\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\r\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\r\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\r\n\tmap_fragment: map_fragment,\r\n\tmap_pars_fragment: map_pars_fragment,\r\n\tmap_particle_fragment: map_particle_fragment,\r\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\r\n\tmetalnessmap_fragment: metalnessmap_fragment,\r\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\r\n\tmorphinstance_vertex: morphinstance_vertex,\r\n\tmorphcolor_vertex: morphcolor_vertex,\r\n\tmorphnormal_vertex: morphnormal_vertex,\r\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\r\n\tmorphtarget_vertex: morphtarget_vertex,\r\n\tnormal_fragment_begin: normal_fragment_begin,\r\n\tnormal_fragment_maps: normal_fragment_maps,\r\n\tnormal_pars_fragment: normal_pars_fragment,\r\n\tnormal_pars_vertex: normal_pars_vertex,\r\n\tnormal_vertex: normal_vertex,\r\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\r\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\r\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\r\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\r\n\tiridescence_pars_fragment: iridescence_pars_fragment,\r\n\topaque_fragment: opaque_fragment,\r\n\tpacking: packing,\r\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\r\n\tproject_vertex: project_vertex,\r\n\tdithering_fragment: dithering_fragment,\r\n\tdithering_pars_fragment: dithering_pars_fragment,\r\n\troughnessmap_fragment: roughnessmap_fragment,\r\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\r\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\r\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\r\n\tshadowmap_vertex: shadowmap_vertex,\r\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\r\n\tskinbase_vertex: skinbase_vertex,\r\n\tskinning_pars_vertex: skinning_pars_vertex,\r\n\tskinning_vertex: skinning_vertex,\r\n\tskinnormal_vertex: skinnormal_vertex,\r\n\tspecularmap_fragment: specularmap_fragment,\r\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\r\n\ttonemapping_fragment: tonemapping_fragment,\r\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\r\n\ttransmission_fragment: transmission_fragment,\r\n\ttransmission_pars_fragment: transmission_pars_fragment,\r\n\tuv_pars_fragment: uv_pars_fragment,\r\n\tuv_pars_vertex: uv_pars_vertex,\r\n\tuv_vertex: uv_vertex,\r\n\tworldpos_vertex: worldpos_vertex,\r\n\r\n\tbackground_vert: background.vertex,\r\n\tbackground_frag: background.fragment,\r\n\tbackgroundCube_vert: backgroundCube.vertex,\r\n\tbackgroundCube_frag: backgroundCube.fragment,\r\n\tcube_vert: cube.vertex,\r\n\tcube_frag: cube.fragment,\r\n\tdepth_vert: depth.vertex,\r\n\tdepth_frag: depth.fragment,\r\n\tdistanceRGBA_vert: distanceRGBA.vertex,\r\n\tdistanceRGBA_frag: distanceRGBA.fragment,\r\n\tequirect_vert: equirect.vertex,\r\n\tequirect_frag: equirect.fragment,\r\n\tlinedashed_vert: linedashed.vertex,\r\n\tlinedashed_frag: linedashed.fragment,\r\n\tmeshbasic_vert: meshbasic.vertex,\r\n\tmeshbasic_frag: meshbasic.fragment,\r\n\tmeshlambert_vert: meshlambert.vertex,\r\n\tmeshlambert_frag: meshlambert.fragment,\r\n\tmeshmatcap_vert: meshmatcap.vertex,\r\n\tmeshmatcap_frag: meshmatcap.fragment,\r\n\tmeshnormal_vert: meshnormal.vertex,\r\n\tmeshnormal_frag: meshnormal.fragment,\r\n\tmeshphong_vert: meshphong.vertex,\r\n\tmeshphong_frag: meshphong.fragment,\r\n\tmeshphysical_vert: meshphysical.vertex,\r\n\tmeshphysical_frag: meshphysical.fragment,\r\n\tmeshtoon_vert: meshtoon.vertex,\r\n\tmeshtoon_frag: meshtoon.fragment,\r\n\tpoints_vert: points.vertex,\r\n\tpoints_frag: points.fragment,\r\n\tshadow_vert: shadow.vertex,\r\n\tshadow_frag: shadow.fragment,\r\n\tsprite_vert: sprite.vertex,\r\n\tsprite_frag: sprite.fragment\r\n};\r\n", "import { Color } from '../../math/Color.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\n\r\n/**\r\n * Uniforms library for shared webgl shaders\r\n */\r\n\r\nconst UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\r\n\t\topacity: { value: 1.0 },\r\n\r\n\t\tmap: { value: null },\r\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\r\n\t\talphaMap: { value: null },\r\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\r\n\t\talphaTest: { value: 0 }\r\n\r\n\t},\r\n\r\n\tspecularmap: {\r\n\r\n\t\tspecularMap: { value: null },\r\n\t\tspecularMapTransform: { value: /*@__PURE__*/ new Matrix3() }\r\n\r\n\t},\r\n\r\n\tenvmap: {\r\n\r\n\t\tenvMap: { value: null },\r\n\t\tenvMapRotation: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\tflipEnvMap: { value: - 1 },\r\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\r\n\t\tior: { value: 1.5 }, // physical\r\n\t\trefractionRatio: { value: 0.98 }, // basic, lambert, phong\r\n\r\n\t},\r\n\r\n\taomap: {\r\n\r\n\t\taoMap: { value: null },\r\n\t\taoMapIntensity: { value: 1 },\r\n\t\taoMapTransform: { value: /*@__PURE__*/ new Matrix3() }\r\n\r\n\t},\r\n\r\n\tlightmap: {\r\n\r\n\t\tlightMap: { value: null },\r\n\t\tlightMapIntensity: { value: 1 },\r\n\t\tlightMapTransform: { value: /*@__PURE__*/ new Matrix3() }\r\n\r\n\t},\r\n\r\n\tbumpmap: {\r\n\r\n\t\tbumpMap: { value: null },\r\n\t\tbumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\tbumpScale: { value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\tnormalMap: { value: null },\r\n\t\tnormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\tnormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }\r\n\r\n\t},\r\n\r\n\tdisplacementmap: {\r\n\r\n\t\tdisplacementMap: { value: null },\r\n\t\tdisplacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\tdisplacementScale: { value: 1 },\r\n\t\tdisplacementBias: { value: 0 }\r\n\r\n\t},\r\n\r\n\temissivemap: {\r\n\r\n\t\temissiveMap: { value: null },\r\n\t\temissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }\r\n\r\n\t},\r\n\r\n\tmetalnessmap: {\r\n\r\n\t\tmetalnessMap: { value: null },\r\n\t\tmetalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\r\n\r\n\t},\r\n\r\n\troughnessmap: {\r\n\r\n\t\troughnessMap: { value: null },\r\n\t\troughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\r\n\r\n\t},\r\n\r\n\tgradientmap: {\r\n\r\n\t\tgradientMap: { value: null }\r\n\r\n\t},\r\n\r\n\tfog: {\r\n\r\n\t\tfogDensity: { value: 0.00025 },\r\n\t\tfogNear: { value: 1 },\r\n\t\tfogFar: { value: 2000 },\r\n\t\tfogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\tambientLightColor: { value: [] },\r\n\r\n\t\tlightProbe: { value: [] },\r\n\r\n\t\tdirectionalLights: { value: [], properties: {\r\n\t\t\tdirection: {},\r\n\t\t\tcolor: {}\r\n\t\t} },\r\n\r\n\t\tdirectionalLightShadows: { value: [], properties: {\r\n\t\t\tshadowIntensity: 1,\r\n\t\t\tshadowBias: {},\r\n\t\t\tshadowNormalBias: {},\r\n\t\t\tshadowRadius: {},\r\n\t\t\tshadowMapSize: {}\r\n\t\t} },\r\n\r\n\t\tdirectionalShadowMap: { value: [] },\r\n\t\tdirectionalShadowMatrix: { value: [] },\r\n\r\n\t\tspotLights: { value: [], properties: {\r\n\t\t\tcolor: {},\r\n\t\t\tposition: {},\r\n\t\t\tdirection: {},\r\n\t\t\tdistance: {},\r\n\t\t\tconeCos: {},\r\n\t\t\tpenumbraCos: {},\r\n\t\t\tdecay: {}\r\n\t\t} },\r\n\r\n\t\tspotLightShadows: { value: [], properties: {\r\n\t\t\tshadowIntensity: 1,\r\n\t\t\tshadowBias: {},\r\n\t\t\tshadowNormalBias: {},\r\n\t\t\tshadowRadius: {},\r\n\t\t\tshadowMapSize: {}\r\n\t\t} },\r\n\r\n\t\tspotLightMap: { value: [] },\r\n\t\tspotShadowMap: { value: [] },\r\n\t\tspotLightMatrix: { value: [] },\r\n\r\n\t\tpointLights: { value: [], properties: {\r\n\t\t\tcolor: {},\r\n\t\t\tposition: {},\r\n\t\t\tdecay: {},\r\n\t\t\tdistance: {}\r\n\t\t} },\r\n\r\n\t\tpointLightShadows: { value: [], properties: {\r\n\t\t\tshadowIntensity: 1,\r\n\t\t\tshadowBias: {},\r\n\t\t\tshadowNormalBias: {},\r\n\t\t\tshadowRadius: {},\r\n\t\t\tshadowMapSize: {},\r\n\t\t\tshadowCameraNear: {},\r\n\t\t\tshadowCameraFar: {}\r\n\t\t} },\r\n\r\n\t\tpointShadowMap: { value: [] },\r\n\t\tpointShadowMatrix: { value: [] },\r\n\r\n\t\themisphereLights: { value: [], properties: {\r\n\t\t\tdirection: {},\r\n\t\t\tskyColor: {},\r\n\t\t\tgroundColor: {}\r\n\t\t} },\r\n\r\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\r\n\t\trectAreaLights: { value: [], properties: {\r\n\t\t\tcolor: {},\r\n\t\t\tposition: {},\r\n\t\t\twidth: {},\r\n\t\t\theight: {}\r\n\t\t} },\r\n\r\n\t\tltc_1: { value: null },\r\n\t\tltc_2: { value: null }\r\n\r\n\t},\r\n\r\n\tpoints: {\r\n\r\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\r\n\t\topacity: { value: 1.0 },\r\n\t\tsize: { value: 1.0 },\r\n\t\tscale: { value: 1.0 },\r\n\t\tmap: { value: null },\r\n\t\talphaMap: { value: null },\r\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\talphaTest: { value: 0 },\r\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\r\n\r\n\t},\r\n\r\n\tsprite: {\r\n\r\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\r\n\t\topacity: { value: 1.0 },\r\n\t\tcenter: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },\r\n\t\trotation: { value: 0.0 },\r\n\t\tmap: { value: null },\r\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\talphaMap: { value: null },\r\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\talphaTest: { value: 0 }\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { UniformsLib };\r\n", "import { ShaderChunk } from './ShaderChunk.js';\r\nimport { mergeUniforms } from './UniformsUtils.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { UniformsLib } from './UniformsLib.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\n\r\nconst ShaderLib = {\r\n\r\n\tbasic: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.specularmap,\r\n\t\t\tUniformsLib.envmap,\r\n\t\t\tUniformsLib.aomap,\r\n\t\t\tUniformsLib.lightmap,\r\n\t\t\tUniformsLib.fog\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\r\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\r\n\r\n\t},\r\n\r\n\tlambert: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.specularmap,\r\n\t\t\tUniformsLib.envmap,\r\n\t\t\tUniformsLib.aomap,\r\n\t\t\tUniformsLib.lightmap,\r\n\t\t\tUniformsLib.emissivemap,\r\n\t\t\tUniformsLib.bumpmap,\r\n\t\t\tUniformsLib.normalmap,\r\n\t\t\tUniformsLib.displacementmap,\r\n\t\t\tUniformsLib.fog,\r\n\t\t\tUniformsLib.lights,\r\n\t\t\t{\r\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\r\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\r\n\r\n\t},\r\n\r\n\tphong: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.specularmap,\r\n\t\t\tUniformsLib.envmap,\r\n\t\t\tUniformsLib.aomap,\r\n\t\t\tUniformsLib.lightmap,\r\n\t\t\tUniformsLib.emissivemap,\r\n\t\t\tUniformsLib.bumpmap,\r\n\t\t\tUniformsLib.normalmap,\r\n\t\t\tUniformsLib.displacementmap,\r\n\t\t\tUniformsLib.fog,\r\n\t\t\tUniformsLib.lights,\r\n\t\t\t{\r\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\r\n\t\t\t\tspecular: { value: /*@__PURE__*/ new Color( 0x111111 ) },\r\n\t\t\t\tshininess: { value: 30 }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshphong_vert,\r\n\t\tfragmentShader: ShaderChunk.meshphong_frag\r\n\r\n\t},\r\n\r\n\tstandard: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.envmap,\r\n\t\t\tUniformsLib.aomap,\r\n\t\t\tUniformsLib.lightmap,\r\n\t\t\tUniformsLib.emissivemap,\r\n\t\t\tUniformsLib.bumpmap,\r\n\t\t\tUniformsLib.normalmap,\r\n\t\t\tUniformsLib.displacementmap,\r\n\t\t\tUniformsLib.roughnessmap,\r\n\t\t\tUniformsLib.metalnessmap,\r\n\t\t\tUniformsLib.fog,\r\n\t\t\tUniformsLib.lights,\r\n\t\t\t{\r\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\r\n\t\t\t\troughness: { value: 1.0 },\r\n\t\t\t\tmetalness: { value: 0.0 },\r\n\t\t\t\tenvMapIntensity: { value: 1 }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t},\r\n\r\n\ttoon: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.aomap,\r\n\t\t\tUniformsLib.lightmap,\r\n\t\t\tUniformsLib.emissivemap,\r\n\t\t\tUniformsLib.bumpmap,\r\n\t\t\tUniformsLib.normalmap,\r\n\t\t\tUniformsLib.displacementmap,\r\n\t\t\tUniformsLib.gradientmap,\r\n\t\t\tUniformsLib.fog,\r\n\t\t\tUniformsLib.lights,\r\n\t\t\t{\r\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\r\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\r\n\r\n\t},\r\n\r\n\tmatcap: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.bumpmap,\r\n\t\t\tUniformsLib.normalmap,\r\n\t\t\tUniformsLib.displacementmap,\r\n\t\t\tUniformsLib.fog,\r\n\t\t\t{\r\n\t\t\t\tmatcap: { value: null }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\r\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\r\n\r\n\t},\r\n\r\n\tpoints: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.points,\r\n\t\t\tUniformsLib.fog\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.points_vert,\r\n\t\tfragmentShader: ShaderChunk.points_frag\r\n\r\n\t},\r\n\r\n\tdashed: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.fog,\r\n\t\t\t{\r\n\t\t\t\tscale: { value: 1 },\r\n\t\t\t\tdashSize: { value: 1 },\r\n\t\t\t\ttotalSize: { value: 2 }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.linedashed_vert,\r\n\t\tfragmentShader: ShaderChunk.linedashed_frag\r\n\r\n\t},\r\n\r\n\tdepth: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.displacementmap\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.depth_vert,\r\n\t\tfragmentShader: ShaderChunk.depth_frag\r\n\r\n\t},\r\n\r\n\tnormal: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.bumpmap,\r\n\t\t\tUniformsLib.normalmap,\r\n\t\t\tUniformsLib.displacementmap,\r\n\t\t\t{\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\r\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\r\n\r\n\t},\r\n\r\n\tsprite: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.sprite,\r\n\t\t\tUniformsLib.fog\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.sprite_vert,\r\n\t\tfragmentShader: ShaderChunk.sprite_frag\r\n\r\n\t},\r\n\r\n\tbackground: {\r\n\r\n\t\tuniforms: {\r\n\t\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tt2D: { value: null },\r\n\t\t\tbackgroundIntensity: { value: 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: ShaderChunk.background_vert,\r\n\t\tfragmentShader: ShaderChunk.background_frag\r\n\r\n\t},\r\n\r\n\tbackgroundCube: {\r\n\r\n\t\tuniforms: {\r\n\t\t\tenvMap: { value: null },\r\n\t\t\tflipEnvMap: { value: - 1 },\r\n\t\t\tbackgroundBlurriness: { value: 0 },\r\n\t\t\tbackgroundIntensity: { value: 1 },\r\n\t\t\tbackgroundRotation: { value: /*@__PURE__*/ new Matrix3() }\r\n\t\t},\r\n\r\n\t\tvertexShader: ShaderChunk.backgroundCube_vert,\r\n\t\tfragmentShader: ShaderChunk.backgroundCube_frag\r\n\r\n\t},\r\n\r\n\tcube: {\r\n\r\n\t\tuniforms: {\r\n\t\t\ttCube: { value: null },\r\n\t\t\ttFlip: { value: - 1 },\r\n\t\t\topacity: { value: 1.0 }\r\n\t\t},\r\n\r\n\t\tvertexShader: ShaderChunk.cube_vert,\r\n\t\tfragmentShader: ShaderChunk.cube_frag\r\n\r\n\t},\r\n\r\n\tequirect: {\r\n\r\n\t\tuniforms: {\r\n\t\t\ttEquirect: { value: null },\r\n\t\t},\r\n\r\n\t\tvertexShader: ShaderChunk.equirect_vert,\r\n\t\tfragmentShader: ShaderChunk.equirect_frag\r\n\r\n\t},\r\n\r\n\tdistanceRGBA: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.common,\r\n\t\t\tUniformsLib.displacementmap,\r\n\t\t\t{\r\n\t\t\t\treferencePosition: { value: /*@__PURE__*/ new Vector3() },\r\n\t\t\t\tnearDistance: { value: 1 },\r\n\t\t\t\tfarDistance: { value: 1000 }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\r\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\r\n\r\n\t},\r\n\r\n\tshadow: {\r\n\r\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\t\tUniformsLib.lights,\r\n\t\t\tUniformsLib.fog,\r\n\t\t\t{\r\n\t\t\t\tcolor: { value: /*@__PURE__*/ new Color( 0x00000 ) },\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t},\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.shadow_vert,\r\n\t\tfragmentShader: ShaderChunk.shadow_frag\r\n\r\n\t}\r\n\r\n};\r\n\r\nShaderLib.physical = {\r\n\r\n\tuniforms: /*@__PURE__*/ mergeUniforms( [\r\n\t\tShaderLib.standard.uniforms,\r\n\t\t{\r\n\t\t\tclearcoat: { value: 0 },\r\n\t\t\tclearcoatMap: { value: null },\r\n\t\t\tclearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tclearcoatNormalMap: { value: null },\r\n\t\t\tclearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tclearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },\r\n\t\t\tclearcoatRoughness: { value: 0 },\r\n\t\t\tclearcoatRoughnessMap: { value: null },\r\n\t\t\tclearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tdispersion: { value: 0 },\r\n\t\t\tiridescence: { value: 0 },\r\n\t\t\tiridescenceMap: { value: null },\r\n\t\t\tiridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tiridescenceIOR: { value: 1.3 },\r\n\t\t\tiridescenceThicknessMinimum: { value: 100 },\r\n\t\t\tiridescenceThicknessMaximum: { value: 400 },\r\n\t\t\tiridescenceThicknessMap: { value: null },\r\n\t\t\tiridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tsheen: { value: 0 },\r\n\t\t\tsheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\r\n\t\t\tsheenColorMap: { value: null },\r\n\t\t\tsheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tsheenRoughness: { value: 1 },\r\n\t\t\tsheenRoughnessMap: { value: null },\r\n\t\t\tsheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\ttransmission: { value: 0 },\r\n\t\t\ttransmissionMap: { value: null },\r\n\t\t\ttransmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\ttransmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },\r\n\t\t\ttransmissionSamplerMap: { value: null },\r\n\t\t\tthickness: { value: 0 },\r\n\t\t\tthicknessMap: { value: null },\r\n\t\t\tthicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tattenuationDistance: { value: 0 },\r\n\t\t\tattenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\r\n\t\t\tspecularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },\r\n\t\t\tspecularColorMap: { value: null },\r\n\t\t\tspecularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tspecularIntensity: { value: 1 },\r\n\t\t\tspecularIntensityMap: { value: null },\r\n\t\t\tspecularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t\tanisotropyVector: { value: /*@__PURE__*/ new Vector2() },\r\n\t\t\tanisotropyMap: { value: null },\r\n\t\t\tanisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },\r\n\t\t}\r\n\t] ),\r\n\r\n\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n};\r\n\r\n\r\nexport { ShaderLib };\r\n", "import { BackSide, FrontSide, CubeUVReflectionMapping, SRGBTransfer } from '../../constants.js';\r\nimport { BoxGeometry } from '../../geometries/BoxGeometry.js';\r\nimport { PlaneGeometry } from '../../geometries/PlaneGeometry.js';\r\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\nimport { Euler } from '../../math/Euler.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { ShaderLib } from '../shaders/ShaderLib.js';\r\nimport { cloneUniforms, getUnlitUniformColorSpace } from '../shaders/UniformsUtils.js';\r\n\r\nconst _rgb = { r: 0, b: 0, g: 0 };\r\nconst _e1 = /*@__PURE__*/ new Euler();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\n\r\nfunction WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {\r\n\r\n\tconst clearColor = new Color( 0x000000 );\r\n\tlet clearAlpha = alpha === true ? 0 : 1;\r\n\r\n\tlet planeMesh;\r\n\tlet boxMesh;\r\n\r\n\tlet currentBackground = null;\r\n\tlet currentBackgroundVersion = 0;\r\n\tlet currentTonemapping = null;\r\n\r\n\tfunction getBackground( scene ) {\r\n\r\n\t\tlet background = scene.isScene === true ? scene.background : null;\r\n\r\n\t\tif ( background && background.isTexture ) {\r\n\r\n\t\t\tconst usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\r\n\t\t\tbackground = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );\r\n\r\n\t\t}\r\n\r\n\t\treturn background;\r\n\r\n\t}\r\n\r\n\tfunction render( scene ) {\r\n\r\n\t\tlet forceClear = false;\r\n\t\tconst background = getBackground( scene );\r\n\r\n\t\tif ( background === null ) {\r\n\r\n\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t} else if ( background && background.isColor ) {\r\n\r\n\t\t\tsetClear( background, 1 );\r\n\t\t\tforceClear = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst environmentBlendMode = renderer.xr.getEnvironmentBlendMode();\r\n\r\n\t\tif ( environmentBlendMode === 'additive' ) {\r\n\r\n\t\t\tstate.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );\r\n\r\n\t\t} else if ( environmentBlendMode === 'alpha-blend' ) {\r\n\r\n\t\t\tstate.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderer.autoClear || forceClear ) {\r\n\r\n\t\t\t// buffers might not be writable which is required to ensure a correct clear\r\n\r\n\t\t\tstate.buffers.depth.setTest( true );\r\n\t\t\tstate.buffers.depth.setMask( true );\r\n\t\t\tstate.buffers.color.setMask( true );\r\n\r\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction addToRenderList( renderList, scene ) {\r\n\r\n\t\tconst background = getBackground( scene );\r\n\r\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\r\n\r\n\t\t\tif ( boxMesh === undefined ) {\r\n\r\n\t\t\t\tboxMesh = new Mesh(\r\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\r\n\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\r\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),\r\n\t\t\t\t\t\tvertexShader: ShaderLib.backgroundCube.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: ShaderLib.backgroundCube.fragmentShader,\r\n\t\t\t\t\t\tside: BackSide,\r\n\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t} )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\r\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\r\n\r\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// add \"envMap\" material property so the renderer can evaluate it like for built-in materials\r\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\r\n\r\n\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tobjects.update( boxMesh );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_e1.copy( scene.backgroundRotation );\r\n\r\n\t\t\t// accommodate left-handed frame\r\n\t\t\t_e1.x *= - 1; _e1.y *= - 1; _e1.z *= - 1;\r\n\r\n\t\t\tif ( background.isCubeTexture && background.isRenderTargetTexture === false ) {\r\n\r\n\t\t\t\t// environment maps which are not cube render targets or PMREMs follow a different convention\r\n\t\t\t\t_e1.y *= - 1;\r\n\t\t\t\t_e1.z *= - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\r\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\r\n\t\t\tboxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\r\n\t\t\tboxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\r\n\t\t\tboxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4( _m1.makeRotationFromEuler( _e1 ) );\r\n\t\t\tboxMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;\r\n\r\n\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\r\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\r\n\r\n\t\t\t\tboxMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\tcurrentBackground = background;\r\n\t\t\t\tcurrentBackgroundVersion = background.version;\r\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tboxMesh.layers.enableAll();\r\n\r\n\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\r\n\r\n\t\t} else if ( background && background.isTexture ) {\r\n\r\n\t\t\tif ( planeMesh === undefined ) {\r\n\r\n\t\t\t\tplaneMesh = new Mesh(\r\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\r\n\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\tname: 'BackgroundMaterial',\r\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\r\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\r\n\t\t\t\t\t\tside: FrontSide,\r\n\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t} )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\r\n\r\n\t\t\t\t// add \"map\" material property so the renderer can evaluate it like for built-in materials\r\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\r\n\r\n\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tobjects.update( planeMesh );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\r\n\t\t\tplaneMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\r\n\t\t\tplaneMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;\r\n\r\n\t\t\tif ( background.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\tbackground.updateMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\r\n\r\n\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\r\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\r\n\r\n\t\t\t\tplaneMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\tcurrentBackground = background;\r\n\t\t\t\tcurrentBackgroundVersion = background.version;\r\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tplaneMesh.layers.enableAll();\r\n\r\n\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setClear( color, alpha ) {\r\n\r\n\t\tcolor.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );\r\n\r\n\t\tstate.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tgetClearColor: function () {\r\n\r\n\t\t\treturn clearColor;\r\n\r\n\t\t},\r\n\t\tsetClearColor: function ( color, alpha = 1 ) {\r\n\r\n\t\t\tclearColor.set( color );\r\n\t\t\tclearAlpha = alpha;\r\n\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t},\r\n\t\tgetClearAlpha: function () {\r\n\r\n\t\t\treturn clearAlpha;\r\n\r\n\t\t},\r\n\t\tsetClearAlpha: function ( alpha ) {\r\n\r\n\t\t\tclearAlpha = alpha;\r\n\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t},\r\n\t\trender: render,\r\n\t\taddToRenderList: addToRenderList\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLBackground };\r\n", "import { IntType } from '../../constants.js';\r\n\r\nfunction WebGLBindingStates( gl, attributes ) {\r\n\r\n\tconst maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\r\n\tconst bindingStates = {};\r\n\r\n\tconst defaultState = createBindingState( null );\r\n\tlet currentState = defaultState;\r\n\tlet forceUpdate = false;\r\n\r\n\tfunction setup( object, material, program, geometry, index ) {\r\n\r\n\t\tlet updateBuffers = false;\r\n\r\n\t\tconst state = getBindingState( geometry, program, material );\r\n\r\n\t\tif ( currentState !== state ) {\r\n\r\n\t\t\tcurrentState = state;\r\n\t\t\tbindVertexArrayObject( currentState.object );\r\n\r\n\t\t}\r\n\r\n\t\tupdateBuffers = needsUpdate( object, geometry, program, index );\r\n\r\n\t\tif ( updateBuffers ) saveCache( object, geometry, program, index );\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers || forceUpdate ) {\r\n\r\n\t\t\tforceUpdate = false;\r\n\r\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction createVertexArrayObject() {\r\n\r\n\t\treturn gl.createVertexArray();\r\n\r\n\t}\r\n\r\n\tfunction bindVertexArrayObject( vao ) {\r\n\r\n\t\treturn gl.bindVertexArray( vao );\r\n\r\n\t}\r\n\r\n\tfunction deleteVertexArrayObject( vao ) {\r\n\r\n\t\treturn gl.deleteVertexArray( vao );\r\n\r\n\t}\r\n\r\n\tfunction getBindingState( geometry, program, material ) {\r\n\r\n\t\tconst wireframe = ( material.wireframe === true );\r\n\r\n\t\tlet programMap = bindingStates[ geometry.id ];\r\n\r\n\t\tif ( programMap === undefined ) {\r\n\r\n\t\t\tprogramMap = {};\r\n\t\t\tbindingStates[ geometry.id ] = programMap;\r\n\r\n\t\t}\r\n\r\n\t\tlet stateMap = programMap[ program.id ];\r\n\r\n\t\tif ( stateMap === undefined ) {\r\n\r\n\t\t\tstateMap = {};\r\n\t\t\tprogramMap[ program.id ] = stateMap;\r\n\r\n\t\t}\r\n\r\n\t\tlet state = stateMap[ wireframe ];\r\n\r\n\t\tif ( state === undefined ) {\r\n\r\n\t\t\tstate = createBindingState( createVertexArrayObject() );\r\n\t\t\tstateMap[ wireframe ] = state;\r\n\r\n\t\t}\r\n\r\n\t\treturn state;\r\n\r\n\t}\r\n\r\n\tfunction createBindingState( vao ) {\r\n\r\n\t\tconst newAttributes = [];\r\n\t\tconst enabledAttributes = [];\r\n\t\tconst attributeDivisors = [];\r\n\r\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\r\n\r\n\t\t\tnewAttributes[ i ] = 0;\r\n\t\t\tenabledAttributes[ i ] = 0;\r\n\t\t\tattributeDivisors[ i ] = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\t// for backward compatibility on non-VAO support browser\r\n\t\t\tgeometry: null,\r\n\t\t\tprogram: null,\r\n\t\t\twireframe: false,\r\n\r\n\t\t\tnewAttributes: newAttributes,\r\n\t\t\tenabledAttributes: enabledAttributes,\r\n\t\t\tattributeDivisors: attributeDivisors,\r\n\t\t\tobject: vao,\r\n\t\t\tattributes: {},\r\n\t\t\tindex: null\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction needsUpdate( object, geometry, program, index ) {\r\n\r\n\t\tconst cachedAttributes = currentState.attributes;\r\n\t\tconst geometryAttributes = geometry.attributes;\r\n\r\n\t\tlet attributesNum = 0;\r\n\r\n\t\tconst programAttributes = program.getAttributes();\r\n\r\n\t\tfor ( const name in programAttributes ) {\r\n\r\n\t\t\tconst programAttribute = programAttributes[ name ];\r\n\r\n\t\t\tif ( programAttribute.location >= 0 ) {\r\n\r\n\t\t\t\tconst cachedAttribute = cachedAttributes[ name ];\r\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\tif ( geometryAttribute === undefined ) {\r\n\r\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\r\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( cachedAttribute === undefined ) return true;\r\n\r\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\r\n\r\n\t\t\t\tif ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;\r\n\r\n\t\t\t\tattributesNum ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\r\n\r\n\t\tif ( currentState.index !== index ) return true;\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction saveCache( object, geometry, program, index ) {\r\n\r\n\t\tconst cache = {};\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tlet attributesNum = 0;\r\n\r\n\t\tconst programAttributes = program.getAttributes();\r\n\r\n\t\tfor ( const name in programAttributes ) {\r\n\r\n\t\t\tconst programAttribute = programAttributes[ name ];\r\n\r\n\t\t\tif ( programAttribute.location >= 0 ) {\r\n\r\n\t\t\t\tlet attribute = attributes[ name ];\r\n\r\n\t\t\t\tif ( attribute === undefined ) {\r\n\r\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;\r\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst data = {};\r\n\t\t\t\tdata.attribute = attribute;\r\n\r\n\t\t\t\tif ( attribute && attribute.data ) {\r\n\r\n\t\t\t\t\tdata.data = attribute.data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcache[ name ] = data;\r\n\r\n\t\t\t\tattributesNum ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcurrentState.attributes = cache;\r\n\t\tcurrentState.attributesNum = attributesNum;\r\n\r\n\t\tcurrentState.index = index;\r\n\r\n\t}\r\n\r\n\tfunction initAttributes() {\r\n\r\n\t\tconst newAttributes = currentState.newAttributes;\r\n\r\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction enableAttribute( attribute ) {\r\n\r\n\t\tenableAttributeAndDivisor( attribute, 0 );\r\n\r\n\t}\r\n\r\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\r\n\r\n\t\tconst newAttributes = currentState.newAttributes;\r\n\t\tconst enabledAttributes = currentState.enabledAttributes;\r\n\t\tconst attributeDivisors = currentState.attributeDivisors;\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\tgl.vertexAttribDivisor( attribute, meshPerAttribute );\r\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction disableUnusedAttributes() {\r\n\r\n\t\tconst newAttributes = currentState.newAttributes;\r\n\t\tconst enabledAttributes = currentState.enabledAttributes;\r\n\r\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {\r\n\r\n\t\tif ( integer === true ) {\r\n\r\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\r\n\r\n\t\tinitAttributes();\r\n\r\n\t\tconst geometryAttributes = geometry.attributes;\r\n\r\n\t\tconst programAttributes = program.getAttributes();\r\n\r\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\tfor ( const name in programAttributes ) {\r\n\r\n\t\t\tconst programAttribute = programAttributes[ name ];\r\n\r\n\t\t\tif ( programAttribute.location >= 0 ) {\r\n\r\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\tif ( geometryAttribute === undefined ) {\r\n\r\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\r\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\r\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\r\n\r\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\r\n\r\n\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\tif ( attribute === undefined ) continue;\r\n\r\n\t\t\t\t\tconst buffer = attribute.buffer;\r\n\t\t\t\t\tconst type = attribute.type;\r\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\r\n\r\n\t\t\t\t\t// check for integer attributes\r\n\r\n\t\t\t\t\tconst integer = ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType );\r\n\r\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\tconst data = geometryAttribute.data;\r\n\t\t\t\t\t\tconst stride = data.stride;\r\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\tif ( data.isInstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\r\n\r\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvertexAttribPointer(\r\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\r\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\r\n\t\t\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\t\t\tnormalized,\r\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\r\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,\r\n\t\t\t\t\t\t\t\tinteger\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\r\n\r\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvertexAttribPointer(\r\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\r\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\r\n\t\t\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\t\t\tnormalized,\r\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\r\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement,\r\n\t\t\t\t\t\t\t\tinteger\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdisableUnusedAttributes();\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\treset();\r\n\r\n\t\tfor ( const geometryId in bindingStates ) {\r\n\r\n\t\t\tconst programMap = bindingStates[ geometryId ];\r\n\r\n\t\t\tfor ( const programId in programMap ) {\r\n\r\n\t\t\t\tconst stateMap = programMap[ programId ];\r\n\r\n\t\t\t\tfor ( const wireframe in stateMap ) {\r\n\r\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\r\n\r\n\t\t\t\t\tdelete stateMap[ wireframe ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete programMap[ programId ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete bindingStates[ geometryId ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction releaseStatesOfGeometry( geometry ) {\r\n\r\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\r\n\r\n\t\tconst programMap = bindingStates[ geometry.id ];\r\n\r\n\t\tfor ( const programId in programMap ) {\r\n\r\n\t\t\tconst stateMap = programMap[ programId ];\r\n\r\n\t\t\tfor ( const wireframe in stateMap ) {\r\n\r\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\r\n\r\n\t\t\t\tdelete stateMap[ wireframe ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete programMap[ programId ];\r\n\r\n\t\t}\r\n\r\n\t\tdelete bindingStates[ geometry.id ];\r\n\r\n\t}\r\n\r\n\tfunction releaseStatesOfProgram( program ) {\r\n\r\n\t\tfor ( const geometryId in bindingStates ) {\r\n\r\n\t\t\tconst programMap = bindingStates[ geometryId ];\r\n\r\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\r\n\r\n\t\t\tconst stateMap = programMap[ program.id ];\r\n\r\n\t\t\tfor ( const wireframe in stateMap ) {\r\n\r\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\r\n\r\n\t\t\t\tdelete stateMap[ wireframe ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete programMap[ program.id ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reset() {\r\n\r\n\t\tresetDefaultState();\r\n\t\tforceUpdate = true;\r\n\r\n\t\tif ( currentState === defaultState ) return;\r\n\r\n\t\tcurrentState = defaultState;\r\n\t\tbindVertexArrayObject( currentState.object );\r\n\r\n\t}\r\n\r\n\t// for backward-compatibility\r\n\r\n\tfunction resetDefaultState() {\r\n\r\n\t\tdefaultState.geometry = null;\r\n\t\tdefaultState.program = null;\r\n\t\tdefaultState.wireframe = false;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tsetup: setup,\r\n\t\treset: reset,\r\n\t\tresetDefaultState: resetDefaultState,\r\n\t\tdispose: dispose,\r\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\r\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\r\n\r\n\t\tinitAttributes: initAttributes,\r\n\t\tenableAttribute: enableAttribute,\r\n\t\tdisableUnusedAttributes: disableUnusedAttributes\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLBindingStates };\r\n", "function WebGLBufferRenderer( gl, extensions, info ) {\r\n\r\n\tlet mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\tgl.drawArrays( mode, start, count );\r\n\r\n\t\tinfo.update( count, mode, 1 );\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( start, count, primcount ) {\r\n\r\n\t\tif ( primcount === 0 ) return;\r\n\r\n\t\tgl.drawArraysInstanced( mode, start, count, primcount );\r\n\r\n\t\tinfo.update( count, mode, primcount );\r\n\r\n\t}\r\n\r\n\tfunction renderMultiDraw( starts, counts, drawCount ) {\r\n\r\n\t\tif ( drawCount === 0 ) return;\r\n\r\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\r\n\t\textension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );\r\n\r\n\t\tlet elementCount = 0;\r\n\t\tfor ( let i = 0; i < drawCount; i ++ ) {\r\n\r\n\t\t\telementCount += counts[ i ];\r\n\r\n\t\t}\r\n\r\n\t\tinfo.update( elementCount, mode, 1 );\r\n\r\n\t}\r\n\r\n\tfunction renderMultiDrawInstances( starts, counts, drawCount, primcount ) {\r\n\r\n\t\tif ( drawCount === 0 ) return;\r\n\r\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tfor ( let i = 0; i < starts.length; i ++ ) {\r\n\r\n\t\t\t\trenderInstances( starts[ i ], counts[ i ], primcount[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\textension.multiDrawArraysInstancedWEBGL( mode, starts, 0, counts, 0, primcount, 0, drawCount );\r\n\r\n\t\t\tlet elementCount = 0;\r\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\r\n\r\n\t\t\t\telementCount += counts[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0; i < primcount.length; i ++ ) {\r\n\r\n\t\t\t\tinfo.update( elementCount, mode, primcount[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\tthis.renderMultiDraw = renderMultiDraw;\r\n\tthis.renderMultiDrawInstances = renderMultiDrawInstances;\r\n\r\n}\r\n\r\n\r\nexport { WebGLBufferRenderer };\r\n", "import { FloatType, HalfFloatType, RGBAFormat, UnsignedByteType } from '../../constants.js';\r\n\r\nfunction WebGLCapabilities( gl, extensions, parameters, utils ) {\r\n\r\n\tlet maxAnisotropy;\r\n\r\n\tfunction getMaxAnisotropy() {\r\n\r\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaxAnisotropy = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn maxAnisotropy;\r\n\r\n\t}\r\n\r\n\tfunction textureFormatReadable( textureFormat ) {\r\n\r\n\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction textureTypeReadable( textureType ) {\r\n\r\n\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) );\r\n\r\n\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)\r\n\t\t\ttextureType !== FloatType && ! halfFloatSupportedByExt ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'highp';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprecision = 'mediump';\r\n\r\n\t\t}\r\n\r\n\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn 'lowp';\r\n\r\n\t}\r\n\r\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\tconst maxPrecision = getMaxPrecision( precision );\r\n\r\n\tif ( maxPrecision !== precision ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n\t\tprecision = maxPrecision;\r\n\r\n\t}\r\n\r\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\tconst reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has( 'EXT_clip_control' );\r\n\r\n\tif ( reverseDepthBuffer === true ) {\r\n\r\n\t\tconst ext = extensions.get( 'EXT_clip_control' );\r\n\t\text.clipControlEXT( ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT );\r\n\r\n\t}\r\n\r\n\tconst maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tconst maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tconst maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\tconst maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tconst maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tconst maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\tconst maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\tconst maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n\tconst vertexTextures = maxVertexTextures > 0;\r\n\r\n\tconst maxSamples = gl.getParameter( gl.MAX_SAMPLES );\r\n\r\n\treturn {\r\n\r\n\t\tisWebGL2: true, // keeping this for backwards compatibility\r\n\r\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\r\n\t\tgetMaxPrecision: getMaxPrecision,\r\n\r\n\t\ttextureFormatReadable: textureFormatReadable,\r\n\t\ttextureTypeReadable: textureTypeReadable,\r\n\r\n\t\tprecision: precision,\r\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\t\treverseDepthBuffer: reverseDepthBuffer,\r\n\r\n\t\tmaxTextures: maxTextures,\r\n\t\tmaxVertexTextures: maxVertexTextures,\r\n\t\tmaxTextureSize: maxTextureSize,\r\n\t\tmaxCubemapSize: maxCubemapSize,\r\n\r\n\t\tmaxAttributes: maxAttributes,\r\n\t\tmaxVertexUniforms: maxVertexUniforms,\r\n\t\tmaxVaryings: maxVaryings,\r\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\r\n\r\n\t\tvertexTextures: vertexTextures,\r\n\r\n\t\tmaxSamples: maxSamples\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLCapabilities };\r\n", "import { Matrix3 } from '../../math/Matrix3.js';\r\nimport { Plane } from '../../math/Plane.js';\r\n\r\nfunction WebGLClipping( properties ) {\r\n\r\n\tconst scope = this;\r\n\r\n\tlet globalState = null,\r\n\t\tnumGlobalPlanes = 0,\r\n\t\tlocalClippingEnabled = false,\r\n\t\trenderingShadows = false;\r\n\r\n\tconst plane = new Plane(),\r\n\t\tviewNormalMatrix = new Matrix3(),\r\n\r\n\t\tuniform = { value: null, needsUpdate: false };\r\n\r\n\tthis.uniform = uniform;\r\n\tthis.numPlanes = 0;\r\n\tthis.numIntersection = 0;\r\n\r\n\tthis.init = function ( planes, enableLocalClipping ) {\r\n\r\n\t\tconst enabled =\r\n\t\t\tplanes.length !== 0 ||\r\n\t\t\tenableLocalClipping ||\r\n\t\t\t// enable state of previous frame - the clipping code has to\r\n\t\t\t// run another frame in order to reset the state:\r\n\t\t\tnumGlobalPlanes !== 0 ||\r\n\t\t\tlocalClippingEnabled;\r\n\r\n\t\tlocalClippingEnabled = enableLocalClipping;\r\n\r\n\t\tnumGlobalPlanes = planes.length;\r\n\r\n\t\treturn enabled;\r\n\r\n\t};\r\n\r\n\tthis.beginShadows = function () {\r\n\r\n\t\trenderingShadows = true;\r\n\t\tprojectPlanes( null );\r\n\r\n\t};\r\n\r\n\tthis.endShadows = function () {\r\n\r\n\t\trenderingShadows = false;\r\n\r\n\t};\r\n\r\n\tthis.setGlobalState = function ( planes, camera ) {\r\n\r\n\t\tglobalState = projectPlanes( planes, camera, 0 );\r\n\r\n\t};\r\n\r\n\tthis.setState = function ( material, camera, useCache ) {\r\n\r\n\t\tconst planes = material.clippingPlanes,\r\n\t\t\tclipIntersection = material.clipIntersection,\r\n\t\t\tclipShadows = material.clipShadows;\r\n\r\n\t\tconst materialProperties = properties.get( material );\r\n\r\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\r\n\r\n\t\t\t// there's no local clipping\r\n\r\n\t\t\tif ( renderingShadows ) {\r\n\r\n\t\t\t\t// there's no global clipping\r\n\r\n\t\t\t\tprojectPlanes( null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresetGlobalState();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n\t\t\t\tlGlobal = nGlobal * 4;\r\n\r\n\t\t\tlet dstArray = materialProperties.clippingState || null;\r\n\r\n\t\t\tuniform.value = dstArray; // ensure unique state\r\n\r\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\r\n\r\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\r\n\r\n\t\t\t\tdstArray[ i ] = globalState[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterialProperties.clippingState = dstArray;\r\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\r\n\t\t\tthis.numPlanes += nGlobal;\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tfunction resetGlobalState() {\r\n\r\n\t\tif ( uniform.value !== globalState ) {\r\n\r\n\t\t\tuniform.value = globalState;\r\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\r\n\r\n\t\t}\r\n\r\n\t\tscope.numPlanes = numGlobalPlanes;\r\n\t\tscope.numIntersection = 0;\r\n\r\n\t}\r\n\r\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\r\n\r\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\r\n\t\tlet dstArray = null;\r\n\r\n\t\tif ( nPlanes !== 0 ) {\r\n\r\n\t\t\tdstArray = uniform.value;\r\n\r\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\r\n\r\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\r\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\r\n\r\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\r\n\r\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\r\n\r\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\r\n\r\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\r\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniform.value = dstArray;\r\n\t\t\tuniform.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tscope.numPlanes = nPlanes;\r\n\t\tscope.numIntersection = 0;\r\n\r\n\t\treturn dstArray;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { WebGLClipping };\r\n", "import { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from '../../constants.js';\r\nimport { WebGLCubeRenderTarget } from '../WebGLCubeRenderTarget.js';\r\n\r\nfunction WebGLCubeMaps( renderer ) {\r\n\r\n\tlet cubemaps = new WeakMap();\r\n\r\n\tfunction mapTextureMapping( texture, mapping ) {\r\n\r\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\r\n\r\n\t\t\ttexture.mapping = CubeReflectionMapping;\r\n\r\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\r\n\r\n\t\t\ttexture.mapping = CubeRefractionMapping;\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tfunction get( texture ) {\r\n\r\n\t\tif ( texture && texture.isTexture ) {\r\n\r\n\t\t\tconst mapping = texture.mapping;\r\n\r\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\r\n\r\n\t\t\t\tif ( cubemaps.has( texture ) ) {\r\n\r\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\r\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst image = texture.image;\r\n\r\n\t\t\t\t\tif ( image && image.height > 0 ) {\r\n\r\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height );\r\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\r\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\r\n\r\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\r\n\r\n\t\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tconst texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tconst cubemap = cubemaps.get( texture );\r\n\r\n\t\tif ( cubemap !== undefined ) {\r\n\r\n\t\t\tcubemaps.delete( texture );\r\n\t\t\tcubemap.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\tcubemaps = new WeakMap();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tget: get,\r\n\t\tdispose: dispose\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLCubeMaps };\r\n", "import { Camera } from './Camera.js';\r\n\r\nclass OrthographicCamera extends Camera {\r\n\r\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isOrthographicCamera = true;\r\n\r\n\t\tthis.type = 'OrthographicCamera';\r\n\r\n\t\tthis.zoom = 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t\tthis.top = top;\r\n\t\tthis.bottom = bottom;\r\n\r\n\t\tthis.near = near;\r\n\t\tthis.far = far;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.left = source.left;\r\n\t\tthis.right = source.right;\r\n\t\tthis.top = source.top;\r\n\t\tthis.bottom = source.bottom;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\r\n\t\tthis.zoom = source.zoom;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tif ( this.view === null ) {\r\n\r\n\t\t\tthis.view = {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tfullWidth: 1,\r\n\t\t\t\tfullHeight: 1,\r\n\t\t\t\toffsetX: 0,\r\n\t\t\t\toffsetY: 0,\r\n\t\t\t\twidth: 1,\r\n\t\t\t\theight: 1\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tthis.view.enabled = true;\r\n\t\tthis.view.fullWidth = fullWidth;\r\n\t\tthis.view.fullHeight = fullHeight;\r\n\t\tthis.view.offsetX = x;\r\n\t\tthis.view.offsetY = y;\r\n\t\tthis.view.width = width;\r\n\t\tthis.view.height = height;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tclearViewOffset() {\r\n\r\n\t\tif ( this.view !== null ) {\r\n\r\n\t\t\tthis.view.enabled = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tupdateProjectionMatrix() {\r\n\r\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\tconst cx = ( this.right + this.left ) / 2;\r\n\t\tconst cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\tlet left = cx - dx;\r\n\t\tlet right = cx + dx;\r\n\t\tlet top = cy + dy;\r\n\t\tlet bottom = cy - dy;\r\n\r\n\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\r\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\r\n\r\n\t\t\tleft += scaleW * this.view.offsetX;\r\n\t\t\tright = left + scaleW * this.view.width;\r\n\t\t\ttop -= scaleH * this.view.offsetY;\r\n\t\t\tbottom = top - scaleH * this.view.height;\r\n\r\n\t\t}\r\n\r\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\r\n\r\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.left = this.left;\r\n\t\tdata.object.right = this.right;\r\n\t\tdata.object.top = this.top;\r\n\t\tdata.object.bottom = this.bottom;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { OrthographicCamera };\r\n", "import {\r\n\tCubeReflectionMapping,\r\n\tCubeRefractionMapping,\r\n\tCubeUVReflectionMapping,\r\n\tLinearFilter,\r\n\tNoToneMapping,\r\n\tNoBlending,\r\n\tRGBAFormat,\r\n\tHalfFloatType,\r\n\tBackSide,\r\n\tLinearSRGBColorSpace\r\n} from '../constants.js';\r\n\r\nimport { BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Mesh } from '../objects/Mesh.js';\r\nimport { OrthographicCamera } from '../cameras/OrthographicCamera.js';\r\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\r\nimport { ShaderMaterial } from '../materials/ShaderMaterial.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { WebGLRenderTarget } from '../renderers/WebGLRenderTarget.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { BoxGeometry } from '../geometries/BoxGeometry.js';\r\n\r\nconst LOD_MIN = 4;\r\n\r\n// The standard deviations (radians) associated with the extra mips. These are\r\n// chosen to approximate a Trowbridge-Reitz distribution function times the\r\n// geometric shadowing function. These sigma values squared must match the\r\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\r\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\r\n\r\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\r\n// samples and exit early, but not recompile the shader.\r\nconst MAX_SAMPLES = 20;\r\n\r\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\r\nconst _clearColor = /*@__PURE__*/ new Color();\r\nlet _oldTarget = null;\r\nlet _oldActiveCubeFace = 0;\r\nlet _oldActiveMipmapLevel = 0;\r\nlet _oldXrEnabled = false;\r\n\r\n// Golden Ratio\r\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\r\nconst INV_PHI = 1 / PHI;\r\n\r\n// Vertices of a dodecahedron (except the opposites, which represent the\r\n// same axis), used as axis directions evenly spread on a sphere.\r\nconst _axisDirections = [\r\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ) ];\r\n\r\n/**\r\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\r\n * (PMREM) from a cubeMap environment texture. This allows different levels of\r\n * blur to be quickly accessed based on material roughness. It is packed into a\r\n * special CubeUV format that allows us to perform custom interpolation so that\r\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\r\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\r\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\r\n * higher roughness levels. In this way we maintain resolution to smoothly\r\n * interpolate diffuse lighting while limiting sampling computation.\r\n *\r\n * Paper: Fast, Accurate Image-Based Lighting\r\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\r\n*/\r\n\r\nclass PMREMGenerator {\r\n\r\n\tconstructor( renderer ) {\r\n\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._pingPongRenderTarget = null;\r\n\r\n\t\tthis._lodMax = 0;\r\n\t\tthis._cubeSize = 0;\r\n\t\tthis._lodPlanes = [];\r\n\t\tthis._sizeLods = [];\r\n\t\tthis._sigmas = [];\r\n\r\n\t\tthis._blurMaterial = null;\r\n\t\tthis._cubemapMaterial = null;\r\n\t\tthis._equirectMaterial = null;\r\n\r\n\t\tthis._compileMaterial( this._blurMaterial );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\r\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\r\n\t * in radians to be applied to the scene before PMREM generation. Optional near\r\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\r\n\t * is placed at the origin).\r\n\t */\r\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\t\t_oldXrEnabled = this._renderer.xr.enabled;\r\n\r\n\t\tthis._renderer.xr.enabled = false;\r\n\r\n\t\tthis._setSize( 256 );\r\n\r\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\r\n\t\tcubeUVRenderTarget.depthBuffer = true;\r\n\r\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\r\n\r\n\t\tif ( sigma > 0 ) {\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\r\n\r\n\t\t}\r\n\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\r\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t * The smallest supported equirectangular image size is 64 x 32.\r\n\t */\r\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\r\n\r\n\t\treturn this._fromTexture( equirectangular, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\r\n\t * or HDR. The ideal input cube size is 256 x 256,\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t * The smallest supported cube size is 16 x 16.\r\n\t */\r\n\tfromCubemap( cubemap, renderTarget = null ) {\r\n\r\n\t\treturn this._fromTexture( cubemap, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t */\r\n\tcompileCubemapShader() {\r\n\r\n\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\r\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t */\r\n\tcompileEquirectangularShader() {\r\n\r\n\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\r\n\t\t\tthis._compileMaterial( this._equirectMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\r\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\r\n\t * one of them will cause any others to also become unusable.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis._dispose();\r\n\r\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\r\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\r\n\r\n\t}\r\n\r\n\t// private interface\r\n\r\n\t_setSize( cubeSize ) {\r\n\r\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\r\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\r\n\r\n\t}\r\n\r\n\t_dispose() {\r\n\r\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\r\n\r\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\r\n\r\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\r\n\r\n\t\t\tthis._lodPlanes[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_cleanup( outputTarget ) {\r\n\r\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\r\n\t\tthis._renderer.xr.enabled = _oldXrEnabled;\r\n\r\n\t\toutputTarget.scissorTest = false;\r\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\r\n\r\n\t}\r\n\r\n\t_fromTexture( texture, renderTarget ) {\r\n\r\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\r\n\r\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\r\n\r\n\t\t} else { // Equirectangular\r\n\r\n\t\t\tthis._setSize( texture.image.width / 4 );\r\n\r\n\t\t}\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\t\t_oldXrEnabled = this._renderer.xr.enabled;\r\n\r\n\t\tthis._renderer.xr.enabled = false;\r\n\r\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\r\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t_allocateTargets() {\r\n\r\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\r\n\t\tconst height = 4 * this._cubeSize;\r\n\r\n\t\tconst params = {\r\n\t\t\tmagFilter: LinearFilter,\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\ttype: HalfFloatType,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\tcolorSpace: LinearSRGBColorSpace,\r\n\t\t\tdepthBuffer: false\r\n\t\t};\r\n\r\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\r\n\r\n\t\t// NEEDLE: This was added to work around a caching bug in PMREMGenerator that lead to incorrect results.\r\n\t\tconst { _lodMax } = this;\r\n\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\r\n\r\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\r\n\r\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\r\n\r\n\t\t\t\tthis._dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\r\n\r\n\t\t\tconst { _lodMax } = this;\r\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\r\n\r\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\r\n\r\n\t\t}\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t_compileMaterial( material ) {\r\n\r\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\r\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\r\n\r\n\t\tconst fov = 90;\r\n\t\tconst aspect = 1;\r\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\r\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\t\tconst toneMapping = renderer.toneMapping;\r\n\t\trenderer.getClearColor( _clearColor );\r\n\r\n\t\trenderer.toneMapping = NoToneMapping;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\r\n\t\t\tname: 'PMREM.Background',\r\n\t\t\tside: BackSide,\r\n\t\t\tdepthWrite: false,\r\n\t\t\tdepthTest: false,\r\n\t\t} );\r\n\r\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\r\n\r\n\t\tlet useSolidColor = false;\r\n\t\tconst background = scene.background;\r\n\r\n\t\tif ( background ) {\r\n\r\n\t\t\tif ( background.isColor ) {\r\n\r\n\t\t\t\tbackgroundMaterial.color.copy( background );\r\n\t\t\t\tscene.background = null;\r\n\t\t\t\tuseSolidColor = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\r\n\t\t\tuseSolidColor = true;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst col = i % 3;\r\n\r\n\t\t\tif ( col === 0 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\r\n\r\n\t\t\t} else if ( col === 1 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\r\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst size = this._cubeSize;\r\n\r\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\r\n\r\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\r\n\t\t\tif ( useSolidColor ) {\r\n\r\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.render( scene, cubeCamera );\r\n\r\n\t\t}\r\n\r\n\t\tbackgroundBox.geometry.dispose();\r\n\t\tbackgroundBox.material.dispose();\r\n\r\n\t\trenderer.toneMapping = toneMapping;\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\tscene.background = background;\r\n\r\n\t}\r\n\r\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\r\n\r\n\t\tif ( isCubeTexture ) {\r\n\r\n\t\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\r\n\t\tconst mesh = new Mesh( this._lodPlanes[ 0 ], material );\r\n\r\n\t\tconst uniforms = material.uniforms;\r\n\r\n\t\tuniforms[ 'envMap' ].value = texture;\r\n\r\n\t\tconst size = this._cubeSize;\r\n\r\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\r\n\r\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\t\trenderer.render( mesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_applyPMREM( cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst autoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\t\tconst n = this._lodPlanes.length;\r\n\r\n\t\tfor ( let i = 1; i < n; i ++ ) {\r\n\r\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\r\n\r\n\t\t\tconst poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = autoClear;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\r\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\r\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\r\n\t * the poles) to approximate the orthogonally-separable blur. It is least\r\n\t * accurate at the poles, but still does a decent job.\r\n\t */\r\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\r\n\r\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tlodIn,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'latitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tlodOut,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'longitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t}\r\n\r\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst blurMaterial = this._blurMaterial;\r\n\r\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\r\n\r\n\t\t\tconsole.error(\r\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\r\n\r\n\t\t}\r\n\r\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\r\n\t\tconst STANDARD_DEVIATIONS = 3;\r\n\r\n\t\tconst blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );\r\n\t\tconst blurUniforms = blurMaterial.uniforms;\r\n\r\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\r\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\r\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\r\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\r\n\r\n\t\tif ( samples > MAX_SAMPLES ) {\r\n\r\n\t\t\tconsole.warn( `sigmaRadians, ${\r\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\r\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\r\n\r\n\t\t}\r\n\r\n\t\tconst weights = [];\r\n\t\tlet sum = 0;\r\n\r\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\r\n\r\n\t\t\tconst x = i / sigmaPixels;\r\n\t\t\tconst weight = Math.exp( - x * x / 2 );\r\n\t\t\tweights.push( weight );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tsum += weight;\r\n\r\n\t\t\t} else if ( i < samples ) {\r\n\r\n\t\t\t\tsum += 2 * weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\r\n\r\n\t\t\tweights[ i ] = weights[ i ] / sum;\r\n\r\n\t\t}\r\n\r\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\r\n\t\tblurUniforms[ 'samples' ].value = samples;\r\n\t\tblurUniforms[ 'weights' ].value = weights;\r\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\r\n\r\n\t\tif ( poleAxis ) {\r\n\r\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\r\n\r\n\t\t}\r\n\r\n\t\tconst { _lodMax } = this;\r\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\r\n\t\tblurUniforms[ 'mipInt' ].value = _lodMax - lodIn;\r\n\r\n\t\tconst outputSize = this._sizeLods[ lodOut ];\r\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\r\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\r\n\r\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\r\n\t\trenderer.setRenderTarget( targetOut );\r\n\t\trenderer.render( blurMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nfunction _createPlanes( lodMax ) {\r\n\r\n\tconst lodPlanes = [];\r\n\tconst sizeLods = [];\r\n\tconst sigmas = [];\r\n\r\n\tlet lod = lodMax;\r\n\r\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\r\n\r\n\tfor ( let i = 0; i < totalLods; i ++ ) {\r\n\r\n\t\tconst sizeLod = Math.pow( 2, lod );\r\n\t\tsizeLods.push( sizeLod );\r\n\t\tlet sigma = 1.0 / sizeLod;\r\n\r\n\t\tif ( i > lodMax - LOD_MIN ) {\r\n\r\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\r\n\r\n\t\t} else if ( i === 0 ) {\r\n\r\n\t\t\tsigma = 0;\r\n\r\n\t\t}\r\n\r\n\t\tsigmas.push( sigma );\r\n\r\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\r\n\t\tconst min = - texelSize;\r\n\t\tconst max = 1 + texelSize;\r\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\r\n\r\n\t\tconst cubeFaces = 6;\r\n\t\tconst vertices = 6;\r\n\t\tconst positionSize = 3;\r\n\t\tconst uvSize = 2;\r\n\t\tconst faceIndexSize = 1;\r\n\r\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\r\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\r\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\r\n\r\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\r\n\r\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\r\n\t\t\tconst y = face > 2 ? 0 : - 1;\r\n\t\t\tconst coordinates = [\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y + 1, 0\r\n\t\t\t];\r\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\r\n\t\t\tuv.set( uv1, uvSize * vertices * face );\r\n\t\t\tconst fill = [ face, face, face, face, face, face ];\r\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\r\n\r\n\t\t}\r\n\r\n\t\tconst planes = new BufferGeometry();\r\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\r\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\r\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\r\n\t\tlodPlanes.push( planes );\r\n\r\n\t\tif ( lod > LOD_MIN ) {\r\n\r\n\t\t\tlod --;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn { lodPlanes, sizeLods, sigmas };\r\n\r\n}\r\n\r\nfunction _createRenderTarget( width, height, params ) {\r\n\r\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );\r\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\r\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\r\n\tcubeUVRenderTarget.scissorTest = true;\r\n\treturn cubeUVRenderTarget;\r\n\r\n}\r\n\r\nfunction _setViewport( target, x, y, width, height ) {\r\n\r\n\ttarget.viewport.set( x, y, width, height );\r\n\ttarget.scissor.set( x, y, width, height );\r\n\r\n}\r\n\r\nfunction _getBlurShader( lodMax, width, height ) {\r\n\r\n\tconst weights = new Float32Array( MAX_SAMPLES );\r\n\tconst poleAxis = new Vector3( 0, 1, 0 );\r\n\tconst shaderMaterial = new ShaderMaterial( {\r\n\r\n\t\tname: 'SphericalGaussianBlur',\r\n\r\n\t\tdefines: {\r\n\t\t\t'n': MAX_SAMPLES,\r\n\t\t\t'CUBEUV_TEXEL_WIDTH': 1.0 / width,\r\n\t\t\t'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\r\n\t\t\t'CUBEUV_MAX_MIP': `${lodMax}.0`,\r\n\t\t},\r\n\r\n\t\tuniforms: {\r\n\t\t\t'envMap': { value: null },\r\n\t\t\t'samples': { value: 1 },\r\n\t\t\t'weights': { value: weights },\r\n\t\t\t'latitudinal': { value: false },\r\n\t\t\t'dTheta': { value: 0 },\r\n\t\t\t'mipInt': { value: 0 },\r\n\t\t\t'poleAxis': { value: poleAxis }\r\n\t\t},\r\n\r\n\t\tvertexShader: _getCommonVertexShader(),\r\n\r\n\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t\tuniform sampler2D envMap;\r\n\t\t\tuniform int samples;\r\n\t\t\tuniform float weights[ n ];\r\n\t\t\tuniform bool latitudinal;\r\n\t\t\tuniform float dTheta;\r\n\t\t\tuniform float mipInt;\r\n\t\t\tuniform vec3 poleAxis;\r\n\r\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\r\n\t\t\t#include <cube_uv_reflection_fragment>\r\n\r\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\r\n\r\n\t\t\t\tfloat cosTheta = cos( theta );\r\n\t\t\t\t// Rodrigues' axis-angle rotation\r\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\r\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\r\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\r\n\r\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\r\n\r\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\r\n\r\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis = normalize( axis );\r\n\r\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\r\n\r\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\r\n\r\n\t\t\t\t\tif ( i >= samples ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfloat theta = dTheta * float( i );\r\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\r\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\tblending: NoBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false\r\n\r\n\t} );\r\n\r\n\treturn shaderMaterial;\r\n\r\n}\r\n\r\nfunction _getEquirectMaterial() {\r\n\r\n\treturn new ShaderMaterial( {\r\n\r\n\t\tname: 'EquirectangularToCubeUV',\r\n\r\n\t\tuniforms: {\r\n\t\t\t'envMap': { value: null }\r\n\t\t},\r\n\r\n\t\tvertexShader: _getCommonVertexShader(),\r\n\r\n\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t\tuniform sampler2D envMap;\r\n\r\n\t\t\t#include <common>\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\r\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\r\n\r\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\tblending: NoBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false\r\n\r\n\t} );\r\n\r\n}\r\n\r\nfunction _getCubemapMaterial() {\r\n\r\n\treturn new ShaderMaterial( {\r\n\r\n\t\tname: 'CubemapToCubeUV',\r\n\r\n\t\tuniforms: {\r\n\t\t\t'envMap': { value: null },\r\n\t\t\t'flipEnvMap': { value: - 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: _getCommonVertexShader(),\r\n\r\n\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tuniform float flipEnvMap;\r\n\r\n\t\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t\tuniform samplerCube envMap;\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\tblending: NoBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false\r\n\r\n\t} );\r\n\r\n}\r\n\r\nfunction _getCommonVertexShader() {\r\n\r\n\treturn /* glsl */`\r\n\r\n\t\tprecision mediump float;\r\n\t\tprecision mediump int;\r\n\r\n\t\tattribute float faceIndex;\r\n\r\n\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t// RH coordinate system; PMREM face-indexing convention\r\n\t\tvec3 getDirection( vec2 uv, float face ) {\r\n\r\n\t\t\tuv = 2.0 * uv - 1.0;\r\n\r\n\t\t\tvec3 direction = vec3( uv, 1.0 );\r\n\r\n\t\t\tif ( face == 0.0 ) {\r\n\r\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\r\n\r\n\t\t\t} else if ( face == 1.0 ) {\r\n\r\n\t\t\t\tdirection = direction.xzy;\r\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\r\n\r\n\t\t\t} else if ( face == 2.0 ) {\r\n\r\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\r\n\r\n\t\t\t} else if ( face == 3.0 ) {\r\n\r\n\t\t\t\tdirection = direction.zyx;\r\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\r\n\r\n\t\t\t} else if ( face == 4.0 ) {\r\n\r\n\t\t\t\tdirection = direction.xzy;\r\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\r\n\r\n\t\t\t} else if ( face == 5.0 ) {\r\n\r\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn direction;\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\r\n\t\t\tgl_Position = vec4( position, 1.0 );\r\n\r\n\t\t}\r\n\t`;\r\n\r\n}\r\n\r\nexport { PMREMGenerator };\r\n", "import { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from '../../constants.js';\r\nimport { PMREMGenerator } from '../../extras/PMREMGenerator.js';\r\n\r\nfunction WebGLCubeUVMaps( renderer ) {\r\n\r\n\tlet cubeUVmaps = new WeakMap();\r\n\r\n\tlet pmremGenerator = null;\r\n\r\n\tfunction get( texture ) {\r\n\r\n\t\tif ( texture && texture.isTexture ) {\r\n\r\n\t\t\tconst mapping = texture.mapping;\r\n\r\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\r\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\r\n\r\n\t\t\t// equirect/cube map to cubeUV conversion\r\n\r\n\t\t\tif ( isEquirectMap || isCubeMap ) {\r\n\r\n\t\t\t\tlet renderTarget = cubeUVmaps.get( texture );\r\n\r\n\t\t\t\tconst currentPMREMVersion = renderTarget !== undefined ? renderTarget.texture.pmremVersion : 0;\r\n\r\n\t\t\t\tif ( texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion ) {\r\n\r\n\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\r\n\r\n\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );\r\n\t\t\t\t\trenderTarget.texture.pmremVersion = texture.pmremVersion;\r\n\r\n\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\r\n\r\n\t\t\t\t\treturn renderTarget.texture;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( renderTarget !== undefined ) {\r\n\r\n\t\t\t\t\t\treturn renderTarget.texture;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconst image = texture.image;\r\n\r\n\t\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\r\n\r\n\t\t\t\t\t\t\t// NEEDLE: The caching here was removed because of a bug where wrong results were returned for subsequent PMREMGenerator usage;\r\n\t\t\t\t\t\t\t// the root cause is still unclear.\r\n\t\t\t\t\t\t\tpmremGenerator = new PMREMGenerator( renderer );\r\n\r\n\t\t\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\r\n\t\t\t\t\t\t\trenderTarget.texture.pmremVersion = texture.pmremVersion;\r\n\r\n\t\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\r\n\r\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\t\t\treturn renderTarget.texture;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\r\n\r\n\t\t\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tfunction isCubeTextureComplete( image ) {\r\n\r\n\t\tlet count = 0;\r\n\t\tconst length = 6;\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tif ( image[ i ] !== undefined ) count ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn count === length;\r\n\r\n\r\n\t}\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tconst texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\r\n\r\n\t\tif ( cubemapUV !== undefined ) {\r\n\r\n\t\t\tcubeUVmaps.delete( texture );\r\n\t\t\tcubemapUV.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\tcubeUVmaps = new WeakMap();\r\n\r\n\t\tif ( pmremGenerator !== null ) {\r\n\r\n\t\t\tpmremGenerator.dispose();\r\n\t\t\tpmremGenerator = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tget: get,\r\n\t\tdispose: dispose\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLCubeUVMaps };\r\n", "import { warnOnce } from '../../utils.js';\r\n\r\nfunction WebGLExtensions( gl ) {\r\n\r\n\tconst extensions = {};\r\n\r\n\tfunction getExtension( name ) {\r\n\r\n\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\treturn extensions[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tlet extension;\r\n\r\n\t\tswitch ( name ) {\r\n\r\n\t\t\tcase 'WEBGL_depth_texture':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t}\r\n\r\n\t\textensions[ name ] = extension;\r\n\r\n\t\treturn extension;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\thas: function ( name ) {\r\n\r\n\t\t\treturn getExtension( name ) !== null;\r\n\r\n\t\t},\r\n\r\n\t\tinit: function () {\r\n\r\n\t\t\tgetExtension( 'EXT_color_buffer_float' );\r\n\t\t\tgetExtension( 'WEBGL_clip_cull_distance' );\r\n\t\t\tgetExtension( 'OES_texture_float_linear' );\r\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\r\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\r\n\t\t\tgetExtension( 'WEBGL_render_shared_exponent' );\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( name ) {\r\n\r\n\t\t\tconst extension = getExtension( name );\r\n\r\n\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\twarnOnce( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn extension;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLExtensions };\r\n", "import { Uint16BufferAttribute, Uint32BufferAttribute } from '../../core/BufferAttribute.js';\r\nimport { arrayNeedsUint32 } from '../../utils.js';\r\n\r\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\r\n\r\n\tconst geometries = {};\r\n\tconst wireframeAttributes = new WeakMap();\r\n\r\n\tfunction onGeometryDispose( event ) {\r\n\r\n\t\tconst geometry = event.target;\r\n\r\n\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\tattributes.remove( geometry.index );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const name in geometry.attributes ) {\r\n\r\n\t\t\tattributes.remove( geometry.attributes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const name in geometry.morphAttributes ) {\r\n\r\n\t\t\tconst array = geometry.morphAttributes[ name ];\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tattributes.remove( array[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdelete geometries[ geometry.id ];\r\n\r\n\t\tconst attribute = wireframeAttributes.get( geometry );\r\n\r\n\t\tif ( attribute ) {\r\n\r\n\t\t\tattributes.remove( attribute );\r\n\t\t\twireframeAttributes.delete( geometry );\r\n\r\n\t\t}\r\n\r\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\r\n\r\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\r\n\r\n\t\t\tdelete geometry._maxInstanceCount;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tinfo.memory.geometries --;\r\n\r\n\t}\r\n\r\n\tfunction get( object, geometry ) {\r\n\r\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\r\n\r\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tgeometries[ geometry.id ] = true;\r\n\r\n\t\tinfo.memory.geometries ++;\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n\tfunction update( geometry ) {\r\n\r\n\t\tconst geometryAttributes = geometry.attributes;\r\n\r\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\r\n\r\n\t\tfor ( const name in geometryAttributes ) {\r\n\r\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst array = morphAttributes[ name ];\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction updateWireframeAttribute( geometry ) {\r\n\r\n\t\tconst indices = [];\r\n\r\n\t\tconst geometryIndex = geometry.index;\r\n\t\tconst geometryPosition = geometry.attributes.position;\r\n\t\tlet version = 0;\r\n\r\n\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\tconst array = geometryIndex.array;\r\n\t\t\tversion = geometryIndex.version;\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tconst a = array[ i + 0 ];\r\n\t\t\t\tconst b = array[ i + 1 ];\r\n\t\t\t\tconst c = array[ i + 2 ];\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometryPosition !== undefined ) {\r\n\r\n\t\t\tconst array = geometryPosition.array;\r\n\t\t\tversion = geometryPosition.version;\r\n\r\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\tconst a = i + 0;\r\n\t\t\t\tconst b = i + 1;\r\n\t\t\t\tconst c = i + 2;\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\r\n\t\tattribute.version = version;\r\n\r\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\r\n\r\n\t\t//\r\n\r\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\r\n\r\n\t\t//\r\n\r\n\t\twireframeAttributes.set( geometry, attribute );\r\n\r\n\t}\r\n\r\n\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\tif ( currentAttribute ) {\r\n\r\n\t\t\tconst geometryIndex = geometry.index;\r\n\r\n\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\t// if the attribute is obsolete, create a new one\r\n\r\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\r\n\r\n\t\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t}\r\n\r\n\t\treturn wireframeAttributes.get( geometry );\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tget: get,\r\n\t\tupdate: update,\r\n\r\n\t\tgetWireframeAttribute: getWireframeAttribute\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLGeometries };\r\n", "function WebGLIndexedBufferRenderer( gl, extensions, info ) {\r\n\r\n\tlet mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tlet type, bytesPerElement;\r\n\r\n\tfunction setIndex( value ) {\r\n\r\n\t\ttype = value.type;\r\n\t\tbytesPerElement = value.bytesPerElement;\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\r\n\r\n\t\tinfo.update( count, mode, 1 );\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( start, count, primcount ) {\r\n\r\n\t\tif ( primcount === 0 ) return;\r\n\r\n\t\tgl.drawElementsInstanced( mode, count, type, start * bytesPerElement, primcount );\r\n\r\n\t\tinfo.update( count, mode, primcount );\r\n\r\n\t}\r\n\r\n\tfunction renderMultiDraw( starts, counts, drawCount ) {\r\n\r\n\t\tif ( drawCount === 0 ) return;\r\n\r\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\r\n\t\textension.multiDrawElementsWEBGL( mode, counts, 0, type, starts, 0, drawCount );\r\n\r\n\t\tlet elementCount = 0;\r\n\t\tfor ( let i = 0; i < drawCount; i ++ ) {\r\n\r\n\t\t\telementCount += counts[ i ];\r\n\r\n\t\t}\r\n\r\n\t\tinfo.update( elementCount, mode, 1 );\r\n\r\n\r\n\t}\r\n\r\n\tfunction renderMultiDrawInstances( starts, counts, drawCount, primcount ) {\r\n\r\n\t\tif ( drawCount === 0 ) return;\r\n\r\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tfor ( let i = 0; i < starts.length; i ++ ) {\r\n\r\n\t\t\t\trenderInstances( starts[ i ] / bytesPerElement, counts[ i ], primcount[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\textension.multiDrawElementsInstancedWEBGL( mode, counts, 0, type, starts, 0, primcount, 0, drawCount );\r\n\r\n\t\t\tlet elementCount = 0;\r\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\r\n\r\n\t\t\t\telementCount += counts[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0; i < primcount.length; i ++ ) {\r\n\r\n\t\t\t\tinfo.update( elementCount, mode, primcount[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.setIndex = setIndex;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\tthis.renderMultiDraw = renderMultiDraw;\r\n\tthis.renderMultiDrawInstances = renderMultiDrawInstances;\r\n\r\n}\r\n\r\n\r\nexport { WebGLIndexedBufferRenderer };\r\n", "function WebGLInfo( gl ) {\r\n\r\n\tconst memory = {\r\n\t\tgeometries: 0,\r\n\t\ttextures: 0\r\n\t};\r\n\r\n\tconst render = {\r\n\t\tframe: 0,\r\n\t\tcalls: 0,\r\n\t\ttriangles: 0,\r\n\t\tpoints: 0,\r\n\t\tlines: 0\r\n\t};\r\n\r\n\tfunction update( count, mode, instanceCount ) {\r\n\r\n\t\trender.calls ++;\r\n\r\n\t\tswitch ( mode ) {\r\n\r\n\t\t\tcase gl.TRIANGLES:\r\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase gl.LINES:\r\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase gl.LINE_STRIP:\r\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase gl.LINE_LOOP:\r\n\t\t\t\trender.lines += instanceCount * count;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase gl.POINTS:\r\n\t\t\t\trender.points += instanceCount * count;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reset() {\r\n\r\n\t\trender.calls = 0;\r\n\t\trender.triangles = 0;\r\n\t\trender.points = 0;\r\n\t\trender.lines = 0;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tmemory: memory,\r\n\t\trender: render,\r\n\t\tprograms: null,\r\n\t\tautoReset: true,\r\n\t\treset: reset,\r\n\t\tupdate: update\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLInfo };\r\n", "import { FloatType } from '../../constants.js';\r\nimport { DataArrayTexture } from '../../textures/DataArrayTexture.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\r\n\r\n\tconst morphTextures = new WeakMap();\r\n\tconst morph = new Vector4();\r\n\r\n\tfunction update( object, geometry, program ) {\r\n\r\n\t\tconst objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\t// the following encodes morph targets into an array of data textures. Each layer represents a single morph target.\r\n\r\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\t\tlet entry = morphTextures.get( geometry );\r\n\r\n\t\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\r\n\r\n\t\t\tif ( entry !== undefined ) entry.texture.dispose();\r\n\r\n\t\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\r\n\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\r\n\t\t\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\r\n\r\n\t\t\tconst morphTargets = geometry.morphAttributes.position || [];\r\n\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\r\n\t\t\tconst morphColors = geometry.morphAttributes.color || [];\r\n\r\n\t\t\tlet vertexDataCount = 0;\r\n\r\n\t\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\r\n\t\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\r\n\t\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\r\n\r\n\t\t\tlet width = geometry.attributes.position.count * vertexDataCount;\r\n\t\t\tlet height = 1;\r\n\r\n\t\t\tif ( width > capabilities.maxTextureSize ) {\r\n\r\n\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\r\n\t\t\t\twidth = capabilities.maxTextureSize;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\r\n\r\n\t\t\tconst texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\r\n\t\t\ttexture.type = FloatType;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t// fill buffer\r\n\r\n\t\t\tconst vertexDataStride = vertexDataCount * 4;\r\n\r\n\t\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\r\n\r\n\t\t\t\tconst morphTarget = morphTargets[ i ];\r\n\t\t\t\tconst morphNormal = morphNormals[ i ];\r\n\t\t\t\tconst morphColor = morphColors[ i ];\r\n\r\n\t\t\t\tconst offset = width * height * 4 * i;\r\n\r\n\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\r\n\r\n\t\t\t\t\tconst stride = j * vertexDataStride;\r\n\r\n\t\t\t\t\tif ( hasMorphPosition === true ) {\r\n\r\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\r\n\r\n\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasMorphNormals === true ) {\r\n\r\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\r\n\r\n\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasMorphColors === true ) {\r\n\r\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphColor, j );\r\n\r\n\t\t\t\t\t\tbuffer[ offset + stride + 8 ] = morph.x;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 9 ] = morph.y;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 10 ] = morph.z;\r\n\t\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tentry = {\r\n\t\t\t\tcount: morphTargetsCount,\r\n\t\t\t\ttexture: texture,\r\n\t\t\t\tsize: new Vector2( width, height )\r\n\t\t\t};\r\n\r\n\t\t\tmorphTextures.set( geometry, entry );\r\n\r\n\t\t\tfunction disposeTexture() {\r\n\r\n\t\t\t\ttexture.dispose();\r\n\r\n\t\t\t\tmorphTextures.delete( geometry );\r\n\r\n\t\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.addEventListener( 'dispose', disposeTexture );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\t\tif ( object.isInstancedMesh === true && object.morphTexture !== null ) {\r\n\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTexture', object.morphTexture, textures );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet morphInfluencesSum = 0;\r\n\r\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\r\n\r\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\r\n\r\n\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\r\n\r\n\t\t}\r\n\r\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\r\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tupdate: update\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLMorphtargets };\r\n", "function WebGLObjects( gl, geometries, attributes, info ) {\r\n\r\n\tlet updateMap = new WeakMap();\r\n\r\n\tfunction update( object ) {\r\n\r\n\t\tconst frame = info.render.frame;\r\n\r\n\t\tconst geometry = object.geometry;\r\n\t\tconst buffergeometry = geometries.get( object, geometry );\r\n\r\n\t\t// Update once per frame\r\n\r\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\r\n\r\n\t\t\tgeometries.update( buffergeometry );\r\n\r\n\t\t\tupdateMap.set( buffergeometry, frame );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isInstancedMesh ) {\r\n\r\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\r\n\r\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( updateMap.get( object ) !== frame ) {\r\n\r\n\t\t\t\tattributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );\r\n\r\n\t\t\t\tif ( object.instanceColor !== null ) {\r\n\r\n\t\t\t\t\tattributes.update( object.instanceColor, gl.ARRAY_BUFFER );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tupdateMap.set( object, frame );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isSkinnedMesh ) {\r\n\r\n\t\t\tconst skeleton = object.skeleton;\r\n\r\n\t\t\tif ( updateMap.get( skeleton ) !== frame ) {\r\n\r\n\t\t\t\tskeleton.update();\r\n\r\n\t\t\t\tupdateMap.set( skeleton, frame );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn buffergeometry;\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\tupdateMap = new WeakMap();\r\n\r\n\t}\r\n\r\n\tfunction onInstancedMeshDispose( event ) {\r\n\r\n\t\tconst instancedMesh = event.target;\r\n\r\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\r\n\r\n\t\tattributes.remove( instancedMesh.instanceMatrix );\r\n\r\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tupdate: update,\r\n\t\tdispose: dispose\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLObjects };\r\n", "import { Texture } from './Texture.js';\r\nimport { NearestFilter, UnsignedIntType, UnsignedInt248Type, DepthFormat, DepthStencilFormat } from '../constants.js';\r\n\r\nclass DepthTexture extends Texture {\r\n\r\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat ) {\r\n\r\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\r\n\r\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedIntType;\r\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\r\n\r\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.isDepthTexture = true;\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tthis.compareFunction = null;\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.compareFunction = source.compareFunction;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DepthTexture };\r\n", "/**\r\n * Uniforms of a program.\r\n * Those form a tree structure with a special top-level container for the root,\r\n * which you get by calling 'new WebGLUniforms( gl, program )'.\r\n *\r\n *\r\n * Properties of inner nodes including the top-level container:\r\n *\r\n * .seq - array of nested uniforms\r\n * .map - nested uniforms by name\r\n *\r\n *\r\n * Methods of all nodes except the top-level container:\r\n *\r\n * .setValue( gl, value, [textures] )\r\n *\r\n * \t\tuploads a uniform value(s)\r\n *  \tthe 'textures' parameter is needed for sampler uniforms\r\n *\r\n *\r\n * Static methods of the top-level container (textures factorizations):\r\n *\r\n * .upload( gl, seq, values, textures )\r\n *\r\n * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n *\r\n * .seqWithValue( seq, values ) : filteredSeq\r\n *\r\n * \t\tfilters 'seq' entries with corresponding entry in values\r\n *\r\n *\r\n * Methods of the top-level container (textures factorizations):\r\n *\r\n * .setValue( gl, name, value, textures )\r\n *\r\n * \t\tsets uniform with  name 'name' to 'value'\r\n *\r\n * .setOptional( gl, obj, prop )\r\n *\r\n * \t\tlike .set for an optional property of the object\r\n *\r\n */\r\n\r\nimport { CubeTexture } from '../../textures/CubeTexture.js';\r\nimport { Texture } from '../../textures/Texture.js';\r\nimport { DataArrayTexture } from '../../textures/DataArrayTexture.js';\r\nimport { Data3DTexture } from '../../textures/Data3DTexture.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport { LessEqualCompare } from '../../constants.js';\r\n\r\nconst emptyTexture = /*@__PURE__*/ new Texture();\r\n\r\nconst emptyShadowTexture = /*@__PURE__*/ new DepthTexture( 1, 1 );\r\n\r\nconst emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();\r\nconst empty3dTexture = /*@__PURE__*/ new Data3DTexture();\r\nconst emptyCubeTexture = /*@__PURE__*/ new CubeTexture();\r\n\r\n// --- Utilities ---\r\n\r\n// Array Caches (provide typed arrays for temporary by size)\r\n\r\nconst arrayCacheF32 = [];\r\nconst arrayCacheI32 = [];\r\n\r\n// Float32Array caches used for uploading Matrix uniforms\r\n\r\nconst mat4array = new Float32Array( 16 );\r\nconst mat3array = new Float32Array( 9 );\r\nconst mat2array = new Float32Array( 4 );\r\n\r\n// Flattening for arrays of vectors and matrices\r\n\r\nfunction flatten( array, nBlocks, blockSize ) {\r\n\r\n\tconst firstElem = array[ 0 ];\r\n\r\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\r\n\t// unoptimized: ! isNaN( firstElem )\r\n\t// see http://jacksondunstan.com/articles/983\r\n\r\n\tconst n = nBlocks * blockSize;\r\n\tlet r = arrayCacheF32[ n ];\r\n\r\n\tif ( r === undefined ) {\r\n\r\n\t\tr = new Float32Array( n );\r\n\t\tarrayCacheF32[ n ] = r;\r\n\r\n\t}\r\n\r\n\tif ( nBlocks !== 0 ) {\r\n\r\n\t\tfirstElem.toArray( r, 0 );\r\n\r\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\r\n\r\n\t\t\toffset += blockSize;\r\n\t\t\tarray[ i ].toArray( r, offset );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn r;\r\n\r\n}\r\n\r\nfunction arraysEqual( a, b ) {\r\n\r\n\tif ( a.length !== b.length ) return false;\r\n\r\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\r\n\r\n\t\tif ( a[ i ] !== b[ i ] ) return false;\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction copyArray( a, b ) {\r\n\r\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\r\n\r\n\t\ta[ i ] = b[ i ];\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Texture unit allocation\r\n\r\nfunction allocTexUnits( textures, n ) {\r\n\r\n\tlet r = arrayCacheI32[ n ];\r\n\r\n\tif ( r === undefined ) {\r\n\r\n\t\tr = new Int32Array( n );\r\n\t\tarrayCacheI32[ n ] = r;\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\tr[ i ] = textures.allocateTextureUnit();\r\n\r\n\t}\r\n\r\n\treturn r;\r\n\r\n}\r\n\r\n// --- Setters ---\r\n\r\n// Note: Defining these methods externally, because they come in a bunch\r\n// and this way their names minify.\r\n\r\n// Single scalar\r\n\r\nfunction setValueV1f( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( cache[ 0 ] === v ) return;\r\n\r\n\tgl.uniform1f( this.addr, v );\r\n\r\n\tcache[ 0 ] = v;\r\n\r\n}\r\n\r\n// Single float vector (from flat array or THREE.VectorN)\r\n\r\nfunction setValueV2f( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\r\n\r\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform2fv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueV3f( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\r\n\r\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\t\t\tcache[ 2 ] = v.z;\r\n\r\n\t\t}\r\n\r\n\t} else if ( v.r !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\r\n\r\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\r\n\r\n\t\t\tcache[ 0 ] = v.r;\r\n\t\t\tcache[ 1 ] = v.g;\r\n\t\t\tcache[ 2 ] = v.b;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform3fv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueV4f( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\r\n\r\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\t\t\tcache[ 2 ] = v.z;\r\n\t\t\tcache[ 3 ] = v.w;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform4fv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Single matrix (from flat array or THREE.MatrixN)\r\n\r\nfunction setValueM2( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\tconst elements = v.elements;\r\n\r\n\tif ( elements === undefined ) {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, elements ) ) return;\r\n\r\n\t\tmat2array.set( elements );\r\n\r\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\r\n\r\n\t\tcopyArray( cache, elements );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueM3( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\tconst elements = v.elements;\r\n\r\n\tif ( elements === undefined ) {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, elements ) ) return;\r\n\r\n\t\tmat3array.set( elements );\r\n\r\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\r\n\r\n\t\tcopyArray( cache, elements );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueM4( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\tconst elements = v.elements;\r\n\r\n\tif ( elements === undefined ) {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, elements ) ) return;\r\n\r\n\t\tmat4array.set( elements );\r\n\r\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\r\n\r\n\t\tcopyArray( cache, elements );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Single integer / boolean\r\n\r\nfunction setValueV1i( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( cache[ 0 ] === v ) return;\r\n\r\n\tgl.uniform1i( this.addr, v );\r\n\r\n\tcache[ 0 ] = v;\r\n\r\n}\r\n\r\n// Single integer / boolean vector (from flat array or THREE.VectorN)\r\n\r\nfunction setValueV2i( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\r\n\r\n\t\t\tgl.uniform2i( this.addr, v.x, v.y );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueV3i( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\r\n\r\n\t\t\tgl.uniform3i( this.addr, v.x, v.y, v.z );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\t\t\tcache[ 2 ] = v.z;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueV4i( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\r\n\r\n\t\t\tgl.uniform4i( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\t\t\tcache[ 2 ] = v.z;\r\n\t\t\tcache[ 3 ] = v.w;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Single unsigned integer\r\n\r\nfunction setValueV1ui( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( cache[ 0 ] === v ) return;\r\n\r\n\tgl.uniform1ui( this.addr, v );\r\n\r\n\tcache[ 0 ] = v;\r\n\r\n}\r\n\r\n// Single unsigned integer vector (from flat array or THREE.VectorN)\r\n\r\nfunction setValueV2ui( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\r\n\r\n\t\t\tgl.uniform2ui( this.addr, v.x, v.y );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform2uiv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueV3ui( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\r\n\r\n\t\t\tgl.uniform3ui( this.addr, v.x, v.y, v.z );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\t\t\tcache[ 2 ] = v.z;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform3uiv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueV4ui( gl, v ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tif ( v.x !== undefined ) {\r\n\r\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\r\n\r\n\t\t\tgl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t\tcache[ 0 ] = v.x;\r\n\t\t\tcache[ 1 ] = v.y;\r\n\t\t\tcache[ 2 ] = v.z;\r\n\t\t\tcache[ 3 ] = v.w;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform4uiv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Single texture (2D / Cube)\r\n\r\nfunction setValueT1( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\tconst unit = textures.allocateTextureUnit();\r\n\r\n\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\tgl.uniform1i( this.addr, unit );\r\n\t\tcache[ 0 ] = unit;\r\n\r\n\t}\r\n\r\n\tlet emptyTexture2D;\r\n\r\n\tif ( this.type === gl.SAMPLER_2D_SHADOW ) {\r\n\r\n\t\temptyShadowTexture.compareFunction = LessEqualCompare; // #28670\r\n\t\temptyTexture2D = emptyShadowTexture;\r\n\r\n\t} else {\r\n\r\n\t\temptyTexture2D = emptyTexture;\r\n\r\n\t}\r\n\r\n\ttextures.setTexture2D( v || emptyTexture2D, unit );\r\n\r\n}\r\n\r\nfunction setValueT3D1( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\tconst unit = textures.allocateTextureUnit();\r\n\r\n\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\tgl.uniform1i( this.addr, unit );\r\n\t\tcache[ 0 ] = unit;\r\n\r\n\t}\r\n\r\n\ttextures.setTexture3D( v || empty3dTexture, unit );\r\n\r\n}\r\n\r\nfunction setValueT6( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\tconst unit = textures.allocateTextureUnit();\r\n\r\n\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\tgl.uniform1i( this.addr, unit );\r\n\t\tcache[ 0 ] = unit;\r\n\r\n\t}\r\n\r\n\ttextures.setTextureCube( v || emptyCubeTexture, unit );\r\n\r\n}\r\n\r\nfunction setValueT2DArray1( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\tconst unit = textures.allocateTextureUnit();\r\n\r\n\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\tgl.uniform1i( this.addr, unit );\r\n\t\tcache[ 0 ] = unit;\r\n\r\n\t}\r\n\r\n\ttextures.setTexture2DArray( v || emptyArrayTexture, unit );\r\n\r\n}\r\n\r\n// Helper to pick the right setter for the singular case\r\n\r\nfunction getSingularSetter( type ) {\r\n\r\n\tswitch ( type ) {\r\n\r\n\t\tcase 0x1406: return setValueV1f; // FLOAT\r\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\r\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\r\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\r\n\r\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\r\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\r\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\r\n\r\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\r\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\r\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\r\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\r\n\r\n\t\tcase 0x1405: return setValueV1ui; // UINT\r\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\r\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\r\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\r\n\r\n\t\tcase 0x8b5e: // SAMPLER_2D\r\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\r\n\t\tcase 0x8dca: // INT_SAMPLER_2D\r\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\r\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\r\n\t\t\treturn setValueT1;\r\n\r\n\t\tcase 0x8b5f: // SAMPLER_3D\r\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\r\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\r\n\t\t\treturn setValueT3D1;\r\n\r\n\t\tcase 0x8b60: // SAMPLER_CUBE\r\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\r\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\r\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\r\n\t\t\treturn setValueT6;\r\n\r\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\r\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\r\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\r\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\r\n\t\t\treturn setValueT2DArray1;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Array of scalars\r\n\r\nfunction setValueV1fArray( gl, v ) {\r\n\r\n\tgl.uniform1fv( this.addr, v );\r\n\r\n}\r\n\r\n// Array of vectors (from flat array or array of THREE.VectorN)\r\n\r\nfunction setValueV2fArray( gl, v ) {\r\n\r\n\tconst data = flatten( v, this.size, 2 );\r\n\r\n\tgl.uniform2fv( this.addr, data );\r\n\r\n}\r\n\r\nfunction setValueV3fArray( gl, v ) {\r\n\r\n\tconst data = flatten( v, this.size, 3 );\r\n\r\n\tgl.uniform3fv( this.addr, data );\r\n\r\n}\r\n\r\nfunction setValueV4fArray( gl, v ) {\r\n\r\n\tconst data = flatten( v, this.size, 4 );\r\n\r\n\tgl.uniform4fv( this.addr, data );\r\n\r\n}\r\n\r\n// Array of matrices (from flat array or array of THREE.MatrixN)\r\n\r\nfunction setValueM2Array( gl, v ) {\r\n\r\n\tconst data = flatten( v, this.size, 4 );\r\n\r\n\tgl.uniformMatrix2fv( this.addr, false, data );\r\n\r\n}\r\n\r\nfunction setValueM3Array( gl, v ) {\r\n\r\n\tconst data = flatten( v, this.size, 9 );\r\n\r\n\tgl.uniformMatrix3fv( this.addr, false, data );\r\n\r\n}\r\n\r\nfunction setValueM4Array( gl, v ) {\r\n\r\n\tconst data = flatten( v, this.size, 16 );\r\n\r\n\tgl.uniformMatrix4fv( this.addr, false, data );\r\n\r\n}\r\n\r\n// Array of integer / boolean\r\n\r\nfunction setValueV1iArray( gl, v ) {\r\n\r\n\tgl.uniform1iv( this.addr, v );\r\n\r\n}\r\n\r\n// Array of integer / boolean vectors (from flat array)\r\n\r\nfunction setValueV2iArray( gl, v ) {\r\n\r\n\tgl.uniform2iv( this.addr, v );\r\n\r\n}\r\n\r\nfunction setValueV3iArray( gl, v ) {\r\n\r\n\tgl.uniform3iv( this.addr, v );\r\n\r\n}\r\n\r\nfunction setValueV4iArray( gl, v ) {\r\n\r\n\tgl.uniform4iv( this.addr, v );\r\n\r\n}\r\n\r\n// Array of unsigned integer\r\n\r\nfunction setValueV1uiArray( gl, v ) {\r\n\r\n\tgl.uniform1uiv( this.addr, v );\r\n\r\n}\r\n\r\n// Array of unsigned integer vectors (from flat array)\r\n\r\nfunction setValueV2uiArray( gl, v ) {\r\n\r\n\tgl.uniform2uiv( this.addr, v );\r\n\r\n}\r\n\r\nfunction setValueV3uiArray( gl, v ) {\r\n\r\n\tgl.uniform3uiv( this.addr, v );\r\n\r\n}\r\n\r\nfunction setValueV4uiArray( gl, v ) {\r\n\r\n\tgl.uniform4uiv( this.addr, v );\r\n\r\n}\r\n\r\n\r\n// Array of textures (2D / 3D / Cube / 2DArray)\r\n\r\nfunction setValueT1Array( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tconst n = v.length;\r\n\r\n\tconst units = allocTexUnits( textures, n );\r\n\r\n\tif ( ! arraysEqual( cache, units ) ) {\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tcopyArray( cache, units );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\ttextures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueT3DArray( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tconst n = v.length;\r\n\r\n\tconst units = allocTexUnits( textures, n );\r\n\r\n\tif ( ! arraysEqual( cache, units ) ) {\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tcopyArray( cache, units );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\ttextures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueT6Array( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tconst n = v.length;\r\n\r\n\tconst units = allocTexUnits( textures, n );\r\n\r\n\tif ( ! arraysEqual( cache, units ) ) {\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tcopyArray( cache, units );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\ttextures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction setValueT2DArrayArray( gl, v, textures ) {\r\n\r\n\tconst cache = this.cache;\r\n\r\n\tconst n = v.length;\r\n\r\n\tconst units = allocTexUnits( textures, n );\r\n\r\n\tif ( ! arraysEqual( cache, units ) ) {\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tcopyArray( cache, units );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\ttextures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Helper to pick the right setter for a pure (bottom-level) array\r\n\r\nfunction getPureArraySetter( type ) {\r\n\r\n\tswitch ( type ) {\r\n\r\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\r\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\r\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\r\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\r\n\r\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\r\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\r\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\r\n\r\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\r\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\r\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\r\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\r\n\r\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\r\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\r\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\r\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\r\n\r\n\t\tcase 0x8b5e: // SAMPLER_2D\r\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\r\n\t\tcase 0x8dca: // INT_SAMPLER_2D\r\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\r\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\r\n\t\t\treturn setValueT1Array;\r\n\r\n\t\tcase 0x8b5f: // SAMPLER_3D\r\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\r\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\r\n\t\t\treturn setValueT3DArray;\r\n\r\n\t\tcase 0x8b60: // SAMPLER_CUBE\r\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\r\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\r\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\r\n\t\t\treturn setValueT6Array;\r\n\r\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\r\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\r\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\r\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\r\n\t\t\treturn setValueT2DArrayArray;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// --- Uniform Classes ---\r\n\r\nclass SingleUniform {\r\n\r\n\tconstructor( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.type = activeInfo.type;\r\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass PureArrayUniform {\r\n\r\n\tconstructor( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.type = activeInfo.type;\r\n\t\tthis.size = activeInfo.size;\r\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass StructuredUniform {\r\n\r\n\tconstructor( id ) {\r\n\r\n\t\tthis.id = id;\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t}\r\n\r\n\tsetValue( gl, value, textures ) {\r\n\r\n\t\tconst seq = this.seq;\r\n\r\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst u = seq[ i ];\r\n\t\t\tu.setValue( gl, value[ u.id ], textures );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// --- Top-level ---\r\n\r\n// Parser - builds up the property tree from the path strings\r\n\r\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\r\n\r\n// extracts\r\n// \t- the identifier (member name or array index)\r\n//  - followed by an optional right bracket (found when array index)\r\n//  - followed by an optional left bracket or dot (type of subscript)\r\n//\r\n// Note: These portions can be read in a non-overlapping fashion and\r\n// allow straightforward parsing of the hierarchy that WebGL encodes\r\n// in the uniform names.\r\n\r\nfunction addUniform( container, uniformObject ) {\r\n\r\n\tcontainer.seq.push( uniformObject );\r\n\tcontainer.map[ uniformObject.id ] = uniformObject;\r\n\r\n}\r\n\r\nfunction parseUniform( activeInfo, addr, container ) {\r\n\r\n\tconst path = activeInfo.name,\r\n\t\tpathLength = path.length;\r\n\r\n\t// reset RegExp object, because of the early exit of a previous run\r\n\tRePathPart.lastIndex = 0;\r\n\r\n\twhile ( true ) {\r\n\r\n\t\tconst match = RePathPart.exec( path ),\r\n\t\t\tmatchEnd = RePathPart.lastIndex;\r\n\r\n\t\tlet id = match[ 1 ];\r\n\t\tconst idIsIndex = match[ 2 ] === ']',\r\n\t\t\tsubscript = match[ 3 ];\r\n\r\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\r\n\r\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\r\n\r\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n\r\n\t\t\taddUniform( container, subscript === undefined ?\r\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\r\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// step into inner node / create it in case it doesn't exist\r\n\r\n\t\t\tconst map = container.map;\r\n\t\t\tlet next = map[ id ];\r\n\r\n\t\t\tif ( next === undefined ) {\r\n\r\n\t\t\t\tnext = new StructuredUniform( id );\r\n\t\t\t\taddUniform( container, next );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcontainer = next;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Root Container\r\n\r\nclass WebGLUniforms {\r\n\r\n\tconstructor( gl, program ) {\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t\tconst n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\r\n\t\tfor ( let i = 0; i < n; ++ i ) {\r\n\r\n\t\t\tconst info = gl.getActiveUniform( program, i ),\r\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\r\n\r\n\t\t\tparseUniform( info, addr, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetValue( gl, name, value, textures ) {\r\n\r\n\t\tconst u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) u.setValue( gl, value, textures );\r\n\r\n\t}\r\n\r\n\tsetOptional( gl, object, name ) {\r\n\r\n\t\tconst v = object[ name ];\r\n\r\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\r\n\r\n\t}\r\n\r\n\tstatic upload( gl, seq, values, textures ) {\r\n\r\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v.needsUpdate !== false ) {\r\n\r\n\t\t\t\t// note: always updating when .needsUpdate is undefined\r\n\t\t\t\tu.setValue( gl, v.value, textures );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic seqWithValue( seq, values ) {\r\n\r\n\t\tconst r = [];\r\n\r\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst u = seq[ i ];\r\n\t\t\tif ( u.id in values ) r.push( u );\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGLUniforms };\r\n", "function WebGLShader( gl, type, string ) {\r\n\r\n\tconst shader = gl.createShader( type );\r\n\r\n\tgl.shaderSource( shader, string );\r\n\tgl.compileShader( shader );\r\n\r\n\treturn shader;\r\n\r\n}\r\n\r\nexport { WebGLShader };\r\n", "import { WebGLUniforms } from './WebGLUniforms.js';\r\nimport { WebGLShader } from './WebGLShader.js';\r\nimport { ShaderChunk } from '../shaders/ShaderChunk.js';\r\nimport { NoToneMapping, AddOperation, MixOperation, MultiplyOperation, CubeRefractionMapping, CubeUVReflectionMapping, CubeReflectionMapping, PCFSoftShadowMap, PCFShadowMap, VSMShadowMap, AgXToneMapping, ACESFilmicToneMapping, NeutralToneMapping, CineonToneMapping, CustomToneMapping, ReinhardToneMapping, LinearToneMapping, GLSL3, LinearSRGBColorSpace, SRGBColorSpace, LinearDisplayP3ColorSpace, DisplayP3ColorSpace, P3Primaries, Rec709Primaries } from '../../constants.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\n// From https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/\r\nconst COMPLETION_STATUS_KHR = 0x91B1;\r\n\r\nlet programIdCount = 0;\r\n\r\nfunction handleSource( string, errorLine ) {\r\n\r\n\tconst lines = string.split( '\\n' );\r\n\tconst lines2 = [];\r\n\r\n\tconst from = Math.max( errorLine - 6, 0 );\r\n\tconst to = Math.min( errorLine + 6, lines.length );\r\n\r\n\tfor ( let i = from; i < to; i ++ ) {\r\n\r\n\t\tconst line = i + 1;\r\n\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\r\n\r\n\t}\r\n\r\n\treturn lines2.join( '\\n' );\r\n\r\n}\r\n\r\nfunction getEncodingComponents( colorSpace ) {\r\n\r\n\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\r\n\tconst encodingPrimaries = ColorManagement.getPrimaries( colorSpace );\r\n\r\n\tlet gamutMapping;\r\n\r\n\tif ( workingPrimaries === encodingPrimaries ) {\r\n\r\n\t\tgamutMapping = '';\r\n\r\n\t} else if ( workingPrimaries === P3Primaries && encodingPrimaries === Rec709Primaries ) {\r\n\r\n\t\tgamutMapping = 'LinearDisplayP3ToLinearSRGB';\r\n\r\n\t} else if ( workingPrimaries === Rec709Primaries && encodingPrimaries === P3Primaries ) {\r\n\r\n\t\tgamutMapping = 'LinearSRGBToLinearDisplayP3';\r\n\r\n\t}\r\n\r\n\tswitch ( colorSpace ) {\r\n\r\n\t\tcase LinearSRGBColorSpace:\r\n\t\tcase LinearDisplayP3ColorSpace:\r\n\t\t\treturn [ gamutMapping, 'LinearTransferOETF' ];\r\n\r\n\t\tcase SRGBColorSpace:\r\n\t\tcase DisplayP3ColorSpace:\r\n\t\t\treturn [ gamutMapping, 'sRGBTransferOETF' ];\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported color space:', colorSpace );\r\n\t\t\treturn [ gamutMapping, 'LinearTransferOETF' ];\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction getShaderErrors( gl, shader, type ) {\r\n\r\n\tconst status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );\r\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\r\n\r\n\tif ( status && errors === '' ) return '';\r\n\r\n\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\r\n\tif ( errorMatches ) {\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\r\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource( gl.getShaderSource( shader ), errorLine );\r\n\r\n\t} else {\r\n\r\n\t\treturn errors;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction getTexelEncodingFunction( functionName, colorSpace ) {\r\n\r\n\tconst components = getEncodingComponents( colorSpace );\r\n\treturn `vec4 ${functionName}( vec4 value ) { return ${components[ 0 ]}( ${components[ 1 ]}( value ) ); }`;\r\n\r\n}\r\n\r\nfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\tlet toneMappingName;\r\n\r\n\tswitch ( toneMapping ) {\r\n\r\n\t\tcase LinearToneMapping:\r\n\t\t\ttoneMappingName = 'Linear';\r\n\t\t\tbreak;\r\n\r\n\t\tcase ReinhardToneMapping:\r\n\t\t\ttoneMappingName = 'Reinhard';\r\n\t\t\tbreak;\r\n\r\n\t\tcase CineonToneMapping:\r\n\t\t\ttoneMappingName = 'Cineon';\r\n\t\t\tbreak;\r\n\r\n\t\tcase ACESFilmicToneMapping:\r\n\t\t\ttoneMappingName = 'ACESFilmic';\r\n\t\t\tbreak;\r\n\r\n\t\tcase AgXToneMapping:\r\n\t\t\ttoneMappingName = 'AgX';\r\n\t\t\tbreak;\r\n\r\n\t\tcase NeutralToneMapping:\r\n\t\t\ttoneMappingName = 'Neutral';\r\n\t\t\tbreak;\r\n\r\n\t\tcase CustomToneMapping:\r\n\t\t\ttoneMappingName = 'Custom';\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\r\n\t\t\ttoneMappingName = 'Linear';\r\n\r\n\t}\r\n\r\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\r\n\r\n}\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\n\r\nfunction getLuminanceFunction() {\r\n\r\n\tColorManagement.getLuminanceCoefficients( _v0 );\r\n\r\n\tconst r = _v0.x.toFixed( 4 );\r\n\tconst g = _v0.y.toFixed( 4 );\r\n\tconst b = _v0.z.toFixed( 4 );\r\n\r\n\treturn [\r\n\r\n\t\t'float luminance( const in vec3 rgb ) {',\r\n\r\n\t\t`\tconst vec3 weights = vec3( ${ r }, ${ g }, ${ b } );`,\r\n\r\n\t\t'\treturn dot( weights, rgb );',\r\n\r\n\t\t'}'\r\n\r\n\t].join( '\\n' );\r\n\r\n}\r\n\r\nfunction generateVertexExtensions( parameters ) {\r\n\r\n\tconst chunks = [\r\n\t\tparameters.extensionClipCullDistance ? '#extension GL_ANGLE_clip_cull_distance : require' : '',\r\n\t\tparameters.extensionMultiDraw ? '#extension GL_ANGLE_multi_draw : require' : '',\r\n\t];\r\n\r\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n}\r\n\r\nfunction generateDefines( defines ) {\r\n\r\n\tconst chunks = [];\r\n\r\n\tfor ( const name in defines ) {\r\n\r\n\t\tconst value = defines[ name ];\r\n\r\n\t\tif ( value === false ) continue;\r\n\r\n\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t}\r\n\r\n\treturn chunks.join( '\\n' );\r\n\r\n}\r\n\r\nfunction fetchAttributeLocations( gl, program ) {\r\n\r\n\tconst attributes = {};\r\n\r\n\tconst n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\r\n\tfor ( let i = 0; i < n; i ++ ) {\r\n\r\n\t\tconst info = gl.getActiveAttrib( program, i );\r\n\t\tconst name = info.name;\r\n\r\n\t\tlet locationSize = 1;\r\n\t\tif ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;\r\n\t\tif ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;\r\n\t\tif ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;\r\n\r\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\r\n\r\n\t\tattributes[ name ] = {\r\n\t\t\ttype: info.type,\r\n\t\t\tlocation: gl.getAttribLocation( program, name ),\r\n\t\t\tlocationSize: locationSize\r\n\t\t};\r\n\r\n\t}\r\n\r\n\treturn attributes;\r\n\r\n}\r\n\r\nfunction filterEmptyLine( string ) {\r\n\r\n\treturn string !== '';\r\n\r\n}\r\n\r\nfunction replaceLightNums( string, parameters ) {\r\n\r\n\tconst numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;\r\n\r\n\treturn string\r\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )\r\n\t\t.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )\r\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\r\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\r\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\r\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )\r\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\r\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\r\n\r\n}\r\n\r\nfunction replaceClippingPlaneNums( string, parameters ) {\r\n\r\n\treturn string\r\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\r\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\r\n\r\n}\r\n\r\n// Resolve Includes\r\n\r\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n\r\nfunction resolveIncludes( string ) {\r\n\r\n\treturn string.replace( includePattern, includeReplacer );\r\n\r\n}\r\n\r\nconst shaderChunkMap = new Map();\r\n\r\nfunction includeReplacer( match, include ) {\r\n\r\n\tlet string = ShaderChunk[ include ];\r\n\r\n\tif ( string === undefined ) {\r\n\r\n\t\tconst newInclude = shaderChunkMap.get( include );\r\n\r\n\t\tif ( newInclude !== undefined ) {\r\n\r\n\t\t\tstring = ShaderChunk[ newInclude ];\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Shader chunk \"%s\" has been deprecated. Use \"%s\" instead.', include, newInclude );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn resolveIncludes( string );\r\n\r\n}\r\n\r\n// Unroll Loops\r\n\r\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\r\n\r\nfunction unrollLoops( string ) {\r\n\r\n\treturn string.replace( unrollLoopPattern, loopReplacer );\r\n\r\n}\r\n\r\nfunction loopReplacer( match, start, end, snippet ) {\r\n\r\n\tlet string = '';\r\n\r\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\tstring += snippet\r\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\r\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\r\n\r\n\t}\r\n\r\n\treturn string;\r\n\r\n}\r\n\r\n//\r\n\r\nfunction generatePrecision( parameters ) {\r\n\r\n\tlet precisionstring = `precision ${parameters.precision} float;\r\n\tprecision ${parameters.precision} int;\r\n\tprecision ${parameters.precision} sampler2D;\r\n\tprecision ${parameters.precision} samplerCube;\r\n\tprecision ${parameters.precision} sampler3D;\r\n\tprecision ${parameters.precision} sampler2DArray;\r\n\tprecision ${parameters.precision} sampler2DShadow;\r\n\tprecision ${parameters.precision} samplerCubeShadow;\r\n\tprecision ${parameters.precision} sampler2DArrayShadow;\r\n\tprecision ${parameters.precision} isampler2D;\r\n\tprecision ${parameters.precision} isampler3D;\r\n\tprecision ${parameters.precision} isamplerCube;\r\n\tprecision ${parameters.precision} isampler2DArray;\r\n\tprecision ${parameters.precision} usampler2D;\r\n\tprecision ${parameters.precision} usampler3D;\r\n\tprecision ${parameters.precision} usamplerCube;\r\n\tprecision ${parameters.precision} usampler2DArray;\r\n\t`;\r\n\r\n\tif ( parameters.precision === 'highp' ) {\r\n\r\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\r\n\r\n\t} else if ( parameters.precision === 'mediump' ) {\r\n\r\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\r\n\r\n\t} else if ( parameters.precision === 'lowp' ) {\r\n\r\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\r\n\r\n\t}\r\n\r\n\treturn precisionstring;\r\n\r\n}\r\n\r\nfunction generateShadowMapTypeDefine( parameters ) {\r\n\r\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\r\n\r\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\r\n\r\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\r\n\r\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\r\n\r\n\t}\r\n\r\n\treturn shadowMapTypeDefine;\r\n\r\n}\r\n\r\nfunction generateEnvMapTypeDefine( parameters ) {\r\n\r\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\r\n\tif ( parameters.envMap ) {\r\n\r\n\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\tcase CubeReflectionMapping:\r\n\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase CubeUVReflectionMapping:\r\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn envMapTypeDefine;\r\n\r\n}\r\n\r\nfunction generateEnvMapModeDefine( parameters ) {\r\n\r\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\r\n\tif ( parameters.envMap ) {\r\n\r\n\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\tcase CubeRefractionMapping:\r\n\r\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn envMapModeDefine;\r\n\r\n}\r\n\r\nfunction generateEnvMapBlendingDefine( parameters ) {\r\n\r\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\r\n\r\n\tif ( parameters.envMap ) {\r\n\r\n\t\tswitch ( parameters.combine ) {\r\n\r\n\t\t\tcase MultiplyOperation:\r\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MixOperation:\r\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AddOperation:\r\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn envMapBlendingDefine;\r\n\r\n}\r\n\r\nfunction generateCubeUVSize( parameters ) {\r\n\r\n\tconst imageHeight = parameters.envMapCubeUVHeight;\r\n\r\n\tif ( imageHeight === null ) return null;\r\n\r\n\tconst maxMip = Math.log2( imageHeight ) - 2;\r\n\r\n\tconst texelHeight = 1.0 / imageHeight;\r\n\r\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\r\n\r\n\treturn { texelWidth, texelHeight, maxMip };\r\n\r\n}\r\n\r\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\r\n\r\n\t// TODO Send this event to Three.js DevTools\r\n\t// console.log( 'WebGLProgram', cacheKey );\r\n\r\n\tconst gl = renderer.getContext();\r\n\r\n\tconst defines = parameters.defines;\r\n\r\n\tlet vertexShader = parameters.vertexShader;\r\n\tlet fragmentShader = parameters.fragmentShader;\r\n\r\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\r\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\r\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\r\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\r\n\tconst envMapCubeUVSize = generateCubeUVSize( parameters );\r\n\r\n\tconst customVertexExtensions = generateVertexExtensions( parameters );\r\n\r\n\tconst customDefines = generateDefines( defines );\r\n\r\n\tconst program = gl.createProgram();\r\n\r\n\tlet prefixVertex, prefixFragment;\r\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\r\n\r\n\tif ( parameters.isRawShaderMaterial ) {\r\n\r\n\t\tprefixVertex = [\r\n\r\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\r\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\r\n\r\n\t\t\tcustomDefines\r\n\r\n\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\tif ( prefixVertex.length > 0 ) {\r\n\r\n\t\t\tprefixVertex += '\\n';\r\n\r\n\t\t}\r\n\r\n\t\tprefixFragment = [\r\n\r\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\r\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\r\n\r\n\t\t\tcustomDefines\r\n\r\n\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\tif ( prefixFragment.length > 0 ) {\r\n\r\n\t\t\tprefixFragment += '\\n';\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tprefixVertex = [\r\n\r\n\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\r\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\tparameters.extensionClipCullDistance ? '#define USE_CLIP_DISTANCE' : '',\r\n\t\t\tparameters.batching ? '#define USE_BATCHING' : '',\r\n\t\t\tparameters.batchingColor ? '#define USE_BATCHING_COLOR' : '',\r\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\r\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\r\n\t\t\tparameters.instancingMorph ? '#define USE_INSTANCING_MORPH' : '',\r\n\r\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\r\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\r\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\r\n\t\t\tparameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\r\n\t\t\tparameters.anisotropy ? '#define USE_ANISOTROPY' : '',\r\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\r\n\r\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\r\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\r\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\r\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\r\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\r\n\r\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\r\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\r\n\r\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\tparameters.alphaHash ? '#define USE_ALPHAHASH' : '',\r\n\r\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\r\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\r\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\r\n\r\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\r\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\r\n\r\n\t\t\t//\r\n\r\n\t\t\tparameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',\r\n\t\t\tparameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',\r\n\t\t\tparameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',\r\n\t\t\tparameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',\r\n\t\t\tparameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',\r\n\t\t\tparameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',\r\n\t\t\tparameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',\r\n\t\t\tparameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',\r\n\r\n\t\t\tparameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',\r\n\t\t\tparameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',\r\n\r\n\t\t\tparameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',\r\n\r\n\t\t\tparameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',\r\n\t\t\tparameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',\r\n\t\t\tparameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',\r\n\r\n\t\t\tparameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',\r\n\t\t\tparameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',\r\n\r\n\t\t\tparameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',\r\n\t\t\tparameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',\r\n\r\n\t\t\tparameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',\r\n\t\t\tparameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',\r\n\t\t\tparameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',\r\n\r\n\t\t\tparameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',\r\n\t\t\tparameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',\r\n\r\n\t\t\t//\r\n\r\n\t\t\tparameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',\r\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\r\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\r\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\r\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\r\n\r\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\r\n\r\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\r\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t( parameters.morphColors ) ? '#define USE_MORPHCOLORS' : '',\r\n\t\t\t( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',\r\n\t\t\t( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\r\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\tparameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',\r\n\r\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\tparameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',\r\n\r\n\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t'#ifdef USE_INSTANCING',\r\n\r\n\t\t\t'\tattribute mat4 instanceMatrix;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\r\n\r\n\t\t\t'\tattribute vec3 instanceColor;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'#ifdef USE_INSTANCING_MORPH',\r\n\r\n\t\t\t'\tuniform sampler2D morphTexture;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'attribute vec3 position;',\r\n\t\t\t'attribute vec3 normal;',\r\n\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t'#ifdef USE_UV1',\r\n\r\n\t\t\t'\tattribute vec2 uv1;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'#ifdef USE_UV2',\r\n\r\n\t\t\t'\tattribute vec2 uv2;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'#ifdef USE_UV3',\r\n\r\n\t\t\t'\tattribute vec2 uv3;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'#ifdef USE_TANGENT',\r\n\r\n\t\t\t'\tattribute vec4 tangent;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\r\n\r\n\t\t\t'\tattribute vec4 color;',\r\n\r\n\t\t\t'#elif defined( USE_COLOR )',\r\n\r\n\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t'#endif',\r\n\r\n\t\t\t'\\n'\r\n\r\n\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\tprefixFragment = [\r\n\r\n\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\r\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\r\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\tparameters.alphaToCoverage ? '#define ALPHA_TO_COVERAGE' : '',\r\n\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\r\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',\r\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',\r\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',\r\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\r\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\r\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\r\n\t\t\tparameters.anisotropy ? '#define USE_ANISOTROPY' : '',\r\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\r\n\r\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\r\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\r\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\r\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\r\n\t\t\tparameters.dispersion ? '#define USE_DISPERSION' : '',\r\n\r\n\t\t\tparameters.iridescence ? '#define USE_IRIDESCENCE' : '',\r\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\r\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\r\n\r\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\r\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\r\n\r\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\r\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\r\n\t\t\tparameters.alphaHash ? '#define USE_ALPHAHASH' : '',\r\n\r\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\r\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\r\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\r\n\r\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\r\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\r\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\r\n\r\n\t\t\tparameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',\r\n\t\t\tparameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? '#define USE_COLOR' : '',\r\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\r\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\r\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\r\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\r\n\r\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\r\n\r\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\r\n\r\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\r\n\r\n\t\t\tparameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',\r\n\r\n\t\t\tparameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',\r\n\r\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\tparameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',\r\n\r\n\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\r\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\r\n\r\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\r\n\t\t\tparameters.opaque ? '#define OPAQUE' : '',\r\n\r\n\t\t\tShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),\r\n\t\t\tgetLuminanceFunction(),\r\n\r\n\t\t\tparameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\r\n\r\n\t\t\t'\\n'\r\n\r\n\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tvertexShader = resolveIncludes( vertexShader );\r\n\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\r\n\r\n\tfragmentShader = resolveIncludes( fragmentShader );\r\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\r\n\r\n\tvertexShader = unrollLoops( vertexShader );\r\n\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\tif ( parameters.isRawShaderMaterial !== true ) {\r\n\r\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\r\n\r\n\t\tversionString = '#version 300 es\\n';\r\n\r\n\t\tprefixVertex = [\r\n\t\t\tcustomVertexExtensions,\r\n\t\t\t'#define attribute in',\r\n\t\t\t'#define varying out',\r\n\t\t\t'#define texture2D texture'\r\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\r\n\r\n\t\tprefixFragment = [\r\n\t\t\t'#define varying in',\r\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',\r\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\r\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\r\n\t\t\t'#define texture2D texture',\r\n\t\t\t'#define textureCube texture',\r\n\t\t\t'#define texture2DProj textureProj',\r\n\t\t\t'#define texture2DLodEXT textureLod',\r\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\r\n\t\t\t'#define textureCubeLodEXT textureLod',\r\n\t\t\t'#define texture2DGradEXT textureGrad',\r\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\r\n\t\t\t'#define textureCubeGradEXT textureGrad'\r\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\r\n\r\n\t}\r\n\r\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\r\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\r\n\r\n\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\tconst glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\tconst glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\r\n\tgl.attachShader( program, glVertexShader );\r\n\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t// Force a particular attribute to index 0.\r\n\r\n\tif ( parameters.index0AttributeName !== undefined ) {\r\n\r\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\r\n\r\n\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t}\r\n\r\n\tgl.linkProgram( program );\r\n\r\n\tfunction onFirstUse( self ) {\r\n\r\n\t\t// check for link errors\r\n\t\tif ( renderer.debug.checkShaderErrors ) {\r\n\r\n\t\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\r\n\t\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\r\n\t\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\r\n\r\n\t\t\tlet runnable = true;\r\n\t\t\tlet haveDiagnostics = true;\r\n\r\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\r\n\t\t\t\trunnable = false;\r\n\r\n\t\t\t\tif ( typeof renderer.debug.onShaderError === 'function' ) {\r\n\r\n\t\t\t\t\trenderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// default error reporting\r\n\r\n\t\t\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\r\n\t\t\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\r\n\r\n\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\r\n\t\t\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\\n\\n' +\r\n\t\t\t\t\t\t'Material Name: ' + self.name + '\\n' +\r\n\t\t\t\t\t\t'Material Type: ' + self.type + '\\n\\n' +\r\n\t\t\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\r\n\t\t\t\t\t\tvertexErrors + '\\n' +\r\n\t\t\t\t\t\tfragmentErrors\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\r\n\r\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\t\thaveDiagnostics = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\t\tself.diagnostics = {\r\n\r\n\t\t\t\t\trunnable: runnable,\r\n\r\n\t\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Clean up\r\n\r\n\t\t// Crashes in iOS9 and iOS10. #18402\r\n\t\t// gl.detachShader( program, glVertexShader );\r\n\t\t// gl.detachShader( program, glFragmentShader );\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\tcachedUniforms = new WebGLUniforms( gl, program );\r\n\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t}\r\n\r\n\t// set up caching for uniform locations\r\n\r\n\tlet cachedUniforms;\r\n\r\n\tthis.getUniforms = function () {\r\n\r\n\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t// Populates cachedUniforms and cachedAttributes\r\n\t\t\tonFirstUse( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn cachedUniforms;\r\n\r\n\t};\r\n\r\n\t// set up caching for attribute locations\r\n\r\n\tlet cachedAttributes;\r\n\r\n\tthis.getAttributes = function () {\r\n\r\n\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t// Populates cachedAttributes and cachedUniforms\r\n\t\t\tonFirstUse( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn cachedAttributes;\r\n\r\n\t};\r\n\r\n\t// indicate when the program is ready to be used. if the KHR_parallel_shader_compile extension isn't supported,\r\n\t// flag the program as ready immediately. It may cause a stall when it's first used.\r\n\r\n\tlet programReady = ( parameters.rendererExtensionParallelShaderCompile === false );\r\n\r\n\tthis.isReady = function () {\r\n\r\n\t\tif ( programReady === false ) {\r\n\r\n\t\t\tprogramReady = gl.getProgramParameter( program, COMPLETION_STATUS_KHR );\r\n\r\n\t\t}\r\n\r\n\t\treturn programReady;\r\n\r\n\t};\r\n\r\n\t// free resource\r\n\r\n\tthis.destroy = function () {\r\n\r\n\t\tbindingStates.releaseStatesOfProgram( this );\r\n\r\n\t\tgl.deleteProgram( program );\r\n\t\tthis.program = undefined;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.type = parameters.shaderType;\r\n\tthis.name = parameters.shaderName;\r\n\tthis.id = programIdCount ++;\r\n\tthis.cacheKey = cacheKey;\r\n\tthis.usedTimes = 1;\r\n\tthis.program = program;\r\n\tthis.vertexShader = glVertexShader;\r\n\tthis.fragmentShader = glFragmentShader;\r\n\r\n\treturn this;\r\n\r\n}\r\n\r\nexport { WebGLProgram };\r\n", "let _id = 0;\r\n\r\nclass WebGLShaderCache {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.shaderCache = new Map();\r\n\t\tthis.materialCache = new Map();\r\n\r\n\t}\r\n\r\n\tupdate( material ) {\r\n\r\n\t\tconst vertexShader = material.vertexShader;\r\n\t\tconst fragmentShader = material.fragmentShader;\r\n\r\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\r\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\r\n\r\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\r\n\r\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\r\n\r\n\t\t\tmaterialShaders.add( vertexShaderStage );\r\n\t\t\tvertexShaderStage.usedTimes ++;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\r\n\r\n\t\t\tmaterialShaders.add( fragmentShaderStage );\r\n\t\t\tfragmentShaderStage.usedTimes ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremove( material ) {\r\n\r\n\t\tconst materialShaders = this.materialCache.get( material );\r\n\r\n\t\tfor ( const shaderStage of materialShaders ) {\r\n\r\n\t\t\tshaderStage.usedTimes --;\r\n\r\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );\r\n\r\n\t\t}\r\n\r\n\t\tthis.materialCache.delete( material );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetVertexShaderID( material ) {\r\n\r\n\t\treturn this._getShaderStage( material.vertexShader ).id;\r\n\r\n\t}\r\n\r\n\tgetFragmentShaderID( material ) {\r\n\r\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shaderCache.clear();\r\n\t\tthis.materialCache.clear();\r\n\r\n\t}\r\n\r\n\t_getShaderCacheForMaterial( material ) {\r\n\r\n\t\tconst cache = this.materialCache;\r\n\t\tlet set = cache.get( material );\r\n\r\n\t\tif ( set === undefined ) {\r\n\r\n\t\t\tset = new Set();\r\n\t\t\tcache.set( material, set );\r\n\r\n\t\t}\r\n\r\n\t\treturn set;\r\n\r\n\t}\r\n\r\n\t_getShaderStage( code ) {\r\n\r\n\t\tconst cache = this.shaderCache;\r\n\t\tlet stage = cache.get( code );\r\n\r\n\t\tif ( stage === undefined ) {\r\n\r\n\t\t\tstage = new WebGLShaderStage( code );\r\n\t\t\tcache.set( code, stage );\r\n\r\n\t\t}\r\n\r\n\t\treturn stage;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass WebGLShaderStage {\r\n\r\n\tconstructor( code ) {\r\n\r\n\t\tthis.id = _id ++;\r\n\r\n\t\tthis.code = code;\r\n\t\tthis.usedTimes = 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGLShaderCache };\r\n", "import { BackSide, DoubleSide, CubeUVReflectionMapping, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping, NormalBlending, LinearSRGBColorSpace, SRGBTransfer } from '../../constants.js';\r\nimport { Layers } from '../../core/Layers.js';\r\nimport { WebGLProgram } from './WebGLProgram.js';\r\nimport { WebGLShaderCache } from './WebGLShaderCache.js';\r\nimport { ShaderLib } from '../shaders/ShaderLib.js';\r\nimport { UniformsUtils } from '../shaders/UniformsUtils.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\n\r\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\r\n\r\n\tconst _programLayers = new Layers();\r\n\tconst _customShaders = new WebGLShaderCache();\r\n\tconst _activeChannels = new Set();\r\n\tconst programs = [];\r\n\r\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\r\n\tconst reverseDepthBuffer = capabilities.reverseDepthBuffer;\r\n\tconst SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;\r\n\r\n\tlet precision = capabilities.precision;\r\n\r\n\tconst shaderIDs = {\r\n\t\tMeshDepthMaterial: 'depth',\r\n\t\tMeshDistanceMaterial: 'distanceRGBA',\r\n\t\tMeshNormalMaterial: 'normal',\r\n\t\tMeshBasicMaterial: 'basic',\r\n\t\tMeshLambertMaterial: 'lambert',\r\n\t\tMeshPhongMaterial: 'phong',\r\n\t\tMeshToonMaterial: 'toon',\r\n\t\tMeshStandardMaterial: 'physical',\r\n\t\tMeshPhysicalMaterial: 'physical',\r\n\t\tMeshMatcapMaterial: 'matcap',\r\n\t\tLineBasicMaterial: 'basic',\r\n\t\tLineDashedMaterial: 'dashed',\r\n\t\tPointsMaterial: 'points',\r\n\t\tShadowMaterial: 'shadow',\r\n\t\tSpriteMaterial: 'sprite'\r\n\t};\r\n\r\n\tfunction getChannel( value ) {\r\n\r\n\t\t_activeChannels.add( value );\r\n\r\n\t\tif ( value === 0 ) return 'uv';\r\n\r\n\t\treturn `uv${ value }`;\r\n\r\n\t}\r\n\r\n\tfunction getParameters( material, lights, shadows, scene, object ) {\r\n\r\n\t\tconst fog = scene.fog;\r\n\t\tconst geometry = object.geometry;\r\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\r\n\r\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\r\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;\r\n\r\n\t\tconst shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\t\tlet morphTextureStride = 0;\r\n\r\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\r\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\r\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\r\n\r\n\t\t//\r\n\r\n\t\tlet vertexShader, fragmentShader;\r\n\t\tlet customVertexShaderID, customFragmentShaderID;\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tconst shader = ShaderLib[ shaderID ];\r\n\r\n\t\t\tvertexShader = shader.vertexShader;\r\n\t\t\tfragmentShader = shader.fragmentShader;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertexShader = material.vertexShader;\r\n\t\t\tfragmentShader = material.fragmentShader;\r\n\r\n\t\t\t_customShaders.update( material );\r\n\r\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\r\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\r\n\r\n\t\t}\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tconst IS_INSTANCEDMESH = object.isInstancedMesh === true;\r\n\t\tconst IS_BATCHEDMESH = object.isBatchedMesh === true;\r\n\r\n\t\tconst HAS_MAP = !! material.map;\r\n\t\tconst HAS_MATCAP = !! material.matcap;\r\n\t\tconst HAS_ENVMAP = !! envMap;\r\n\t\tconst HAS_AOMAP = !! material.aoMap;\r\n\t\tconst HAS_LIGHTMAP = !! material.lightMap;\r\n\t\tconst HAS_BUMPMAP = !! material.bumpMap;\r\n\t\tconst HAS_NORMALMAP = !! material.normalMap;\r\n\t\tconst HAS_DISPLACEMENTMAP = !! material.displacementMap;\r\n\t\tconst HAS_EMISSIVEMAP = !! material.emissiveMap;\r\n\r\n\t\tconst HAS_METALNESSMAP = !! material.metalnessMap;\r\n\t\tconst HAS_ROUGHNESSMAP = !! material.roughnessMap;\r\n\r\n\t\tconst HAS_ANISOTROPY = material.anisotropy > 0;\r\n\t\tconst HAS_CLEARCOAT = material.clearcoat > 0;\r\n\t\tconst HAS_DISPERSION = material.dispersion > 0;\r\n\t\tconst HAS_IRIDESCENCE = material.iridescence > 0;\r\n\t\tconst HAS_SHEEN = material.sheen > 0;\r\n\t\tconst HAS_TRANSMISSION = material.transmission > 0;\r\n\r\n\t\tconst HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;\r\n\r\n\t\tconst HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;\r\n\t\tconst HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;\r\n\t\tconst HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;\r\n\r\n\t\tconst HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;\r\n\t\tconst HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;\r\n\r\n\t\tconst HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;\r\n\t\tconst HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;\r\n\r\n\t\tconst HAS_SPECULARMAP = !! material.specularMap;\r\n\t\tconst HAS_SPECULAR_COLORMAP = !! material.specularColorMap;\r\n\t\tconst HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;\r\n\r\n\t\tconst HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;\r\n\t\tconst HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;\r\n\r\n\t\tconst HAS_GRADIENTMAP = !! material.gradientMap;\r\n\r\n\t\tconst HAS_ALPHAMAP = !! material.alphaMap;\r\n\r\n\t\tconst HAS_ALPHATEST = material.alphaTest > 0;\r\n\r\n\t\tconst HAS_ALPHAHASH = !! material.alphaHash;\r\n\r\n\t\tconst HAS_EXTENSIONS = !! material.extensions;\r\n\r\n\t\tlet toneMapping = NoToneMapping;\r\n\r\n\t\tif ( material.toneMapped ) {\r\n\r\n\t\t\tif ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {\r\n\r\n\t\t\t\ttoneMapping = renderer.toneMapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst parameters = {\r\n\r\n\t\t\tshaderID: shaderID,\r\n\t\t\tshaderType: material.type,\r\n\t\t\tshaderName: material.name,\r\n\r\n\t\t\tvertexShader: vertexShader,\r\n\t\t\tfragmentShader: fragmentShader,\r\n\t\t\tdefines: material.defines,\r\n\r\n\t\t\tcustomVertexShaderID: customVertexShaderID,\r\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\r\n\r\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\r\n\t\t\tglslVersion: material.glslVersion,\r\n\r\n\t\t\tprecision: precision,\r\n\r\n\t\t\tbatching: IS_BATCHEDMESH,\r\n\t\t\tbatchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,\r\n\t\t\tinstancing: IS_INSTANCEDMESH,\r\n\t\t\tinstancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,\r\n\t\t\tinstancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,\r\n\r\n\t\t\tsupportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,\r\n\t\t\toutputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),\r\n\t\t\talphaToCoverage: !! material.alphaToCoverage,\r\n\r\n\t\t\tmap: HAS_MAP,\r\n\t\t\tmatcap: HAS_MATCAP,\r\n\t\t\tenvMap: HAS_ENVMAP,\r\n\t\t\tenvMapMode: HAS_ENVMAP && envMap.mapping,\r\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\r\n\t\t\taoMap: HAS_AOMAP,\r\n\t\t\tlightMap: HAS_LIGHTMAP,\r\n\t\t\tbumpMap: HAS_BUMPMAP,\r\n\t\t\tnormalMap: HAS_NORMALMAP,\r\n\t\t\tdisplacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,\r\n\t\t\temissiveMap: HAS_EMISSIVEMAP,\r\n\r\n\t\t\tnormalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,\r\n\t\t\tnormalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,\r\n\r\n\t\t\tmetalnessMap: HAS_METALNESSMAP,\r\n\t\t\troughnessMap: HAS_ROUGHNESSMAP,\r\n\r\n\t\t\tanisotropy: HAS_ANISOTROPY,\r\n\t\t\tanisotropyMap: HAS_ANISOTROPYMAP,\r\n\r\n\t\t\tclearcoat: HAS_CLEARCOAT,\r\n\t\t\tclearcoatMap: HAS_CLEARCOATMAP,\r\n\t\t\tclearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,\r\n\t\t\tclearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,\r\n\r\n\t\t\tdispersion: HAS_DISPERSION,\r\n\r\n\t\t\tiridescence: HAS_IRIDESCENCE,\r\n\t\t\tiridescenceMap: HAS_IRIDESCENCEMAP,\r\n\t\t\tiridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,\r\n\r\n\t\t\tsheen: HAS_SHEEN,\r\n\t\t\tsheenColorMap: HAS_SHEEN_COLORMAP,\r\n\t\t\tsheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,\r\n\r\n\t\t\tspecularMap: HAS_SPECULARMAP,\r\n\t\t\tspecularColorMap: HAS_SPECULAR_COLORMAP,\r\n\t\t\tspecularIntensityMap: HAS_SPECULAR_INTENSITYMAP,\r\n\r\n\t\t\ttransmission: HAS_TRANSMISSION,\r\n\t\t\ttransmissionMap: HAS_TRANSMISSIONMAP,\r\n\t\t\tthicknessMap: HAS_THICKNESSMAP,\r\n\r\n\t\t\tgradientMap: HAS_GRADIENTMAP,\r\n\r\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,\r\n\r\n\t\t\talphaMap: HAS_ALPHAMAP,\r\n\t\t\talphaTest: HAS_ALPHATEST,\r\n\t\t\talphaHash: HAS_ALPHAHASH,\r\n\r\n\t\t\tcombine: material.combine,\r\n\r\n\t\t\t//\r\n\r\n\t\t\tmapUv: HAS_MAP && getChannel( material.map.channel ),\r\n\t\t\taoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),\r\n\t\t\tlightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),\r\n\t\t\tbumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),\r\n\t\t\tnormalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),\r\n\t\t\tdisplacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),\r\n\t\t\temissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),\r\n\r\n\t\t\tmetalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),\r\n\t\t\troughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),\r\n\r\n\t\t\tanisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),\r\n\r\n\t\t\tclearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),\r\n\t\t\tclearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),\r\n\t\t\tclearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),\r\n\r\n\t\t\tiridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),\r\n\t\t\tiridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),\r\n\r\n\t\t\tsheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),\r\n\t\t\tsheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),\r\n\r\n\t\t\tspecularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),\r\n\t\t\tspecularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),\r\n\t\t\tspecularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),\r\n\r\n\t\t\ttransmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),\r\n\t\t\tthicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),\r\n\r\n\t\t\talphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),\r\n\t\t\tvertexColors: material.vertexColors,\r\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\r\n\r\n\t\t\tpointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),\r\n\r\n\t\t\tfog: !! fog,\r\n\t\t\tuseFog: material.fog === true,\r\n\t\t\tfogExp2: ( !! fog && fog.isFogExp2 ),\r\n\r\n\t\t\tflatShading: material.flatShading === true,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation === true,\r\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\t\t\treverseDepthBuffer: reverseDepthBuffer,\r\n\r\n\t\t\tskinning: object.isSkinnedMesh === true,\r\n\r\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\r\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\r\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\r\n\t\t\tmorphTargetsCount: morphTargetsCount,\r\n\t\t\tmorphTextureStride: morphTextureStride,\r\n\r\n\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\tnumPointLights: lights.point.length,\r\n\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\tnumSpotLightMaps: lights.spotLightMap.length,\r\n\t\t\tnumRectAreaLights: lights.rectArea.length,\r\n\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\r\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\r\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\r\n\t\t\tnumSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,\r\n\r\n\t\t\tnumLightProbes: lights.numLightProbes,\r\n\r\n\t\t\tnumClippingPlanes: clipping.numPlanes,\r\n\t\t\tnumClipIntersection: clipping.numIntersection,\r\n\r\n\t\t\tdithering: material.dithering,\r\n\r\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\r\n\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\ttoneMapping: toneMapping,\r\n\r\n\t\t\tdecodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( ColorManagement.getTransfer( material.map.colorSpace ) === SRGBTransfer ),\r\n\r\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\tdoubleSided: material.side === DoubleSide,\r\n\t\t\tflipSided: material.side === BackSide,\r\n\r\n\t\t\tuseDepthPacking: material.depthPacking >= 0,\r\n\t\t\tdepthPacking: material.depthPacking || 0,\r\n\r\n\t\t\tindex0AttributeName: material.index0AttributeName,\r\n\r\n\t\t\textensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has( 'WEBGL_clip_cull_distance' ),\r\n\t\t\textensionMultiDraw: ( HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH ) && extensions.has( 'WEBGL_multi_draw' ),\r\n\r\n\t\t\trendererExtensionParallelShaderCompile: extensions.has( 'KHR_parallel_shader_compile' ),\r\n\r\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\r\n\r\n\t\t};\r\n\r\n\t\t// the usage of getChannel() determines the active texture channels for this shader\r\n\r\n\t\tparameters.vertexUv1s = _activeChannels.has( 1 );\r\n\t\tparameters.vertexUv2s = _activeChannels.has( 2 );\r\n\t\tparameters.vertexUv3s = _activeChannels.has( 3 );\r\n\r\n\t\t_activeChannels.clear();\r\n\r\n\t\treturn parameters;\r\n\r\n\t}\r\n\r\n\tfunction getProgramCacheKey( parameters ) {\r\n\r\n\t\tconst array = [];\r\n\r\n\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray.push( parameters.customVertexShaderID );\r\n\t\t\tarray.push( parameters.customFragmentShaderID );\r\n\r\n\t\t}\r\n\r\n\t\tif ( parameters.defines !== undefined ) {\r\n\r\n\t\t\tfor ( const name in parameters.defines ) {\r\n\r\n\t\t\t\tarray.push( name );\r\n\t\t\t\tarray.push( parameters.defines[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( parameters.isRawShaderMaterial === false ) {\r\n\r\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\r\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\r\n\t\t\tarray.push( renderer.outputColorSpace );\r\n\r\n\t\t}\r\n\r\n\t\tarray.push( parameters.customProgramCacheKey );\r\n\r\n\t\treturn array.join();\r\n\r\n\t}\r\n\r\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\r\n\r\n\t\tarray.push( parameters.precision );\r\n\t\tarray.push( parameters.outputColorSpace );\r\n\t\tarray.push( parameters.envMapMode );\r\n\t\tarray.push( parameters.envMapCubeUVHeight );\r\n\t\tarray.push( parameters.mapUv );\r\n\t\tarray.push( parameters.alphaMapUv );\r\n\t\tarray.push( parameters.lightMapUv );\r\n\t\tarray.push( parameters.aoMapUv );\r\n\t\tarray.push( parameters.bumpMapUv );\r\n\t\tarray.push( parameters.normalMapUv );\r\n\t\tarray.push( parameters.displacementMapUv );\r\n\t\tarray.push( parameters.emissiveMapUv );\r\n\t\tarray.push( parameters.metalnessMapUv );\r\n\t\tarray.push( parameters.roughnessMapUv );\r\n\t\tarray.push( parameters.anisotropyMapUv );\r\n\t\tarray.push( parameters.clearcoatMapUv );\r\n\t\tarray.push( parameters.clearcoatNormalMapUv );\r\n\t\tarray.push( parameters.clearcoatRoughnessMapUv );\r\n\t\tarray.push( parameters.iridescenceMapUv );\r\n\t\tarray.push( parameters.iridescenceThicknessMapUv );\r\n\t\tarray.push( parameters.sheenColorMapUv );\r\n\t\tarray.push( parameters.sheenRoughnessMapUv );\r\n\t\tarray.push( parameters.specularMapUv );\r\n\t\tarray.push( parameters.specularColorMapUv );\r\n\t\tarray.push( parameters.specularIntensityMapUv );\r\n\t\tarray.push( parameters.transmissionMapUv );\r\n\t\tarray.push( parameters.thicknessMapUv );\r\n\t\tarray.push( parameters.combine );\r\n\t\tarray.push( parameters.fogExp2 );\r\n\t\tarray.push( parameters.sizeAttenuation );\r\n\t\tarray.push( parameters.morphTargetsCount );\r\n\t\tarray.push( parameters.morphAttributeCount );\r\n\t\tarray.push( parameters.numDirLights );\r\n\t\tarray.push( parameters.numPointLights );\r\n\t\tarray.push( parameters.numSpotLights );\r\n\t\tarray.push( parameters.numSpotLightMaps );\r\n\t\tarray.push( parameters.numHemiLights );\r\n\t\tarray.push( parameters.numRectAreaLights );\r\n\t\tarray.push( parameters.numDirLightShadows );\r\n\t\tarray.push( parameters.numPointLightShadows );\r\n\t\tarray.push( parameters.numSpotLightShadows );\r\n\t\tarray.push( parameters.numSpotLightShadowsWithMaps );\r\n\t\tarray.push( parameters.numLightProbes );\r\n\t\tarray.push( parameters.shadowMapType );\r\n\t\tarray.push( parameters.toneMapping );\r\n\t\tarray.push( parameters.numClippingPlanes );\r\n\t\tarray.push( parameters.numClipIntersection );\r\n\t\tarray.push( parameters.depthPacking );\r\n\r\n\t}\r\n\r\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\r\n\r\n\t\t_programLayers.disableAll();\r\n\r\n\t\tif ( parameters.supportsVertexTextures )\r\n\t\t\t_programLayers.enable( 0 );\r\n\t\tif ( parameters.instancing )\r\n\t\t\t_programLayers.enable( 1 );\r\n\t\tif ( parameters.instancingColor )\r\n\t\t\t_programLayers.enable( 2 );\r\n\t\tif ( parameters.instancingMorph )\r\n\t\t\t_programLayers.enable( 3 );\r\n\t\tif ( parameters.matcap )\r\n\t\t\t_programLayers.enable( 4 );\r\n\t\tif ( parameters.envMap )\r\n\t\t\t_programLayers.enable( 5 );\r\n\t\tif ( parameters.normalMapObjectSpace )\r\n\t\t\t_programLayers.enable( 6 );\r\n\t\tif ( parameters.normalMapTangentSpace )\r\n\t\t\t_programLayers.enable( 7 );\r\n\t\tif ( parameters.clearcoat )\r\n\t\t\t_programLayers.enable( 8 );\r\n\t\tif ( parameters.iridescence )\r\n\t\t\t_programLayers.enable( 9 );\r\n\t\tif ( parameters.alphaTest )\r\n\t\t\t_programLayers.enable( 10 );\r\n\t\tif ( parameters.vertexColors )\r\n\t\t\t_programLayers.enable( 11 );\r\n\t\tif ( parameters.vertexAlphas )\r\n\t\t\t_programLayers.enable( 12 );\r\n\t\tif ( parameters.vertexUv1s )\r\n\t\t\t_programLayers.enable( 13 );\r\n\t\tif ( parameters.vertexUv2s )\r\n\t\t\t_programLayers.enable( 14 );\r\n\t\tif ( parameters.vertexUv3s )\r\n\t\t\t_programLayers.enable( 15 );\r\n\t\tif ( parameters.vertexTangents )\r\n\t\t\t_programLayers.enable( 16 );\r\n\t\tif ( parameters.anisotropy )\r\n\t\t\t_programLayers.enable( 17 );\r\n\t\tif ( parameters.alphaHash )\r\n\t\t\t_programLayers.enable( 18 );\r\n\t\tif ( parameters.batching )\r\n\t\t\t_programLayers.enable( 19 );\r\n\t\tif ( parameters.dispersion )\r\n\t\t\t_programLayers.enable( 20 );\r\n\t\tif ( parameters.batchingColor )\r\n\t\t\t_programLayers.enable( 21 );\r\n\r\n\t\tarray.push( _programLayers.mask );\r\n\t\t_programLayers.disableAll();\r\n\r\n\t\tif ( parameters.fog )\r\n\t\t\t_programLayers.enable( 0 );\r\n\t\tif ( parameters.useFog )\r\n\t\t\t_programLayers.enable( 1 );\r\n\t\tif ( parameters.flatShading )\r\n\t\t\t_programLayers.enable( 2 );\r\n\t\tif ( parameters.logarithmicDepthBuffer )\r\n\t\t\t_programLayers.enable( 3 );\r\n\t\tif ( parameters.reverseDepthBuffer )\r\n\t\t\t_programLayers.enable( 4 );\r\n\t\tif ( parameters.skinning )\r\n\t\t\t_programLayers.enable( 5 );\r\n\t\tif ( parameters.morphTargets )\r\n\t\t\t_programLayers.enable( 6 );\r\n\t\tif ( parameters.morphNormals )\r\n\t\t\t_programLayers.enable( 7 );\r\n\t\tif ( parameters.morphColors )\r\n\t\t\t_programLayers.enable( 8 );\r\n\t\tif ( parameters.premultipliedAlpha )\r\n\t\t\t_programLayers.enable( 9 );\r\n\t\tif ( parameters.shadowMapEnabled )\r\n\t\t\t_programLayers.enable( 10 );\r\n\t\tif ( parameters.doubleSided )\r\n\t\t\t_programLayers.enable( 11 );\r\n\t\tif ( parameters.flipSided )\r\n\t\t\t_programLayers.enable( 12 );\r\n\t\tif ( parameters.useDepthPacking )\r\n\t\t\t_programLayers.enable( 13 );\r\n\t\tif ( parameters.dithering )\r\n\t\t\t_programLayers.enable( 14 );\r\n\t\tif ( parameters.transmission )\r\n\t\t\t_programLayers.enable( 15 );\r\n\t\tif ( parameters.sheen )\r\n\t\t\t_programLayers.enable( 16 );\r\n\t\tif ( parameters.opaque )\r\n\t\t\t_programLayers.enable( 17 );\r\n\t\tif ( parameters.pointsUvs )\r\n\t\t\t_programLayers.enable( 18 );\r\n\t\tif ( parameters.decodeVideoTexture )\r\n\t\t\t_programLayers.enable( 19 );\r\n\t\tif ( parameters.alphaToCoverage )\r\n\t\t\t_programLayers.enable( 20 );\r\n\r\n\t\tarray.push( _programLayers.mask );\r\n\r\n\t}\r\n\r\n\tfunction getUniforms( material ) {\r\n\r\n\t\tconst shaderID = shaderIDs[ material.type ];\r\n\t\tlet uniforms;\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tconst shader = ShaderLib[ shaderID ];\r\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms = material.uniforms;\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms;\r\n\r\n\t}\r\n\r\n\tfunction acquireProgram( parameters, cacheKey ) {\r\n\r\n\t\tlet program;\r\n\r\n\t\t// Check if code has been already compiled\r\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tconst preexistingProgram = programs[ p ];\r\n\r\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\r\n\r\n\t\t\t\tprogram = preexistingProgram;\r\n\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\r\n\t\t\tprograms.push( program );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\tfunction releaseProgram( program ) {\r\n\r\n\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t// Remove from unordered set\r\n\t\t\tconst i = programs.indexOf( program );\r\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\tprograms.pop();\r\n\r\n\t\t\t// Free WebGL resources\r\n\t\t\tprogram.destroy();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction releaseShaderCache( material ) {\r\n\r\n\t\t_customShaders.remove( material );\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\t_customShaders.dispose();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tgetParameters: getParameters,\r\n\t\tgetProgramCacheKey: getProgramCacheKey,\r\n\t\tgetUniforms: getUniforms,\r\n\t\tacquireProgram: acquireProgram,\r\n\t\treleaseProgram: releaseProgram,\r\n\t\treleaseShaderCache: releaseShaderCache,\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tprograms: programs,\r\n\t\tdispose: dispose\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLPrograms };\r\n", "function WebGLProperties() {\r\n\r\n\tlet properties = new WeakMap();\r\n\r\n\tfunction has( object ) {\r\n\r\n\t\treturn properties.has( object );\r\n\r\n\t}\r\n\r\n\tfunction get( object ) {\r\n\r\n\t\tlet map = properties.get( object );\r\n\r\n\t\tif ( map === undefined ) {\r\n\r\n\t\t\tmap = {};\r\n\t\t\tproperties.set( object, map );\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t}\r\n\r\n\tfunction remove( object ) {\r\n\r\n\t\tproperties.delete( object );\r\n\r\n\t}\r\n\r\n\tfunction update( object, key, value ) {\r\n\r\n\t\tproperties.get( object )[ key ] = value;\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\tproperties = new WeakMap();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\thas: has,\r\n\t\tget: get,\r\n\t\tremove: remove,\r\n\t\tupdate: update,\r\n\t\tdispose: dispose\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLProperties };\r\n", "function painterSortStable( a, b ) {\r\n\r\n\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\treturn a.material.id - b.material.id;\r\n\r\n\t} else if ( a.z !== b.z ) {\r\n\r\n\t\treturn a.z - b.z;\r\n\r\n\t} else {\r\n\r\n\t\treturn a.id - b.id;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction reversePainterSortStable( a, b ) {\r\n\r\n\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t} else if ( a.z !== b.z ) {\r\n\r\n\t\treturn b.z - a.z;\r\n\r\n\t} else {\r\n\r\n\t\treturn a.id - b.id;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nfunction WebGLRenderList() {\r\n\r\n\tconst renderItems = [];\r\n\tlet renderItemsIndex = 0;\r\n\r\n\tconst opaque = [];\r\n\tconst transmissive = [];\r\n\tconst transparent = [];\r\n\r\n\tfunction init() {\r\n\r\n\t\trenderItemsIndex = 0;\r\n\r\n\t\topaque.length = 0;\r\n\t\ttransmissive.length = 0;\r\n\t\ttransparent.length = 0;\r\n\r\n\t}\r\n\r\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\r\n\r\n\t\tif ( renderItem === undefined ) {\r\n\r\n\t\t\trenderItem = {\r\n\t\t\t\tid: object.id,\r\n\t\t\t\tobject: object,\r\n\t\t\t\tgeometry: geometry,\r\n\t\t\t\tmaterial: material,\r\n\t\t\t\tgroupOrder: groupOrder,\r\n\t\t\t\trenderOrder: object.renderOrder,\r\n\t\t\t\tz: z,\r\n\t\t\t\tgroup: group\r\n\t\t\t};\r\n\r\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderItem.id = object.id;\r\n\t\t\trenderItem.object = object;\r\n\t\t\trenderItem.geometry = geometry;\r\n\t\t\trenderItem.material = material;\r\n\t\t\trenderItem.groupOrder = groupOrder;\r\n\t\t\trenderItem.renderOrder = object.renderOrder;\r\n\t\t\trenderItem.z = z;\r\n\t\t\trenderItem.group = group;\r\n\r\n\t\t}\r\n\r\n\t\trenderItemsIndex ++;\r\n\r\n\t\treturn renderItem;\r\n\r\n\t}\r\n\r\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\tif ( material.transmission > 0.0 ) {\r\n\r\n\t\t\ttransmissive.push( renderItem );\r\n\r\n\t\t} else if ( material.transparent === true ) {\r\n\r\n\t\t\ttransparent.push( renderItem );\r\n\r\n\t\t} else {\r\n\r\n\t\t\topaque.push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\tif ( material.transmission > 0.0 ) {\r\n\r\n\t\t\ttransmissive.unshift( renderItem );\r\n\r\n\t\t} else if ( material.transparent === true ) {\r\n\r\n\t\t\ttransparent.unshift( renderItem );\r\n\r\n\t\t} else {\r\n\r\n\t\t\topaque.unshift( renderItem );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\r\n\r\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\r\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\r\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\r\n\r\n\t}\r\n\r\n\tfunction finish() {\r\n\r\n\t\t// Clear references from inactive renderItems in the list\r\n\r\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst renderItem = renderItems[ i ];\r\n\r\n\t\t\tif ( renderItem.id === null ) break;\r\n\r\n\t\t\trenderItem.id = null;\r\n\t\t\trenderItem.object = null;\r\n\t\t\trenderItem.geometry = null;\r\n\t\t\trenderItem.material = null;\r\n\t\t\trenderItem.group = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\topaque: opaque,\r\n\t\ttransmissive: transmissive,\r\n\t\ttransparent: transparent,\r\n\r\n\t\tinit: init,\r\n\t\tpush: push,\r\n\t\tunshift: unshift,\r\n\t\tfinish: finish,\r\n\r\n\t\tsort: sort\r\n\t};\r\n\r\n}\r\n\r\nfunction WebGLRenderLists() {\r\n\r\n\tlet lists = new WeakMap();\r\n\r\n\tfunction get( scene, renderCallDepth ) {\r\n\r\n\t\tconst listArray = lists.get( scene );\r\n\t\tlet list;\r\n\r\n\t\tif ( listArray === undefined ) {\r\n\r\n\t\t\tlist = new WebGLRenderList();\r\n\t\t\tlists.set( scene, [ list ] );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( renderCallDepth >= listArray.length ) {\r\n\r\n\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\tlistArray.push( list );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlist = listArray[ renderCallDepth ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn list;\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\tlists = new WeakMap();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tget: get,\r\n\t\tdispose: dispose\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLRenderLists, WebGLRenderList };\r\n", "import { Color } from '../../math/Color.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { UniformsLib } from '../shaders/UniformsLib.js';\r\n\r\nfunction UniformsCache() {\r\n\r\n\tconst lights = {};\r\n\r\n\treturn {\r\n\r\n\t\tget: function ( light ) {\r\n\r\n\t\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\t\treturn lights[ light.id ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet uniforms;\r\n\r\n\t\t\tswitch ( light.type ) {\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\tcolor: new Color()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\t\tdecay: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\tdecay: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\tskyColor: new Color(),\r\n\t\t\t\t\t\tgroundColor: new Color()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'RectAreaLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\thalfWidth: new Vector3(),\r\n\t\t\t\t\t\thalfHeight: new Vector3()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\t\treturn uniforms;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\nfunction ShadowUniformsCache() {\r\n\r\n\tconst lights = {};\r\n\r\n\treturn {\r\n\r\n\t\tget: function ( light ) {\r\n\r\n\t\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\t\treturn lights[ light.id ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet uniforms;\r\n\r\n\t\t\tswitch ( light.type ) {\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tshadowIntensity: 1,\r\n\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\tshadowNormalBias: 0,\r\n\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tshadowIntensity: 1,\r\n\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\tshadowNormalBias: 0,\r\n\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tshadowIntensity: 1,\r\n\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\tshadowNormalBias: 0,\r\n\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\r\n\t\t\t\t\t\tshadowCameraNear: 1,\r\n\t\t\t\t\t\tshadowCameraFar: 1000\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\t\treturn uniforms;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\n\r\nlet nextVersion = 0;\r\n\r\nfunction shadowCastingAndTexturingLightsFirst( lightA, lightB ) {\r\n\r\n\treturn ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );\r\n\r\n}\r\n\r\nfunction WebGLLights( extensions ) {\r\n\r\n\tconst cache = new UniformsCache();\r\n\r\n\tconst shadowCache = ShadowUniformsCache();\r\n\r\n\tconst state = {\r\n\r\n\t\tversion: 0,\r\n\r\n\t\thash: {\r\n\t\t\tdirectionalLength: - 1,\r\n\t\t\tpointLength: - 1,\r\n\t\t\tspotLength: - 1,\r\n\t\t\trectAreaLength: - 1,\r\n\t\t\themiLength: - 1,\r\n\r\n\t\t\tnumDirectionalShadows: - 1,\r\n\t\t\tnumPointShadows: - 1,\r\n\t\t\tnumSpotShadows: - 1,\r\n\t\t\tnumSpotMaps: - 1,\r\n\r\n\t\t\tnumLightProbes: - 1\r\n\t\t},\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tprobe: [],\r\n\t\tdirectional: [],\r\n\t\tdirectionalShadow: [],\r\n\t\tdirectionalShadowMap: [],\r\n\t\tdirectionalShadowMatrix: [],\r\n\t\tspot: [],\r\n\t\tspotLightMap: [],\r\n\t\tspotShadow: [],\r\n\t\tspotShadowMap: [],\r\n\t\tspotLightMatrix: [],\r\n\t\trectArea: [],\r\n\t\trectAreaLTC1: null,\r\n\t\trectAreaLTC2: null,\r\n\t\tpoint: [],\r\n\t\tpointShadow: [],\r\n\t\tpointShadowMap: [],\r\n\t\tpointShadowMatrix: [],\r\n\t\themi: [],\r\n\t\tnumSpotLightShadowsWithMaps: 0,\r\n\t\tnumLightProbes: 0\r\n\r\n\t};\r\n\r\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\r\n\r\n\tconst vector3 = new Vector3();\r\n\tconst matrix4 = new Matrix4();\r\n\tconst matrix42 = new Matrix4();\r\n\r\n\tfunction setup( lights ) {\r\n\r\n\t\tlet r = 0, g = 0, b = 0;\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\r\n\r\n\t\tlet directionalLength = 0;\r\n\t\tlet pointLength = 0;\r\n\t\tlet spotLength = 0;\r\n\t\tlet rectAreaLength = 0;\r\n\t\tlet hemiLength = 0;\r\n\r\n\t\tlet numDirectionalShadows = 0;\r\n\t\tlet numPointShadows = 0;\r\n\t\tlet numSpotShadows = 0;\r\n\t\tlet numSpotMaps = 0;\r\n\t\tlet numSpotShadowsWithMaps = 0;\r\n\r\n\t\tlet numLightProbes = 0;\r\n\r\n\t\t// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]\r\n\t\tlights.sort( shadowCastingAndTexturingLightsFirst );\r\n\r\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst light = lights[ i ];\r\n\r\n\t\t\tconst color = light.color;\r\n\t\t\tconst intensity = light.intensity;\r\n\t\t\tconst distance = light.distance;\r\n\r\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\r\n\r\n\t\t\tif ( light.isAmbientLight ) {\r\n\r\n\t\t\t\tr += color.r * intensity;\r\n\t\t\t\tg += color.g * intensity;\r\n\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t} else if ( light.isLightProbe ) {\r\n\r\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\r\n\r\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnumLightProbes ++;\r\n\r\n\t\t\t} else if ( light.isDirectionalLight ) {\r\n\r\n\t\t\t\tconst uniforms = cache.get( light );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tconst shadow = light.shadow;\r\n\r\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\r\n\r\n\t\t\t\t\tshadowUniforms.shadowIntensity = shadow.intensity;\r\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\r\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\r\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\r\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\tnumDirectionalShadows ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\r\n\r\n\t\t\t\tdirectionalLength ++;\r\n\r\n\t\t\t} else if ( light.isSpotLight ) {\r\n\r\n\t\t\t\tconst uniforms = cache.get( light );\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\r\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\r\n\r\n\t\t\t\tconst shadow = light.shadow;\r\n\r\n\t\t\t\tif ( light.map ) {\r\n\r\n\t\t\t\t\tstate.spotLightMap[ numSpotMaps ] = light.map;\r\n\t\t\t\t\tnumSpotMaps ++;\r\n\r\n\t\t\t\t\t// make sure the lightMatrix is up to date\r\n\t\t\t\t\t// TODO : do it if required only\r\n\t\t\t\t\tshadow.updateMatrices( light );\r\n\r\n\t\t\t\t\tif ( light.castShadow ) numSpotShadowsWithMaps ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.spotLightMatrix[ spotLength ] = shadow.matrix;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\r\n\r\n\t\t\t\t\tshadowUniforms.shadowIntensity = shadow.intensity;\r\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\r\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\r\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\r\n\r\n\t\t\t\t\tnumSpotShadows ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tspotLength ++;\r\n\r\n\t\t\t} else if ( light.isRectAreaLight ) {\r\n\r\n\t\t\t\tconst uniforms = cache.get( light );\r\n\r\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\r\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\r\n\r\n\t\t\t\trectAreaLength ++;\r\n\r\n\t\t\t} else if ( light.isPointLight ) {\r\n\r\n\t\t\t\tconst uniforms = cache.get( light );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tconst shadow = light.shadow;\r\n\r\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\r\n\r\n\t\t\t\t\tshadowUniforms.shadowIntensity = shadow.intensity;\r\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\r\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\r\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\r\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\r\n\r\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\r\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\r\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\tnumPointShadows ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.point[ pointLength ] = uniforms;\r\n\r\n\t\t\t\tpointLength ++;\r\n\r\n\t\t\t} else if ( light.isHemisphereLight ) {\r\n\r\n\t\t\t\tconst uniforms = cache.get( light );\r\n\r\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\r\n\r\n\t\t\t\themiLength ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( rectAreaLength > 0 ) {\r\n\r\n\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\r\n\r\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\r\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\r\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.ambient[ 0 ] = r;\r\n\t\tstate.ambient[ 1 ] = g;\r\n\t\tstate.ambient[ 2 ] = b;\r\n\r\n\t\tconst hash = state.hash;\r\n\r\n\t\tif ( hash.directionalLength !== directionalLength ||\r\n\t\t\thash.pointLength !== pointLength ||\r\n\t\t\thash.spotLength !== spotLength ||\r\n\t\t\thash.rectAreaLength !== rectAreaLength ||\r\n\t\t\thash.hemiLength !== hemiLength ||\r\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\r\n\t\t\thash.numPointShadows !== numPointShadows ||\r\n\t\t\thash.numSpotShadows !== numSpotShadows ||\r\n\t\t\thash.numSpotMaps !== numSpotMaps ||\r\n\t\t\thash.numLightProbes !== numLightProbes ) {\r\n\r\n\t\t\tstate.directional.length = directionalLength;\r\n\t\t\tstate.spot.length = spotLength;\r\n\t\t\tstate.rectArea.length = rectAreaLength;\r\n\t\t\tstate.point.length = pointLength;\r\n\t\t\tstate.hemi.length = hemiLength;\r\n\r\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\r\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\r\n\t\t\tstate.pointShadow.length = numPointShadows;\r\n\t\t\tstate.pointShadowMap.length = numPointShadows;\r\n\t\t\tstate.spotShadow.length = numSpotShadows;\r\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\r\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\r\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\r\n\t\t\tstate.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;\r\n\t\t\tstate.spotLightMap.length = numSpotMaps;\r\n\t\t\tstate.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;\r\n\t\t\tstate.numLightProbes = numLightProbes;\r\n\r\n\t\t\thash.directionalLength = directionalLength;\r\n\t\t\thash.pointLength = pointLength;\r\n\t\t\thash.spotLength = spotLength;\r\n\t\t\thash.rectAreaLength = rectAreaLength;\r\n\t\t\thash.hemiLength = hemiLength;\r\n\r\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\r\n\t\t\thash.numPointShadows = numPointShadows;\r\n\t\t\thash.numSpotShadows = numSpotShadows;\r\n\t\t\thash.numSpotMaps = numSpotMaps;\r\n\r\n\t\t\thash.numLightProbes = numLightProbes;\r\n\r\n\t\t\tstate.version = nextVersion ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setupView( lights, camera ) {\r\n\r\n\t\tlet directionalLength = 0;\r\n\t\tlet pointLength = 0;\r\n\t\tlet spotLength = 0;\r\n\t\tlet rectAreaLength = 0;\r\n\t\tlet hemiLength = 0;\r\n\r\n\t\tconst viewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst light = lights[ i ];\r\n\r\n\t\t\tif ( light.isDirectionalLight ) {\r\n\r\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tdirectionalLength ++;\r\n\r\n\t\t\t} else if ( light.isSpotLight ) {\r\n\r\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tspotLength ++;\r\n\r\n\t\t\t} else if ( light.isRectAreaLight ) {\r\n\r\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\r\n\t\t\t\tmatrix42.identity();\r\n\t\t\t\tmatrix4.copy( light.matrixWorld );\r\n\t\t\t\tmatrix4.premultiply( viewMatrix );\r\n\t\t\t\tmatrix42.extractRotation( matrix4 );\r\n\r\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\r\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\r\n\r\n\t\t\t\trectAreaLength ++;\r\n\r\n\t\t\t} else if ( light.isPointLight ) {\r\n\r\n\t\t\t\tconst uniforms = state.point[ pointLength ];\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tpointLength ++;\r\n\r\n\t\t\t} else if ( light.isHemisphereLight ) {\r\n\r\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\themiLength ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tsetup: setup,\r\n\t\tsetupView: setupView,\r\n\t\tstate: state\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLLights };\r\n", "import { WebGLLights } from './WebGLLights.js';\r\n\r\nfunction WebGLRenderState( extensions ) {\r\n\r\n\tconst lights = new WebGLLights( extensions );\r\n\r\n\tconst lightsArray = [];\r\n\tconst shadowsArray = [];\r\n\r\n\tfunction init( camera ) {\r\n\r\n\t\tstate.camera = camera;\r\n\r\n\t\tlightsArray.length = 0;\r\n\t\tshadowsArray.length = 0;\r\n\r\n\t}\r\n\r\n\tfunction pushLight( light ) {\r\n\r\n\t\tlightsArray.push( light );\r\n\r\n\t}\r\n\r\n\tfunction pushShadow( shadowLight ) {\r\n\r\n\t\tshadowsArray.push( shadowLight );\r\n\r\n\t}\r\n\r\n\tfunction setupLights() {\r\n\r\n\t\tlights.setup( lightsArray );\r\n\r\n\t}\r\n\r\n\tfunction setupLightsView( camera ) {\r\n\r\n\t\tlights.setupView( lightsArray, camera );\r\n\r\n\t}\r\n\r\n\tconst state = {\r\n\t\tlightsArray: lightsArray,\r\n\t\tshadowsArray: shadowsArray,\r\n\r\n\t\tcamera: null,\r\n\r\n\t\tlights: lights,\r\n\r\n\t\ttransmissionRenderTarget: {}\r\n\t};\r\n\r\n\treturn {\r\n\t\tinit: init,\r\n\t\tstate: state,\r\n\t\tsetupLights: setupLights,\r\n\t\tsetupLightsView: setupLightsView,\r\n\r\n\t\tpushLight: pushLight,\r\n\t\tpushShadow: pushShadow\r\n\t};\r\n\r\n}\r\n\r\nfunction WebGLRenderStates( extensions ) {\r\n\r\n\tlet renderStates = new WeakMap();\r\n\r\n\tfunction get( scene, renderCallDepth = 0 ) {\r\n\r\n\t\tconst renderStateArray = renderStates.get( scene );\r\n\t\tlet renderState;\r\n\r\n\t\tif ( renderStateArray === undefined ) {\r\n\r\n\t\t\trenderState = new WebGLRenderState( extensions );\r\n\t\t\trenderStates.set( scene, [ renderState ] );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( renderCallDepth >= renderStateArray.length ) {\r\n\r\n\t\t\t\trenderState = new WebGLRenderState( extensions );\r\n\t\t\t\trenderStateArray.push( renderState );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderState = renderStateArray[ renderCallDepth ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn renderState;\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\trenderStates = new WeakMap();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tget: get,\r\n\t\tdispose: dispose\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLRenderStates };\r\n", "import { Material } from './Material.js';\r\nimport { BasicDepthPacking } from '../constants.js';\r\n\r\nclass MeshDepthMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshDepthMaterial = true;\r\n\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\r\n\t\tthis.depthPacking = BasicDepthPacking;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.depthPacking = source.depthPacking;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshDepthMaterial };\r\n", "import { Material } from './Material.js';\r\n\r\nclass MeshDistanceMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshDistanceMaterial = true;\r\n\r\n\t\tthis.type = 'MeshDistanceMaterial';\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshDistanceMaterial };\r\n", "export const vertex = /* glsl */`\r\nvoid main() {\r\n\r\n\tgl_Position = vec4( position, 1.0 );\r\n\r\n}\r\n`;\r\n\r\nexport const fragment = /* glsl */`\r\nuniform sampler2D shadow_pass;\r\nuniform vec2 resolution;\r\nuniform float radius;\r\n\r\n#include <packing>\r\n\r\nvoid main() {\r\n\r\n\tconst float samples = float( VSM_SAMPLES );\r\n\r\n\tfloat mean = 0.0;\r\n\tfloat squared_mean = 0.0;\r\n\r\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\r\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\r\n\tfor ( float i = 0.0; i < samples; i ++ ) {\r\n\r\n\t\tfloat uvOffset = uvStart + i * uvStride;\r\n\r\n\t\t#ifdef HORIZONTAL_PASS\r\n\r\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\r\n\t\t\tmean += distribution.x;\r\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\r\n\r\n\t\t#else\r\n\r\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\r\n\t\t\tmean += depth;\r\n\t\t\tsquared_mean += depth * depth;\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\tmean = mean / samples;\r\n\tsquared_mean = squared_mean / samples;\r\n\r\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\r\n\r\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\r\n\r\n}\r\n`;\r\n", "import { FrontSide, BackSide, DoubleSide, NearestFilter, PCFShadowMap, VSMShadowMap, RGBADepthPacking, NoBlending } from '../../constants.js';\r\nimport { WebGLRenderTarget } from '../WebGLRenderTarget.js';\r\nimport { MeshDepthMaterial } from '../../materials/MeshDepthMaterial.js';\r\nimport { MeshDistanceMaterial } from '../../materials/MeshDistanceMaterial.js';\r\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\r\nimport { BufferAttribute } from '../../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../../core/BufferGeometry.js';\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Frustum } from '../../math/Frustum.js';\r\n\r\nimport * as vsm from '../shaders/ShaderLib/vsm.glsl.js';\r\n\r\nfunction WebGLShadowMap( renderer, objects, capabilities ) {\r\n\r\n\tlet _frustum = new Frustum();\r\n\r\n\tconst _shadowMapSize = new Vector2(),\r\n\t\t_viewportSize = new Vector2(),\r\n\r\n\t\t_viewport = new Vector4(),\r\n\r\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\r\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\r\n\r\n\t\t_materialCache = {},\r\n\r\n\t\t_maxTextureSize = capabilities.maxTextureSize;\r\n\r\n\tconst shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };\r\n\r\n\tconst shadowMaterialVertical = new ShaderMaterial( {\r\n\t\tdefines: {\r\n\t\t\tVSM_SAMPLES: 8\r\n\t\t},\r\n\t\tuniforms: {\r\n\t\t\tshadow_pass: { value: null },\r\n\t\t\tresolution: { value: new Vector2() },\r\n\t\t\tradius: { value: 4.0 }\r\n\t\t},\r\n\r\n\t\tvertexShader: vsm.vertex,\r\n\t\tfragmentShader: vsm.fragment\r\n\r\n\t} );\r\n\r\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\r\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\r\n\r\n\tconst fullScreenTri = new BufferGeometry();\r\n\tfullScreenTri.setAttribute(\r\n\t\t'position',\r\n\t\tnew BufferAttribute(\r\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\r\n\t\t\t3\r\n\t\t)\r\n\t);\r\n\r\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\r\n\r\n\tconst scope = this;\r\n\r\n\tthis.enabled = false;\r\n\r\n\tthis.autoUpdate = true;\r\n\tthis.needsUpdate = false;\r\n\r\n\tthis.type = PCFShadowMap;\r\n\tlet _previousType = this.type;\r\n\r\n\tthis.render = function ( lights, scene, camera ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\r\n\t\tif ( lights.length === 0 ) return;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst activeCubeFace = renderer.getActiveCubeFace();\r\n\t\tconst activeMipmapLevel = renderer.getActiveMipmapLevel();\r\n\r\n\t\tconst _state = renderer.state;\r\n\r\n\t\t// Set GL state for depth map.\r\n\t\t_state.setBlending( NoBlending );\r\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\r\n\t\t_state.buffers.depth.setTest( true );\r\n\t\t_state.setScissorTest( false );\r\n\r\n\t\t// check for shadow map type changes\r\n\r\n\t\tconst toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );\r\n\t\tconst fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );\r\n\r\n\t\t// render depth map\r\n\r\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst light = lights[ i ];\r\n\t\t\tconst shadow = light.shadow;\r\n\r\n\t\t\tif ( shadow === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\r\n\r\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\r\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\r\n\r\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\r\n\r\n\t\t\t_viewportSize.copy( shadow.mapSize );\r\n\r\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\r\n\r\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\r\n\r\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\r\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\r\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\r\n\r\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\r\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\r\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( shadow.map === null || toVSM === true || fromVSM === true ) {\r\n\r\n\t\t\t\tconst pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};\r\n\r\n\t\t\t\tif ( shadow.map !== null ) {\r\n\r\n\t\t\t\t\tshadow.map.dispose();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\r\n\r\n\t\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.setRenderTarget( shadow.map );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t\tconst viewportCount = shadow.getViewportCount();\r\n\r\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\r\n\r\n\t\t\t\tconst viewport = shadow.getViewport( vp );\r\n\r\n\t\t\t\t_viewport.set(\r\n\t\t\t\t\t_viewportSize.x * viewport.x,\r\n\t\t\t\t\t_viewportSize.y * viewport.y,\r\n\t\t\t\t\t_viewportSize.x * viewport.z,\r\n\t\t\t\t\t_viewportSize.y * viewport.w\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_state.viewport( _viewport );\r\n\r\n\t\t\t\tshadow.updateMatrices( light, vp );\r\n\r\n\t\t\t\t_frustum = shadow.getFrustum();\r\n\r\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// do blur pass for VSM\r\n\r\n\t\t\tif ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {\r\n\r\n\t\t\t\tVSMPass( shadow, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tshadow.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\t_previousType = this.type;\r\n\r\n\t\tscope.needsUpdate = false;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\r\n\r\n\t};\r\n\r\n\tfunction VSMPass( shadow, camera ) {\r\n\r\n\t\tconst geometry = objects.update( fullScreenMesh );\r\n\r\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\r\n\r\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\r\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\r\n\r\n\t\t\tshadowMaterialVertical.needsUpdate = true;\r\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( shadow.mapPass === null ) {\r\n\r\n\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\r\n\r\n\t\t}\r\n\r\n\t\t// vertical pass\r\n\r\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\r\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\r\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\r\n\t\trenderer.setRenderTarget( shadow.mapPass );\r\n\t\trenderer.clear();\r\n\t\trenderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\r\n\r\n\t\t// horizontal pass\r\n\r\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\r\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\r\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\r\n\t\trenderer.setRenderTarget( shadow.map );\r\n\t\trenderer.clear();\r\n\t\trenderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\r\n\r\n\t}\r\n\r\n\tfunction getDepthMaterial( object, material, light, type ) {\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\r\n\r\n\t\tif ( customMaterial !== undefined ) {\r\n\r\n\t\t\tresult = customMaterial;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\r\n\r\n\t\t\tif ( ( renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||\r\n\t\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\r\n\t\t\t\t( material.alphaMap && material.alphaTest > 0 ) ||\r\n\t\t\t\t( material.map && material.alphaTest > 0 ) ) {\r\n\r\n\t\t\t\t// in this case we need a unique material instance reflecting the\r\n\t\t\t\t// appropriate state\r\n\r\n\t\t\t\tconst keyA = result.uuid, keyB = material.uuid;\r\n\r\n\t\t\t\tlet materialsForVariant = _materialCache[ keyA ];\r\n\r\n\t\t\t\tif ( materialsForVariant === undefined ) {\r\n\r\n\t\t\t\t\tmaterialsForVariant = {};\r\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\r\n\r\n\t\t\t\tif ( cachedMaterial === undefined ) {\r\n\r\n\t\t\t\t\tcachedMaterial = result.clone();\r\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\r\n\t\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = cachedMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tresult.visible = material.visible;\r\n\t\tresult.wireframe = material.wireframe;\r\n\r\n\t\tif ( type === VSMShadowMap ) {\r\n\r\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\r\n\r\n\t\t}\r\n\r\n\t\tresult.alphaMap = material.alphaMap;\r\n\t\tresult.alphaTest = material.alphaTest;\r\n\t\tresult.map = material.map;\r\n\r\n\t\tresult.clipShadows = material.clipShadows;\r\n\t\tresult.clippingPlanes = material.clippingPlanes;\r\n\t\tresult.clipIntersection = material.clipIntersection;\r\n\r\n\t\tresult.displacementMap = material.displacementMap;\r\n\t\tresult.displacementScale = material.displacementScale;\r\n\t\tresult.displacementBias = material.displacementBias;\r\n\r\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\tresult.linewidth = material.linewidth;\r\n\r\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\r\n\r\n\t\t\tconst materialProperties = renderer.properties.get( result );\r\n\t\t\tmaterialProperties.light = light;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tconst visible = object.layers.test( camera.layers );\r\n\r\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\r\n\r\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\r\n\r\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\tconst geometry = objects.update( object );\r\n\t\t\t\tconst material = object.material;\r\n\r\n\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\tconst groups = geometry.groups;\r\n\r\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tconst group = groups[ k ];\r\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, groupMaterial, light, type );\r\n\r\n\t\t\t\t\t\t\tobject.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );\r\n\r\n\t\t\t\t\t\t\trenderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\tobject.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, material, light, type );\r\n\r\n\t\t\t\t\tobject.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );\r\n\r\n\t\t\t\t\trenderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\tobject.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst children = object.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onMaterialDispose( event ) {\r\n\r\n\t\tconst material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t// make sure to remove the unique distance/depth materials used for shadow map rendering\r\n\r\n\t\tfor ( const id in _materialCache ) {\r\n\r\n\t\t\tconst cache = _materialCache[ id ];\r\n\r\n\t\t\tconst uuid = event.target.uuid;\r\n\r\n\t\t\tif ( uuid in cache ) {\r\n\r\n\t\t\t\tconst shadowMaterial = cache[ uuid ];\r\n\t\t\t\tshadowMaterial.dispose();\r\n\t\t\t\tdelete cache[ uuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { WebGLShadowMap };\r\n", "import { NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessEqualDepth, LessDepth, AlwaysDepth, NeverDepth, CullFaceFront, CullFaceBack, CullFaceNone, DoubleSide, BackSide, CustomBlending, MultiplyBlending, SubtractiveBlending, AdditiveBlending, NoBlending, NormalBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor, OneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor, ConstantColorFactor, OneMinusConstantColorFactor, ConstantAlphaFactor, OneMinusConstantAlphaFactor } from '../../constants.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nconst reversedFuncs = {\r\n\t[ NeverDepth ]: AlwaysDepth,\r\n\t[ LessDepth ]: GreaterDepth,\r\n\t[ EqualDepth ]: NotEqualDepth,\r\n\t[ LessEqualDepth ]: GreaterEqualDepth,\r\n\r\n\t[ AlwaysDepth ]: NeverDepth,\r\n\t[ GreaterDepth ]: LessDepth,\r\n\t[ NotEqualDepth ]: EqualDepth,\r\n\t[ GreaterEqualDepth ]: LessEqualDepth,\r\n};\r\n\r\nfunction WebGLState( gl ) {\r\n\r\n\tfunction ColorBuffer() {\r\n\r\n\t\tlet locked = false;\r\n\r\n\t\tconst color = new Vector4();\r\n\t\tlet currentColorMask = null;\r\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\r\n\r\n\t\treturn {\r\n\r\n\t\t\tsetMask: function ( colorMask ) {\r\n\r\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\tlocked = lock;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolor.set( r, g, b, a );\r\n\r\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\treset: function () {\r\n\r\n\t\t\t\tlocked = false;\r\n\r\n\t\t\t\tcurrentColorMask = null;\r\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction DepthBuffer() {\r\n\r\n\t\tlet locked = false;\r\n\t\tlet reversed = false;\r\n\r\n\t\tlet currentDepthMask = null;\r\n\t\tlet currentDepthFunc = null;\r\n\t\tlet currentDepthClear = null;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tsetReversed: function ( value ) {\r\n\r\n\t\t\t\treversed = value;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetTest: function ( depthTest ) {\r\n\r\n\t\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t\tenable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetMask: function ( depthMask ) {\r\n\r\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\t\t\tgl.depthMask( depthMask );\r\n\t\t\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetFunc: function ( depthFunc ) {\r\n\r\n\t\t\t\tif ( reversed ) depthFunc = reversedFuncs[ depthFunc ];\r\n\r\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\t\tcase NeverDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase AlwaysDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase LessDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase LessEqualDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase EqualDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase GreaterDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase NotEqualDepth:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\tlocked = lock;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetClear: function ( depth ) {\r\n\r\n\t\t\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\t\t\tgl.clearDepth( depth );\r\n\t\t\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\treset: function () {\r\n\r\n\t\t\t\tlocked = false;\r\n\r\n\t\t\t\tcurrentDepthMask = null;\r\n\t\t\t\tcurrentDepthFunc = null;\r\n\t\t\t\tcurrentDepthClear = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction StencilBuffer() {\r\n\r\n\t\tlet locked = false;\r\n\r\n\t\tlet currentStencilMask = null;\r\n\t\tlet currentStencilFunc = null;\r\n\t\tlet currentStencilRef = null;\r\n\t\tlet currentStencilFuncMask = null;\r\n\t\tlet currentStencilFail = null;\r\n\t\tlet currentStencilZFail = null;\r\n\t\tlet currentStencilZPass = null;\r\n\t\tlet currentStencilClear = null;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tsetTest: function ( stencilTest ) {\r\n\r\n\t\t\t\tif ( ! locked ) {\r\n\r\n\t\t\t\t\tif ( stencilTest ) {\r\n\r\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetMask: function ( stencilMask ) {\r\n\r\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t     currentStencilRef !== stencilRef ||\r\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\t\t\tcurrentStencilRef = stencilRef;\r\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\r\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t\t\t\t\tcurrentStencilFail = stencilFail;\r\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\tlocked = lock;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetClear: function ( stencil ) {\r\n\r\n\t\t\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\t\t\tgl.clearStencil( stencil );\r\n\t\t\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\treset: function () {\r\n\r\n\t\t\t\tlocked = false;\r\n\r\n\t\t\t\tcurrentStencilMask = null;\r\n\t\t\t\tcurrentStencilFunc = null;\r\n\t\t\t\tcurrentStencilRef = null;\r\n\t\t\t\tcurrentStencilFuncMask = null;\r\n\t\t\t\tcurrentStencilFail = null;\r\n\t\t\t\tcurrentStencilZFail = null;\r\n\t\t\t\tcurrentStencilZPass = null;\r\n\t\t\t\tcurrentStencilClear = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tconst colorBuffer = new ColorBuffer();\r\n\tconst depthBuffer = new DepthBuffer();\r\n\tconst stencilBuffer = new StencilBuffer();\r\n\r\n\tconst uboBindings = new WeakMap();\r\n\tconst uboProgramMap = new WeakMap();\r\n\r\n\tlet enabledCapabilities = {};\r\n\r\n\tlet currentBoundFramebuffers = {};\r\n\tlet currentDrawbuffers = new WeakMap();\r\n\tlet defaultDrawbuffers = [];\r\n\r\n\tlet currentProgram = null;\r\n\r\n\tlet currentBlendingEnabled = false;\r\n\tlet currentBlending = null;\r\n\tlet currentBlendEquation = null;\r\n\tlet currentBlendSrc = null;\r\n\tlet currentBlendDst = null;\r\n\tlet currentBlendEquationAlpha = null;\r\n\tlet currentBlendSrcAlpha = null;\r\n\tlet currentBlendDstAlpha = null;\r\n\tlet currentBlendColor = new Color( 0, 0, 0 );\r\n\tlet currentBlendAlpha = 0;\r\n\tlet currentPremultipledAlpha = false;\r\n\r\n\tlet currentFlipSided = null;\r\n\tlet currentCullFace = null;\r\n\r\n\tlet currentLineWidth = null;\r\n\r\n\tlet currentPolygonOffsetFactor = null;\r\n\tlet currentPolygonOffsetUnits = null;\r\n\r\n\tconst maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\r\n\r\n\tlet lineWidthAvailable = false;\r\n\tlet version = 0;\r\n\tconst glVersion = gl.getParameter( gl.VERSION );\r\n\r\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\r\n\r\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\r\n\t\tlineWidthAvailable = ( version >= 1.0 );\r\n\r\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\r\n\r\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\r\n\t\tlineWidthAvailable = ( version >= 2.0 );\r\n\r\n\t}\r\n\r\n\tlet currentTextureSlot = null;\r\n\tlet currentBoundTextures = {};\r\n\r\n\tconst scissorParam = gl.getParameter( gl.SCISSOR_BOX );\r\n\tconst viewportParam = gl.getParameter( gl.VIEWPORT );\r\n\r\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\r\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\r\n\r\n\tfunction createTexture( type, target, count, dimensions ) {\r\n\r\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\r\n\t\tconst texture = gl.createTexture();\r\n\r\n\t\tgl.bindTexture( type, texture );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tif ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) {\r\n\r\n\t\t\t\tgl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tconst emptyTextures = {};\r\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\r\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\r\n\temptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );\r\n\temptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );\r\n\r\n\t// init\r\n\r\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\r\n\tdepthBuffer.setClear( 1 );\r\n\tstencilBuffer.setClear( 0 );\r\n\r\n\tenable( gl.DEPTH_TEST );\r\n\tdepthBuffer.setFunc( LessEqualDepth );\r\n\r\n\tsetFlipSided( false );\r\n\tsetCullFace( CullFaceBack );\r\n\tenable( gl.CULL_FACE );\r\n\r\n\tsetBlending( NoBlending );\r\n\r\n\t//\r\n\r\n\tfunction enable( id ) {\r\n\r\n\t\tif ( enabledCapabilities[ id ] !== true ) {\r\n\r\n\t\t\tgl.enable( id );\r\n\t\t\tenabledCapabilities[ id ] = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction disable( id ) {\r\n\r\n\t\tif ( enabledCapabilities[ id ] !== false ) {\r\n\r\n\t\t\tgl.disable( id );\r\n\t\t\tenabledCapabilities[ id ] = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction bindFramebuffer( target, framebuffer ) {\r\n\r\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\r\n\r\n\t\t\tgl.bindFramebuffer( target, framebuffer );\r\n\r\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\r\n\r\n\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\r\n\r\n\t\t\tif ( target === gl.DRAW_FRAMEBUFFER ) {\r\n\r\n\t\t\t\tcurrentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( target === gl.FRAMEBUFFER ) {\r\n\r\n\t\t\t\tcurrentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction drawBuffers( renderTarget, framebuffer ) {\r\n\r\n\t\tlet drawBuffers = defaultDrawbuffers;\r\n\r\n\t\tlet needsUpdate = false;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\r\n\r\n\t\t\tif ( drawBuffers === undefined ) {\r\n\r\n\t\t\t\tdrawBuffers = [];\r\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst textures = renderTarget.textures;\r\n\r\n\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tdrawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdrawBuffers.length = textures.length;\r\n\r\n\t\t\t\tneedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( drawBuffers[ 0 ] !== gl.BACK ) {\r\n\r\n\t\t\t\tdrawBuffers[ 0 ] = gl.BACK;\r\n\r\n\t\t\t\tneedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( needsUpdate ) {\r\n\r\n\t\t\tgl.drawBuffers( drawBuffers );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction useProgram( program ) {\r\n\r\n\t\tif ( currentProgram !== program ) {\r\n\r\n\t\t\tgl.useProgram( program );\r\n\r\n\t\t\tcurrentProgram = program;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tconst equationToGL = {\r\n\t\t[ AddEquation ]: gl.FUNC_ADD,\r\n\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\r\n\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\r\n\t};\r\n\r\n\tequationToGL[ MinEquation ] = gl.MIN;\r\n\tequationToGL[ MaxEquation ] = gl.MAX;\r\n\r\n\tconst factorToGL = {\r\n\t\t[ ZeroFactor ]: gl.ZERO,\r\n\t\t[ OneFactor ]: gl.ONE,\r\n\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\r\n\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\r\n\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\r\n\t\t[ DstColorFactor ]: gl.DST_COLOR,\r\n\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\r\n\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\r\n\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\r\n\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\r\n\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA,\r\n\t\t[ ConstantColorFactor ]: gl.CONSTANT_COLOR,\r\n\t\t[ OneMinusConstantColorFactor ]: gl.ONE_MINUS_CONSTANT_COLOR,\r\n\t\t[ ConstantAlphaFactor ]: gl.CONSTANT_ALPHA,\r\n\t\t[ OneMinusConstantAlphaFactor ]: gl.ONE_MINUS_CONSTANT_ALPHA\r\n\t};\r\n\r\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha ) {\r\n\r\n\t\tif ( blending === NoBlending ) {\r\n\r\n\t\t\tif ( currentBlendingEnabled === true ) {\r\n\r\n\t\t\t\tdisable( gl.BLEND );\r\n\t\t\t\tcurrentBlendingEnabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( currentBlendingEnabled === false ) {\r\n\r\n\t\t\tenable( gl.BLEND );\r\n\t\t\tcurrentBlendingEnabled = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending !== CustomBlending ) {\r\n\r\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\r\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\r\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\tcurrentBlendDstAlpha = null;\r\n\t\t\t\tcurrentBlendColor.set( 0, 0, 0 );\r\n\t\t\t\tcurrentBlendAlpha = 0;\r\n\r\n\t\t\t\tcurrentBlending = blending;\r\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// custom blending\r\n\r\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\r\n\r\n\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\r\n\r\n\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blendColor.equals( currentBlendColor ) === false || blendAlpha !== currentBlendAlpha ) {\r\n\r\n\t\t\tgl.blendColor( blendColor.r, blendColor.g, blendColor.b, blendAlpha );\r\n\r\n\t\t\tcurrentBlendColor.copy( blendColor );\r\n\t\t\tcurrentBlendAlpha = blendAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tcurrentBlending = blending;\r\n\t\tcurrentPremultipledAlpha = false;\r\n\r\n\t}\r\n\r\n\tfunction setMaterial( material, frontFaceCW ) {\r\n\r\n\t\tmaterial.side === DoubleSide\r\n\t\t\t? disable( gl.CULL_FACE )\r\n\t\t\t: enable( gl.CULL_FACE );\r\n\r\n\t\tlet flipSided = ( material.side === BackSide );\r\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\r\n\r\n\t\tsetFlipSided( flipSided );\r\n\r\n\t\t( material.blending === NormalBlending && material.transparent === false )\r\n\t\t\t? setBlending( NoBlending )\r\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha );\r\n\r\n\t\tdepthBuffer.setFunc( material.depthFunc );\r\n\t\tdepthBuffer.setTest( material.depthTest );\r\n\t\tdepthBuffer.setMask( material.depthWrite );\r\n\t\tcolorBuffer.setMask( material.colorWrite );\r\n\r\n\t\tconst stencilWrite = material.stencilWrite;\r\n\t\tstencilBuffer.setTest( stencilWrite );\r\n\t\tif ( stencilWrite ) {\r\n\r\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\r\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\r\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\r\n\r\n\t\t}\r\n\r\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\tmaterial.alphaToCoverage === true\r\n\t\t\t? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\r\n\t\t\t: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction setFlipSided( flipSided ) {\r\n\r\n\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\tgl.frontFace( gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setCullFace( cullFace ) {\r\n\r\n\t\tif ( cullFace !== CullFaceNone ) {\r\n\r\n\t\t\tenable( gl.CULL_FACE );\r\n\r\n\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\tif ( cullFace === CullFaceBack ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.BACK );\r\n\r\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdisable( gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t\tcurrentCullFace = cullFace;\r\n\r\n\t}\r\n\r\n\tfunction setLineWidth( width ) {\r\n\r\n\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\r\n\r\n\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\r\n\r\n\t\tif ( polygonOffset ) {\r\n\r\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setScissorTest( scissorTest ) {\r\n\r\n\t\tif ( scissorTest ) {\r\n\r\n\t\t\tenable( gl.SCISSOR_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdisable( gl.SCISSOR_TEST );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// texture\r\n\r\n\tfunction activeTexture( webglSlot ) {\r\n\r\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction bindTexture( webglType, webglTexture, webglSlot ) {\r\n\r\n\t\tif ( webglSlot === undefined ) {\r\n\r\n\t\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\t\twebglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\twebglSlot = currentTextureSlot;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\r\n\r\n\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\r\n\r\n\t\t}\r\n\r\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\tboundTexture.type = webglType;\r\n\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction unbindTexture() {\r\n\r\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\r\n\r\n\t\t\tgl.bindTexture( boundTexture.type, null );\r\n\r\n\t\t\tboundTexture.type = undefined;\r\n\t\t\tboundTexture.texture = undefined;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction compressedTexImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction compressedTexImage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexImage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texSubImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texSubImage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texSubImage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction compressedTexSubImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexSubImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction compressedTexSubImage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexSubImage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texStorage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texStorage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texStorage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texStorage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texImage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction scissor( scissor ) {\r\n\r\n\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction viewport( viewport ) {\r\n\r\n\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction updateUBOMapping( uniformsGroup, program ) {\r\n\r\n\t\tlet mapping = uboProgramMap.get( program );\r\n\r\n\t\tif ( mapping === undefined ) {\r\n\r\n\t\t\tmapping = new WeakMap();\r\n\r\n\t\t\tuboProgramMap.set( program, mapping );\r\n\r\n\t\t}\r\n\r\n\t\tlet blockIndex = mapping.get( uniformsGroup );\r\n\r\n\t\tif ( blockIndex === undefined ) {\r\n\r\n\t\t\tblockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );\r\n\r\n\t\t\tmapping.set( uniformsGroup, blockIndex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction uniformBlockBinding( uniformsGroup, program ) {\r\n\r\n\t\tconst mapping = uboProgramMap.get( program );\r\n\t\tconst blockIndex = mapping.get( uniformsGroup );\r\n\r\n\t\tif ( uboBindings.get( program ) !== blockIndex ) {\r\n\r\n\t\t\t// bind shader specific block index to global block point\r\n\t\t\tgl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );\r\n\r\n\t\t\tuboBindings.set( program, blockIndex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction reset() {\r\n\r\n\t\t// reset state\r\n\r\n\t\tgl.disable( gl.BLEND );\r\n\t\tgl.disable( gl.CULL_FACE );\r\n\t\tgl.disable( gl.DEPTH_TEST );\r\n\t\tgl.disable( gl.POLYGON_OFFSET_FILL );\r\n\t\tgl.disable( gl.SCISSOR_TEST );\r\n\t\tgl.disable( gl.STENCIL_TEST );\r\n\t\tgl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\r\n\r\n\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\tgl.blendFunc( gl.ONE, gl.ZERO );\r\n\t\tgl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );\r\n\t\tgl.blendColor( 0, 0, 0, 0 );\r\n\r\n\t\tgl.colorMask( true, true, true, true );\r\n\t\tgl.clearColor( 0, 0, 0, 0 );\r\n\r\n\t\tgl.depthMask( true );\r\n\t\tgl.depthFunc( gl.LESS );\r\n\t\tgl.clearDepth( 1 );\r\n\r\n\t\tgl.stencilMask( 0xffffffff );\r\n\t\tgl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );\r\n\t\tgl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );\r\n\t\tgl.clearStencil( 0 );\r\n\r\n\t\tgl.cullFace( gl.BACK );\r\n\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\tgl.polygonOffset( 0, 0 );\r\n\r\n\t\tgl.activeTexture( gl.TEXTURE0 );\r\n\r\n\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\t\tgl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );\r\n\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\r\n\r\n\t\tgl.useProgram( null );\r\n\r\n\t\tgl.lineWidth( 1 );\r\n\r\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\r\n\t\t// reset internals\r\n\r\n\t\tenabledCapabilities = {};\r\n\r\n\t\tcurrentTextureSlot = null;\r\n\t\tcurrentBoundTextures = {};\r\n\r\n\t\tcurrentBoundFramebuffers = {};\r\n\t\tcurrentDrawbuffers = new WeakMap();\r\n\t\tdefaultDrawbuffers = [];\r\n\r\n\t\tcurrentProgram = null;\r\n\r\n\t\tcurrentBlendingEnabled = false;\r\n\t\tcurrentBlending = null;\r\n\t\tcurrentBlendEquation = null;\r\n\t\tcurrentBlendSrc = null;\r\n\t\tcurrentBlendDst = null;\r\n\t\tcurrentBlendEquationAlpha = null;\r\n\t\tcurrentBlendSrcAlpha = null;\r\n\t\tcurrentBlendDstAlpha = null;\r\n\t\tcurrentBlendColor = new Color( 0, 0, 0 );\r\n\t\tcurrentBlendAlpha = 0;\r\n\t\tcurrentPremultipledAlpha = false;\r\n\r\n\t\tcurrentFlipSided = null;\r\n\t\tcurrentCullFace = null;\r\n\r\n\t\tcurrentLineWidth = null;\r\n\r\n\t\tcurrentPolygonOffsetFactor = null;\r\n\t\tcurrentPolygonOffsetUnits = null;\r\n\r\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\r\n\t\tcolorBuffer.reset();\r\n\t\tdepthBuffer.reset();\r\n\t\tstencilBuffer.reset();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tbuffers: {\r\n\t\t\tcolor: colorBuffer,\r\n\t\t\tdepth: depthBuffer,\r\n\t\t\tstencil: stencilBuffer\r\n\t\t},\r\n\r\n\t\tenable: enable,\r\n\t\tdisable: disable,\r\n\r\n\t\tbindFramebuffer: bindFramebuffer,\r\n\t\tdrawBuffers: drawBuffers,\r\n\r\n\t\tuseProgram: useProgram,\r\n\r\n\t\tsetBlending: setBlending,\r\n\t\tsetMaterial: setMaterial,\r\n\r\n\t\tsetFlipSided: setFlipSided,\r\n\t\tsetCullFace: setCullFace,\r\n\r\n\t\tsetLineWidth: setLineWidth,\r\n\t\tsetPolygonOffset: setPolygonOffset,\r\n\r\n\t\tsetScissorTest: setScissorTest,\r\n\r\n\t\tactiveTexture: activeTexture,\r\n\t\tbindTexture: bindTexture,\r\n\t\tunbindTexture: unbindTexture,\r\n\t\tcompressedTexImage2D: compressedTexImage2D,\r\n\t\tcompressedTexImage3D: compressedTexImage3D,\r\n\t\ttexImage2D: texImage2D,\r\n\t\ttexImage3D: texImage3D,\r\n\r\n\t\tupdateUBOMapping: updateUBOMapping,\r\n\t\tuniformBlockBinding: uniformBlockBinding,\r\n\r\n\t\ttexStorage2D: texStorage2D,\r\n\t\ttexStorage3D: texStorage3D,\r\n\t\ttexSubImage2D: texSubImage2D,\r\n\t\ttexSubImage3D: texSubImage3D,\r\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\r\n\t\tcompressedTexSubImage3D: compressedTexSubImage3D,\r\n\r\n\t\tscissor: scissor,\r\n\t\tviewport: viewport,\r\n\r\n\t\treset: reset\r\n\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLState };\r\n", "import { AlphaFormat, LuminanceFormat, LuminanceAlphaFormat, RedFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBFormat, RGBAFormat, RGBAIntegerFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_BPTC_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, UnsignedByteType, ByteType, UnsignedShortType, ShortType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedIntType, IntType, FloatType, UnsignedInt5999Type, UnsignedInt101111Type } from '../constants.js';\r\n\r\nfunction contain( texture, aspect ) {\r\n\r\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\r\n\r\n\tif ( imageAspect > aspect ) {\r\n\r\n\t\ttexture.repeat.x = 1;\r\n\t\ttexture.repeat.y = imageAspect / aspect;\r\n\r\n\t\ttexture.offset.x = 0;\r\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\r\n\r\n\t} else {\r\n\r\n\t\ttexture.repeat.x = aspect / imageAspect;\r\n\t\ttexture.repeat.y = 1;\r\n\r\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\r\n\t\ttexture.offset.y = 0;\r\n\r\n\t}\r\n\r\n\treturn texture;\r\n\r\n}\r\n\r\nfunction cover( texture, aspect ) {\r\n\r\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\r\n\r\n\tif ( imageAspect > aspect ) {\r\n\r\n\t\ttexture.repeat.x = aspect / imageAspect;\r\n\t\ttexture.repeat.y = 1;\r\n\r\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\r\n\t\ttexture.offset.y = 0;\r\n\r\n\t} else {\r\n\r\n\t\ttexture.repeat.x = 1;\r\n\t\ttexture.repeat.y = imageAspect / aspect;\r\n\r\n\t\ttexture.offset.x = 0;\r\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\r\n\r\n\t}\r\n\r\n\treturn texture;\r\n\r\n}\r\n\r\nfunction fill( texture ) {\r\n\r\n\ttexture.repeat.x = 1;\r\n\ttexture.repeat.y = 1;\r\n\r\n\ttexture.offset.x = 0;\r\n\ttexture.offset.y = 0;\r\n\r\n\treturn texture;\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Given the width, height, format, and type of a texture. Determines how many\r\n * bytes must be used to represent the texture.\r\n */\r\nfunction getByteLength( width, height, format, type ) {\r\n\r\n\tconst typeByteLength = getTextureTypeByteLength( type );\r\n\r\n\tswitch ( format ) {\r\n\r\n\t\t// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n\t\tcase AlphaFormat:\r\n\t\t\treturn width * height;\r\n\t\tcase LuminanceFormat:\r\n\t\t\treturn width * height;\r\n\t\tcase LuminanceAlphaFormat:\r\n\t\t\treturn width * height * 2;\r\n\t\tcase RedFormat:\r\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RedIntegerFormat:\r\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGFormat:\r\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGIntegerFormat:\r\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGBFormat:\r\n\t\t\treturn ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGBAFormat:\r\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGBAIntegerFormat:\r\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\r\n\t\tcase RGB_S3TC_DXT1_Format:\r\n\t\tcase RGBA_S3TC_DXT1_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\r\n\t\tcase RGBA_S3TC_DXT3_Format:\r\n\t\tcase RGBA_S3TC_DXT5_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\r\n\t\tcase RGB_PVRTC_2BPPV1_Format:\r\n\t\tcase RGBA_PVRTC_2BPPV1_Format:\r\n\t\t\treturn ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;\r\n\t\tcase RGB_PVRTC_4BPPV1_Format:\r\n\t\tcase RGBA_PVRTC_4BPPV1_Format:\r\n\t\t\treturn ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\r\n\t\tcase RGB_ETC1_Format:\r\n\t\tcase RGB_ETC2_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\r\n\t\tcase RGBA_ETC2_EAC_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\r\n\t\tcase RGBA_ASTC_4x4_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\t\tcase RGBA_ASTC_5x4_Format:\r\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\t\tcase RGBA_ASTC_5x5_Format:\r\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_6x5_Format:\r\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_6x6_Format:\r\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\r\n\t\tcase RGBA_ASTC_8x5_Format:\r\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_8x6_Format:\r\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\r\n\t\tcase RGBA_ASTC_8x8_Format:\r\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\r\n\t\tcase RGBA_ASTC_10x5_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_10x6_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\r\n\t\tcase RGBA_ASTC_10x8_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\r\n\t\tcase RGBA_ASTC_10x10_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\r\n\t\tcase RGBA_ASTC_12x10_Format:\r\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\r\n\t\tcase RGBA_ASTC_12x12_Format:\r\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\r\n\t\tcase RGBA_BPTC_Format:\r\n\t\tcase RGB_BPTC_SIGNED_Format:\r\n\t\tcase RGB_BPTC_UNSIGNED_Format:\r\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\r\n\t\tcase RED_RGTC1_Format:\r\n\t\tcase SIGNED_RED_RGTC1_Format:\r\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;\r\n\t\tcase RED_GREEN_RGTC2_Format:\r\n\t\tcase SIGNED_RED_GREEN_RGTC2_Format:\r\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\r\n\r\n\t}\r\n\r\n\tthrow new Error(\r\n\t\t`Unable to determine texture byte length for ${format} format.`,\r\n\t);\r\n\r\n}\r\n\r\nfunction getTextureTypeByteLength( type ) {\r\n\r\n\tswitch ( type ) {\r\n\r\n\t\tcase UnsignedByteType:\r\n\t\tcase ByteType:\r\n\t\t\treturn { byteLength: 1, components: 1 };\r\n\t\tcase UnsignedShortType:\r\n\t\tcase ShortType:\r\n\t\tcase HalfFloatType:\r\n\t\t\treturn { byteLength: 2, components: 1 };\r\n\t\tcase UnsignedShort4444Type:\r\n\t\tcase UnsignedShort5551Type:\r\n\t\t\treturn { byteLength: 2, components: 4 };\r\n\t\tcase UnsignedIntType:\r\n\t\tcase IntType:\r\n\t\tcase FloatType:\r\n\t\t\treturn { byteLength: 4, components: 1 };\r\n\t\tcase UnsignedInt5999Type:\r\n\t\tcase UnsignedInt101111Type:\r\n\t\t\treturn { byteLength: 4, components: 3 };\r\n\r\n\t}\r\n\r\n\tthrow new Error( `Unknown texture type ${type}.` );\r\n\r\n}\r\n\r\nconst TextureUtils = {\r\n\tcontain,\r\n\tcover,\r\n\tfill,\r\n\tgetByteLength\r\n};\r\n\r\nexport { contain, cover, fill, getByteLength, TextureUtils };\r\n", "import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedIntType, FloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, UnsignedByteType, NoColorSpace, LinearSRGBColorSpace, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare, SRGBTransfer, LinearTransfer, UnsignedShortType, UnsignedInt248Type } from '../../constants.js';\r\nimport { createElementNS } from '../../utils.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { getByteLength } from '../../extras/TextureUtils.js';\r\n\r\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\r\n\r\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\r\n\tconst supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\r\n\r\n\tconst _imageDimensions = new Vector2();\r\n\tconst _videoTextures = new WeakMap();\r\n\tlet _canvas;\r\n\r\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\r\n\r\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\r\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\r\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\r\n\r\n\tlet useOffscreenCanvas = false;\r\n\r\n\ttry {\r\n\r\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\r\n\t\t\t// eslint-disable-next-line compat/compat\r\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\r\n\r\n\t} catch ( err ) {\r\n\r\n\t\t// Ignore any errors\r\n\r\n\t}\r\n\r\n\tfunction createCanvas( width, height ) {\r\n\r\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\r\n\r\n\t\treturn useOffscreenCanvas ?\r\n\t\t\t// eslint-disable-next-line compat/compat\r\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\r\n\r\n\t}\r\n\r\n\tfunction resizeImage( image, needsNewCanvas, maxSize ) {\r\n\r\n\t\tlet scale = 1;\r\n\r\n\t\tconst dimensions = getDimensions( image );\r\n\r\n\t\t// handle case if texture exceeds max size\r\n\r\n\t\tif ( dimensions.width > maxSize || dimensions.height > maxSize ) {\r\n\r\n\t\t\tscale = maxSize / Math.max( dimensions.width, dimensions.height );\r\n\r\n\t\t}\r\n\r\n\t\t// only perform resize if necessary\r\n\r\n\t\tif ( scale < 1 ) {\r\n\r\n\t\t\t// only perform resize for certain image types\r\n\r\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ||\r\n\t\t\t\t( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) ) {\r\n\r\n\t\t\t\tconst width = Math.floor( scale * dimensions.width );\r\n\t\t\t\tconst height = Math.floor( scale * dimensions.height );\r\n\r\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\r\n\r\n\t\t\t\t// cube textures can't reuse the same canvas\r\n\r\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\r\n\r\n\t\t\t\tcanvas.width = width;\r\n\t\t\t\tcanvas.height = height;\r\n\r\n\t\t\t\tconst context = canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + dimensions.width + 'x' + dimensions.height + ') to (' + width + 'x' + height + ').' );\r\n\r\n\t\t\t\treturn canvas;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( 'data' in image ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + dimensions.width + 'x' + dimensions.height + ').' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn image;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction textureNeedsGenerateMipmaps( texture ) {\r\n\r\n\t\treturn texture.generateMipmaps && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\r\n\r\n\t}\r\n\r\n\tfunction generateMipmap( target ) {\r\n\r\n\t\t_gl.generateMipmap( target );\r\n\r\n\t}\r\n\r\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\r\n\r\n\t\tif ( internalFormatName !== null ) {\r\n\r\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\r\n\r\n\t\t}\r\n\r\n\t\tlet internalFormat = glFormat;\r\n\r\n\t\tif ( glFormat === _gl.RED ) {\r\n\r\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\r\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RED_INTEGER ) {\r\n\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;\r\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.R8I;\r\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.R16I;\r\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.R32I;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RG ) {\r\n\r\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;\r\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RG_INTEGER ) {\r\n\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RG16UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RG32UI;\r\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RG8I;\r\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RG16I;\r\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RG32I;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RGB_INTEGER ) {\r\n\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGB16UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGB32UI;\r\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RGB8I;\r\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RGB16I;\r\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RGB32I;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RGBA_INTEGER ) {\r\n\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGBA16UI;\r\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGBA32UI;\r\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RGBA8I;\r\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RGBA16I;\r\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RGBA32I;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RGB ) {\r\n\r\n\t\t\tif ( glType === _gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = _gl.RGB9_E5;\r\n\t\t\tif ( glType === _gl.UNSIGNED_INT_10F_11F_11F_REV ) internalFormat = _gl.R11F_G11F_B10F;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RGBA ) {\r\n\r\n\t\t\tconst transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );\r\n\r\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\r\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\r\n\t\t\tinternalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||\r\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\r\n\r\n\t\t\textensions.get( 'EXT_color_buffer_float' );\r\n\r\n\t\t}\r\n\r\n\t\treturn internalFormat;\r\n\r\n\t}\r\n\r\n\tfunction getInternalDepthFormat( useStencil, depthType ) {\r\n\r\n\t\tlet glInternalFormat;\r\n\t\tif ( useStencil ) {\r\n\r\n\t\t\tif ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\r\n\r\n\t\t\t} else if ( depthType === FloatType ) {\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH32F_STENCIL8;\r\n\r\n\t\t\t} else if ( depthType === UnsignedShortType ) {\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\r\n\t\t\t\tconsole.warn( 'DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\r\n\r\n\t\t\t} else if ( depthType === FloatType ) {\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\r\n\r\n\t\t\t} else if ( depthType === UnsignedShortType ) {\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn glInternalFormat;\r\n\r\n\t}\r\n\r\n\tfunction getMipLevels( texture, image ) {\r\n\r\n\t\tif ( textureNeedsGenerateMipmaps( texture ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\r\n\r\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\r\n\r\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\r\n\r\n\t\t\t// user-defined mipmaps\r\n\r\n\t\t\treturn texture.mipmaps.length;\r\n\r\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\r\n\r\n\t\t\treturn image.mipmaps.length;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// texture without mipmaps (only base level)\r\n\r\n\t\t\treturn 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tconst texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\tif ( texture.isVideoTexture ) {\r\n\r\n\t\t\t_videoTextures.delete( texture );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\tconst renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction deallocateTexture( texture ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\r\n\t\t// check if it's necessary to remove the WebGLTexture object\r\n\r\n\t\tconst source = texture.source;\r\n\t\tconst webglTextures = _sources.get( source );\r\n\r\n\t\tif ( webglTextures ) {\r\n\r\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\r\n\t\t\twebglTexture.usedTimes --;\r\n\r\n\t\t\t// the WebGLTexture object is not used anymore, remove it\r\n\r\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\r\n\r\n\t\t\t\tdeleteTexture( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\r\n\r\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\r\n\r\n\t\t\t\t_sources.delete( source );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tproperties.remove( texture );\r\n\r\n\t}\r\n\r\n\tfunction deleteTexture( texture ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\tconst source = texture.source;\r\n\t\tconst webglTextures = _sources.get( source );\r\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\r\n\r\n\t\tinfo.memory.textures --;\r\n\r\n\t}\r\n\r\n\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {\r\n\r\n\t\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {\r\n\r\n\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\r\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\r\n\r\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\r\n\r\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\r\n\r\n\t\t}\r\n\r\n\t\tconst textures = renderTarget.textures;\r\n\r\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\r\n\r\n\t\t\tif ( attachmentProperties.__webglTexture ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\r\n\r\n\t\t\t\tinfo.memory.textures --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tproperties.remove( textures[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.remove( renderTarget );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tlet textureUnits = 0;\r\n\r\n\tfunction resetTextureUnits() {\r\n\r\n\t\ttextureUnits = 0;\r\n\r\n\t}\r\n\r\n\tfunction allocateTextureUnit() {\r\n\r\n\t\tconst textureUnit = textureUnits;\r\n\r\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\ttextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t}\r\n\r\n\tfunction getTextureCacheKey( texture ) {\r\n\r\n\t\tconst array = [];\r\n\r\n\t\tarray.push( texture.wrapS );\r\n\t\tarray.push( texture.wrapT );\r\n\t\tarray.push( texture.wrapR || 0 );\r\n\t\tarray.push( texture.magFilter );\r\n\t\tarray.push( texture.minFilter );\r\n\t\tarray.push( texture.anisotropy );\r\n\t\tarray.push( texture.internalFormat );\r\n\t\tarray.push( texture.format );\r\n\t\tarray.push( texture.type );\r\n\t\tarray.push( texture.generateMipmaps );\r\n\t\tarray.push( texture.premultiplyAlpha );\r\n\t\tarray.push( texture.flipY );\r\n\t\tarray.push( texture.unpackAlignment );\r\n\t\tarray.push( texture.colorSpace );\r\n\r\n\t\treturn array.join();\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\r\n\r\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tconst image = texture.image;\r\n\r\n\t\t\tif ( image === null ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\r\n\r\n\t\t\t} else if ( image.complete === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\r\n\r\n\t}\r\n\r\n\tfunction setTexture2DArray( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\r\n\r\n\t}\r\n\r\n\tfunction setTexture3D( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\r\n\r\n\t}\r\n\r\n\tfunction setTextureCube( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\r\n\r\n\t}\r\n\r\n\tconst wrappingToGL = {\r\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\r\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\r\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\r\n\t};\r\n\r\n\tconst filterToGL = {\r\n\t\t[ NearestFilter ]: _gl.NEAREST,\r\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\r\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\r\n\r\n\t\t[ LinearFilter ]: _gl.LINEAR,\r\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\r\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\r\n\t};\r\n\r\n\tconst compareToGL = {\r\n\t\t[ NeverCompare ]: _gl.NEVER,\r\n\t\t[ AlwaysCompare ]: _gl.ALWAYS,\r\n\t\t[ LessCompare ]: _gl.LESS,\r\n\t\t[ LessEqualCompare ]: _gl.LEQUAL,\r\n\t\t[ EqualCompare ]: _gl.EQUAL,\r\n\t\t[ GreaterEqualCompare ]: _gl.GEQUAL,\r\n\t\t[ GreaterCompare ]: _gl.GREATER,\r\n\t\t[ NotEqualCompare ]: _gl.NOTEQUAL\r\n\t};\r\n\r\n\tfunction setTextureParameters( textureType, texture ) {\r\n\r\n\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false &&\r\n\t\t\t( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||\r\n\t\t\ttexture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter ) ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.' );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\r\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\r\n\r\n\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\r\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\r\n\r\n\t\tif ( texture.compareFunction ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\r\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\r\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\r\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction initTexture( textureProperties, texture ) {\r\n\r\n\t\tlet forceUpload = false;\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t}\r\n\r\n\t\t// create Source <-> WebGLTextures mapping if necessary\r\n\r\n\t\tconst source = texture.source;\r\n\t\tlet webglTextures = _sources.get( source );\r\n\r\n\t\tif ( webglTextures === undefined ) {\r\n\r\n\t\t\twebglTextures = {};\r\n\t\t\t_sources.set( source, webglTextures );\r\n\r\n\t\t}\r\n\r\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\r\n\r\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\r\n\r\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\r\n\r\n\t\t\t// if not, create a new instance of WebGLTexture\r\n\r\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\r\n\r\n\t\t\t\t// create new entry\r\n\r\n\t\t\t\twebglTextures[ textureCacheKey ] = {\r\n\t\t\t\t\ttexture: _gl.createTexture(),\r\n\t\t\t\t\tusedTimes: 0\r\n\t\t\t\t};\r\n\r\n\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\r\n\t\t\t\t// even if the image contents are identical\r\n\r\n\t\t\t\tforceUpload = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\r\n\r\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\r\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\r\n\r\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\r\n\r\n\t\t\tif ( webglTexture !== undefined ) {\r\n\r\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\r\n\r\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\r\n\r\n\t\t\t\t\tdeleteTexture( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// store references to cache key and WebGLTexture object\r\n\r\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\r\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\r\n\r\n\t\t}\r\n\r\n\t\treturn forceUpload;\r\n\r\n\t}\r\n\r\n\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tlet textureType = _gl.TEXTURE_2D;\r\n\r\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;\r\n\t\tif ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;\r\n\r\n\t\tconst forceUpload = initTexture( textureProperties, texture );\r\n\t\tconst source = texture.source;\r\n\r\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\r\n\r\n\t\tconst sourceProperties = properties.get( source );\r\n\r\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\r\n\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\r\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\r\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\r\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\r\n\r\n\t\t\tlet image = resizeImage( texture.image, false, capabilities.maxTextureSize );\r\n\t\t\timage = verifyColorSpace( texture, image );\r\n\r\n\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\r\n\r\n\t\t\tconst glType = utils.convert( texture.type );\r\n\t\t\tlet glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\r\n\r\n\t\t\tsetTextureParameters( textureType, texture );\r\n\r\n\t\t\tlet mipmap;\r\n\t\t\tconst mipmaps = texture.mipmaps;\r\n\r\n\t\t\tconst useTexStorage = ( texture.isVideoTexture !== true );\r\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\r\n\t\t\tconst dataReady = source.dataReady;\r\n\t\t\tconst levels = getMipLevels( texture, image );\r\n\r\n\t\t\tif ( texture.isDepthTexture ) {\r\n\r\n\t\t\t\tglInternalFormat = getInternalDepthFormat( texture.format === DepthStencilFormat, texture.type );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isDataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 ) {\r\n\r\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isCompressedTexture ) {\r\n\r\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\r\n\r\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\r\n\r\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ( texture.layerUpdates.size > 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tconst layerByteLength = getByteLength( mipmap.width, mipmap.height, texture.format, texture.type );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tfor ( const layerIndex of texture.layerUpdates ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst layerData = mipmap.data.subarray(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlayerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t( layerIndex + 1 ) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData, 0, 0 );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\ttexture.clearLayerUpdates();\r\n\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\r\n\r\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isDataArrayTexture ) {\r\n\r\n\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\tif ( texture.layerUpdates.size > 0 ) {\r\n\r\n\t\t\t\t\t\t\tconst layerByteLength = getByteLength( image.width, image.height, texture.format, texture.type );\r\n\r\n\t\t\t\t\t\t\tfor ( const layerIndex of texture.layerUpdates ) {\r\n\r\n\t\t\t\t\t\t\t\tconst layerData = image.data.subarray(\r\n\t\t\t\t\t\t\t\t\tlayerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t\t\t( layerIndex + 1 ) * layerByteLength / image.data.BYTES_PER_ELEMENT\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\ttexture.clearLayerUpdates();\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isData3DTexture ) {\r\n\r\n\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isFramebufferTexture ) {\r\n\r\n\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tlet width = image.width, height = image.height;\r\n\r\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t\t\t\twidth >>= 1;\r\n\t\t\t\t\t\t\theight >>= 1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 ) {\r\n\r\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t\tconst dimensions = getDimensions( mipmaps[ 0 ] );\r\n\r\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\t\tconst dimensions = getDimensions( image );\r\n\r\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( textureType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsourceProperties.__version = source.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t}\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t}\r\n\r\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tif ( texture.image.length !== 6 ) return;\r\n\r\n\t\tconst forceUpload = initTexture( textureProperties, texture );\r\n\t\tconst source = texture.source;\r\n\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\r\n\r\n\t\tconst sourceProperties = properties.get( source );\r\n\r\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\r\n\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\r\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\r\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\r\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\r\n\r\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\r\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\r\n\r\n\t\t\tconst cubeImage = [];\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], true, capabilities.maxCubemapSize );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst image = cubeImage[ 0 ],\r\n\t\t\t\tglFormat = utils.convert( texture.format, texture.colorSpace ),\r\n\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\r\n\r\n\t\t\tconst useTexStorage = ( texture.isVideoTexture !== true );\r\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\r\n\t\t\tconst dataReady = source.dataReady;\r\n\t\t\tlet levels = getMipLevels( texture, image );\r\n\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );\r\n\r\n\t\t\tlet mipmaps;\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\r\n\r\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmipmaps = texture.mipmaps;\r\n\r\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\r\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\r\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\r\n\r\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\r\n\r\n\t\t\t\t\tconst dimensions = getDimensions( cubeImage[ 0 ] );\r\n\r\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( dataReady ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\r\n\r\n\t\t\t\t// We assume images for cube map have the same size.\r\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsourceProperties.__version = source.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t}\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t}\r\n\r\n\t// Render targets\r\n\r\n\t// Setup storage for target texture and bind it to correct framebuffer\r\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {\r\n\r\n\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\r\n\t\tconst glType = utils.convert( texture.type );\r\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\r\n\r\n\t\t\tconst width = Math.max( 1, renderTarget.width >> level );\r\n\t\t\tconst height = Math.max( 1, renderTarget.height >> level );\r\n\r\n\t\t\tif ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {\r\n\r\n\t\t\t\tstate.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\r\n\r\n\t\t} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753\r\n\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, level );\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t// retrieve the depth attachment types\r\n\t\t\tconst depthTexture = renderTarget.depthTexture;\r\n\t\t\tconst depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;\r\n\t\t\tconst glInternalFormat = getInternalDepthFormat( renderTarget.stencilBuffer, depthType );\r\n\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\r\n\r\n\t\t\t// set up the attachment\r\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\t\t\tconst isUseMultisampledRTT = useMultisampledRTT( renderTarget );\r\n\t\t\tif ( isUseMultisampledRTT ) {\r\n\r\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t} else if ( isMultisample ) {\r\n\r\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst textures = renderTarget.textures;\r\n\r\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\t\t\tconst texture = textures[ i ];\r\n\r\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\r\n\t\t\t\tconst glType = utils.convert( texture.type );\r\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\r\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\r\n\r\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\r\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\r\n\r\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\r\n\r\n\t\t}\r\n\r\n\t\t// upload an empty depth texture with framebuffer size\r\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\r\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\r\n\r\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\r\n\r\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Setup GL resources for a non-texture depth buffer\r\n\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\r\n\r\n\t\t// if the bound depth texture has changed\r\n\t\tif ( renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture ) {\r\n\r\n\t\t\t// fire the dispose event to get rid of stored state associated with the previously bound depth buffer\r\n\t\t\tconst depthTexture = renderTarget.depthTexture;\r\n\t\t\tif ( renderTargetProperties.__depthDisposeCallback ) {\r\n\r\n\t\t\t\trenderTargetProperties.__depthDisposeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set up dispose listeners to track when the currently attached buffer is implicitly unbound\r\n\t\t\tif ( depthTexture ) {\r\n\r\n\t\t\t\tconst disposeEvent = () => {\r\n\r\n\t\t\t\t\tdelete renderTargetProperties.__boundDepthTexture;\r\n\t\t\t\t\tdelete renderTargetProperties.__depthDisposeCallback;\r\n\t\t\t\t\tdepthTexture.removeEventListener( 'dispose', disposeEvent );\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tdepthTexture.addEventListener( 'dispose', disposeEvent );\r\n\t\t\t\trenderTargetProperties.__depthDisposeCallback = disposeEvent;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderTargetProperties.__boundDepthTexture = depthTexture;\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\r\n\r\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\r\n\r\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\r\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer[ i ] === undefined ) {\r\n\r\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// attach buffer if it's been created already\r\n\t\t\t\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\r\n\t\t\t\t\t\tconst renderbuffer = renderTargetProperties.__webglDepthbuffer[ i ];\r\n\t\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer === undefined ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// attach buffer if it's been created already\r\n\t\t\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\r\n\t\t\t\t\tconst renderbuffer = renderTargetProperties.__webglDepthbuffer;\r\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// rebind framebuffer with external textures\r\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tif ( colorTexture !== undefined ) {\r\n\r\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( depthTexture !== undefined ) {\r\n\r\n\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Set up GL resources for the render target\r\n\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\tconst texture = renderTarget.texture;\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tconst textures = renderTarget.textures;\r\n\r\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\r\n\t\tconst isMultipleRenderTargets = ( textures.length > 1 );\r\n\r\n\t\tif ( ! isMultipleRenderTargets ) {\r\n\r\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\r\n\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t}\r\n\r\n\t\t// Setup framebuffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = [];\r\n\r\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\r\n\r\n\t\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isMultipleRenderTargets ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\r\n\r\n\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\r\n\r\n\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\r\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\r\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\t\t\t\tconst texture = textures[ i ];\r\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\r\n\r\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\r\n\t\t\t\t\tconst glType = utils.convert( texture.type );\r\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );\r\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Setup color buffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\r\n\r\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\r\n\r\n\t\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t} else if ( isMultipleRenderTargets ) {\r\n\r\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attachment = textures[ i ];\r\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, attachment );\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet glTextureType = _gl.TEXTURE_2D;\r\n\r\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\r\n\r\n\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( glTextureType, texture );\r\n\r\n\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\r\n\r\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\r\n\r\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( glTextureType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t}\r\n\r\n\t\t// Setup depth and stencil buffers\r\n\r\n\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\tconst textures = renderTarget.textures;\r\n\r\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst texture = textures[ i ];\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\r\n\r\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\r\n\r\n\t\t\t\tstate.bindTexture( target, webglTexture );\r\n\t\t\t\tgenerateMipmap( target );\r\n\t\t\t\tstate.unbindTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst invalidationArrayRead = [];\r\n\tconst invalidationArrayDraw = [];\r\n\r\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\r\n\r\n\t\tif ( renderTarget.samples > 0 ) {\r\n\r\n\t\t\tif ( useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\t\tconst textures = renderTarget.textures;\r\n\t\t\t\tconst width = renderTarget.width;\r\n\t\t\t\tconst height = renderTarget.height;\r\n\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\r\n\t\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\r\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\t\t\tconst isMultipleRenderTargets = ( textures.length > 1 );\r\n\r\n\t\t\t\t// If MRT we need to remove FBO attachments\r\n\t\t\t\tif ( isMultipleRenderTargets ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );\r\n\r\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( renderTarget.resolveDepthBuffer ) {\r\n\r\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\r\n\r\n\t\t\t\t\t\t// resolving stencil is slow with a D3D backend. disable it for all transmission render targets (see #27799)\r\n\r\n\t\t\t\t\t\tif ( renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( isMultipleRenderTargets ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\r\n\r\n\t\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\r\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\r\n\r\n\t\t\t\t\tif ( supportsInvalidateFramebuffer === true ) {\r\n\r\n\t\t\t\t\t\tinvalidationArrayRead.length = 0;\r\n\t\t\t\t\t\tinvalidationArrayDraw.length = 0;\r\n\r\n\t\t\t\t\t\tinvalidationArrayRead.push( _gl.COLOR_ATTACHMENT0 + i );\r\n\r\n\t\t\t\t\t\tif ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false ) {\r\n\r\n\t\t\t\t\t\t\tinvalidationArrayRead.push( depthStyle );\r\n\t\t\t\t\t\t\tinvalidationArrayDraw.push( depthStyle );\r\n\r\n\t\t\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, invalidationArrayDraw );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArrayRead );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\r\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\r\n\r\n\t\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\r\n\t\t\t\tif ( isMultipleRenderTargets ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\r\n\r\n\t\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\r\n\r\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer ) {\r\n\r\n\t\t\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\r\n\r\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getRenderTargetSamples( renderTarget ) {\r\n\r\n\t\treturn Math.min( capabilities.maxSamples, renderTarget.samples );\r\n\r\n\t}\r\n\r\n\tfunction useMultisampledRTT( renderTarget ) {\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\treturn renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\r\n\r\n\t}\r\n\r\n\tfunction updateVideoTexture( texture ) {\r\n\r\n\t\tconst frame = info.render.frame;\r\n\r\n\t\t// Check the last frame we updated the VideoTexture\r\n\r\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\r\n\r\n\t\t\t_videoTextures.set( texture, frame );\r\n\t\t\ttexture.update();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction verifyColorSpace( texture, image ) {\r\n\r\n\t\tconst colorSpace = texture.colorSpace;\r\n\t\tconst format = texture.format;\r\n\t\tconst type = texture.type;\r\n\r\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true ) return image;\r\n\r\n\t\tif ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {\r\n\r\n\t\t\t// sRGB\r\n\r\n\t\t\tif ( ColorManagement.getTransfer( colorSpace ) === SRGBTransfer ) {\r\n\r\n\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\r\n\r\n\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction getDimensions( image ) {\r\n\r\n\t\tif ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) {\r\n\r\n\t\t\t// if intrinsic data are not available, fallback to width/height\r\n\r\n\t\t\t_imageDimensions.width = image.naturalWidth || image.width;\r\n\t\t\t_imageDimensions.height = image.naturalHeight || image.height;\r\n\r\n\t\t} else if ( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) {\r\n\r\n\t\t\t_imageDimensions.width = image.displayWidth;\r\n\t\t\t_imageDimensions.height = image.displayHeight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_imageDimensions.width = image.width;\r\n\t\t\t_imageDimensions.height = image.height;\r\n\r\n\t\t}\r\n\r\n\t\treturn _imageDimensions;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.allocateTextureUnit = allocateTextureUnit;\r\n\tthis.resetTextureUnits = resetTextureUnits;\r\n\r\n\tthis.setTexture2D = setTexture2D;\r\n\tthis.setTexture2DArray = setTexture2DArray;\r\n\tthis.setTexture3D = setTexture3D;\r\n\tthis.setTextureCube = setTextureCube;\r\n\tthis.rebindTextures = rebindTextures;\r\n\tthis.setupRenderTarget = setupRenderTarget;\r\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\r\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\r\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\r\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\r\n\tthis.useMultisampledRTT = useMultisampledRTT;\r\n\r\n}\r\n\r\nexport { WebGLTextures };\r\n", "import { RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT1_Format, RGB_S3TC_DXT1_Format, DepthFormat, DepthStencilFormat, LuminanceAlphaFormat, LuminanceFormat, RedFormat, RGBAFormat, AlphaFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBAIntegerFormat, HalfFloatType, FloatType, UnsignedIntType, IntType, UnsignedShortType, ShortType, ByteType, UnsignedInt248Type, UnsignedShort5551Type, UnsignedShort4444Type, UnsignedByteType, RGBA_BPTC_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, NoColorSpace, SRGBTransfer, UnsignedInt5999Type, RGBFormat, UnsignedInt101111Type } from '../../constants.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\n\r\nfunction WebGLUtils( gl, extensions ) {\r\n\r\n\tfunction convert( p, colorSpace = NoColorSpace ) {\r\n\r\n\t\tlet extension;\r\n\r\n\t\tconst transfer = ColorManagement.getTransfer( colorSpace );\r\n\r\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\r\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === UnsignedInt5999Type ) return gl.UNSIGNED_INT_5_9_9_9_REV;\r\n\t\tif ( p === UnsignedInt101111Type ) return gl.UNSIGNED_INT_10F_11F_11F_REV;\r\n\r\n\t\tif ( p === ByteType ) return gl.BYTE;\r\n\t\tif ( p === ShortType ) return gl.SHORT;\r\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\r\n\t\tif ( p === IntType ) return gl.INT;\r\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\r\n\t\tif ( p === FloatType ) return gl.FLOAT;\r\n\t\tif ( p === HalfFloatType ) return gl.HALF_FLOAT;\r\n\r\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\r\n\t\tif ( p === RGBFormat ) return gl.RGB;\r\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\r\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\r\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\r\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\r\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\r\n\r\n\t\t// WebGL2 formats.\r\n\r\n\t\tif ( p === RedFormat ) return gl.RED;\r\n\t\tif ( p === RedIntegerFormat ) return gl.RED_INTEGER;\r\n\t\tif ( p === RGFormat ) return gl.RG;\r\n\t\tif ( p === RGIntegerFormat ) return gl.RG_INTEGER;\r\n\t\tif ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;\r\n\r\n\t\t// S3TC\r\n\r\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\r\n\r\n\t\t\tif ( transfer === SRGBTransfer ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// PVRTC\r\n\r\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\r\n\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// ETC\r\n\r\n\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\r\n\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\r\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// ASTC\r\n\r\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\r\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\r\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\r\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\r\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\r\n\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\r\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// BPTC\r\n\r\n\t\tif ( p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {\r\n\r\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\r\n\t\t\t\tif ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;\r\n\t\t\t\tif ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// RGTC\r\n\r\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\r\n\r\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\r\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\r\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\r\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( p === UnsignedInt248Type ) return gl.UNSIGNED_INT_24_8;\r\n\r\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\r\n\r\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\r\n\r\n\t}\r\n\r\n\treturn { convert: convert };\r\n\r\n}\r\n\r\n\r\nexport { WebGLUtils };\r\n", "import { PerspectiveCamera } from './PerspectiveCamera.js';\r\n\r\nclass ArrayCamera extends PerspectiveCamera {\r\n\r\n\tconstructor( array = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isArrayCamera = true;\r\n\r\n\t\tthis.cameras = array;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ArrayCamera };\r\n", "import { Object3D } from '../core/Object3D.js';\r\n\r\nclass Group extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isGroup = true;\r\n\r\n\t\tthis.type = 'Group';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Group };\r\n", "import { Vector3 } from '../../math/Vector3.js';\r\nimport { Group } from '../../objects/Group.js';\r\n\r\nconst _moveEvent = { type: 'move' };\r\n\r\nclass WebXRController {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis._targetRay = null;\r\n\t\tthis._grip = null;\r\n\t\tthis._hand = null;\r\n\r\n\t}\r\n\r\n\tgetHandSpace() {\r\n\r\n\t\tif ( this._hand === null ) {\r\n\r\n\t\t\tthis._hand = new Group();\r\n\t\t\tthis._hand.matrixAutoUpdate = false;\r\n\t\t\tthis._hand.visible = false;\r\n\r\n\t\t\tthis._hand.joints = {};\r\n\t\t\tthis._hand.inputState = { pinching: false };\r\n\r\n\t\t}\r\n\r\n\t\treturn this._hand;\r\n\r\n\t}\r\n\r\n\tgetTargetRaySpace() {\r\n\r\n\t\tif ( this._targetRay === null ) {\r\n\r\n\t\t\tthis._targetRay = new Group();\r\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\r\n\t\t\tthis._targetRay.visible = false;\r\n\t\t\tthis._targetRay.hasLinearVelocity = false;\r\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\r\n\t\t\tthis._targetRay.hasAngularVelocity = false;\r\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this._targetRay;\r\n\r\n\t}\r\n\r\n\tgetGripSpace() {\r\n\r\n\t\tif ( this._grip === null ) {\r\n\r\n\t\t\tthis._grip = new Group();\r\n\t\t\tthis._grip.matrixAutoUpdate = false;\r\n\t\t\tthis._grip.visible = false;\r\n\t\t\tthis._grip.hasLinearVelocity = false;\r\n\t\t\tthis._grip.linearVelocity = new Vector3();\r\n\t\t\tthis._grip.hasAngularVelocity = false;\r\n\t\t\tthis._grip.angularVelocity = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this._grip;\r\n\r\n\t}\r\n\r\n\tdispatchEvent( event ) {\r\n\r\n\t\tif ( this._targetRay !== null ) {\r\n\r\n\t\t\tthis._targetRay.dispatchEvent( event );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._grip !== null ) {\r\n\r\n\t\t\tthis._grip.dispatchEvent( event );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._hand !== null ) {\r\n\r\n\t\t\tthis._hand.dispatchEvent( event );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconnect( inputSource ) {\r\n\r\n\t\tif ( inputSource && inputSource.hand ) {\r\n\r\n\t\t\tconst hand = this._hand;\r\n\r\n\t\t\tif ( hand ) {\r\n\r\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\r\n\r\n\t\t\t\t\t// Initialize hand with joints when connected\r\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdisconnect( inputSource ) {\r\n\r\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\r\n\r\n\t\tif ( this._targetRay !== null ) {\r\n\r\n\t\t\tthis._targetRay.visible = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._grip !== null ) {\r\n\r\n\t\t\tthis._grip.visible = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._hand !== null ) {\r\n\r\n\t\t\tthis._hand.visible = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tupdate( inputSource, frame, referenceSpace ) {\r\n\r\n\t\tlet inputPose = null;\r\n\t\tlet gripPose = null;\r\n\t\tlet handPose = null;\r\n\r\n\t\tconst targetRay = this._targetRay;\r\n\t\tconst grip = this._grip;\r\n\t\tconst hand = this._hand;\r\n\r\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\r\n\r\n\t\t\tif ( hand && inputSource.hand ) {\r\n\r\n\t\t\t\thandPose = true;\r\n\r\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\r\n\r\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\r\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\r\n\r\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\r\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\r\n\r\n\t\t\t\t\tif ( jointPose !== null ) {\r\n\r\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\r\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\r\n\t\t\t\t\t\tjoint.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tjoint.visible = jointPose !== null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Custom events\r\n\r\n\t\t\t\t// Check pinchz\r\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\r\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\r\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\r\n\r\n\t\t\t\tconst distanceToPinch = 0.02;\r\n\t\t\t\tconst threshold = 0.005;\r\n\r\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\r\n\r\n\t\t\t\t\thand.inputState.pinching = false;\r\n\t\t\t\t\tthis.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'pinchend',\r\n\t\t\t\t\t\thandedness: inputSource.handedness,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\r\n\r\n\t\t\t\t\thand.inputState.pinching = true;\r\n\t\t\t\t\tthis.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'pinchstart',\r\n\t\t\t\t\t\thandedness: inputSource.handedness,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\r\n\r\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\r\n\r\n\t\t\t\t\tif ( gripPose !== null ) {\r\n\r\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\r\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\r\n\t\t\t\t\t\tgrip.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\r\n\r\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\r\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\r\n\r\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\r\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( targetRay !== null ) {\r\n\r\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\r\n\r\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\r\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\r\n\r\n\t\t\t\t\tinputPose = gripPose;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( inputPose !== null ) {\r\n\r\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\r\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\r\n\t\t\t\t\ttargetRay.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\r\n\r\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\r\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\r\n\r\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\r\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\r\n\t\tif ( targetRay !== null ) {\r\n\r\n\t\t\ttargetRay.visible = ( inputPose !== null );\r\n\r\n\t\t}\r\n\r\n\t\tif ( grip !== null ) {\r\n\r\n\t\t\tgrip.visible = ( gripPose !== null );\r\n\r\n\t\t}\r\n\r\n\t\tif ( hand !== null ) {\r\n\r\n\t\t\thand.visible = ( handPose !== null );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// private method\r\n\r\n\t_getHandJoint( hand, inputjoint ) {\r\n\r\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\r\n\r\n\t\t\tconst joint = new Group();\r\n\t\t\tjoint.matrixAutoUpdate = false;\r\n\t\t\tjoint.visible = false;\r\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\r\n\r\n\t\t\thand.add( joint );\r\n\r\n\t\t}\r\n\r\n\t\treturn hand.joints[ inputjoint.jointName ];\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { WebXRController };\r\n", "import { PlaneGeometry } from '../../geometries/PlaneGeometry.js';\r\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { Texture } from '../../textures/Texture.js';\r\n\r\nconst _occlusion_vertex = `\r\nvoid main() {\r\n\r\n\tgl_Position = vec4( position, 1.0 );\r\n\r\n}`;\r\n\r\nconst _occlusion_fragment = `\r\nuniform sampler2DArray depthColor;\r\nuniform float depthWidth;\r\nuniform float depthHeight;\r\n\r\nvoid main() {\r\n\r\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\r\n\r\n\tif ( coord.x >= 1.0 ) {\r\n\r\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\r\n\r\n\t} else {\r\n\r\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\r\n\r\n\t}\r\n\r\n}`;\r\n\r\nclass WebXRDepthSensing {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.texture = null;\r\n\t\tthis.mesh = null;\r\n\r\n\t\tthis.depthNear = 0;\r\n\t\tthis.depthFar = 0;\r\n\r\n\t}\r\n\r\n\tinit( renderer, depthData, renderState ) {\r\n\r\n\t\tif ( this.texture === null ) {\r\n\r\n\t\t\tconst texture = new Texture();\r\n\r\n\t\t\tconst texProps = renderer.properties.get( texture );\r\n\t\t\ttexProps.__webglTexture = depthData.texture;\r\n\r\n\t\t\tif ( ( depthData.depthNear != renderState.depthNear ) || ( depthData.depthFar != renderState.depthFar ) ) {\r\n\r\n\t\t\t\tthis.depthNear = depthData.depthNear;\r\n\t\t\t\tthis.depthFar = depthData.depthFar;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.texture = texture;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetMesh( cameraXR ) {\r\n\r\n\t\tif ( this.texture !== null ) {\r\n\r\n\t\t\tif ( this.mesh === null ) {\r\n\r\n\t\t\t\tconst viewport = cameraXR.cameras[ 0 ].viewport;\r\n\t\t\t\tconst material = new ShaderMaterial( {\r\n\t\t\t\t\tvertexShader: _occlusion_vertex,\r\n\t\t\t\t\tfragmentShader: _occlusion_fragment,\r\n\t\t\t\t\tuniforms: {\r\n\t\t\t\t\t\tdepthColor: { value: this.texture },\r\n\t\t\t\t\t\tdepthWidth: { value: viewport.z },\r\n\t\t\t\t\t\tdepthHeight: { value: viewport.w }\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tthis.mesh = new Mesh( new PlaneGeometry( 20, 20 ), material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this.mesh;\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.texture = null;\r\n\t\tthis.mesh = null;\r\n\r\n\t}\r\n\r\n\tgetDepthTexture() {\r\n\r\n\t\treturn this.texture;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebXRDepthSensing };\r\n", "import { ArrayCamera } from '../../cameras/ArrayCamera.js';\r\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\r\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { RAD2DEG } from '../../math/MathUtils.js';\r\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\r\nimport { WebGLRenderTarget } from '../WebGLRenderTarget.js';\r\nimport { WebXRController } from './WebXRController.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport { DepthFormat, DepthStencilFormat, RGBAFormat, UnsignedByteType, UnsignedIntType, UnsignedInt248Type } from '../../constants.js';\r\nimport { WebXRDepthSensing } from './WebXRDepthSensing.js';\r\n\r\nclass WebXRManager extends EventDispatcher {\r\n\r\n\tconstructor( renderer, gl ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tlet session = null;\r\n\r\n\t\tlet framebufferScaleFactor = 1.0;\r\n\r\n\t\tlet referenceSpace = null;\r\n\t\tlet referenceSpaceType = 'local-floor';\r\n\t\t// Set default foveation to maximum.\r\n\t\tlet foveation = 1.0;\r\n\t\tlet customReferenceSpace = null;\r\n\r\n\t\tlet pose = null;\r\n\t\tlet glBinding = null;\r\n\t\tlet glProjLayer = null;\r\n\t\tlet glBaseLayer = null;\r\n\t\tlet xrFrame = null;\r\n\r\n\t\tconst depthSensing = new WebXRDepthSensing();\r\n\t\tconst attributes = gl.getContextAttributes();\r\n\r\n\t\tlet initialRenderTarget = null;\r\n\t\tlet newRenderTarget = null;\r\n\r\n\t\tconst controllers = [];\r\n\t\tconst controllerInputSources = [];\r\n\r\n\t\tconst currentSize = new Vector2();\r\n\t\tlet currentPixelRatio = null;\r\n\r\n\t\t//\r\n\r\n\t\tconst cameraL = new PerspectiveCamera();\r\n\t\tcameraL.layers.enable( 1 );\r\n\t\tcameraL.viewport = new Vector4();\r\n\r\n\t\tconst cameraR = new PerspectiveCamera();\r\n\t\tcameraR.layers.enable( 2 );\r\n\t\tcameraR.viewport = new Vector4();\r\n\r\n\t\tconst cameras = [ cameraL, cameraR ];\r\n\r\n\t\tconst cameraXR = new ArrayCamera();\r\n\t\tcameraXR.layers.enable( 1 );\r\n\t\tcameraXR.layers.enable( 2 );\r\n\r\n\t\tlet _currentDepthNear = null;\r\n\t\tlet _currentDepthFar = null;\r\n\r\n\t\t//\r\n\r\n\t\tthis.cameraAutoUpdate = true;\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.isPresenting = false;\r\n\r\n\t\tthis.controllerAutoUpdate = true;\r\n\r\n\t\tthis.getController = function ( index ) {\r\n\r\n\t\t\tlet controller = controllers[ index ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new WebXRController();\r\n\t\t\t\tcontrollers[ index ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller.getTargetRaySpace();\r\n\r\n\t\t};\r\n\r\n\t\tthis.getControllerGrip = function ( index ) {\r\n\r\n\t\t\tlet controller = controllers[ index ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new WebXRController();\r\n\t\t\t\tcontrollers[ index ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller.getGripSpace();\r\n\r\n\t\t};\r\n\r\n\t\tthis.getHand = function ( index ) {\r\n\r\n\t\t\tlet controller = controllers[ index ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new WebXRController();\r\n\t\t\t\tcontrollers[ index ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller.getHandSpace();\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tfunction onSessionEvent( event ) {\r\n\r\n\t\t\tconst controllerIndex = controllerInputSources.indexOf( event.inputSource );\r\n\r\n\t\t\tif ( controllerIndex === - 1 ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst controller = controllers[ controllerIndex ];\r\n\r\n\t\t\tif ( controller !== undefined ) {\r\n\r\n\t\t\t\tcontroller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );\r\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction onSessionEnd() {\r\n\r\n\t\t\tsession.removeEventListener( 'select', onSessionEvent );\r\n\t\t\tsession.removeEventListener( 'selectstart', onSessionEvent );\r\n\t\t\tsession.removeEventListener( 'selectend', onSessionEvent );\r\n\t\t\tsession.removeEventListener( 'squeeze', onSessionEvent );\r\n\t\t\tsession.removeEventListener( 'squeezestart', onSessionEvent );\r\n\t\t\tsession.removeEventListener( 'squeezeend', onSessionEvent );\r\n\t\t\tsession.removeEventListener( 'end', onSessionEnd );\r\n\t\t\tsession.removeEventListener( 'inputsourceschange', onInputSourcesChange );\r\n\r\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\r\n\r\n\t\t\t\tif ( inputSource === null ) continue;\r\n\r\n\t\t\t\tcontrollerInputSources[ i ] = null;\r\n\r\n\t\t\t\tif ( controllers[ i ] ) controllers[ i ].disconnect( inputSource );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_currentDepthNear = null;\r\n\t\t\t_currentDepthFar = null;\r\n\r\n\t\t\tdepthSensing.reset();\r\n\r\n\t\t\t// restore framebuffer/rendering state\r\n\r\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\r\n\r\n\t\t\tglBaseLayer = null;\r\n\t\t\tglProjLayer = null;\r\n\t\t\tglBinding = null;\r\n\t\t\tsession = null;\r\n\t\t\tnewRenderTarget = null;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tanimation.stop();\r\n\r\n\t\t\tscope.isPresenting = false;\r\n\r\n\t\t\trenderer.setPixelRatio( currentPixelRatio );\r\n\t\t\trenderer.setSize( currentSize.width, currentSize.height, false );\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\r\n\r\n\t\t\tframebufferScaleFactor = value;\r\n\r\n\t\t\tif ( scope.isPresenting === true ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpaceType = function ( value ) {\r\n\r\n\t\t\treferenceSpaceType = value;\r\n\r\n\t\t\tif ( scope.isPresenting === true ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.getReferenceSpace = function () {\r\n\r\n\t\t\treturn customReferenceSpace || referenceSpace;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpace = function ( space ) {\r\n\r\n\t\t\tcustomReferenceSpace = space;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getBaseLayer = function () {\r\n\r\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getBinding = function () {\r\n\r\n\t\t\treturn glBinding;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getFrame = function () {\r\n\r\n\t\t\treturn xrFrame;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSession = function () {\r\n\r\n\t\t\treturn session;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSession = async function ( value ) {\r\n\r\n\t\t\tsession = value;\r\n\r\n\t\t\tif ( session !== null ) {\r\n\r\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\r\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\r\n\r\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\r\n\r\n\t\t\t\t\tawait gl.makeXRCompatible();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\r\n\t\t\t\trenderer.getSize( currentSize );\r\n\r\n\t\t\t\t// Check that the browser implements the necessary APIs to use an\r\n\t\t\t\t// XRProjectionLayer rather than an XRWebGLLayer\r\n\t\t\t\tconst useLayers = typeof XRWebGLBinding !== 'undefined' && 'createProjectionLayer' in XRWebGLBinding.prototype;\r\n\r\n\t\t\t\tif ( ! useLayers ) {\r\n\r\n\t\t\t\t\tconst layerInit = {\r\n\t\t\t\t\t\tantialias: attributes.antialias,\r\n\t\t\t\t\t\talpha: true,\r\n\t\t\t\t\t\tdepth: attributes.depth,\r\n\t\t\t\t\t\tstencil: attributes.stencil,\r\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\r\n\r\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\r\n\r\n\t\t\t\t\trenderer.setPixelRatio( 1 );\r\n\t\t\t\t\trenderer.setSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false );\r\n\r\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\r\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\r\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tformat: RGBAFormat,\r\n\t\t\t\t\t\t\ttype: UnsignedByteType,\r\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\r\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlet depthFormat = null;\r\n\t\t\t\t\tlet depthType = null;\r\n\t\t\t\t\tlet glDepthFormat = null;\r\n\r\n\t\t\t\t\tif ( attributes.depth ) {\r\n\r\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\r\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\r\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst projectionlayerInit = {\r\n\t\t\t\t\t\tcolorFormat: gl.RGBA8,\r\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\r\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\r\n\r\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\r\n\r\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\r\n\r\n\t\t\t\t\trenderer.setPixelRatio( 1 );\r\n\t\t\t\t\trenderer.setSize( glProjLayer.textureWidth, glProjLayer.textureHeight, false );\r\n\r\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\r\n\t\t\t\t\t\tglProjLayer.textureWidth,\r\n\t\t\t\t\t\tglProjLayer.textureHeight,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tformat: RGBAFormat,\r\n\t\t\t\t\t\t\ttype: UnsignedByteType,\r\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\r\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\r\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\r\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0,\r\n\t\t\t\t\t\t\tresolveDepthBuffer: ( glProjLayer.ignoreDepthValues === false )\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\r\n\r\n\t\t\t\tthis.setFoveation( foveation );\r\n\r\n\t\t\t\tcustomReferenceSpace = null;\r\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\r\n\r\n\t\t\t\tanimation.setContext( session );\r\n\t\t\t\tanimation.start();\r\n\r\n\t\t\t\tscope.isPresenting = true;\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.getEnvironmentBlendMode = function () {\r\n\r\n\t\t\tif ( session !== null ) {\r\n\r\n\t\t\t\treturn session.environmentBlendMode;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDepthTexture = function () {\r\n\r\n\t\t\treturn depthSensing.getDepthTexture();\r\n\r\n\t\t};\r\n\r\n\t\tfunction onInputSourcesChange( event ) {\r\n\r\n\t\t\t// Notify disconnected\r\n\r\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\r\n\r\n\t\t\t\tconst inputSource = event.removed[ i ];\r\n\t\t\t\tconst index = controllerInputSources.indexOf( inputSource );\r\n\r\n\t\t\t\tif ( index >= 0 ) {\r\n\r\n\t\t\t\t\tcontrollerInputSources[ index ] = null;\r\n\t\t\t\t\tif ( controllers[ index ] ) controllers[ index ].disconnect( inputSource );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Notify connected\r\n\r\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\r\n\r\n\t\t\t\tconst inputSource = event.added[ i ];\r\n\r\n\t\t\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\r\n\r\n\t\t\t\tif ( controllerIndex === - 1 ) {\r\n\r\n\t\t\t\t\t// Assign input source a controller that currently has no input source\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( i >= controllerInputSources.length ) {\r\n\r\n\t\t\t\t\t\t\tcontrollerInputSources.push( inputSource );\r\n\t\t\t\t\t\t\tcontrollerIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\r\n\r\n\t\t\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\r\n\t\t\t\t\t\t\tcontrollerIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If all controllers do currently receive input we ignore new ones\r\n\r\n\t\t\t\t\tif ( controllerIndex === - 1 ) break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst controller = controllers[ controllerIndex ];\r\n\r\n\t\t\t\tif ( controller ) {\r\n\r\n\t\t\t\t\tcontroller.connect( inputSource );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst cameraLPos = new Vector3();\r\n\t\tconst cameraRPos = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\r\n\t\t * the cameras' projection and world matrices have already been set.\r\n\t\t * And that near and far planes are identical for both cameras.\r\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\r\n\t\t */\r\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\r\n\r\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\r\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\r\n\r\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\r\n\r\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\r\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\r\n\r\n\t\t\t// VR systems will have identical far and near planes, and\r\n\t\t\t// most likely identical top and bottom frustum extents.\r\n\t\t\t// Use the left camera for these values.\r\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\r\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\r\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\r\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\r\n\r\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\r\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\r\n\t\t\tconst left = near * leftFov;\r\n\t\t\tconst right = near * rightFov;\r\n\r\n\t\t\t// Calculate the new camera's position offset from the\r\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\r\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\r\n\t\t\tconst xOffset = zOffset * - leftFov;\r\n\r\n\t\t\t// TODO: Better way to apply this offset?\r\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\r\n\t\t\tcamera.translateX( xOffset );\r\n\t\t\tcamera.translateZ( zOffset );\r\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\r\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\r\n\r\n\t\t\t// Check if the projection uses an infinite far plane.\r\n\t\t\tif ( projL[ 10 ] === - 1.0 ) {\r\n\r\n\t\t\t\t// Use the projection matrix from the left eye.\r\n\t\t\t\t// The camera offset is sufficient to include the view volumes\r\n\t\t\t\t// of both eyes (assuming symmetric projections).\r\n\t\t\t\tcamera.projectionMatrix.copy( cameraL.projectionMatrix );\r\n\t\t\t\tcamera.projectionMatrixInverse.copy( cameraL.projectionMatrixInverse );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Find the union of the frustum values of the cameras and scale\r\n\t\t\t\t// the values so that the near plane's position does not change in world space,\r\n\t\t\t\t// although must now be relative to the new union camera.\r\n\t\t\t\tconst near2 = near + zOffset;\r\n\t\t\t\tconst far2 = far + zOffset;\r\n\t\t\t\tconst left2 = left - xOffset;\r\n\t\t\t\tconst right2 = right + ( ipd - xOffset );\r\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\r\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\r\n\r\n\t\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\r\n\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCamera( camera, parent ) {\r\n\r\n\t\t\tif ( parent === null ) {\r\n\r\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateCamera = function ( camera ) {\r\n\r\n\t\t\tif ( session === null ) return;\r\n\r\n\t\t\tlet depthNear = camera.near;\r\n\t\t\tlet depthFar = camera.far;\r\n\r\n\t\t\tif ( depthSensing.texture !== null ) {\r\n\r\n\t\t\t\tif ( depthSensing.depthNear > 0 ) depthNear = depthSensing.depthNear;\r\n\t\t\t\tif ( depthSensing.depthFar > 0 ) depthFar = depthSensing.depthFar;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcameraXR.near = cameraR.near = cameraL.near = depthNear;\r\n\t\t\tcameraXR.far = cameraR.far = cameraL.far = depthFar;\r\n\r\n\t\t\tif ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {\r\n\r\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\r\n\r\n\t\t\t\tsession.updateRenderState( {\r\n\t\t\t\t\tdepthNear: cameraXR.near,\r\n\t\t\t\t\tdepthFar: cameraXR.far\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t_currentDepthNear = cameraXR.near;\r\n\t\t\t\t_currentDepthFar = cameraXR.far;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst parent = camera.parent;\r\n\t\t\tconst cameras = cameraXR.cameras;\r\n\r\n\t\t\tupdateCamera( cameraXR, parent );\r\n\r\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tupdateCamera( cameras[ i ], parent );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update projection matrix for proper view frustum culling\r\n\r\n\t\t\tif ( cameras.length === 2 ) {\r\n\r\n\t\t\t\tsetProjectionFromUnion( cameraXR, cameraL, cameraR );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assume single camera setup (AR)\r\n\r\n\t\t\t\tcameraXR.projectionMatrix.copy( cameraL.projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update user camera and its children\r\n\r\n\t\t\tupdateUserCamera( camera, cameraXR, parent );\r\n\r\n\t\t};\r\n\r\n\t\tfunction updateUserCamera( camera, cameraXR, parent ) {\r\n\r\n\t\t\tif ( parent === null ) {\r\n\r\n\t\t\t\tcamera.matrix.copy( cameraXR.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcamera.matrix.copy( parent.matrixWorld );\r\n\t\t\t\tcamera.matrix.invert();\r\n\t\t\t\tcamera.matrix.multiply( cameraXR.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\r\n\t\t\tcamera.updateMatrixWorld( true );\r\n\r\n\t\t\tcamera.projectionMatrix.copy( cameraXR.projectionMatrix );\r\n\t\t\tcamera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );\r\n\r\n\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\tcamera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );\r\n\t\t\t\tcamera.zoom = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.getCamera = function () {\r\n\r\n\t\t\treturn cameraXR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getFoveation = function () {\r\n\r\n\t\t\tif ( glProjLayer === null && glBaseLayer === null ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn foveation;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setFoveation = function ( value ) {\r\n\r\n\t\t\t// 0 = no foveation = full resolution\r\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\r\n\r\n\t\t\tfoveation = value;\r\n\r\n\t\t\tif ( glProjLayer !== null ) {\r\n\r\n\t\t\t\tglProjLayer.fixedFoveation = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\r\n\r\n\t\t\t\tglBaseLayer.fixedFoveation = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.hasDepthSensing = function () {\r\n\r\n\t\t\treturn depthSensing.texture !== null;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDepthSensingMesh = function () {\r\n\r\n\t\t\treturn depthSensing.getMesh( cameraXR );\r\n\r\n\t\t};\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tlet onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tpose = frame.getViewerPose( customReferenceSpace || referenceSpace );\r\n\t\t\txrFrame = frame;\r\n\r\n\t\t\tif ( pose !== null ) {\r\n\r\n\t\t\t\tconst views = pose.views;\r\n\r\n\t\t\t\tif ( glBaseLayer !== null ) {\r\n\r\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\r\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet cameraXRNeedsUpdate = false;\r\n\r\n\t\t\t\t// check if it's necessary to rebuild cameraXR's camera list\r\n\r\n\t\t\t\tif ( views.length !== cameraXR.cameras.length ) {\r\n\r\n\t\t\t\t\tcameraXR.cameras.length = 0;\r\n\t\t\t\t\tcameraXRNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\r\n\r\n\t\t\t\t\tconst view = views[ i ];\r\n\r\n\t\t\t\t\tlet viewport = null;\r\n\r\n\t\t\t\t\tif ( glBaseLayer !== null ) {\r\n\r\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\r\n\t\t\t\t\t\tviewport = glSubImage.viewport;\r\n\r\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\r\n\t\t\t\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\r\n\t\t\t\t\t\t\t\tnewRenderTarget,\r\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\r\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\r\n\r\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet camera = cameras[ i ];\r\n\r\n\t\t\t\t\tif ( camera === undefined ) {\r\n\r\n\t\t\t\t\t\tcamera = new PerspectiveCamera();\r\n\t\t\t\t\t\tcamera.layers.enable( i );\r\n\t\t\t\t\t\tcamera.viewport = new Vector4();\r\n\t\t\t\t\t\tcameras[ i ] = camera;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\r\n\t\t\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\r\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\r\n\t\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\r\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\r\n\r\n\t\t\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\t\t\tcameraXR.matrix.copy( camera.matrix );\r\n\t\t\t\t\t\tcameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( cameraXRNeedsUpdate === true ) {\r\n\r\n\t\t\t\t\t\tcameraXR.cameras.push( camera );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tconst enabledFeatures = session.enabledFeatures;\r\n\r\n\t\t\t\tif ( enabledFeatures && enabledFeatures.includes( 'depth-sensing' ) ) {\r\n\r\n\t\t\t\t\tconst depthData = glBinding.getDepthInformation( views[ 0 ] );\r\n\r\n\t\t\t\t\tif ( depthData && depthData.isValid && depthData.texture ) {\r\n\r\n\t\t\t\t\t\tdepthSensing.init( renderer, depthData, session.renderState );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( scope.controllerAutoUpdate ) {\r\n\r\n\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\t\tconst inputSource = controllerInputSources[ i ];\r\n\t\t\t\t\tconst controller = controllers[ i ];\r\n\r\n\t\t\t\t\tif ( inputSource !== null && controller !== undefined ) {\r\n\r\n\t\t\t\t\t\tcontroller.update( inputSource, frame, customReferenceSpace || referenceSpace );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\r\n\r\n\t\t\tif ( frame.detectedPlanes ) {\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'planesdetected', data: frame } );\r\n\r\n\t\t\t}\r\n\r\n\t\t\txrFrame = null;\r\n\r\n\t\t}\r\n\r\n\t\tconst animation = new WebGLAnimation();\r\n\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebXRManager };\r\n", "import { BackSide } from '../../constants.js';\r\nimport { getUnlitUniformColorSpace } from '../shaders/UniformsUtils.js';\r\nimport { Euler } from '../../math/Euler.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\n\r\nconst _e1 = /*@__PURE__*/ new Euler();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\n\r\nfunction WebGLMaterials( renderer, properties ) {\r\n\r\n\tfunction refreshTransformUniform( map, uniform ) {\r\n\r\n\t\tif ( map.matrixAutoUpdate === true ) {\r\n\r\n\t\t\tmap.updateMatrix();\r\n\r\n\t\t}\r\n\r\n\t\tuniform.value.copy( map.matrix );\r\n\r\n\t}\r\n\r\n\tfunction refreshFogUniforms( uniforms, fog ) {\r\n\r\n\t\tfog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );\r\n\r\n\t\tif ( fog.isFog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog.isFogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\r\n\r\n\t\tif ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshLambertMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshToonMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsToon( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshPhongMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsPhong( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshStandardMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( material.isMeshMatcapMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsMatcap( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshDepthMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshDistanceMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsDistance( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshNormalMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\r\n\t\t} else if ( material.isLineBasicMaterial ) {\r\n\r\n\t\t\trefreshUniformsLine( uniforms, material );\r\n\r\n\t\t\tif ( material.isLineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsDash( uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( material.isPointsMaterial ) {\r\n\r\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\r\n\r\n\t\t} else if ( material.isSpriteMaterial ) {\r\n\r\n\t\t\trefreshUniformsSprites( uniforms, material );\r\n\r\n\t\t} else if ( material.isShadowMaterial ) {\r\n\r\n\t\t\tuniforms.color.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t} else if ( material.isShaderMaterial ) {\r\n\r\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsCommon( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tif ( material.color ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissive ) {\r\n\r\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\r\n\t\t\trefreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );\r\n\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\tuniforms.bumpScale.value *= - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\r\n\t\t\trefreshTransformUniform( material.normalMap, uniforms.normalMapTransform );\r\n\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\tuniforms.normalScale.value.negate();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\r\n\t\t\trefreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );\r\n\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\trefreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.specularMap ) {\r\n\r\n\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\t\trefreshTransformUniform( material.specularMap, uniforms.specularMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaTest > 0 ) {\r\n\r\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\r\n\r\n\t\t}\r\n\r\n\t\tconst materialProperties = properties.get( material );\r\n\r\n\t\tconst envMap = materialProperties.envMap;\r\n\t\tconst envMapRotation = materialProperties.envMapRotation;\r\n\r\n\t\tif ( envMap ) {\r\n\r\n\t\t\tuniforms.envMap.value = envMap;\r\n\r\n\t\t\t_e1.copy( envMapRotation );\r\n\r\n\t\t\t// accommodate left-handed frame\r\n\t\t\t_e1.x *= - 1; _e1.y *= - 1; _e1.z *= - 1;\r\n\r\n\t\t\tif ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) {\r\n\r\n\t\t\t\t// environment maps which are not cube render targets or PMREMs follow a different convention\r\n\t\t\t\t_e1.y *= - 1;\r\n\t\t\t\t_e1.z *= - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.envMapRotation.value.setFromMatrix4( _m1.makeRotationFromEuler( _e1 ) );\r\n\r\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\tuniforms.ior.value = material.ior;\r\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t\trefreshTransformUniform( material.lightMap, uniforms.lightMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.aoMap ) {\r\n\r\n\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t\trefreshTransformUniform( material.aoMap, uniforms.aoMapTransform );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLine( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDash( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\r\n\r\n\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size * pixelRatio;\r\n\t\tuniforms.scale.value = height * 0.5;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\trefreshTransformUniform( material.map, uniforms.uvTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaTest > 0 ) {\r\n\r\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsSprites( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.rotation.value = material.rotation;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaTest > 0 ) {\r\n\r\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhong( uniforms, material ) {\r\n\r\n\t\tuniforms.specular.value.copy( material.specular );\r\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsToon( uniforms, material ) {\r\n\r\n\t\tif ( material.gradientMap ) {\r\n\r\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsStandard( uniforms, material ) {\r\n\r\n\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t\trefreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.roughness.value = material.roughness;\r\n\r\n\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t\trefreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.envMap ) {\r\n\r\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\r\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\r\n\r\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\r\n\r\n\t\tif ( material.sheen > 0 ) {\r\n\r\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\r\n\r\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\r\n\r\n\t\t\tif ( material.sheenColorMap ) {\r\n\r\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.sheenRoughnessMap ) {\r\n\r\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.clearcoat > 0 ) {\r\n\r\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\r\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\r\n\r\n\t\t\tif ( material.clearcoatMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.clearcoatRoughnessMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );\r\n\r\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\r\n\r\n\t\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.dispersion > 0 ) {\r\n\r\n\t\t\tuniforms.dispersion.value = material.dispersion;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.iridescence > 0 ) {\r\n\r\n\t\t\tuniforms.iridescence.value = material.iridescence;\r\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\r\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\r\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\r\n\r\n\t\t\tif ( material.iridescenceMap ) {\r\n\r\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.iridescenceThicknessMap ) {\r\n\r\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.transmission > 0 ) {\r\n\r\n\t\t\tuniforms.transmission.value = material.transmission;\r\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\r\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\r\n\r\n\t\t\tif ( material.transmissionMap ) {\r\n\r\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.thickness.value = material.thickness;\r\n\r\n\t\t\tif ( material.thicknessMap ) {\r\n\r\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\r\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.anisotropy > 0 ) {\r\n\r\n\t\t\tuniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\r\n\r\n\t\t\tif ( material.anisotropyMap ) {\r\n\r\n\t\t\t\tuniforms.anisotropyMap.value = material.anisotropyMap;\r\n\r\n\t\t\t\trefreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\r\n\t\tuniforms.specularColor.value.copy( material.specularColor );\r\n\r\n\t\tif ( material.specularColorMap ) {\r\n\r\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\r\n\r\n\t\t\trefreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.specularIntensityMap ) {\r\n\r\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\r\n\r\n\t\t\trefreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsMatcap( uniforms, material ) {\r\n\r\n\t\tif ( material.matcap ) {\r\n\r\n\t\t\tuniforms.matcap.value = material.matcap;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDistance( uniforms, material ) {\r\n\r\n\t\tconst light = properties.get( material ).light;\r\n\r\n\t\tuniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );\r\n\t\tuniforms.nearDistance.value = light.shadow.camera.near;\r\n\t\tuniforms.farDistance.value = light.shadow.camera.far;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\trefreshFogUniforms: refreshFogUniforms,\r\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLMaterials };\r\n", "function WebGLUniformsGroups( gl, info, capabilities, state ) {\r\n\r\n\tlet buffers = {};\r\n\tlet updateList = {};\r\n\tlet allocatedBindingPoints = [];\r\n\r\n\tconst maxBindingPoints = gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ); // binding points are global whereas block indices are per shader program\r\n\r\n\tfunction bind( uniformsGroup, program ) {\r\n\r\n\t\tconst webglProgram = program.program;\r\n\t\tstate.uniformBlockBinding( uniformsGroup, webglProgram );\r\n\r\n\t}\r\n\r\n\tfunction update( uniformsGroup, program ) {\r\n\r\n\t\tlet buffer = buffers[ uniformsGroup.id ];\r\n\r\n\t\tif ( buffer === undefined ) {\r\n\r\n\t\t\tprepareUniformsGroup( uniformsGroup );\r\n\r\n\t\t\tbuffer = createBuffer( uniformsGroup );\r\n\t\t\tbuffers[ uniformsGroup.id ] = buffer;\r\n\r\n\t\t\tuniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );\r\n\r\n\t\t}\r\n\r\n\t\t// ensure to update the binding points/block indices mapping for this program\r\n\r\n\t\tconst webglProgram = program.program;\r\n\t\tstate.updateUBOMapping( uniformsGroup, webglProgram );\r\n\r\n\t\t// update UBO once per frame\r\n\r\n\t\tconst frame = info.render.frame;\r\n\r\n\t\tif ( updateList[ uniformsGroup.id ] !== frame ) {\r\n\r\n\t\t\tupdateBufferData( uniformsGroup );\r\n\r\n\t\t\tupdateList[ uniformsGroup.id ] = frame;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction createBuffer( uniformsGroup ) {\r\n\r\n\t\t// the setup of an UBO is independent of a particular shader program but global\r\n\r\n\t\tconst bindingPointIndex = allocateBindingPointIndex();\r\n\t\tuniformsGroup.__bindingPointIndex = bindingPointIndex;\r\n\r\n\t\tconst buffer = gl.createBuffer();\r\n\t\tconst size = uniformsGroup.__size;\r\n\t\tconst usage = uniformsGroup.usage;\r\n\r\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\r\n\t\tgl.bufferData( gl.UNIFORM_BUFFER, size, usage );\r\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\r\n\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );\r\n\r\n\t\treturn buffer;\r\n\r\n\t}\r\n\r\n\tfunction allocateBindingPointIndex() {\r\n\r\n\t\tfor ( let i = 0; i < maxBindingPoints; i ++ ) {\r\n\r\n\t\t\tif ( allocatedBindingPoints.indexOf( i ) === - 1 ) {\r\n\r\n\t\t\t\tallocatedBindingPoints.push( i );\r\n\t\t\t\treturn i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconsole.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n\tfunction updateBufferData( uniformsGroup ) {\r\n\r\n\t\tconst buffer = buffers[ uniformsGroup.id ];\r\n\t\tconst uniforms = uniformsGroup.uniforms;\r\n\t\tconst cache = uniformsGroup.__cache;\r\n\r\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\r\n\r\n\t\tfor ( let i = 0, il = uniforms.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];\r\n\r\n\t\t\tfor ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tconst uniform = uniformArray[ j ];\r\n\r\n\t\t\t\tif ( hasUniformChanged( uniform, i, j, cache ) === true ) {\r\n\r\n\t\t\t\t\tconst offset = uniform.__offset;\r\n\r\n\t\t\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\r\n\r\n\t\t\t\t\tlet arrayOffset = 0;\r\n\r\n\t\t\t\t\tfor ( let k = 0; k < values.length; k ++ ) {\r\n\r\n\t\t\t\t\t\tconst value = values[ k ];\r\n\r\n\t\t\t\t\t\tconst info = getUniformSize( value );\r\n\r\n\t\t\t\t\t\t// TODO add integer and struct support\r\n\t\t\t\t\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\r\n\r\n\t\t\t\t\t\t\tuniform.__data[ 0 ] = value;\r\n\t\t\t\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );\r\n\r\n\t\t\t\t\t\t} else if ( value.isMatrix3 ) {\r\n\r\n\t\t\t\t\t\t\t// manually converting 3x3 to 3x4\r\n\r\n\t\t\t\t\t\t\tuniform.__data[ 0 ] = value.elements[ 0 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 1 ] = value.elements[ 1 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 2 ] = value.elements[ 2 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 3 ] = 0;\r\n\t\t\t\t\t\t\tuniform.__data[ 4 ] = value.elements[ 3 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 5 ] = value.elements[ 4 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 6 ] = value.elements[ 5 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 7 ] = 0;\r\n\t\t\t\t\t\t\tuniform.__data[ 8 ] = value.elements[ 6 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 9 ] = value.elements[ 7 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 10 ] = value.elements[ 8 ];\r\n\t\t\t\t\t\t\tuniform.__data[ 11 ] = 0;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvalue.toArray( uniform.__data, arrayOffset );\r\n\r\n\t\t\t\t\t\t\tarrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\r\n\r\n\t}\r\n\r\n\tfunction hasUniformChanged( uniform, index, indexArray, cache ) {\r\n\r\n\t\tconst value = uniform.value;\r\n\t\tconst indexString = index + '_' + indexArray;\r\n\r\n\t\tif ( cache[ indexString ] === undefined ) {\r\n\r\n\t\t\t// cache entry does not exist so far\r\n\r\n\t\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\r\n\r\n\t\t\t\tcache[ indexString ] = value;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcache[ indexString ] = value.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst cachedObject = cache[ indexString ];\r\n\r\n\t\t\t// compare current value with cached entry\r\n\r\n\t\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\r\n\r\n\t\t\t\tif ( cachedObject !== value ) {\r\n\r\n\t\t\t\t\tcache[ indexString ] = value;\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( cachedObject.equals( value ) === false ) {\r\n\r\n\t\t\t\t\tcachedObject.copy( value );\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction prepareUniformsGroup( uniformsGroup ) {\r\n\r\n\t\t// determine total buffer size according to the STD140 layout\r\n\t\t// Hint: STD140 is the only supported layout in WebGL 2\r\n\r\n\t\tconst uniforms = uniformsGroup.uniforms;\r\n\r\n\t\tlet offset = 0; // global buffer offset in bytes\r\n\t\tconst chunkSize = 16; // size of a chunk in bytes\r\n\r\n\t\tfor ( let i = 0, l = uniforms.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];\r\n\r\n\t\t\tfor ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tconst uniform = uniformArray[ j ];\r\n\r\n\t\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\r\n\r\n\t\t\t\tfor ( let k = 0, kl = values.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\tconst value = values[ k ];\r\n\r\n\t\t\t\t\tconst info = getUniformSize( value );\r\n\r\n\t\t\t\t\tconst chunkOffset = offset % chunkSize; // offset in the current chunk\r\n\t\t\t\t\tconst chunkPadding = chunkOffset % info.boundary; // required padding to match boundary\r\n\t\t\t\t\tconst chunkStart = chunkOffset + chunkPadding; // the start position in the current chunk for the data\r\n\r\n\t\t\t\t\toffset += chunkPadding;\r\n\r\n\t\t\t\t\t// Check for chunk overflow\r\n\t\t\t\t\tif ( chunkStart !== 0 && ( chunkSize - chunkStart ) < info.storage ) {\r\n\r\n\t\t\t\t\t\t// Add padding and adjust offset\r\n\t\t\t\t\t\toffset += ( chunkSize - chunkStart );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the following two properties will be used for partial buffer updates\r\n\t\t\t\t\tuniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );\r\n\t\t\t\t\tuniform.__offset = offset;\r\n\r\n\t\t\t\t\t// Update the global offset\r\n\t\t\t\t\toffset += info.storage;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// ensure correct final padding\r\n\r\n\t\tconst chunkOffset = offset % chunkSize;\r\n\r\n\t\tif ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );\r\n\r\n\t\t//\r\n\r\n\t\tuniformsGroup.__size = offset;\r\n\t\tuniformsGroup.__cache = {};\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tfunction getUniformSize( value ) {\r\n\r\n\t\tconst info = {\r\n\t\t\tboundary: 0, // bytes\r\n\t\t\tstorage: 0 // bytes\r\n\t\t};\r\n\r\n\t\t// determine sizes according to STD140\r\n\r\n\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\r\n\r\n\t\t\t// float/int/bool\r\n\r\n\t\t\tinfo.boundary = 4;\r\n\t\t\tinfo.storage = 4;\r\n\r\n\t\t} else if ( value.isVector2 ) {\r\n\r\n\t\t\t// vec2\r\n\r\n\t\t\tinfo.boundary = 8;\r\n\t\t\tinfo.storage = 8;\r\n\r\n\t\t} else if ( value.isVector3 || value.isColor ) {\r\n\r\n\t\t\t// vec3\r\n\r\n\t\t\tinfo.boundary = 16;\r\n\t\t\tinfo.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\r\n\r\n\t\t} else if ( value.isVector4 ) {\r\n\r\n\t\t\t// vec4\r\n\r\n\t\t\tinfo.boundary = 16;\r\n\t\t\tinfo.storage = 16;\r\n\r\n\t\t} else if ( value.isMatrix3 ) {\r\n\r\n\t\t\t// mat3 (in STD140 a 3x3 matrix is represented as 3x4)\r\n\r\n\t\t\tinfo.boundary = 48;\r\n\t\t\tinfo.storage = 48;\r\n\r\n\t\t} else if ( value.isMatrix4 ) {\r\n\r\n\t\t\t// mat4\r\n\r\n\t\t\tinfo.boundary = 64;\r\n\t\t\tinfo.storage = 64;\r\n\r\n\t\t} else if ( value.isTexture ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );\r\n\r\n\t\t}\r\n\r\n\t\treturn info;\r\n\r\n\t}\r\n\r\n\tfunction onUniformsGroupsDispose( event ) {\r\n\r\n\t\tconst uniformsGroup = event.target;\r\n\r\n\t\tuniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );\r\n\r\n\t\tconst index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );\r\n\t\tallocatedBindingPoints.splice( index, 1 );\r\n\r\n\t\tgl.deleteBuffer( buffers[ uniformsGroup.id ] );\r\n\r\n\t\tdelete buffers[ uniformsGroup.id ];\r\n\t\tdelete updateList[ uniformsGroup.id ];\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\tfor ( const id in buffers ) {\r\n\r\n\t\t\tgl.deleteBuffer( buffers[ id ] );\r\n\r\n\t\t}\r\n\r\n\t\tallocatedBindingPoints = [];\r\n\t\tbuffers = {};\r\n\t\tupdateList = {};\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tbind: bind,\r\n\t\tupdate: update,\r\n\r\n\t\tdispose: dispose\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLUniformsGroups };\r\n", "import {\r\n\tREVISION,\r\n\tBackSide,\r\n\tFrontSide,\r\n\tDoubleSide,\r\n\tHalfFloatType,\r\n\tUnsignedByteType,\r\n\tNoToneMapping,\r\n\tLinearMipmapLinearFilter,\r\n\tSRGBColorSpace,\r\n\tLinearSRGBColorSpace,\r\n\tRGBAIntegerFormat,\r\n\tRGIntegerFormat,\r\n\tRedIntegerFormat,\r\n\tUnsignedIntType,\r\n\tUnsignedShortType,\r\n\tUnsignedInt248Type,\r\n\tUnsignedShort4444Type,\r\n\tUnsignedShort5551Type,\r\n\tWebGLCoordinateSystem,\r\n\tDisplayP3ColorSpace,\r\n\tLinearDisplayP3ColorSpace\r\n} from '../constants.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Frustum } from '../math/Frustum.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { WebGLAnimation } from './webgl/WebGLAnimation.js';\r\nimport { WebGLAttributes } from './webgl/WebGLAttributes.js';\r\nimport { WebGLBackground } from './webgl/WebGLBackground.js';\r\nimport { WebGLBindingStates } from './webgl/WebGLBindingStates.js';\r\nimport { WebGLBufferRenderer } from './webgl/WebGLBufferRenderer.js';\r\nimport { WebGLCapabilities } from './webgl/WebGLCapabilities.js';\r\nimport { WebGLClipping } from './webgl/WebGLClipping.js';\r\nimport { WebGLCubeMaps } from './webgl/WebGLCubeMaps.js';\r\nimport { WebGLCubeUVMaps } from './webgl/WebGLCubeUVMaps.js';\r\nimport { WebGLExtensions } from './webgl/WebGLExtensions.js';\r\nimport { WebGLGeometries } from './webgl/WebGLGeometries.js';\r\nimport { WebGLIndexedBufferRenderer } from './webgl/WebGLIndexedBufferRenderer.js';\r\nimport { WebGLInfo } from './webgl/WebGLInfo.js';\r\nimport { WebGLMorphtargets } from './webgl/WebGLMorphtargets.js';\r\nimport { WebGLObjects } from './webgl/WebGLObjects.js';\r\nimport { WebGLPrograms } from './webgl/WebGLPrograms.js';\r\nimport { WebGLProperties } from './webgl/WebGLProperties.js';\r\nimport { WebGLRenderLists } from './webgl/WebGLRenderLists.js';\r\nimport { WebGLRenderStates } from './webgl/WebGLRenderStates.js';\r\nimport { WebGLRenderTarget } from './WebGLRenderTarget.js';\r\nimport { WebGLShadowMap } from './webgl/WebGLShadowMap.js';\r\nimport { WebGLState } from './webgl/WebGLState.js';\r\nimport { WebGLTextures } from './webgl/WebGLTextures.js';\r\nimport { WebGLUniforms } from './webgl/WebGLUniforms.js';\r\nimport { WebGLUtils } from './webgl/WebGLUtils.js';\r\nimport { WebXRManager } from './webxr/WebXRManager.js';\r\nimport { WebGLMaterials } from './webgl/WebGLMaterials.js';\r\nimport { WebGLUniformsGroups } from './webgl/WebGLUniformsGroups.js';\r\nimport { createCanvasElement, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix, warnOnce } from '../utils.js';\r\nimport { ColorManagement } from '../math/ColorManagement.js';\r\n\r\nclass WebGLRenderer {\r\n\r\n\tconstructor( parameters = {} ) {\r\n\r\n\t\tconst {\r\n\t\t\tcanvas = createCanvasElement(),\r\n\t\t\tcontext = null,\r\n\t\t\tdepth = true,\r\n\t\t\tstencil = false,\r\n\t\t\talpha = false,\r\n\t\t\tantialias = false,\r\n\t\t\tpremultipliedAlpha = true,\r\n\t\t\tpreserveDrawingBuffer = false,\r\n\t\t\tpowerPreference = 'default',\r\n\t\t\tfailIfMajorPerformanceCaveat = false,\r\n\t\t} = parameters;\r\n\r\n\t\tthis.isWebGLRenderer = true;\r\n\r\n\t\tlet _alpha;\r\n\r\n\t\tif ( context !== null ) {\r\n\r\n\t\t\tif ( typeof WebGLRenderingContext !== 'undefined' && context instanceof WebGLRenderingContext ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.WebGLRenderer: WebGL 1 is not supported since r163.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_alpha = context.getContextAttributes().alpha;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_alpha = alpha;\r\n\r\n\t\t}\r\n\r\n\t\tconst uintClearColor = new Uint32Array( 4 );\r\n\t\tconst intClearColor = new Int32Array( 4 );\r\n\r\n\t\tlet currentRenderList = null;\r\n\t\tlet currentRenderState = null;\r\n\r\n\t\t// render() can be called from within a callback triggered by another render.\r\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\r\n\r\n\t\tconst renderListStack = [];\r\n\t\tconst renderStateStack = [];\r\n\r\n\t\t// public properties\r\n\r\n\t\tthis.domElement = canvas;\r\n\r\n\t\t// Debug configuration container\r\n\t\tthis.debug = {\r\n\r\n\t\t\t/**\r\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tcheckShaderErrors: true,\r\n\t\t\t/**\r\n\t\t\t * Callback for custom error reporting.\r\n\t\t\t * @type {?Function}\r\n\t\t\t */\r\n\t\t\tonShaderError: null\r\n\t\t};\r\n\r\n\t\t// clearing\r\n\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\r\n\t\t// scene graph\r\n\r\n\t\tthis.sortObjects = true;\r\n\r\n\t\t// user-defined clipping\r\n\r\n\t\tthis.clippingPlanes = [];\r\n\t\tthis.localClippingEnabled = false;\r\n\r\n\t\t// physically based shading\r\n\r\n\t\tthis._outputColorSpace = SRGBColorSpace;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tthis.toneMapping = NoToneMapping;\r\n\t\tthis.toneMappingExposure = 1.0;\r\n\r\n\t\t// internal properties\r\n\r\n\t\tconst _this = this;\r\n\r\n\t\tlet _isContextLost = false;\r\n\r\n\t\t// internal state cache\r\n\r\n\t\tlet _currentActiveCubeFace = 0;\r\n\t\tlet _currentActiveMipmapLevel = 0;\r\n\t\tlet _currentRenderTarget = null;\r\n\t\tlet _currentMaterialId = - 1;\r\n\r\n\t\tlet _currentCamera = null;\r\n\r\n\t\tconst _currentViewport = new Vector4();\r\n\t\tconst _currentScissor = new Vector4();\r\n\t\tlet _currentScissorTest = null;\r\n\r\n\t\tconst _currentClearColor = new Color( 0x000000 );\r\n\t\tlet _currentClearAlpha = 0;\r\n\r\n\t\t//\r\n\r\n\t\tlet _width = canvas.width;\r\n\t\tlet _height = canvas.height;\r\n\r\n\t\tlet _pixelRatio = 1;\r\n\t\tlet _opaqueSort = null;\r\n\t\tlet _transparentSort = null;\r\n\r\n\t\tconst _viewport = new Vector4( 0, 0, _width, _height );\r\n\t\tconst _scissor = new Vector4( 0, 0, _width, _height );\r\n\t\tlet _scissorTest = false;\r\n\r\n\t\t// frustum\r\n\r\n\t\tconst _frustum = new Frustum();\r\n\r\n\t\t// clipping\r\n\r\n\t\tlet _clippingEnabled = false;\r\n\t\tlet _localClippingEnabled = false;\r\n\r\n\t\t// camera matrices cache\r\n\r\n\t\tconst _currentProjectionMatrix = new Matrix4();\r\n\t\tconst _projScreenMatrix = new Matrix4();\r\n\r\n\t\tconst _vector3 = new Vector3();\r\n\r\n\t\tconst _vector4 = new Vector4();\r\n\r\n\t\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\r\n\r\n\t\tlet _renderBackground = false;\r\n\r\n\t\tfunction getTargetPixelRatio() {\r\n\r\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t\t}\r\n\r\n\t\t// initialize\r\n\r\n\t\tlet _gl = context;\r\n\r\n\t\tfunction getContext( contextName, contextAttributes ) {\r\n\r\n\t\t\treturn canvas.getContext( contextName, contextAttributes );\r\n\r\n\t\t}\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconst contextAttributes = {\r\n\t\t\t\talpha: true,\r\n\t\t\t\tdepth,\r\n\t\t\t\tstencil,\r\n\t\t\t\tantialias,\r\n\t\t\t\tpremultipliedAlpha,\r\n\t\t\t\tpreserveDrawingBuffer,\r\n\t\t\t\tpowerPreference,\r\n\t\t\t\tfailIfMajorPerformanceCaveat,\r\n\t\t\t};\r\n\r\n\t\t\t// OffscreenCanvas does not have setAttribute, see #22811\r\n\t\t\tif ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\r\n\r\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\r\n\t\t\tcanvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\tcanvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\t\t\tcanvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );\r\n\r\n\t\t\tif ( _gl === null ) {\r\n\r\n\t\t\t\tconst contextName = 'webgl2';\r\n\r\n\t\t\t\t_gl = getContext( contextName, contextAttributes );\r\n\r\n\t\t\t\tif ( _gl === null ) {\r\n\r\n\t\t\t\t\tif ( getContext( contextName ) ) {\r\n\r\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\r\n\t\t\tthrow error;\r\n\r\n\t\t}\r\n\r\n\t\tlet extensions, capabilities, state, info;\r\n\t\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\r\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\r\n\r\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\r\n\r\n\t\tlet utils, bindingStates, uniformsGroups;\r\n\r\n\t\tfunction initGLContext() {\r\n\r\n\t\t\textensions = new WebGLExtensions( _gl );\r\n\t\t\textensions.init();\r\n\r\n\t\t\tutils = new WebGLUtils( _gl, extensions );\r\n\r\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters, utils );\r\n\r\n\t\t\tstate = new WebGLState( _gl );\r\n\r\n\t\t\tif ( capabilities.reverseDepthBuffer ) state.buffers.depth.setReversed( true );\r\n\r\n\t\t\tinfo = new WebGLInfo( _gl );\r\n\t\t\tproperties = new WebGLProperties();\r\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\r\n\t\t\tcubemaps = new WebGLCubeMaps( _this );\r\n\t\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\r\n\t\t\tattributes = new WebGLAttributes( _gl );\r\n\t\t\tbindingStates = new WebGLBindingStates( _gl, attributes );\r\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\r\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\r\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\r\n\t\t\tclipping = new WebGLClipping( properties );\r\n\t\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\r\n\t\t\tmaterials = new WebGLMaterials( _this, properties );\r\n\t\t\trenderLists = new WebGLRenderLists();\r\n\t\t\trenderStates = new WebGLRenderStates( extensions );\r\n\t\t\tbackground = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );\r\n\t\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\r\n\t\t\tuniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );\r\n\r\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info );\r\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info );\r\n\r\n\t\t\tinfo.programs = programCache.programs;\r\n\r\n\t\t\t_this.capabilities = capabilities;\r\n\t\t\t_this.extensions = extensions;\r\n\t\t\t_this.properties = properties;\r\n\t\t\t_this.renderLists = renderLists;\r\n\t\t\t_this.shadowMap = shadowMap;\r\n\t\t\t_this.state = state;\r\n\t\t\t_this.info = info;\r\n\r\n\t\t}\r\n\r\n\t\tinitGLContext();\r\n\r\n\t\t// xr\r\n\r\n\t\tconst xr = new WebXRManager( _this, _gl );\r\n\r\n\t\tthis.xr = xr;\r\n\r\n\t\t// API\r\n\r\n\t\tthis.getContext = function () {\r\n\r\n\t\t\treturn _gl;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getContextAttributes = function () {\r\n\r\n\t\t\treturn _gl.getContextAttributes();\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextLoss = function () {\r\n\r\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) extension.loseContext();\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextRestore = function () {\r\n\r\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) extension.restoreContext();\r\n\r\n\t\t};\r\n\r\n\t\tthis.getPixelRatio = function () {\r\n\r\n\t\t\treturn _pixelRatio;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\t\tif ( value === undefined ) return;\r\n\r\n\t\t\t_pixelRatio = value;\r\n\r\n\t\t\tthis.setSize( _width, _height, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSize = function ( target ) {\r\n\r\n\t\t\treturn target.set( _width, _height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSize = function ( width, height, updateStyle = true ) {\r\n\r\n\t\t\tif ( xr.isPresenting ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\tcanvas.width = Math.floor( width * _pixelRatio );\r\n\t\t\tcanvas.height = Math.floor( height * _pixelRatio );\r\n\r\n\t\t\tif ( updateStyle === true ) {\r\n\r\n\t\t\t\tcanvas.style.width = width + 'px';\r\n\t\t\t\tcanvas.style.height = height + 'px';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDrawingBufferSize = function ( target ) {\r\n\r\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_pixelRatio = pixelRatio;\r\n\r\n\t\t\tcanvas.width = Math.floor( width * pixelRatio );\r\n\t\t\tcanvas.height = Math.floor( height * pixelRatio );\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCurrentViewport = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _currentViewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getViewport = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _viewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_viewport.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).round() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissor = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _scissor );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_scissor.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).round() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissorTest = function () {\r\n\r\n\t\t\treturn _scissorTest;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setOpaqueSort = function ( method ) {\r\n\r\n\t\t\t_opaqueSort = method;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setTransparentSort = function ( method ) {\r\n\r\n\t\t\t_transparentSort = method;\r\n\r\n\t\t};\r\n\r\n\t\t// Clearing\r\n\r\n\t\tthis.getClearColor = function ( target ) {\r\n\r\n\t\t\treturn target.copy( background.getClearColor() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearColor = function () {\r\n\r\n\t\t\tbackground.setClearColor.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getClearAlpha = function () {\r\n\r\n\t\t\treturn background.getClearAlpha();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearAlpha = function () {\r\n\r\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( color = true, depth = true, stencil = true ) {\r\n\r\n\t\t\tlet bits = 0;\r\n\r\n\t\t\tif ( color ) {\r\n\r\n\t\t\t\t// check if we're trying to clear an integer target\r\n\t\t\t\tlet isIntegerFormat = false;\r\n\t\t\t\tif ( _currentRenderTarget !== null ) {\r\n\r\n\t\t\t\t\tconst targetFormat = _currentRenderTarget.texture.format;\r\n\t\t\t\t\tisIntegerFormat = targetFormat === RGBAIntegerFormat ||\r\n\t\t\t\t\t\ttargetFormat === RGIntegerFormat ||\r\n\t\t\t\t\t\ttargetFormat === RedIntegerFormat;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// use the appropriate clear functions to clear the target if it's a signed\r\n\t\t\t\t// or unsigned integer target\r\n\t\t\t\tif ( isIntegerFormat ) {\r\n\r\n\t\t\t\t\tconst targetType = _currentRenderTarget.texture.type;\r\n\t\t\t\t\tconst isUnsignedType = targetType === UnsignedByteType ||\r\n\t\t\t\t\t\ttargetType === UnsignedIntType ||\r\n\t\t\t\t\t\ttargetType === UnsignedShortType ||\r\n\t\t\t\t\t\ttargetType === UnsignedInt248Type ||\r\n\t\t\t\t\t\ttargetType === UnsignedShort4444Type ||\r\n\t\t\t\t\t\ttargetType === UnsignedShort5551Type;\r\n\r\n\t\t\t\t\tconst clearColor = background.getClearColor();\r\n\t\t\t\t\tconst a = background.getClearAlpha();\r\n\t\t\t\t\tconst r = clearColor.r;\r\n\t\t\t\t\tconst g = clearColor.g;\r\n\t\t\t\t\tconst b = clearColor.b;\r\n\r\n\t\t\t\t\tif ( isUnsignedType ) {\r\n\r\n\t\t\t\t\t\tuintClearColor[ 0 ] = r;\r\n\t\t\t\t\t\tuintClearColor[ 1 ] = g;\r\n\t\t\t\t\t\tuintClearColor[ 2 ] = b;\r\n\t\t\t\t\t\tuintClearColor[ 3 ] = a;\r\n\t\t\t\t\t\t_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tintClearColor[ 0 ] = r;\r\n\t\t\t\t\t\tintClearColor[ 1 ] = g;\r\n\t\t\t\t\t\tintClearColor[ 2 ] = b;\r\n\t\t\t\t\t\tintClearColor[ 3 ] = a;\r\n\t\t\t\t\t\t_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbits |= _gl.COLOR_BUFFER_BIT;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( depth ) {\r\n\r\n\t\t\t\tbits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\t\t\t_gl.clearDepth( this.capabilities.reverseDepthBuffer ? 0 : 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( stencil ) {\r\n\r\n\t\t\t\tbits |= _gl.STENCIL_BUFFER_BIT;\r\n\t\t\t\tthis.state.buffers.stencil.setMask( 0xffffffff );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.clear( bits );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearColor = function () {\r\n\r\n\t\t\tthis.clear( true, false, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearDepth = function () {\r\n\r\n\t\t\tthis.clear( false, true, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearStencil = function () {\r\n\r\n\t\t\tthis.clear( false, false, true );\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\tcanvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\tcanvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\t\t\tcanvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );\r\n\r\n\t\t\trenderLists.dispose();\r\n\t\t\trenderStates.dispose();\r\n\t\t\tproperties.dispose();\r\n\t\t\tcubemaps.dispose();\r\n\t\t\tcubeuvmaps.dispose();\r\n\t\t\tobjects.dispose();\r\n\t\t\tbindingStates.dispose();\r\n\t\t\tuniformsGroups.dispose();\r\n\t\t\tprogramCache.dispose();\r\n\r\n\t\t\txr.dispose();\r\n\r\n\t\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\r\n\t\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\r\n\r\n\t\t\tanimation.stop();\r\n\r\n\t\t};\r\n\r\n\t\t// Events\r\n\r\n\t\tfunction onContextLost( event ) {\r\n\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\r\n\r\n\t\t\t_isContextLost = true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onContextRestore( /* event */ ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\r\n\r\n\t\t\t_isContextLost = false;\r\n\r\n\t\t\tconst infoAutoReset = info.autoReset;\r\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\r\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\r\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\r\n\t\t\tconst shadowMapType = shadowMap.type;\r\n\r\n\t\t\tinitGLContext();\r\n\r\n\t\t\tinfo.autoReset = infoAutoReset;\r\n\t\t\tshadowMap.enabled = shadowMapEnabled;\r\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\r\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\r\n\t\t\tshadowMap.type = shadowMapType;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onContextCreationError( event ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onMaterialDispose( event ) {\r\n\r\n\t\t\tconst material = event.target;\r\n\r\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\tdeallocateMaterial( material );\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer deallocation\r\n\r\n\t\tfunction deallocateMaterial( material ) {\r\n\r\n\t\t\treleaseMaterialProgramReferences( material );\r\n\r\n\t\t\tproperties.remove( material );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction releaseMaterialProgramReferences( material ) {\r\n\r\n\t\t\tconst programs = properties.get( material ).programs;\r\n\r\n\t\t\tif ( programs !== undefined ) {\r\n\r\n\t\t\t\tprograms.forEach( function ( program ) {\r\n\r\n\t\t\t\t\tprogramCache.releaseProgram( program );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tprogramCache.releaseShaderCache( material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer rendering\r\n\r\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\r\n\r\n\t\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\r\n\r\n\t\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\r\n\r\n\t\t\tconst program = setProgram( camera, scene, geometry, material, object );\r\n\r\n\t\t\tstate.setMaterial( material, frontFaceCW );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlet index = geometry.index;\r\n\t\t\tlet rangeFactor = 1;\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\r\n\r\n\t\t\t\tif ( index === undefined ) return;\r\n\r\n\t\t\t\trangeFactor = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst drawRange = geometry.drawRange;\r\n\t\t\tconst position = geometry.attributes.position;\r\n\r\n\t\t\tlet drawStart = drawRange.start * rangeFactor;\r\n\t\t\tlet drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;\r\n\r\n\t\t\tif ( group !== null ) {\r\n\r\n\t\t\t\tdrawStart = Math.max( drawStart, group.start * rangeFactor );\r\n\t\t\t\tdrawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\r\n\t\t\t\tdrawEnd = Math.min( drawEnd, index.count );\r\n\r\n\t\t\t} else if ( position !== undefined && position !== null ) {\r\n\r\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\r\n\t\t\t\tdrawEnd = Math.min( drawEnd, position.count );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst drawCount = drawEnd - drawStart;\r\n\r\n\t\t\tif ( drawCount < 0 || drawCount === Infinity ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tbindingStates.setup( object, material, program, geometry, index );\r\n\r\n\t\t\tlet attribute;\r\n\t\t\tlet renderer = bufferRenderer;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattribute = attributes.get( index );\r\n\r\n\t\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\t\trenderer.setIndex( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isLine ) {\r\n\r\n\t\t\t\tlet lineWidth = material.linewidth;\r\n\r\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\r\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\t\tif ( object.isLineSegments ) {\r\n\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t\t} else if ( object.isLineLoop ) {\r\n\r\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.POINTS );\r\n\r\n\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isBatchedMesh ) {\r\n\r\n\t\t\t\tif ( object._multiDrawInstances !== null ) {\r\n\r\n\t\t\t\t\trenderer.renderMultiDrawInstances( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( ! extensions.get( 'WEBGL_multi_draw' ) ) {\r\n\r\n\t\t\t\t\t\tconst starts = object._multiDrawStarts;\r\n\t\t\t\t\t\tconst counts = object._multiDrawCounts;\r\n\t\t\t\t\t\tconst drawCount = object._multiDrawCount;\r\n\t\t\t\t\t\tconst bytesPerElement = index ? attributes.get( index ).bytesPerElement : 1;\r\n\t\t\t\t\t\tconst uniforms = properties.get( material ).currentProgram.getUniforms();\r\n\t\t\t\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuniforms.setValue( _gl, '_gl_DrawID', i );\r\n\t\t\t\t\t\t\trenderer.render( starts[ i ] / bytesPerElement, counts[ i ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trenderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isInstancedMesh ) {\r\n\r\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\r\n\r\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\r\n\r\n\t\t\t\tconst maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;\r\n\t\t\t\tconst instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );\r\n\r\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// Compile\r\n\r\n\t\tfunction prepareMaterial( material, scene, object ) {\r\n\r\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\r\n\r\n\t\t\t\tmaterial.side = BackSide;\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\t\t\t\tgetProgram( material, scene, object );\r\n\r\n\t\t\t\tmaterial.side = FrontSide;\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\t\t\t\tgetProgram( material, scene, object );\r\n\r\n\t\t\t\tmaterial.side = DoubleSide;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgetProgram( material, scene, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.compile = function ( scene, camera, targetScene = null ) {\r\n\r\n\t\t\tif ( targetScene === null ) targetScene = scene;\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( targetScene );\r\n\t\t\tcurrentRenderState.init( camera );\r\n\r\n\t\t\trenderStateStack.push( currentRenderState );\r\n\r\n\t\t\t// gather lights from both the target scene and the new object that will be added to the scene.\r\n\r\n\t\t\ttargetScene.traverseVisible( function ( object ) {\r\n\r\n\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tif ( scene !== targetScene ) {\r\n\r\n\t\t\t\tscene.traverseVisible( function ( object ) {\r\n\r\n\t\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentRenderState.setupLights();\r\n\r\n\t\t\t// Only initialize materials in the new scene, not the targetScene.\r\n\r\n\t\t\tconst materials = new Set();\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( ! ( object.isMesh || object.isPoints || object.isLine || object.isSprite ) ) {\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst material = object.material;\r\n\r\n\t\t\t\tif ( material ) {\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst material2 = material[ i ];\r\n\r\n\t\t\t\t\t\t\tprepareMaterial( material2, targetScene, object );\r\n\t\t\t\t\t\t\tmaterials.add( material2 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tprepareMaterial( material, targetScene, object );\r\n\t\t\t\t\t\tmaterials.add( material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\trenderStateStack.pop();\r\n\t\t\tcurrentRenderState = null;\r\n\r\n\t\t\treturn materials;\r\n\r\n\t\t};\r\n\r\n\t\t// compileAsync\r\n\r\n\t\tthis.compileAsync = function ( scene, camera, targetScene = null ) {\r\n\r\n\t\t\tconst materials = this.compile( scene, camera, targetScene );\r\n\r\n\t\t\t// Wait for all the materials in the new object to indicate that they're\r\n\t\t\t// ready to be used before resolving the promise.\r\n\r\n\t\t\treturn new Promise( ( resolve ) => {\r\n\r\n\t\t\t\tfunction checkMaterialsReady() {\r\n\r\n\t\t\t\t\tmaterials.forEach( function ( material ) {\r\n\r\n\t\t\t\t\t\tconst materialProperties = properties.get( material );\r\n\t\t\t\t\t\tconst program = materialProperties.currentProgram;\r\n\r\n\t\t\t\t\t\tif ( program.isReady() ) {\r\n\r\n\t\t\t\t\t\t\t// remove any programs that report they're ready to use from the list\r\n\t\t\t\t\t\t\tmaterials.delete( material );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t// once the list of compiling materials is empty, call the callback\r\n\r\n\t\t\t\t\tif ( materials.size === 0 ) {\r\n\r\n\t\t\t\t\t\tresolve( scene );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if some materials are still not ready, wait a bit and check again\r\n\r\n\t\t\t\t\tsetTimeout( checkMaterialsReady, 10 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( extensions.get( 'KHR_parallel_shader_compile' ) !== null ) {\r\n\r\n\t\t\t\t\t// If we can check the compilation status of the materials without\r\n\t\t\t\t\t// blocking then do so right away.\r\n\r\n\t\t\t\t\tcheckMaterialsReady();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Otherwise start by waiting a bit to give the materials we just\r\n\t\t\t\t\t// initialized a chance to finish.\r\n\r\n\t\t\t\t\tsetTimeout( checkMaterialsReady, 10 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t};\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tlet onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time ) {\r\n\r\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onXRSessionStart() {\r\n\r\n\t\t\tanimation.stop();\r\n\r\n\t\t}\r\n\r\n\t\tfunction onXRSessionEnd() {\r\n\r\n\t\t\tanimation.start();\r\n\r\n\t\t}\r\n\r\n\t\tconst animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tif ( typeof self !== 'undefined' ) animation.setContext( self );\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\t\t\txr.setAnimationLoop( callback );\r\n\r\n\t\t\t( callback === null ) ? animation.stop() : animation.start();\r\n\r\n\t\t};\r\n\r\n\t\txr.addEventListener( 'sessionstart', onXRSessionStart );\r\n\t\txr.addEventListener( 'sessionend', onXRSessionEnd );\r\n\r\n\t\t// Rendering\r\n\r\n\t\tthis.render = function ( scene, camera ) {\r\n\r\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _isContextLost === true ) return;\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\r\n\r\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\r\n\r\n\t\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\r\n\r\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\t\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\r\n\t\t\tcurrentRenderState.init( camera );\r\n\r\n\t\t\trenderStateStack.push( currentRenderState );\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\r\n\r\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\r\n\t\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );\r\n\r\n\t\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\r\n\t\t\tcurrentRenderList.init();\r\n\r\n\t\t\trenderListStack.push( currentRenderList );\r\n\r\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\r\n\r\n\t\t\t\tconst depthSensingMesh = _this.xr.getDepthSensingMesh();\r\n\r\n\t\t\t\tif ( depthSensingMesh !== null ) {\r\n\r\n\t\t\t\t\tprojectObject( depthSensingMesh, camera, - Infinity, _this.sortObjects );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\r\n\r\n\t\t\tcurrentRenderList.finish();\r\n\r\n\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;\r\n\t\t\tif ( _renderBackground ) {\r\n\r\n\t\t\t\tbackground.addToRenderList( currentRenderList, scene );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tthis.info.render.frame ++;\r\n\r\n\t\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\r\n\r\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\r\n\r\n\t\t\tif ( _clippingEnabled === true ) clipping.endShadows();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.info.autoReset === true ) this.info.reset();\r\n\r\n\t\t\t// render scene\r\n\r\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\r\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\r\n\r\n\t\t\tcurrentRenderState.setupLights();\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tconst cameras = camera.cameras;\r\n\r\n\t\t\t\tif ( transmissiveObjects.length > 0 ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst camera2 = cameras[ i ];\r\n\r\n\t\t\t\t\t\trenderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _renderBackground ) background.render( scene );\r\n\r\n\t\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst camera2 = cameras[ i ];\r\n\r\n\t\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );\r\n\r\n\t\t\t\tif ( _renderBackground ) background.render( scene );\r\n\r\n\t\t\t\trenderScene( currentRenderList, scene, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _currentRenderTarget !== null ) {\r\n\r\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\r\n\r\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\r\n\r\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\r\n\r\n\t\t\t// _gl.finish();\r\n\r\n\t\t\tbindingStates.resetDefaultState();\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\trenderStateStack.pop();\r\n\r\n\t\t\tif ( renderStateStack.length > 0 ) {\r\n\r\n\t\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\r\n\r\n\t\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, currentRenderState.state.camera );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcurrentRenderState = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderListStack.pop();\r\n\r\n\t\t\tif ( renderListStack.length > 0 ) {\r\n\r\n\t\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcurrentRenderList = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\r\n\r\n\t\t\tif ( object.visible === false ) return;\r\n\r\n\t\t\tconst visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible ) {\r\n\r\n\t\t\t\tif ( object.isGroup ) {\r\n\r\n\t\t\t\t\tgroupOrder = object.renderOrder;\r\n\r\n\t\t\t\t} else if ( object.isLOD ) {\r\n\r\n\t\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\r\n\r\n\t\t\t\t} else if ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector4.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst geometry = objects.update( object );\r\n\t\t\t\t\t\tconst material = object.material;\r\n\r\n\t\t\t\t\t\tif ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tconst geometry = objects.update( object );\r\n\t\t\t\t\t\tconst material = object.material;\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\tif ( object.boundingSphere !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\r\n\t\t\t\t\t\t\t\t_vector4.copy( object.boundingSphere.center );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\t\t\t\t\t\t\t_vector4.copy( geometry.boundingSphere.center );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_vector4\r\n\t\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\t\tconst groups = geometry.groups;\r\n\r\n\t\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector4.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst children = object.children;\r\n\r\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\r\n\r\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\r\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\r\n\t\t\tconst transparentObjects = currentRenderList.transparent;\r\n\r\n\t\t\tcurrentRenderState.setupLightsView( camera );\r\n\r\n\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );\r\n\r\n\t\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\r\n\r\n\t\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\r\n\t\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\r\n\t\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\r\n\r\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\t\tstate.buffers.depth.setTest( true );\r\n\t\t\tstate.buffers.depth.setMask( true );\r\n\t\t\tstate.buffers.color.setMask( true );\r\n\r\n\t\t\tstate.setPolygonOffset( false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {\r\n\r\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\r\n\r\n\t\t\tif ( overrideMaterial !== null ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentRenderState.state.transmissionRenderTarget[ camera.id ] === undefined ) {\r\n\r\n\t\t\t\tcurrentRenderState.state.transmissionRenderTarget[ camera.id ] = new WebGLRenderTarget( 1, 1, {\r\n\t\t\t\t\tgenerateMipmaps: true,\r\n\t\t\t\t\ttype: ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) ) ? HalfFloatType : UnsignedByteType,\r\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\r\n\t\t\t\t\tsamples: 4,\r\n\t\t\t\t\tstencilBuffer: stencil,\r\n\t\t\t\t\tresolveDepthBuffer: false,\r\n\t\t\t\t\tresolveStencilBuffer: false,\r\n\t\t\t\t\tcolorSpace: ColorManagement.workingColorSpace,\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// debug\r\n\r\n\t\t\t\t/*\r\n\t\t\t\tconst geometry = new PlaneGeometry();\r\n\t\t\t\tconst material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );\r\n\r\n\t\t\t\tconst mesh = new Mesh( geometry, material );\r\n\t\t\t\tscene.add( mesh );\r\n\t\t\t\t*/\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[ camera.id ];\r\n\r\n\t\t\tconst activeViewport = camera.viewport || _currentViewport;\r\n\t\t\ttransmissionRenderTarget.setSize( activeViewport.z, activeViewport.w );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\r\n\t\t\t_this.setRenderTarget( transmissionRenderTarget );\r\n\r\n\t\t\t_this.getClearColor( _currentClearColor );\r\n\t\t\t_currentClearAlpha = _this.getClearAlpha();\r\n\t\t\tif ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );\r\n\r\n\t\t\t_this.clear();\r\n\r\n\t\t\tif ( _renderBackground ) background.render( scene );\r\n\r\n\t\t\t// Turn off the features which can affect the frag color for opaque objects pass.\r\n\t\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\r\n\t\t\tconst currentToneMapping = _this.toneMapping;\r\n\t\t\t_this.toneMapping = NoToneMapping;\r\n\r\n\t\t\t// Remove viewport from camera to avoid nested render calls resetting viewport to it (e.g Reflector).\r\n\t\t\t// Transmission render pass requires viewport to match the transmissionRenderTarget.\r\n\t\t\tconst currentCameraViewport = camera.viewport;\r\n\t\t\tif ( camera.viewport !== undefined ) camera.viewport = undefined;\r\n\r\n\t\t\tcurrentRenderState.setupLightsView( camera );\r\n\r\n\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );\r\n\r\n\t\t\trenderObjects( opaqueObjects, scene, camera );\r\n\r\n\t\t\ttextures.updateMultisampleRenderTarget( transmissionRenderTarget );\r\n\t\t\ttextures.updateRenderTargetMipmap( transmissionRenderTarget );\r\n\r\n\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === false ) { // see #28131\r\n\r\n\t\t\t\tlet renderTargetNeedsUpdate = false;\r\n\r\n\t\t\t\tfor ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst renderItem = transmissiveObjects[ i ];\r\n\r\n\t\t\t\t\tconst object = renderItem.object;\r\n\t\t\t\t\tconst geometry = renderItem.geometry;\r\n\t\t\t\t\tconst material = renderItem.material;\r\n\t\t\t\t\tconst group = renderItem.group;\r\n\r\n\t\t\t\t\tif ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {\r\n\r\n\t\t\t\t\t\tconst currentSide = material.side;\r\n\r\n\t\t\t\t\t\tmaterial.side = BackSide;\r\n\t\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t\t\tmaterial.side = currentSide;\r\n\t\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t\t\trenderTargetNeedsUpdate = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( renderTargetNeedsUpdate === true ) {\r\n\r\n\t\t\t\t\ttextures.updateMultisampleRenderTarget( transmissionRenderTarget );\r\n\t\t\t\t\ttextures.updateRenderTargetMipmap( transmissionRenderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_this.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t\t_this.setClearColor( _currentClearColor, _currentClearAlpha );\r\n\r\n\t\t\tif ( currentCameraViewport !== undefined ) camera.viewport = currentCameraViewport;\r\n\r\n\t\t\t_this.toneMapping = currentToneMapping;\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObjects( renderList, scene, camera ) {\r\n\r\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\r\n\r\n\t\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst renderItem = renderList[ i ];\r\n\r\n\t\t\t\tconst object = renderItem.object;\r\n\t\t\t\tconst geometry = renderItem.geometry;\r\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\r\n\t\t\t\tconst group = renderItem.group;\r\n\r\n\t\t\t\tif ( object.layers.test( camera.layers ) ) {\r\n\r\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\r\n\r\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\r\n\r\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\r\n\r\n\t\t\t\tmaterial.side = BackSide;\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\r\n\r\n\t\t\t\tmaterial.side = FrontSide;\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\r\n\r\n\t\t\t\tmaterial.side = DoubleSide;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getProgram( material, scene, object ) {\r\n\r\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\r\n\r\n\t\t\tconst materialProperties = properties.get( material );\r\n\r\n\t\t\tconst lights = currentRenderState.state.lights;\r\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tconst lightsStateVersion = lights.state.version;\r\n\r\n\t\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\r\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\r\n\r\n\t\t\tlet programs = materialProperties.programs;\r\n\r\n\t\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\r\n\r\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\r\n\t\t\tmaterialProperties.fog = scene.fog;\r\n\t\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\r\n\t\t\tmaterialProperties.envMapRotation = ( materialProperties.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;\r\n\r\n\t\t\tif ( programs === undefined ) {\r\n\r\n\t\t\t\t// new material\r\n\r\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\t\tprograms = new Map();\r\n\t\t\t\tmaterialProperties.programs = programs;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet program = programs.get( programCacheKey );\r\n\r\n\t\t\tif ( program !== undefined ) {\r\n\r\n\t\t\t\t// early out if program and light state is identical\r\n\r\n\t\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\r\n\r\n\t\t\t\t\tupdateCommonMaterialProperties( material, parameters );\r\n\r\n\t\t\t\t\treturn program;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tparameters.uniforms = programCache.getUniforms( material );\r\n\r\n\t\t\t\tmaterial.onBuild( object, parameters, _this );\r\n\r\n\t\t\t\tmaterial.onBeforeCompile( parameters, _this );\r\n\r\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\r\n\t\t\t\tprograms.set( programCacheKey, program );\r\n\r\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst uniforms = materialProperties.uniforms;\r\n\r\n\t\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\r\n\r\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateCommonMaterialProperties( material, parameters );\r\n\r\n\t\t\t// store the light setup it was created for\r\n\r\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\r\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\r\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\r\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\r\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\r\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\r\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\r\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\r\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\r\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\r\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\r\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\r\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\r\n\r\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\r\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\r\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\r\n\t\t\t\tuniforms.spotLightMatrix.value = lights.state.spotLightMatrix;\r\n\t\t\t\tuniforms.spotLightMap.value = lights.state.spotLightMap;\r\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\r\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\r\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterialProperties.currentProgram = program;\r\n\t\t\tmaterialProperties.uniformsList = null;\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getUniformList( materialProperties ) {\r\n\r\n\t\t\tif ( materialProperties.uniformsList === null ) {\r\n\r\n\t\t\t\tconst progUniforms = materialProperties.currentProgram.getUniforms();\r\n\t\t\t\tmaterialProperties.uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, materialProperties.uniforms );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn materialProperties.uniformsList;\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCommonMaterialProperties( material, parameters ) {\r\n\r\n\t\t\tconst materialProperties = properties.get( material );\r\n\r\n\t\t\tmaterialProperties.outputColorSpace = parameters.outputColorSpace;\r\n\t\t\tmaterialProperties.batching = parameters.batching;\r\n\t\t\tmaterialProperties.batchingColor = parameters.batchingColor;\r\n\t\t\tmaterialProperties.instancing = parameters.instancing;\r\n\t\t\tmaterialProperties.instancingColor = parameters.instancingColor;\r\n\t\t\tmaterialProperties.instancingMorph = parameters.instancingMorph;\r\n\t\t\tmaterialProperties.skinning = parameters.skinning;\r\n\t\t\tmaterialProperties.morphTargets = parameters.morphTargets;\r\n\t\t\tmaterialProperties.morphNormals = parameters.morphNormals;\r\n\t\t\tmaterialProperties.morphColors = parameters.morphColors;\r\n\t\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\r\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\r\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\r\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\r\n\t\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\r\n\t\t\tmaterialProperties.toneMapping = parameters.toneMapping;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setProgram( camera, scene, geometry, material, object ) {\r\n\r\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\r\n\r\n\t\t\ttextures.resetTextureUnits();\r\n\r\n\t\t\tconst fog = scene.fog;\r\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\r\n\t\t\tconst colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );\r\n\t\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\r\n\t\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\r\n\t\t\tconst vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );\r\n\t\t\tconst morphTargets = !! geometry.morphAttributes.position;\r\n\t\t\tconst morphNormals = !! geometry.morphAttributes.normal;\r\n\t\t\tconst morphColors = !! geometry.morphAttributes.color;\r\n\r\n\t\t\tlet toneMapping = NoToneMapping;\r\n\r\n\t\t\tif ( material.toneMapped ) {\r\n\r\n\t\t\t\tif ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {\r\n\r\n\t\t\t\t\ttoneMapping = _this.toneMapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\t\t\tconst materialProperties = properties.get( material );\r\n\t\t\tconst lights = currentRenderState.state.lights;\r\n\r\n\t\t\tif ( _clippingEnabled === true ) {\r\n\r\n\t\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\r\n\r\n\t\t\t\t\tconst useCache =\r\n\t\t\t\t\t\tcamera === _currentCamera &&\r\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\r\n\r\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\r\n\t\t\t\t\t// object instead of the material, once it becomes feasible\r\n\t\t\t\t\t// (#8465, #8379)\r\n\t\t\t\t\tclipping.setState( material, camera, useCache );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlet needsProgramChange = false;\r\n\r\n\t\t\tif ( material.version === materialProperties.__version ) {\r\n\r\n\t\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.outputColorSpace !== colorSpace ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isBatchedMesh && materialProperties.batching === false ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( ! object.isBatchedMesh && materialProperties.batching === true ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.envMap !== envMap ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( material.fog === true && materialProperties.fog !== fog ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\r\n\t\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\r\n\t\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.morphColors !== morphColors ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.toneMapping !== toneMapping ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.morphTargetsCount !== morphTargetsCount ) {\r\n\r\n\t\t\t\t\tneedsProgramChange = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tneedsProgramChange = true;\r\n\t\t\t\tmaterialProperties.__version = material.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlet program = materialProperties.currentProgram;\r\n\r\n\t\t\tif ( needsProgramChange === true ) {\r\n\r\n\t\t\t\tprogram = getProgram( material, scene, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet refreshProgram = false;\r\n\t\t\tlet refreshMaterial = false;\r\n\t\t\tlet refreshLights = false;\r\n\r\n\t\t\tconst p_uniforms = program.getUniforms(),\r\n\t\t\t\tm_uniforms = materialProperties.uniforms;\r\n\r\n\t\t\tif ( state.useProgram( program.program ) ) {\r\n\r\n\t\t\t\trefreshProgram = true;\r\n\t\t\t\trefreshMaterial = true;\r\n\t\t\t\trefreshLights = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\t\trefreshMaterial = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\r\n\r\n\t\t\t\t// common camera uniforms\r\n\r\n\t\t\t\tif ( capabilities.reverseDepthBuffer ) {\r\n\r\n\t\t\t\t\t_currentProjectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t\t\t\ttoNormalizedProjectionMatrix( _currentProjectionMatrix );\r\n\t\t\t\t\ttoReversedProjectionMatrix( _currentProjectionMatrix );\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', _currentProjectionMatrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\r\n\r\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n\t\t\t\tif ( uCamPos !== undefined ) {\r\n\r\n\t\t\t\t\tuCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\r\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _currentCamera !== camera ) {\r\n\r\n\t\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning and morph target uniforms must be set even if material didn't change\r\n\t\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\r\n\t\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\r\n\r\n\t\t\tif ( object.isSkinnedMesh ) {\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\r\n\r\n\t\t\t\tconst skeleton = object.skeleton;\r\n\r\n\t\t\t\tif ( skeleton ) {\r\n\r\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isBatchedMesh ) {\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'batchingTexture' );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'batchingTexture', object._matricesTexture, textures );\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'batchingIdTexture' );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'batchingIdTexture', object._indirectTexture, textures );\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'batchingColorTexture' );\r\n\t\t\t\tif ( object._colorsTexture !== null ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'batchingColorTexture', object._colorsTexture, textures );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tif ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined ) ) {\r\n\r\n\t\t\t\tmorphtargets.update( object, geometry, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\r\n\r\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\r\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512\r\n\r\n\t\t\tif ( material.isMeshGouraudMaterial && material.envMap !== null ) {\r\n\r\n\t\t\t\tm_uniforms.envMap.value = envMap;\r\n\r\n\t\t\t\tm_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null ) {\r\n\r\n\t\t\t\tm_uniforms.envMapIntensity.value = scene.environmentIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\r\n\r\n\t\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t\t// values\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\t\tif ( fog && material.fog === true ) {\r\n\r\n\t\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[ camera.id ] );\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );\r\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// common matrices\r\n\r\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\r\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\r\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\r\n\r\n\t\t\t// UBOs\r\n\r\n\t\t\tif ( material.isShaderMaterial || material.isRawShaderMaterial ) {\r\n\r\n\t\t\t\tconst groups = material.uniformsGroups;\r\n\r\n\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\t\t\tuniformsGroups.update( group, program );\r\n\t\t\t\t\tuniformsGroups.bind( group, program );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t}\r\n\r\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\r\n\r\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\t\t\tuniforms.lightProbe.needsUpdate = value;\r\n\r\n\t\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\r\n\t\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\r\n\t\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\r\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction materialNeedsLights( material ) {\r\n\r\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\r\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\r\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\r\n\r\n\t\t}\r\n\r\n\t\tthis.getActiveCubeFace = function () {\r\n\r\n\t\t\treturn _currentActiveCubeFace;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getActiveMipmapLevel = function () {\r\n\r\n\t\t\treturn _currentActiveMipmapLevel;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getRenderTarget = function () {\r\n\r\n\t\t\treturn _currentRenderTarget;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\r\n\r\n\t\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\r\n\t\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\r\n\r\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\t\trenderTargetProperties.__hasExternalTextures = true;\r\n\r\n\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\r\n\r\n\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\r\n\r\n\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\r\n\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\r\n\t\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );\r\n\t\t\t\t\trenderTargetProperties.__useRenderToTexture = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\r\n\r\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\r\n\t\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\r\n\r\n\t\t\t_currentRenderTarget = renderTarget;\r\n\t\t\t_currentActiveCubeFace = activeCubeFace;\r\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\r\n\r\n\t\t\tlet useDefaultFramebuffer = true;\r\n\t\t\tlet framebuffer = null;\r\n\t\t\tlet isCube = false;\r\n\t\t\tlet isRenderTarget3D = false;\r\n\r\n\t\t\tif ( renderTarget ) {\r\n\r\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\r\n\r\n\t\t\t\t\t// We need to make sure to rebind the framebuffer.\r\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\t\t\t\t\tuseDefaultFramebuffer = false;\r\n\r\n\t\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\r\n\r\n\t\t\t\t\ttextures.setupRenderTarget( renderTarget );\r\n\r\n\t\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\r\n\r\n\t\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\r\n\t\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\r\n\r\n\t\t\t\t} else if ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\t\t// check if the depth texture is already bound to the frame buffer and that it's been initialized\r\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\r\n\t\t\t\t\tif ( renderTargetProperties.__boundDepthTexture !== depthTexture ) {\r\n\r\n\t\t\t\t\t\t// check if the depth texture is compatible\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tdepthTexture !== null &&\r\n\t\t\t\t\t\t\tproperties.has( depthTexture ) &&\r\n\t\t\t\t\t\t\t( renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height )\r\n\t\t\t\t\t\t) {\r\n\r\n\t\t\t\t\t\t\tthrow new Error( 'WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Swap the depth buffer to the currently attached one\r\n\t\t\t\t\t\ttextures.setupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst texture = renderTarget.texture;\r\n\r\n\t\t\t\tif ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\r\n\r\n\t\t\t\t\tisRenderTarget3D = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\r\n\r\n\t\t\t\t\tif ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {\r\n\r\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tisCube = true;\r\n\r\n\t\t\t\t} else if ( ( renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( Array.isArray( __webglFramebuffer ) ) {\r\n\r\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeMipmapLevel ];\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tframebuffer = __webglFramebuffer;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\tif ( framebufferBound && useDefaultFramebuffer ) {\r\n\r\n\t\t\t\tstate.drawBuffers( renderTarget, framebuffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport );\r\n\t\t\tstate.scissor( _currentScissor );\r\n\t\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\r\n\r\n\t\t\t} else if ( isRenderTarget3D ) {\r\n\r\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\tconst layer = activeCubeFace || 0;\r\n\t\t\t\t_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\r\n\r\n\t\t};\r\n\r\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\r\n\r\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\r\n\r\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( framebuffer ) {\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tconst texture = renderTarget.texture;\r\n\t\t\t\t\tconst textureFormat = texture.format;\r\n\t\t\t\t\tconst textureType = texture.type;\r\n\r\n\t\t\t\t\tif ( ! capabilities.textureFormatReadable( textureFormat ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! capabilities.textureTypeReadable( textureType ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\r\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} finally {\r\n\r\n\t\t\t\t\t// restore framebuffer of current render target if necessary\r\n\r\n\t\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\r\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.readRenderTargetPixelsAsync = async function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\r\n\r\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\r\n\r\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( framebuffer ) {\r\n\r\n\t\t\t\tconst texture = renderTarget.texture;\r\n\t\t\t\tconst textureFormat = texture.format;\r\n\t\t\t\tconst textureType = texture.type;\r\n\r\n\t\t\t\tif ( ! capabilities.textureFormatReadable( textureFormat ) ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! capabilities.textureTypeReadable( textureType ) ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t// set the active frame buffer to the one we want to read\r\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\t\tconst glBuffer = _gl.createBuffer();\r\n\t\t\t\t\t_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ );\r\n\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), 0 );\r\n\r\n\t\t\t\t\t// reset the frame buffer to the currently set buffer before waiting\r\n\t\t\t\t\tconst currFramebuffer = _currentRenderTarget !== null ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\r\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, currFramebuffer );\r\n\r\n\t\t\t\t\t// check if the commands have finished every 8 ms\r\n\t\t\t\t\tconst sync = _gl.fenceSync( _gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );\r\n\r\n\t\t\t\t\t_gl.flush();\r\n\r\n\t\t\t\t\tawait probeAsync( _gl, sync, 4 );\r\n\r\n\t\t\t\t\t// read the data and delete the buffer\r\n\t\t\t\t\t_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );\r\n\t\t\t\t\t_gl.getBufferSubData( _gl.PIXEL_PACK_BUFFER, 0, buffer );\r\n\t\t\t\t\t_gl.deleteBuffer( glBuffer );\r\n\t\t\t\t\t_gl.deleteSync( sync );\r\n\r\n\t\t\t\t\treturn buffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyFramebufferToTexture = function ( texture, position = null, level = 0 ) {\r\n\r\n\t\t\t// support previous signature with position first\r\n\t\t\tif ( texture.isTexture !== true ) {\r\n\r\n\t\t\t\t// @deprecated, r165\r\n\t\t\t\twarnOnce( 'WebGLRenderer: copyFramebufferToTexture function signature has changed.' );\r\n\r\n\t\t\t\tposition = arguments[ 0 ] || null;\r\n\t\t\t\ttexture = arguments[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst levelScale = Math.pow( 2, - level );\r\n\t\t\tconst width = Math.floor( texture.image.width * levelScale );\r\n\t\t\tconst height = Math.floor( texture.image.height * levelScale );\r\n\r\n\t\t\tconst x = position !== null ? position.x : 0;\r\n\t\t\tconst y = position !== null ? position.y : 0;\r\n\r\n\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\t_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, x, y, width, height );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyTextureToTexture = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {\r\n\r\n\t\t\t// support previous signature with dstPosition first\r\n\t\t\tif ( srcTexture.isTexture !== true ) {\r\n\r\n\t\t\t\t// @deprecated, r165\r\n\t\t\t\twarnOnce( 'WebGLRenderer: copyTextureToTexture function signature has changed.' );\r\n\r\n\t\t\t\tdstPosition = arguments[ 0 ] || null;\r\n\t\t\t\tsrcTexture = arguments[ 1 ];\r\n\t\t\t\tdstTexture = arguments[ 2 ];\r\n\t\t\t\tlevel = arguments[ 3 ] || 0;\r\n\t\t\t\tsrcRegion = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet width, height, minX, minY;\r\n\t\t\tlet dstX, dstY;\r\n\t\t\tif ( srcRegion !== null ) {\r\n\r\n\t\t\t\twidth = srcRegion.max.x - srcRegion.min.x;\r\n\t\t\t\theight = srcRegion.max.y - srcRegion.min.y;\r\n\t\t\t\tminX = srcRegion.min.x;\r\n\t\t\t\tminY = srcRegion.min.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\twidth = srcTexture.image.width;\r\n\t\t\t\theight = srcTexture.image.height;\r\n\t\t\t\tminX = 0;\r\n\t\t\t\tminY = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( dstPosition !== null ) {\r\n\r\n\t\t\t\tdstX = dstPosition.x;\r\n\t\t\t\tdstY = dstPosition.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdstX = 0;\r\n\t\t\t\tdstY = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst glFormat = utils.convert( dstTexture.format );\r\n\t\t\tconst glType = utils.convert( dstTexture.type );\r\n\r\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\r\n\r\n\t\t\t// As another texture upload may have changed pixelStorei\r\n\t\t\t// parameters, make sure they are correct for the dstTexture\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\r\n\r\n\t\t\tconst currentUnpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );\r\n\t\t\tconst currentUnpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );\r\n\t\t\tconst currentUnpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );\r\n\t\t\tconst currentUnpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );\r\n\t\t\tconst currentUnpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );\r\n\r\n\t\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ level ] : srcTexture.image;\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, minX );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, minY );\r\n\r\n\t\t\tif ( srcTexture.isDataTexture ) {\r\n\r\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( srcTexture.isCompressedTexture ) {\r\n\r\n\t\t\t\t\t_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );\r\n\r\n\t\t\t// Generate mipmaps only when copying level 0\r\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyTextureToTexture3D = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {\r\n\r\n\t\t\t// support previous signature with source box first\r\n\t\t\tif ( srcTexture.isTexture !== true ) {\r\n\r\n\t\t\t\t// @deprecated, r165\r\n\t\t\t\twarnOnce( 'WebGLRenderer: copyTextureToTexture3D function signature has changed.' );\r\n\r\n\t\t\t\tsrcRegion = arguments[ 0 ] || null;\r\n\t\t\t\tdstPosition = arguments[ 1 ] || null;\r\n\t\t\t\tsrcTexture = arguments[ 2 ];\r\n\t\t\t\tdstTexture = arguments[ 3 ];\r\n\t\t\t\tlevel = arguments[ 4 ] || 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet width, height, depth, minX, minY, minZ;\r\n\t\t\tlet dstX, dstY, dstZ;\r\n\t\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ level ] : srcTexture.image;\r\n\t\t\tif ( srcRegion !== null ) {\r\n\r\n\t\t\t\twidth = srcRegion.max.x - srcRegion.min.x;\r\n\t\t\t\theight = srcRegion.max.y - srcRegion.min.y;\r\n\t\t\t\tdepth = srcRegion.max.z - srcRegion.min.z;\r\n\t\t\t\tminX = srcRegion.min.x;\r\n\t\t\t\tminY = srcRegion.min.y;\r\n\t\t\t\tminZ = srcRegion.min.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\twidth = image.width;\r\n\t\t\t\theight = image.height;\r\n\t\t\t\tdepth = image.depth;\r\n\t\t\t\tminX = 0;\r\n\t\t\t\tminY = 0;\r\n\t\t\t\tminZ = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( dstPosition !== null ) {\r\n\r\n\t\t\t\tdstX = dstPosition.x;\r\n\t\t\t\tdstY = dstPosition.y;\r\n\t\t\t\tdstZ = dstPosition.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdstX = 0;\r\n\t\t\t\tdstY = 0;\r\n\t\t\t\tdstZ = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst glFormat = utils.convert( dstTexture.format );\r\n\t\t\tconst glType = utils.convert( dstTexture.type );\r\n\t\t\tlet glTarget;\r\n\r\n\t\t\tif ( dstTexture.isData3DTexture ) {\r\n\r\n\t\t\t\ttextures.setTexture3D( dstTexture, 0 );\r\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\r\n\r\n\t\t\t} else if ( dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture ) {\r\n\r\n\t\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\r\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\r\n\r\n\t\t\tconst currentUnpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );\r\n\t\t\tconst currentUnpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );\r\n\t\t\tconst currentUnpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );\r\n\t\t\tconst currentUnpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );\r\n\t\t\tconst currentUnpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, minX );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, minY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, minZ );\r\n\r\n\t\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\r\n\r\n\t\t\t\t_gl.texSubImage3D( glTarget, level, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image.data );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( dstTexture.isCompressedArrayTexture ) {\r\n\r\n\t\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, dstX, dstY, dstZ, width, height, depth, glFormat, image.data );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texSubImage3D( glTarget, level, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );\r\n\r\n\t\t\t// Generate mipmaps only when copying level 0\r\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.initRenderTarget = function ( target ) {\r\n\r\n\t\t\tif ( properties.get( target ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\t\ttextures.setupRenderTarget( target );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.initTexture = function ( texture ) {\r\n\r\n\t\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\t\ttextures.setTextureCube( texture, 0 );\r\n\r\n\t\t\t} else if ( texture.isData3DTexture ) {\r\n\r\n\t\t\t\ttextures.setTexture3D( texture, 0 );\r\n\r\n\t\t\t} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\r\n\r\n\t\t\t\ttextures.setTexture2DArray( texture, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.resetState = function () {\r\n\r\n\t\t\t_currentActiveCubeFace = 0;\r\n\t\t\t_currentActiveMipmapLevel = 0;\r\n\t\t\t_currentRenderTarget = null;\r\n\r\n\t\t\tstate.reset();\r\n\t\t\tbindingStates.reset();\r\n\r\n\t\t};\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tget coordinateSystem() {\r\n\r\n\t\treturn WebGLCoordinateSystem;\r\n\r\n\t}\r\n\r\n\tget outputColorSpace() {\r\n\r\n\t\treturn this._outputColorSpace;\r\n\r\n\t}\r\n\r\n\tset outputColorSpace( colorSpace ) {\r\n\r\n\t\tthis._outputColorSpace = colorSpace;\r\n\r\n\t\tconst gl = this.getContext();\r\n\t\tgl.drawingBufferColorSpace = colorSpace === DisplayP3ColorSpace ? 'display-p3' : 'srgb';\r\n\t\tgl.unpackColorSpace = ColorManagement.workingColorSpace === LinearDisplayP3ColorSpace ? 'display-p3' : 'srgb';\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { WebGLRenderer };\r\n", "import { Color } from '../math/Color.js';\r\n\r\nclass FogExp2 {\r\n\r\n\tconstructor( color, density = 0.00025 ) {\r\n\r\n\t\tthis.isFogExp2 = true;\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.density = density;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new FogExp2( this.color, this.density );\r\n\r\n\t}\r\n\r\n\ttoJSON( /* meta */ ) {\r\n\r\n\t\treturn {\r\n\t\t\ttype: 'FogExp2',\r\n\t\t\tname: this.name,\r\n\t\t\tcolor: this.color.getHex(),\r\n\t\t\tdensity: this.density\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { FogExp2 };\r\n", "import { Color } from '../math/Color.js';\r\n\r\nclass Fog {\r\n\r\n\tconstructor( color, near = 1, far = 1000 ) {\r\n\r\n\t\tthis.isFog = true;\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\r\n\t\tthis.near = near;\r\n\t\tthis.far = far;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new Fog( this.color, this.near, this.far );\r\n\r\n\t}\r\n\r\n\ttoJSON( /* meta */ ) {\r\n\r\n\t\treturn {\r\n\t\t\ttype: 'Fog',\r\n\t\t\tname: this.name,\r\n\t\t\tcolor: this.color.getHex(),\r\n\t\t\tnear: this.near,\r\n\t\t\tfar: this.far\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Fog };\r\n", "import { Object3D } from '../core/Object3D.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass Scene extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isScene = true;\r\n\r\n\t\tthis.type = 'Scene';\r\n\r\n\t\tthis.background = null;\r\n\t\tthis.environment = null;\r\n\t\tthis.fog = null;\r\n\r\n\t\tthis.backgroundBlurriness = 0;\r\n\t\tthis.backgroundIntensity = 1;\r\n\t\tthis.backgroundRotation = new Euler();\r\n\r\n\t\tthis.environmentIntensity = 1;\r\n\t\tthis.environmentRotation = new Euler();\r\n\r\n\t\tthis.overrideMaterial = null;\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tif ( source.background !== null ) this.background = source.background.clone();\r\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\r\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\r\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\r\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\r\n\t\tthis.backgroundRotation.copy( source.backgroundRotation );\r\n\r\n\t\tthis.environmentIntensity = source.environmentIntensity;\r\n\t\tthis.environmentRotation.copy( source.environmentRotation );\r\n\r\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\r\n\r\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\r\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\r\n\t\tdata.object.backgroundRotation = this.backgroundRotation.toArray();\r\n\r\n\t\tif ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;\r\n\t\tdata.object.environmentRotation = this.environmentRotation.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Scene };\r\n", "import * as MathUtils from '../math/MathUtils.js';\r\nimport { StaticDrawUsage } from '../constants.js';\r\n\r\nclass InterleavedBuffer {\r\n\r\n\tconstructor( array, stride ) {\r\n\r\n\t\tthis.isInterleavedBuffer = true;\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRanges = [];\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t}\r\n\r\n\tonUploadCallback() {}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddUpdateRange( start, count ) {\r\n\r\n\t\tthis.updateRanges.push( { start, count } );\r\n\r\n\t}\r\n\r\n\tclearUpdateRanges() {\r\n\r\n\t\tthis.updateRanges.length = 0;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.count = source.count;\r\n\t\tthis.stride = source.stride;\r\n\t\tthis.usage = source.usage;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyAt( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.stride;\r\n\t\tindex2 *= attribute.stride;\r\n\r\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( value, offset = 0 ) {\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone( data ) {\r\n\r\n\t\tif ( data.arrayBuffers === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers = {};\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.array.buffer._uuid === undefined ) {\r\n\r\n\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\r\n\r\n\t\t}\r\n\r\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\r\n\r\n\t\tconst ib = new this.constructor( array, this.stride );\r\n\t\tib.setUsage( this.usage );\r\n\r\n\t\treturn ib;\r\n\r\n\t}\r\n\r\n\tonUpload( callback ) {\r\n\r\n\t\tthis.onUploadCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( data ) {\r\n\r\n\t\tif ( data.arrayBuffers === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers = {};\r\n\r\n\t\t}\r\n\r\n\t\t// generate UUID for array buffer if necessary\r\n\r\n\t\tif ( this.array.buffer._uuid === undefined ) {\r\n\r\n\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\treturn {\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tbuffer: this.array.buffer._uuid,\r\n\t\t\ttype: this.array.constructor.name,\r\n\t\t\tstride: this.stride\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InterleavedBuffer };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { BufferAttribute } from './BufferAttribute.js';\r\nimport { denormalize, normalize } from '../math/MathUtils.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass InterleavedBufferAttribute {\r\n\r\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\r\n\r\n\t\tthis.isInterleavedBufferAttribute = true;\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\r\n\t\tthis.normalized = normalized;\r\n\r\n\t}\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.data.count;\r\n\r\n\t}\r\n\r\n\tget array() {\r\n\r\n\t\treturn this.data.array;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tthis.data.needsUpdate = value;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyMatrix4( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyNormalMatrix( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.transformDirection( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index, component ) {\r\n\r\n\t\tlet value = this.array[ index * this.data.stride + this.offset + component ];\r\n\r\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, component, value ) {\r\n\r\n\t\tif ( this.normalized ) value = normalize( value, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + component ] = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone( data ) {\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * this.data.stride + this.offset;\r\n\r\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( data.interleavedBuffers === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers = {};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( data ) {\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * this.data.stride + this.offset;\r\n\r\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\r\n\r\n\t\t\treturn {\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\ttype: this.array.constructor.name,\r\n\t\t\t\tarray: array,\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// save as true interleaved attribute\r\n\r\n\t\t\tif ( data.interleavedBuffers === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers = {};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tisInterleavedBufferAttribute: true,\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\tdata: this.data.uuid,\r\n\t\t\t\toffset: this.offset,\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { InterleavedBufferAttribute };\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass SpriteMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSpriteMaterial = true;\r\n\r\n\t\tthis.type = 'SpriteMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SpriteMaterial };\r\n", "import { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\r\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\r\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\r\n\r\nlet _geometry;\r\n\r\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\r\nconst _worldScale = /*@__PURE__*/ new Vector3();\r\nconst _mvPosition = /*@__PURE__*/ new Vector3();\r\n\r\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\r\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\r\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nconst _vA = /*@__PURE__*/ new Vector3();\r\nconst _vB = /*@__PURE__*/ new Vector3();\r\nconst _vC = /*@__PURE__*/ new Vector3();\r\n\r\nconst _uvA = /*@__PURE__*/ new Vector2();\r\nconst _uvB = /*@__PURE__*/ new Vector2();\r\nconst _uvC = /*@__PURE__*/ new Vector2();\r\n\r\nclass Sprite extends Object3D {\r\n\r\n\tconstructor( material = new SpriteMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSprite = true;\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tif ( _geometry === undefined ) {\r\n\r\n\t\t\t_geometry = new BufferGeometry();\r\n\r\n\t\t\tconst float32Array = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\r\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\r\n\t\t\t\t0.5, 0.5, 0, 1, 1,\r\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\r\n\t\t\t] );\r\n\r\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = _geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.center = new Vector2( 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tif ( raycaster.camera === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\r\n\r\n\t\t}\r\n\r\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\r\n\r\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\r\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\r\n\r\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\r\n\r\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\r\n\r\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\r\n\r\n\t\t}\r\n\r\n\t\tconst rotation = this.material.rotation;\r\n\t\tlet sin, cos;\r\n\r\n\t\tif ( rotation !== 0 ) {\r\n\r\n\t\t\tcos = Math.cos( rotation );\r\n\t\t\tsin = Math.sin( rotation );\r\n\r\n\t\t}\r\n\r\n\t\tconst center = this.center;\r\n\r\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\r\n\t\t_uvA.set( 0, 0 );\r\n\t\t_uvB.set( 1, 0 );\r\n\t\t_uvC.set( 1, 1 );\r\n\r\n\t\t// check first triangle\r\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\r\n\r\n\t\tif ( intersect === null ) {\r\n\r\n\t\t\t// check second triangle\r\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\t_uvB.set( 0, 1 );\r\n\r\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\r\n\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\tintersects.push( {\r\n\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: _intersectPoint.clone(),\r\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\r\n\t\t\tface: null,\r\n\t\t\tobject: this\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\r\n\r\n\t\tthis.material = source.material;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\r\n\r\n\t// compute position in camera space\r\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\r\n\r\n\t// to check if rotation is not zero\r\n\tif ( sin !== undefined ) {\r\n\r\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\r\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\r\n\r\n\t} else {\r\n\r\n\t\t_rotatedPosition.copy( _alignedPosition );\r\n\r\n\t}\r\n\r\n\r\n\tvertexPosition.copy( mvPosition );\r\n\tvertexPosition.x += _rotatedPosition.x;\r\n\tvertexPosition.y += _rotatedPosition.y;\r\n\r\n\t// transform to world space\r\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\r\n\r\n}\r\n\r\nexport { Sprite };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\nclass LOD extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis._currentLevel = 0;\r\n\r\n\t\tthis.type = 'LOD';\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t},\r\n\t\t\tisLOD: {\r\n\t\t\t\tvalue: true,\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source, false );\r\n\r\n\t\tconst levels = source.levels;\r\n\r\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst level = levels[ i ];\r\n\r\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\r\n\r\n\t\t}\r\n\r\n\t\tthis.autoUpdate = source.autoUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\r\n\r\n\t\tdistance = Math.abs( distance );\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tlet l;\r\n\r\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\r\n\r\n\t\tthis.add( object );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremoveLevel( distance ) {\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tfor ( let i = 0; i < levels.length; i ++ ) {\r\n\r\n\t\t\tif ( levels[ i ].distance === distance ) {\r\n\r\n\t\t\t\tconst removedElements = levels.splice( i, 1 );\r\n\t\t\t\tthis.remove( removedElements[ 0 ].object );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetCurrentLevel() {\r\n\r\n\t\treturn this._currentLevel;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tgetObjectForDistance( distance ) {\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\tlet i, l;\r\n\r\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet levelDistance = levels[ i ].distance;\r\n\r\n\t\t\t\tif ( levels[ i ].object.visible ) {\r\n\r\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( distance < levelDistance ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn levels[ i - 1 ].object;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t_v1.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1 );\r\n\r\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( camera ) {\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t_v1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t_v2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tconst distance = _v1.distanceTo( _v2 ) / camera.zoom;\r\n\r\n\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\tlet i, l;\r\n\r\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet levelDistance = levels[ i ].distance;\r\n\r\n\t\t\t\tif ( levels[ i ].object.visible ) {\r\n\r\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( distance >= levelDistance ) {\r\n\r\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentLevel = i - 1;\r\n\r\n\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\r\n\r\n\t\tdata.object.levels = [];\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst level = levels[ i ];\r\n\r\n\t\t\tdata.object.levels.push( {\r\n\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\tdistance: level.distance,\r\n\t\t\t\thysteresis: level.hysteresis\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { LOD };\r\n", "import { Mesh } from './Mesh.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { AttachedBindMode, DetachedBindMode } from '../constants.js';\r\n\r\nconst _basePosition = /*@__PURE__*/ new Vector3();\r\n\r\nconst _skinIndex = /*@__PURE__*/ new Vector4();\r\nconst _skinWeight = /*@__PURE__*/ new Vector4();\r\n\r\nconst _vector3 = /*@__PURE__*/ new Vector3();\r\nconst _matrix4 = /*@__PURE__*/ new Matrix4();\r\nconst _vertex = /*@__PURE__*/ new Vector3();\r\n\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\n\r\nclass SkinnedMesh extends Mesh {\r\n\r\n\tconstructor( geometry, material ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isSkinnedMesh = true;\r\n\r\n\t\tthis.type = 'SkinnedMesh';\r\n\r\n\t\tthis.bindMode = AttachedBindMode;\r\n\t\tthis.bindMatrix = new Matrix4();\r\n\t\tthis.bindMatrixInverse = new Matrix4();\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\tthis.getVertexPosition( i, _vertex );\r\n\t\t\tthis.boundingBox.expandByPoint( _vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.makeEmpty();\r\n\r\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\tthis.getVertexPosition( i, _vertex );\r\n\t\t\tthis.boundingSphere.expandByPoint( _vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.bindMode = source.bindMode;\r\n\t\tthis.bindMatrix.copy( source.bindMatrix );\r\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\r\n\r\n\t\tthis.skeleton = source.skeleton;\r\n\r\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\r\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst material = this.material;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\r\n\t\tif ( material === undefined ) return;\r\n\r\n\t\t// test with bounding sphere in world space\r\n\r\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( this.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t// convert ray to local space of skinned mesh\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t// test with bounding box in local space\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tif ( _ray.intersectsBox( this.boundingBox ) === false ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// test for intersections with geometry\r\n\r\n\t\tthis._computeIntersections( raycaster, intersects, _ray );\r\n\r\n\t}\r\n\r\n\tgetVertexPosition( index, target ) {\r\n\r\n\t\tsuper.getVertexPosition( index, target );\r\n\r\n\t\tthis.applyBoneTransform( index, target );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tbind( skeleton, bindMatrix ) {\r\n\r\n\t\tthis.skeleton = skeleton;\r\n\r\n\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t}\r\n\r\n\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\r\n\r\n\t}\r\n\r\n\tpose() {\r\n\r\n\t\tthis.skeleton.pose();\r\n\r\n\t}\r\n\r\n\tnormalizeSkinWeights() {\r\n\r\n\t\tconst vector = new Vector4();\r\n\r\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\r\n\r\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\r\n\r\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\r\n\r\n\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\tvector.multiplyScalar( scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t}\r\n\r\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t\tif ( this.bindMode === AttachedBindMode ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t\t} else if ( this.bindMode === DetachedBindMode ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tapplyBoneTransform( index, vector ) {\r\n\r\n\t\tconst skeleton = this.skeleton;\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\r\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\r\n\r\n\t\t_basePosition.copy( vector ).applyMatrix4( this.bindMatrix );\r\n\r\n\t\tvector.set( 0, 0, 0 );\r\n\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst weight = _skinWeight.getComponent( i );\r\n\r\n\t\t\tif ( weight !== 0 ) {\r\n\r\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\r\n\r\n\t\t\t\t_matrix4.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\r\n\r\n\t\t\t\tvector.addScaledVector( _vector3.copy( _basePosition ).applyMatrix4( _matrix4 ), weight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn vector.applyMatrix4( this.bindMatrixInverse );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SkinnedMesh };\r\n", "import { Object3D } from '../core/Object3D.js';\r\n\r\nclass Bone extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isBone = true;\r\n\r\n\t\tthis.type = 'Bone';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Bone };\r\n", "import { Texture } from './Texture.js';\r\nimport { NearestFilter } from '../constants.js';\r\n\r\nclass DataTexture extends Texture {\r\n\r\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\r\n\r\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\r\n\r\n\t\tthis.isDataTexture = true;\r\n\r\n\t\tthis.image = { data: data, width: width, height: height };\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DataTexture };\r\n", "import {\r\n\tRGBAFormat,\r\n\tFloatType\r\n} from '../constants.js';\r\nimport { Bone } from './Bone.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nclass Skeleton {\r\n\r\n\tconstructor( bones = [], boneInverses = [] ) {\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\tthis.boneInverses = boneInverses;\r\n\t\tthis.boneMatrices = null;\r\n\r\n\t\tthis.boneTexture = null;\r\n\r\n\t\tthis.init();\r\n\r\n\t}\r\n\r\n\tinit() {\r\n\r\n\t\tconst bones = this.bones;\r\n\t\tconst boneInverses = this.boneInverses;\r\n\r\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\r\n\r\n\t\t// calculate inverse bone matrices if necessary\r\n\r\n\t\tif ( boneInverses.length === 0 ) {\r\n\r\n\t\t\tthis.calculateInverses();\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// handle special case\r\n\r\n\t\t\tif ( bones.length !== boneInverses.length ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\r\n\r\n\t\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcalculateInverses() {\r\n\r\n\t\tthis.boneInverses.length = 0;\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst inverse = new Matrix4();\r\n\r\n\t\t\tif ( this.bones[ i ] ) {\r\n\r\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpose() {\r\n\r\n\t\t// recover the bind-time world matrices\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst bone = this.bones[ i ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst bone = this.bones[ i ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\r\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst bones = this.bones;\r\n\t\tconst boneInverses = this.boneInverses;\r\n\t\tconst boneMatrices = this.boneMatrices;\r\n\t\tconst boneTexture = this.boneTexture;\r\n\r\n\t\t// flatten bone matrices to array\r\n\r\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\r\n\r\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\r\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( boneTexture !== null ) {\r\n\r\n\t\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new Skeleton( this.bones, this.boneInverses );\r\n\r\n\t}\r\n\r\n\tcomputeBoneTexture() {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = Math.ceil( size / 4 ) * 4;\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\r\n\r\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\r\n\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\tthis.boneMatrices = boneMatrices;\r\n\t\tthis.boneTexture = boneTexture;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetBoneByName( name ) {\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst bone = this.bones[ i ];\r\n\r\n\t\t\tif ( bone.name === name ) {\r\n\r\n\t\t\t\treturn bone;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tdispose( ) {\r\n\r\n\t\tif ( this.boneTexture !== null ) {\r\n\r\n\t\t\tthis.boneTexture.dispose();\r\n\r\n\t\t\tthis.boneTexture = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfromJSON( json, bones ) {\r\n\r\n\t\tthis.uuid = json.uuid;\r\n\r\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst uuid = json.bones[ i ];\r\n\t\t\tlet bone = bones[ uuid ];\r\n\r\n\t\t\tif ( bone === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\r\n\t\t\t\tbone = new Bone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.bones.push( bone );\r\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.init();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Skeleton',\r\n\t\t\t\tgenerator: 'Skeleton.toJSON'\r\n\t\t\t},\r\n\t\t\tbones: [],\r\n\t\t\tboneInverses: []\r\n\t\t};\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\r\n\t\tconst bones = this.bones;\r\n\t\tconst boneInverses = this.boneInverses;\r\n\r\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst bone = bones[ i ];\r\n\t\t\tdata.bones.push( bone.uuid );\r\n\r\n\t\t\tconst boneInverse = boneInverses[ i ];\r\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Skeleton };\r\n", "import { BufferAttribute } from './BufferAttribute.js';\r\n\r\nclass InstancedBufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\r\n\r\n\t\tsuper( array, itemSize, normalized );\r\n\r\n\t\tthis.isInstancedBufferAttribute = true;\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\tdata.isInstancedBufferAttribute = true;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedBufferAttribute };\r\n", "import { InstancedBufferAttribute } from '../core/InstancedBufferAttribute.js';\r\nimport { Mesh } from './Mesh.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport { FloatType, RedFormat } from '../constants.js';\r\n\r\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nconst _instanceIntersects = [];\r\n\r\nconst _box3 = /*@__PURE__*/ new Box3();\r\nconst _identity = /*@__PURE__*/ new Matrix4();\r\nconst _mesh = /*@__PURE__*/ new Mesh();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\n\r\nclass InstancedMesh extends Mesh {\r\n\r\n\tconstructor( geometry, material, count ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isInstancedMesh = true;\r\n\r\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\r\n\t\tthis.instanceColor = null;\r\n\t\tthis.morphTexture = null;\r\n\r\n\t\tthis.count = count;\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.setMatrixAt( i, _identity );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst count = this.count;\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\r\n\r\n\t\t\t_box3.copy( geometry.boundingBox ).applyMatrix4( _instanceLocalMatrix );\r\n\r\n\t\t\tthis.boundingBox.union( _box3 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst count = this.count;\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere === null ) {\r\n\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.makeEmpty();\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( _instanceLocalMatrix );\r\n\r\n\t\t\tthis.boundingSphere.union( _sphere );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\r\n\r\n\t\tif ( source.morphTexture !== null ) this.morphTexture = source.morphTexture.clone();\r\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\r\n\r\n\t\tthis.count = source.count;\r\n\r\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\r\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetColorAt( index, color ) {\r\n\r\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\r\n\r\n\t}\r\n\r\n\tgetMatrixAt( index, matrix ) {\r\n\r\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t}\r\n\r\n\tgetMorphAt( index, object ) {\r\n\r\n\t\tconst objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\tconst array = this.morphTexture.source.data.data;\r\n\r\n\t\tconst len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\r\n\r\n\t\tconst dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\r\n\r\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\r\n\r\n\t\t\tobjectInfluences[ i ] = array[ dataIndex + i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst raycastTimes = this.count;\r\n\r\n\t\t_mesh.geometry = this.geometry;\r\n\t\t_mesh.material = this.material;\r\n\r\n\t\tif ( _mesh.material === undefined ) return;\r\n\r\n\t\t// test with bounding sphere first\r\n\r\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( this.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t// now test each instance\r\n\r\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\r\n\r\n\t\t\t// calculate the world matrix for each instance\r\n\r\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\r\n\r\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\r\n\r\n\t\t\t// the mesh represents this single instance\r\n\r\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\r\n\r\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\r\n\r\n\t\t\t// process the result of raycast\r\n\r\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\r\n\t\t\t\tintersect.instanceId = instanceId;\r\n\t\t\t\tintersect.object = this;\r\n\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_instanceIntersects.length = 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetColorAt( index, color ) {\r\n\r\n\t\tif ( this.instanceColor === null ) {\r\n\r\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ).fill( 1 ), 3 );\r\n\r\n\t\t}\r\n\r\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\r\n\r\n\t}\r\n\r\n\tsetMatrixAt( index, matrix ) {\r\n\r\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t}\r\n\r\n\tsetMorphAt( index, object ) {\r\n\r\n\t\tconst objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\tconst len = objectInfluences.length + 1; // morphBaseInfluence + all influences\r\n\r\n\t\tif ( this.morphTexture === null ) {\r\n\r\n\t\t\tthis.morphTexture = new DataTexture( new Float32Array( len * this.count ), len, this.count, RedFormat, FloatType );\r\n\r\n\t\t}\r\n\r\n\t\tconst array = this.morphTexture.source.data.data;\r\n\r\n\t\tlet morphInfluencesSum = 0;\r\n\r\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\r\n\r\n\t\t\tmorphInfluencesSum += objectInfluences[ i ];\r\n\r\n\t\t}\r\n\r\n\t\tconst morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\r\n\r\n\t\tconst dataIndex = len * index;\r\n\r\n\t\tarray[ dataIndex ] = morphBaseInfluence;\r\n\r\n\t\tarray.set( objectInfluences, dataIndex + 1 );\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\tif ( this.morphTexture !== null ) {\r\n\r\n\t\t\tthis.morphTexture.dispose();\r\n\t\t\tthis.morphTexture = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedMesh };\r\n", "import { BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport { FloatType, RedIntegerFormat, UnsignedIntType } from '../constants.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Mesh } from './Mesh.js';\r\nimport { RGBAFormat } from '../constants.js';\r\nimport { ColorManagement } from '../math/ColorManagement.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Frustum } from '../math/Frustum.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nfunction sortOpaque( a, b ) {\r\n\r\n\treturn a.z - b.z;\r\n\r\n}\r\n\r\nfunction sortTransparent( a, b ) {\r\n\r\n\treturn b.z - a.z;\r\n\r\n}\r\n\r\nclass MultiDrawRenderList {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.index = 0;\r\n\t\tthis.pool = [];\r\n\t\tthis.list = [];\r\n\r\n\t}\r\n\r\n\tpush( drawRange, z, index ) {\r\n\r\n\t\tconst pool = this.pool;\r\n\t\tconst list = this.list;\r\n\t\tif ( this.index >= pool.length ) {\r\n\r\n\t\t\tpool.push( {\r\n\r\n\t\t\t\tstart: - 1,\r\n\t\t\t\tcount: - 1,\r\n\t\t\t\tz: - 1,\r\n\t\t\t\tindex: - 1,\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tconst item = pool[ this.index ];\r\n\t\tlist.push( item );\r\n\t\tthis.index ++;\r\n\r\n\t\titem.start = drawRange.start;\r\n\t\titem.count = drawRange.count;\r\n\t\titem.z = z;\r\n\t\titem.index = index;\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.list.length = 0;\r\n\t\tthis.index = 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _invMatrixWorld = /*@__PURE__*/ new Matrix4();\r\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _whiteColor = /*@__PURE__*/ new Color( 1, 1, 1 );\r\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _frustum = /*@__PURE__*/ new Frustum();\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _forward = /*@__PURE__*/ new Vector3();\r\nconst _temp = /*@__PURE__*/ new Vector3();\r\nconst _renderList = /*@__PURE__*/ new MultiDrawRenderList();\r\nconst _mesh = /*@__PURE__*/ new Mesh();\r\nconst _batchIntersects = [];\r\n\r\n// @TODO: SkinnedMesh support?\r\n// @TODO: geometry.groups support?\r\n// @TODO: geometry.drawRange support?\r\n// @TODO: geometry.morphAttributes support?\r\n// @TODO: Support uniform parameter per geometry\r\n// @TODO: Add an \"optimize\" function to pack geometry and remove data gaps\r\n\r\n// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\r\nfunction copyAttributeData( src, target, targetOffset = 0 ) {\r\n\r\n\tconst itemSize = target.itemSize;\r\n\tif ( src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor ) {\r\n\r\n\t\t// use the component getters and setters if the array data cannot\r\n\t\t// be copied directly\r\n\t\tconst vertexCount = src.count;\r\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\r\n\r\n\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\r\n\r\n\t\t\t\ttarget.setComponent( i + targetOffset, c, src.getComponent( i, c ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// faster copy approach using typed array set function\r\n\t\ttarget.array.set( src.array, targetOffset * itemSize );\r\n\r\n\t}\r\n\r\n\ttarget.needsUpdate = true;\r\n\r\n}\r\n\r\nclass BatchedMesh extends Mesh {\r\n\r\n\tget maxInstanceCount() {\r\n\r\n\t\treturn this._maxInstanceCount;\r\n\r\n\t}\r\n\r\n\tconstructor( maxInstanceCount, maxVertexCount, maxIndexCount = maxVertexCount * 2, material ) {\r\n\r\n\t\tsuper( new BufferGeometry(), material );\r\n\r\n\t\tthis.isBatchedMesh = true;\r\n\t\tthis.perObjectFrustumCulled = true;\r\n\t\tthis.sortObjects = true;\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\tthis.customSort = null;\r\n\r\n\t\t// stores visible, active, and geometry id per object\r\n\t\tthis._drawInfo = [];\r\n\r\n\t\t// instance ids that have been set as inactive, and are available to be overwritten\r\n\t\tthis._availableInstanceIds = [];\r\n\r\n\t\t// geometry information\r\n\t\tthis._drawRanges = [];\r\n\t\tthis._reservedRanges = [];\r\n\t\tthis._bounds = [];\r\n\r\n\t\tthis._maxInstanceCount = maxInstanceCount;\r\n\t\tthis._maxVertexCount = maxVertexCount;\r\n\t\tthis._maxIndexCount = maxIndexCount;\r\n\r\n\t\tthis._geometryInitialized = false;\r\n\t\tthis._geometryCount = 0;\r\n\t\tthis._multiDrawCounts = new Int32Array( maxInstanceCount );\r\n\t\tthis._multiDrawStarts = new Int32Array( maxInstanceCount );\r\n\t\tthis._multiDrawCount = 0;\r\n\t\tthis._multiDrawInstances = null;\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\t// Local matrix per geometry by using data texture\r\n\t\tthis._matricesTexture = null;\r\n\t\tthis._indirectTexture = null;\r\n\t\tthis._colorsTexture = null;\r\n\r\n\t\tthis._initMatricesTexture();\r\n\t\tthis._initIndirectTexture();\r\n\r\n\t}\r\n\r\n\t_initMatricesTexture() {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\r\n\r\n\t\tlet size = Math.sqrt( this._maxInstanceCount * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = Math.ceil( size / 4 ) * 4;\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tconst matricesArray = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\tconst matricesTexture = new DataTexture( matricesArray, size, size, RGBAFormat, FloatType );\r\n\r\n\t\tthis._matricesTexture = matricesTexture;\r\n\r\n\t}\r\n\r\n\t_initIndirectTexture() {\r\n\r\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\r\n\t\tsize = Math.ceil( size );\r\n\r\n\t\tconst indirectArray = new Uint32Array( size * size );\r\n\t\tconst indirectTexture = new DataTexture( indirectArray, size, size, RedIntegerFormat, UnsignedIntType );\r\n\r\n\t\tthis._indirectTexture = indirectTexture;\r\n\r\n\t}\r\n\r\n\t_initColorsTexture() {\r\n\r\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\r\n\t\tsize = Math.ceil( size );\r\n\r\n\t\t// 4 floats per RGBA pixel initialized to white\r\n\t\tconst colorsArray = new Float32Array( size * size * 4 ).fill( 1 );\r\n\t\tconst colorsTexture = new DataTexture( colorsArray, size, size, RGBAFormat, FloatType );\r\n\t\tcolorsTexture.colorSpace = ColorManagement.workingColorSpace;\r\n\r\n\t\tthis._colorsTexture = colorsTexture;\r\n\r\n\t}\r\n\r\n\t_initializeGeometry( reference ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst maxVertexCount = this._maxVertexCount;\r\n\t\tconst maxIndexCount = this._maxIndexCount;\r\n\t\tif ( this._geometryInitialized === false ) {\r\n\r\n\t\t\tfor ( const attributeName in reference.attributes ) {\r\n\r\n\t\t\t\tconst srcAttribute = reference.getAttribute( attributeName );\r\n\t\t\t\tconst { array, itemSize, normalized } = srcAttribute;\r\n\r\n\t\t\t\tconst dstArray = new array.constructor( maxVertexCount * itemSize );\r\n\t\t\t\tconst dstAttribute = new BufferAttribute( dstArray, itemSize, normalized );\r\n\r\n\t\t\t\tgeometry.setAttribute( attributeName, dstAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( reference.getIndex() !== null ) {\r\n\r\n\t\t\t\t// Reserve last u16 index for primitive restart.\r\n\t\t\t\tconst indexArray = maxVertexCount > 65535\r\n\t\t\t\t\t? new Uint32Array( maxIndexCount )\r\n\t\t\t\t\t: new Uint16Array( maxIndexCount );\r\n\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( indexArray, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._geometryInitialized = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Make sure the geometry is compatible with the existing combined geometry attributes\r\n\t_validateGeometry( geometry ) {\r\n\r\n\t\t// check to ensure the geometries are using consistent attributes and indices\r\n\t\tconst batchGeometry = this.geometry;\r\n\t\tif ( Boolean( geometry.getIndex() ) !== Boolean( batchGeometry.getIndex() ) ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: All geometries must consistently have \"index\".' );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\r\n\r\n\t\t\tif ( ! geometry.hasAttribute( attributeName ) ) {\r\n\r\n\t\t\t\tthrow new Error( `BatchedMesh: Added geometry missing \"${ attributeName }\". All geometries must have consistent attributes.` );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\r\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\r\n\t\t\tif ( srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized ) {\r\n\r\n\t\t\t\tthrow new Error( 'BatchedMesh: All attributes must have a consistent itemSize and normalized value.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetCustomSort( func ) {\r\n\r\n\t\tthis.customSort = func;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tconst boundingBox = this.boundingBox;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\r\n\t\tboundingBox.makeEmpty();\r\n\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( drawInfo[ i ].active === false ) continue;\r\n\r\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\tthis.getBoundingBoxAt( geometryId, _box ).applyMatrix4( _matrix );\r\n\t\t\tboundingBox.union( _box );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tconst boundingSphere = this.boundingSphere;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\r\n\t\tboundingSphere.makeEmpty();\r\n\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( drawInfo[ i ].active === false ) continue;\r\n\r\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\tthis.getBoundingSphereAt( geometryId, _sphere ).applyMatrix4( _matrix );\r\n\t\t\tboundingSphere.union( _sphere );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\taddInstance( geometryId ) {\r\n\r\n\t\tconst atCapacity = this._drawInfo.length >= this.maxInstanceCount;\r\n\r\n\t\t// ensure we're not over geometry\r\n\t\tif ( atCapacity && this._availableInstanceIds.length === 0 ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Maximum item count reached.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst instanceDrawInfo = {\r\n\t\t\tvisible: true,\r\n\t\t\tactive: true,\r\n\t\t\tgeometryIndex: geometryId,\r\n\t\t};\r\n\r\n\t\tlet drawId = null;\r\n\r\n\t\t// Prioritize using previously freed instance ids\r\n\t\tif ( this._availableInstanceIds.length > 0 ) {\r\n\r\n\t\t\tdrawId = this._availableInstanceIds.pop();\r\n\t\t\tthis._drawInfo[ drawId ] = instanceDrawInfo;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdrawId = this._drawInfo.length;\r\n\t\t\tthis._drawInfo.push( instanceDrawInfo );\r\n\r\n\t\t}\r\n\r\n\t\tconst matricesTexture = this._matricesTexture;\r\n\t\tconst matricesArray = matricesTexture.image.data;\r\n\t\t_identityMatrix.toArray( matricesArray, drawId * 16 );\r\n\t\tmatricesTexture.needsUpdate = true;\r\n\r\n\t\tconst colorsTexture = this._colorsTexture;\r\n\t\tif ( colorsTexture ) {\r\n\r\n\t\t\t_whiteColor.toArray( colorsTexture.image.data, drawId * 4 );\r\n\t\t\tcolorsTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn drawId;\r\n\r\n\t}\r\n\r\n\taddGeometry( geometry, vertexCount = - 1, indexCount = - 1 ) {\r\n\r\n\t\tthis._initializeGeometry( geometry );\r\n\r\n\t\tthis._validateGeometry( geometry );\r\n\r\n\t\t// ensure we're not over geometry\r\n\t\tif ( this._drawInfo.length >= this._maxInstanceCount ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Maximum item count reached.' );\r\n\r\n\t\t}\r\n\r\n\t\t// get the necessary range fo the geometry\r\n\t\tconst reservedRange = {\r\n\t\t\tvertexStart: - 1,\r\n\t\t\tvertexCount: - 1,\r\n\t\t\tindexStart: - 1,\r\n\t\t\tindexCount: - 1,\r\n\t\t};\r\n\r\n\t\tlet lastRange = null;\r\n\t\tconst reservedRanges = this._reservedRanges;\r\n\t\tconst drawRanges = this._drawRanges;\r\n\t\tconst bounds = this._bounds;\r\n\t\tif ( this._geometryCount !== 0 ) {\r\n\r\n\t\t\tlastRange = reservedRanges[ reservedRanges.length - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( vertexCount === - 1 ) {\r\n\r\n\t\t\treservedRange.vertexCount = geometry.getAttribute( 'position' ).count;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treservedRange.vertexCount = vertexCount;\r\n\r\n\t\t}\r\n\r\n\t\tif ( lastRange === null ) {\r\n\r\n\t\t\treservedRange.vertexStart = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treservedRange.vertexStart = lastRange.vertexStart + lastRange.vertexCount;\r\n\r\n\t\t}\r\n\r\n\t\tconst index = geometry.getIndex();\r\n\t\tconst hasIndex = index !== null;\r\n\t\tif ( hasIndex ) {\r\n\r\n\t\t\tif ( indexCount\t=== - 1 ) {\r\n\r\n\t\t\t\treservedRange.indexCount = index.count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treservedRange.indexCount = indexCount;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( lastRange === null ) {\r\n\r\n\t\t\t\treservedRange.indexStart = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treservedRange.indexStart = lastRange.indexStart + lastRange.indexCount;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\treservedRange.indexStart !== - 1 &&\r\n\t\t\treservedRange.indexStart + reservedRange.indexCount > this._maxIndexCount ||\r\n\t\t\treservedRange.vertexStart + reservedRange.vertexCount > this._maxVertexCount\r\n\t\t) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Reserved space request exceeds the maximum buffer size.' );\r\n\r\n\t\t}\r\n\r\n\t\t// update id\r\n\t\tconst geometryId = this._geometryCount;\r\n\t\tthis._geometryCount ++;\r\n\r\n\t\t// add the reserved range and draw range objects\r\n\t\treservedRanges.push( reservedRange );\r\n\t\tdrawRanges.push( {\r\n\t\t\tstart: hasIndex ? reservedRange.indexStart : reservedRange.vertexStart,\r\n\t\t\tcount: - 1\r\n\t\t} );\r\n\t\tbounds.push( {\r\n\t\t\tboxInitialized: false,\r\n\t\t\tbox: new Box3(),\r\n\r\n\t\t\tsphereInitialized: false,\r\n\t\t\tsphere: new Sphere()\r\n\t\t} );\r\n\r\n\t\t// update the geometry\r\n\t\tthis.setGeometryAt( geometryId, geometry );\r\n\r\n\t\treturn geometryId;\r\n\r\n\t}\r\n\r\n\tsetGeometryAt( geometryId, geometry ) {\r\n\r\n\t\tif ( geometryId >= this._geometryCount ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Maximum geometry count reached.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis._validateGeometry( geometry );\r\n\r\n\t\tconst batchGeometry = this.geometry;\r\n\t\tconst hasIndex = batchGeometry.getIndex() !== null;\r\n\t\tconst dstIndex = batchGeometry.getIndex();\r\n\t\tconst srcIndex = geometry.getIndex();\r\n\t\tconst reservedRange = this._reservedRanges[ geometryId ];\r\n\t\tif (\r\n\t\t\thasIndex &&\r\n\t\t\tsrcIndex.count > reservedRange.indexCount ||\r\n\t\t\tgeometry.attributes.position.count > reservedRange.vertexCount\r\n\t\t) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Reserved space not large enough for provided geometry.' );\r\n\r\n\t\t}\r\n\r\n\t\t// copy geometry over\r\n\t\tconst vertexStart = reservedRange.vertexStart;\r\n\t\tconst vertexCount = reservedRange.vertexCount;\r\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\r\n\r\n\t\t\t// copy attribute data\r\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\r\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\r\n\t\t\tcopyAttributeData( srcAttribute, dstAttribute, vertexStart );\r\n\r\n\t\t\t// fill the rest in with zeroes\r\n\t\t\tconst itemSize = srcAttribute.itemSize;\r\n\t\t\tfor ( let i = srcAttribute.count, l = vertexCount; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst index = vertexStart + i;\r\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\r\n\r\n\t\t\t\t\tdstAttribute.setComponent( index, c, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdstAttribute.needsUpdate = true;\r\n\t\t\tdstAttribute.addUpdateRange( vertexStart * itemSize, vertexCount * itemSize );\r\n\r\n\t\t}\r\n\r\n\t\t// copy index\r\n\t\tif ( hasIndex ) {\r\n\r\n\t\t\tconst indexStart = reservedRange.indexStart;\r\n\r\n\t\t\t// copy index data over\r\n\t\t\tfor ( let i = 0; i < srcIndex.count; i ++ ) {\r\n\r\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart + srcIndex.getX( i ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// fill the rest in with zeroes\r\n\t\t\tfor ( let i = srcIndex.count, l = reservedRange.indexCount; i < l; i ++ ) {\r\n\r\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdstIndex.needsUpdate = true;\r\n\t\t\tdstIndex.addUpdateRange( indexStart, reservedRange.indexCount );\r\n\r\n\t\t}\r\n\r\n\t\t// store the bounding boxes\r\n\t\tconst bound = this._bounds[ geometryId ];\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tbound.box.copy( geometry.boundingBox );\r\n\t\t\tbound.boxInitialized = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbound.boxInitialized = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tbound.sphere.copy( geometry.boundingSphere );\r\n\t\t\tbound.sphereInitialized = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbound.sphereInitialized = false;\r\n\r\n\t\t}\r\n\r\n\t\t// set drawRange count\r\n\t\tconst drawRange = this._drawRanges[ geometryId ];\r\n\t\tconst posAttr = geometry.getAttribute( 'position' );\r\n\t\tdrawRange.count = hasIndex ? srcIndex.count : posAttr.count;\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\treturn geometryId;\r\n\r\n\t}\r\n\r\n\t/*\r\n\tdeleteGeometry( geometryId ) {\r\n\r\n\t\t// TODO: delete geometry and associated instances\r\n\r\n\t}\r\n\t*/\r\n\r\n\tdeleteInstance( instanceId ) {\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tdrawInfo[ instanceId ].active = false;\r\n\t\tthis._availableInstanceIds.push( instanceId );\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// get bounding box and compute it if it doesn't exist\r\n\tgetBoundingBoxAt( geometryId, target ) {\r\n\r\n\t\tif ( geometryId >= this._geometryCount ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// compute bounding box\r\n\t\tconst bound = this._bounds[ geometryId ];\r\n\t\tconst box = bound.box;\r\n\t\tconst geometry = this.geometry;\r\n\t\tif ( bound.boxInitialized === false ) {\r\n\r\n\t\t\tbox.makeEmpty();\r\n\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst position = geometry.attributes.position;\r\n\t\t\tconst drawRange = this._drawRanges[ geometryId ];\r\n\t\t\tfor ( let i = drawRange.start, l = drawRange.start + drawRange.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet iv = i;\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tiv = index.getX( iv );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbox.expandByPoint( _vector.fromBufferAttribute( position, iv ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbound.boxInitialized = true;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.copy( box );\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t// get bounding sphere and compute it if it doesn't exist\r\n\tgetBoundingSphereAt( geometryId, target ) {\r\n\r\n\t\tif ( geometryId >= this._geometryCount ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// compute bounding sphere\r\n\t\tconst bound = this._bounds[ geometryId ];\r\n\t\tconst sphere = bound.sphere;\r\n\t\tconst geometry = this.geometry;\r\n\t\tif ( bound.sphereInitialized === false ) {\r\n\r\n\t\t\tsphere.makeEmpty();\r\n\r\n\t\t\tthis.getBoundingBoxAt( geometryId, _box );\r\n\t\t\t_box.getCenter( sphere.center );\r\n\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst position = geometry.attributes.position;\r\n\t\t\tconst drawRange = this._drawRanges[ geometryId ];\r\n\r\n\t\t\tlet maxRadiusSq = 0;\r\n\t\t\tfor ( let i = drawRange.start, l = drawRange.start + drawRange.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet iv = i;\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tiv = index.getX( iv );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( position, iv );\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, sphere.center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsphere.radius = Math.sqrt( maxRadiusSq );\r\n\t\t\tbound.sphereInitialized = true;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.copy( sphere );\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tsetMatrixAt( instanceId, matrix ) {\r\n\r\n\t\t// @TODO: Map geometryId to index of the arrays because\r\n\t\t//        optimize() can make geometryId mismatch the index\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst matricesTexture = this._matricesTexture;\r\n\t\tconst matricesArray = this._matricesTexture.image.data;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tmatrix.toArray( matricesArray, instanceId * 16 );\r\n\t\tmatricesTexture.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMatrixAt( instanceId, matrix ) {\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst matricesArray = this._matricesTexture.image.data;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn matrix.fromArray( matricesArray, instanceId * 16 );\r\n\r\n\t}\r\n\r\n\tsetColorAt( instanceId, color ) {\r\n\r\n\t\tif ( this._colorsTexture === null ) {\r\n\r\n\t\t\tthis._initColorsTexture();\r\n\r\n\t\t}\r\n\r\n\t\t// @TODO: Map id to index of the arrays because\r\n\t\t//        optimize() can make id mismatch the index\r\n\r\n\t\tconst colorsTexture = this._colorsTexture;\r\n\t\tconst colorsArray = this._colorsTexture.image.data;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tcolor.toArray( colorsArray, instanceId * 4 );\r\n\t\tcolorsTexture.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetColorAt( instanceId, color ) {\r\n\r\n\t\tconst colorsArray = this._colorsTexture.image.data;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn color.fromArray( colorsArray, instanceId * 4 );\r\n\r\n\t}\r\n\r\n\tsetVisibleAt( instanceId, value ) {\r\n\r\n\t\t// if the geometry is out of range, not active, or visibility state\r\n\t\t// does not change then return early\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif (\r\n\t\t\tinstanceId >= drawInfo.length ||\r\n\t\t\tdrawInfo[ instanceId ].active === false ||\r\n\t\t\tdrawInfo[ instanceId ].visible === value\r\n\t\t) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tdrawInfo[ instanceId ].visible = value;\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetVisibleAt( instanceId ) {\r\n\r\n\t\t// return early if the geometry is out of range or not active\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn drawInfo[ instanceId ].visible;\r\n\r\n\t}\r\n\r\n\tsetGeometryIdAt( instanceId, geometryId ) {\r\n\r\n\t\t// return early if the geometry is out of range or not active\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// check if the provided geometryId is within the valid range\r\n\t\tif ( geometryId < 0 || geometryId >= this._geometryCount ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tdrawInfo[ instanceId ].geometryIndex = geometryId;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetGeometryIdAt( instanceId ) {\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn - 1;\r\n\r\n\t\t}\r\n\r\n\t\treturn drawInfo[ instanceId ].geometryIndex;\r\n\r\n\t}\r\n\r\n\tgetGeometryRangeAt( geometryId, target = {} ) {\r\n\r\n\t\tif ( geometryId < 0 || geometryId >= this._geometryCount ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst drawRange = this._drawRanges[ geometryId ];\r\n\r\n\t\ttarget.start = drawRange.start;\r\n\t\ttarget.count = drawRange.count;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst drawRanges = this._drawRanges;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst batchGeometry = this.geometry;\r\n\r\n\t\t// iterate over each geometry\r\n\t\t_mesh.material = this.material;\r\n\t\t_mesh.geometry.index = batchGeometry.index;\r\n\t\t_mesh.geometry.attributes = batchGeometry.attributes;\r\n\t\tif ( _mesh.geometry.boundingBox === null ) {\r\n\r\n\t\t\t_mesh.geometry.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( _mesh.geometry.boundingSphere === null ) {\r\n\r\n\t\t\t_mesh.geometry.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( ! drawInfo[ i ].visible || ! drawInfo[ i ].active ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\t\t\tconst drawRange = drawRanges[ geometryId ];\r\n\t\t\t_mesh.geometry.setDrawRange( drawRange.start, drawRange.count );\r\n\r\n\t\t\t// ge the intersects\r\n\t\t\tthis.getMatrixAt( i, _mesh.matrixWorld ).premultiply( matrixWorld );\r\n\t\t\tthis.getBoundingBoxAt( geometryId, _mesh.geometry.boundingBox );\r\n\t\t\tthis.getBoundingSphereAt( geometryId, _mesh.geometry.boundingSphere );\r\n\t\t\t_mesh.raycast( raycaster, _batchIntersects );\r\n\r\n\t\t\t// add batch id to the intersects\r\n\t\t\tfor ( let j = 0, l = _batchIntersects.length; j < l; j ++ ) {\r\n\r\n\t\t\t\tconst intersect = _batchIntersects[ j ];\r\n\t\t\t\tintersect.object = this;\r\n\t\t\t\tintersect.batchId = i;\r\n\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_batchIntersects.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\t_mesh.material = null;\r\n\t\t_mesh.geometry.index = null;\r\n\t\t_mesh.geometry.attributes = {};\r\n\t\t_mesh.geometry.setDrawRange( 0, Infinity );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.geometry = source.geometry.clone();\r\n\t\tthis.perObjectFrustumCulled = source.perObjectFrustumCulled;\r\n\t\tthis.sortObjects = source.sortObjects;\r\n\t\tthis.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\r\n\t\tthis.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\r\n\r\n\t\tthis._drawRanges = source._drawRanges.map( range => ( { ...range } ) );\r\n\t\tthis._reservedRanges = source._reservedRanges.map( range => ( { ...range } ) );\r\n\r\n\t\tthis._drawInfo = source._drawInfo.map( inf => ( { ...inf } ) );\r\n\t\tthis._bounds = source._bounds.map( bound => ( {\r\n\t\t\tboxInitialized: bound.boxInitialized,\r\n\t\t\tbox: bound.box.clone(),\r\n\r\n\t\t\tsphereInitialized: bound.sphereInitialized,\r\n\t\t\tsphere: bound.sphere.clone()\r\n\t\t} ) );\r\n\r\n\t\tthis._maxInstanceCount = source._maxInstanceCount;\r\n\t\tthis._maxVertexCount = source._maxVertexCount;\r\n\t\tthis._maxIndexCount = source._maxIndexCount;\r\n\r\n\t\tthis._geometryInitialized = source._geometryInitialized;\r\n\t\tthis._geometryCount = source._geometryCount;\r\n\t\tthis._multiDrawCounts = source._multiDrawCounts.slice();\r\n\t\tthis._multiDrawStarts = source._multiDrawStarts.slice();\r\n\r\n\t\tthis._matricesTexture = source._matricesTexture.clone();\r\n\t\tthis._matricesTexture.image.data = this._matricesTexture.image.data.slice();\r\n\r\n\t\tif ( this._colorsTexture !== null ) {\r\n\r\n\t\t\tthis._colorsTexture = source._colorsTexture.clone();\r\n\t\t\tthis._colorsTexture.image.data = this._colorsTexture.image.data.slice();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\t// Assuming the geometry is not shared with other meshes\r\n\t\tthis.geometry.dispose();\r\n\r\n\t\tthis._matricesTexture.dispose();\r\n\t\tthis._matricesTexture = null;\r\n\r\n\t\tthis._indirectTexture.dispose();\r\n\t\tthis._indirectTexture = null;\r\n\r\n\t\tif ( this._colorsTexture !== null ) {\r\n\r\n\t\t\tthis._colorsTexture.dispose();\r\n\t\t\tthis._colorsTexture = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tonBeforeRender( renderer, scene, camera, geometry, material/*, _group*/ ) {\r\n\r\n\t\t// if visibility has not changed and frustum culling and object sorting is not required\r\n\t\t// then skip iterating over all items\r\n\t\tif ( ! this._visibilityChanged && ! this.perObjectFrustumCulled && ! this.sortObjects ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// the indexed version of the multi draw function requires specifying the start\r\n\t\t// offset in bytes.\r\n\t\tconst index = geometry.getIndex();\r\n\t\tconst bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst multiDrawStarts = this._multiDrawStarts;\r\n\t\tconst multiDrawCounts = this._multiDrawCounts;\r\n\t\tconst drawRanges = this._drawRanges;\r\n\t\tconst perObjectFrustumCulled = this.perObjectFrustumCulled;\r\n\t\tconst indirectTexture = this._indirectTexture;\r\n\t\tconst indirectArray = indirectTexture.image.data;\r\n\r\n\t\t// prepare the frustum in the local frame\r\n\t\tif ( perObjectFrustumCulled ) {\r\n\r\n\t\t\t_projScreenMatrix\r\n\t\t\t\t.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse )\r\n\t\t\t\t.multiply( this.matrixWorld );\r\n\t\t\t_frustum.setFromProjectionMatrix(\r\n\t\t\t\t_projScreenMatrix,\r\n\t\t\t\trenderer.coordinateSystem\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tlet count = 0;\r\n\t\tif ( this.sortObjects ) {\r\n\r\n\t\t\t// get the camera position in the local frame\r\n\t\t\t_invMatrixWorld.copy( this.matrixWorld ).invert();\r\n\t\t\t_vector.setFromMatrixPosition( camera.matrixWorld ).applyMatrix4( _invMatrixWorld );\r\n\t\t\t_forward.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld ).transformDirection( _invMatrixWorld );\r\n\r\n\t\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( drawInfo[ i ].visible && drawInfo[ i ].active ) {\r\n\r\n\t\t\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\r\n\t\t\t\t\t// get the bounds in world space\r\n\t\t\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere ).applyMatrix4( _matrix );\r\n\r\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\r\n\t\t\t\t\tlet culled = false;\r\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\r\n\r\n\t\t\t\t\t\tculled = ! _frustum.intersectsSphere( _sphere );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! culled ) {\r\n\r\n\t\t\t\t\t\t// get the distance from camera used for sorting\r\n\t\t\t\t\t\tconst z = _temp.subVectors( _sphere.center, _vector ).dot( _forward );\r\n\t\t\t\t\t\t_renderList.push( drawRanges[ geometryId ], z, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Sort the draw ranges and prep for rendering\r\n\t\t\tconst list = _renderList.list;\r\n\t\t\tconst customSort = this.customSort;\r\n\t\t\tif ( customSort === null ) {\r\n\r\n\t\t\t\tlist.sort( material.transparent ? sortTransparent : sortOpaque );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcustomSort.call( this, list, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0, l = list.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst item = list[ i ];\r\n\t\t\t\tmultiDrawStarts[ count ] = item.start * bytesPerElement;\r\n\t\t\t\tmultiDrawCounts[ count ] = item.count;\r\n\t\t\t\tindirectArray[ count ] = item.index;\r\n\t\t\t\tcount ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_renderList.reset();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( drawInfo[ i ].visible && drawInfo[ i ].active ) {\r\n\r\n\t\t\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\r\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\r\n\t\t\t\t\tlet culled = false;\r\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\r\n\r\n\t\t\t\t\t\t// get the bounds in world space\r\n\t\t\t\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere ).applyMatrix4( _matrix );\r\n\t\t\t\t\t\tculled = ! _frustum.intersectsSphere( _sphere );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! culled ) {\r\n\r\n\t\t\t\t\t\tconst range = drawRanges[ geometryId ];\r\n\t\t\t\t\t\tmultiDrawStarts[ count ] = range.start * bytesPerElement;\r\n\t\t\t\t\t\tmultiDrawCounts[ count ] = range.count;\r\n\t\t\t\t\t\tindirectArray[ count ] = i;\r\n\t\t\t\t\t\tcount ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tindirectTexture.needsUpdate = true;\r\n\t\tthis._multiDrawCount = count;\r\n\t\tthis._visibilityChanged = false;\r\n\r\n\t}\r\n\r\n\tonBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial/* , group */ ) {\r\n\r\n\t\tthis.onBeforeRender( renderer, null, shadowCamera, geometry, depthMaterial );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BatchedMesh };\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass LineBasicMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineBasicMaterial = true;\r\n\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineBasicMaterial };\r\n", "import { Sphere } from '../math/Sphere.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _vStart = /*@__PURE__*/ new Vector3();\r\nconst _vEnd = /*@__PURE__*/ new Vector3();\r\n\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\n\r\nconst _intersectPointOnRay = /*@__PURE__*/ new Vector3();\r\nconst _intersectPointOnSegment = /*@__PURE__*/ new Vector3();\r\n\r\nclass Line extends Object3D {\r\n\r\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLine = true;\r\n\r\n\t\tthis.type = 'Line';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\r\n\t\tthis.geometry = source.geometry;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcomputeLineDistances() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\t// we assume non-indexed geometry\r\n\r\n\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\tconst positionAttribute = geometry.attributes.position;\r\n\t\t\tconst lineDistances = [ 0 ];\r\n\r\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vStart.fromBufferAttribute( positionAttribute, i - 1 );\r\n\t\t\t\t_vEnd.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\tlineDistances[ i ] += _vStart.distanceTo( _vEnd );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst threshold = raycaster.params.Line.threshold;\r\n\t\tconst drawRange = geometry.drawRange;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\t\t_sphere.radius += threshold;\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t//\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\tconst localThresholdSq = localThreshold * localThreshold;\r\n\r\n\t\tconst step = this.isLineSegments ? 2 : 1;\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tconst positionAttribute = attributes.position;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\r\n\r\n\t\t\t\tconst a = index.getX( i );\r\n\t\t\t\tconst b = index.getX( i + 1 );\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, a, b );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isLineLoop ) {\r\n\r\n\t\t\t\tconst a = index.getX( end - 1 );\r\n\t\t\t\tconst b = index.getX( start );\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, a, b );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, i, i + 1 );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isLineLoop ) {\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, end - 1, start );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\t\tconst keys = Object.keys( morphAttributes );\r\n\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction checkIntersection( object, raycaster, ray, thresholdSq, a, b ) {\r\n\r\n\tconst positionAttribute = object.geometry.attributes.position;\r\n\r\n\t_vStart.fromBufferAttribute( positionAttribute, a );\r\n\t_vEnd.fromBufferAttribute( positionAttribute, b );\r\n\r\n\tconst distSq = ray.distanceSqToSegment( _vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment );\r\n\r\n\tif ( distSq > thresholdSq ) return;\r\n\r\n\t_intersectPointOnRay.applyMatrix4( object.matrixWorld ); // Move back to world space for distance calculation\r\n\r\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectPointOnRay );\r\n\r\n\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\treturn {\r\n\r\n\t\tdistance: distance,\r\n\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t// point: raycaster.ray.at( distance ),\r\n\t\tpoint: _intersectPointOnSegment.clone().applyMatrix4( object.matrixWorld ),\r\n\t\tindex: a,\r\n\t\tface: null,\r\n\t\tfaceIndex: null,\r\n\t\tbarycoord: null,\r\n\t\tobject: object\r\n\r\n\t};\r\n\r\n}\r\n\r\nexport { Line };\r\n", "import { Line } from './Line.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _start = /*@__PURE__*/ new Vector3();\r\nconst _end = /*@__PURE__*/ new Vector3();\r\n\r\nclass LineSegments extends Line {\r\n\r\n\tconstructor( geometry, material ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isLineSegments = true;\r\n\r\n\t\tthis.type = 'LineSegments';\r\n\r\n\t}\r\n\r\n\tcomputeLineDistances() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\t// we assume non-indexed geometry\r\n\r\n\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\tconst positionAttribute = geometry.attributes.position;\r\n\t\t\tconst lineDistances = [];\r\n\r\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\r\n\r\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\r\n\r\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineSegments };\r\n", "import { Line } from './Line.js';\r\n\r\nclass LineLoop extends Line {\r\n\r\n\tconstructor( geometry, material ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isLineLoop = true;\r\n\r\n\t\tthis.type = 'LineLoop';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineLoop };\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass PointsMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPointsMaterial = true;\r\n\r\n\t\tthis.type = 'PointsMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PointsMaterial };\r\n", "import { Sphere } from '../math/Sphere.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { PointsMaterial } from '../materials/PointsMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _position = /*@__PURE__*/ new Vector3();\r\n\r\nclass Points extends Object3D {\r\n\r\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPoints = true;\r\n\r\n\t\tthis.type = 'Points';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\r\n\t\tthis.geometry = source.geometry;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst threshold = raycaster.params.Points.threshold;\r\n\t\tconst drawRange = geometry.drawRange;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\t\t_sphere.radius += threshold;\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t//\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\tconst localThresholdSq = localThreshold * localThreshold;\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tconst positionAttribute = attributes.position;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst a = index.getX( i );\r\n\r\n\t\t\t\t_position.fromBufferAttribute( positionAttribute, a );\r\n\r\n\t\t\t\ttestPoint( _position, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\r\n\r\n\t\t\t\t_position.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\ttestPoint( _position, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\t\tconst keys = Object.keys( morphAttributes );\r\n\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\r\n\r\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\r\n\r\n\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\tconst intersectPoint = new Vector3();\r\n\r\n\t\t_ray.closestPointToPoint( point, intersectPoint );\r\n\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\tintersects.push( {\r\n\r\n\t\t\tdistance: distance,\r\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\tpoint: intersectPoint,\r\n\t\t\tindex: index,\r\n\t\t\tface: null,\r\n\t\t\tfaceIndex: null,\r\n\t\t\tbarycoord: null,\r\n\t\t\tobject: object\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Points };\r\n", "import { LinearFilter } from '../constants.js';\r\nimport { Texture } from './Texture.js';\r\n\r\nclass VideoTexture extends Texture {\r\n\r\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.isVideoTexture = true;\r\n\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tfunction updateVideo() {\r\n\r\n\t\t\tscope.needsUpdate = true;\r\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\r\n\r\n\t\t}\r\n\r\n\t\tif ( 'requestVideoFrameCallback' in video ) {\r\n\r\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.image ).copy( this );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst video = this.image;\r\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\r\n\r\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { VideoTexture };\r\n", "import { Texture } from './Texture.js';\r\nimport { NearestFilter } from '../constants.js';\r\n\r\nclass FramebufferTexture extends Texture {\r\n\r\n\tconstructor( width, height ) {\r\n\r\n\t\tsuper( { width, height } );\r\n\r\n\t\tthis.isFramebufferTexture = true;\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { FramebufferTexture };\r\n", "import { Texture } from './Texture.js';\r\n\r\nclass CompressedTexture extends Texture {\r\n\r\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace ) {\r\n\r\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\r\n\r\n\t\tthis.isCompressedTexture = true;\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\t\tthis.mipmaps = mipmaps;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CompressedTexture };\r\n", "import { ClampToEdgeWrapping } from '../constants.js';\r\nimport { CompressedTexture } from './CompressedTexture.js';\r\n\r\nclass CompressedArrayTexture extends CompressedTexture {\r\n\r\n\tconstructor( mipmaps, width, height, depth, format, type ) {\r\n\r\n\t\tsuper( mipmaps, width, height, format, type );\r\n\r\n\t\tthis.isCompressedArrayTexture = true;\r\n\t\tthis.image.depth = depth;\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.layerUpdates = new Set();\r\n\r\n\t}\r\n\r\n\taddLayerUpdate( layerIndex ) {\r\n\r\n\t\tthis.layerUpdates.add( layerIndex );\r\n\r\n\t}\r\n\r\n\tclearLayerUpdates() {\r\n\r\n\t\tthis.layerUpdates.clear();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CompressedArrayTexture };\r\n", "import { CubeReflectionMapping } from '../constants.js';\r\nimport { CompressedTexture } from './CompressedTexture.js';\r\n\r\nclass CompressedCubeTexture extends CompressedTexture {\r\n\r\n\tconstructor( images, format, type ) {\r\n\r\n\t\tsuper( undefined, images[ 0 ].width, images[ 0 ].height, format, type, CubeReflectionMapping );\r\n\r\n\t\tthis.isCompressedCubeTexture = true;\r\n\t\tthis.isCubeTexture = true;\r\n\r\n\t\tthis.image = images;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CompressedCubeTexture };\r\n", "import { Texture } from './Texture.js';\r\n\r\nclass CanvasTexture extends Texture {\r\n\r\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.isCanvasTexture = true;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CanvasTexture };\r\n", "import * as MathUtils from '../../math/MathUtils.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\n\r\n/**\r\n * Extensible curve object.\r\n *\r\n * Some common of curve methods:\r\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\r\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This following curves inherit from THREE.Curve:\r\n *\r\n * -- 2D curves --\r\n * THREE.ArcCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.EllipseCurve\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.SplineCurve\r\n *\r\n * -- 3D curves --\r\n * THREE.CatmullRomCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath.\r\n *\r\n **/\r\n\r\nclass Curve {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.type = 'Curve';\r\n\r\n\t\tthis.arcLengthDivisions = 200;\r\n\r\n\t}\r\n\r\n\t// Virtual base class method to overwrite and implement in subclasses\r\n\t//\t- t [0 .. 1]\r\n\r\n\tgetPoint( /* t, optionalTarget */ ) {\r\n\r\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\t// Get point at relative position in curve according to arc length\r\n\t// - u [0 .. 1]\r\n\r\n\tgetPointAt( u, optionalTarget ) {\r\n\r\n\t\tconst t = this.getUtoTmapping( u );\r\n\t\treturn this.getPoint( t, optionalTarget );\r\n\r\n\t}\r\n\r\n\t// Get sequence of points using getPoint( t )\r\n\r\n\tgetPoints( divisions = 5 ) {\r\n\r\n\t\tconst points = [];\r\n\r\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t}\r\n\r\n\t// Get sequence of points using getPointAt( u )\r\n\r\n\tgetSpacedPoints( divisions = 5 ) {\r\n\r\n\t\tconst points = [];\r\n\r\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t}\r\n\r\n\t// Get total curve arc length\r\n\r\n\tgetLength() {\r\n\r\n\t\tconst lengths = this.getLengths();\r\n\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t}\r\n\r\n\t// Get list of cumulative segment lengths\r\n\r\n\tgetLengths( divisions = this.arcLengthDivisions ) {\r\n\r\n\t\tif ( this.cacheArcLengths &&\r\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\r\n\t\t\t! this.needsUpdate ) {\r\n\r\n\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tconst cache = [];\r\n\t\tlet current, last = this.getPoint( 0 );\r\n\t\tlet sum = 0;\r\n\r\n\t\tcache.push( 0 );\r\n\r\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\tcurrent = this.getPoint( p / divisions );\r\n\t\t\tsum += current.distanceTo( last );\r\n\t\t\tcache.push( sum );\r\n\t\t\tlast = current;\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\r\n\r\n\t}\r\n\r\n\tupdateArcLengths() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.getLengths();\r\n\r\n\t}\r\n\r\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\tgetUtoTmapping( u, distance ) {\r\n\r\n\t\tconst arcLengths = this.getLengths();\r\n\r\n\t\tlet i = 0;\r\n\t\tconst il = arcLengths.length;\r\n\r\n\t\tlet targetArcLength; // The targeted u distance value to get\r\n\r\n\t\tif ( distance ) {\r\n\r\n\t\t\ttargetArcLength = distance;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\tlet low = 0, high = il - 1, comparison;\r\n\r\n\t\twhile ( low <= high ) {\r\n\r\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = i;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// DONE\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ti = high;\r\n\r\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\treturn i / ( il - 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\tconst lengthBefore = arcLengths[ i ];\r\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\tconst segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t// add that fractional amount to t\r\n\r\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\treturn t;\r\n\r\n\t}\r\n\r\n\t// Returns a unit vector tangent at t\r\n\t// In case any sub curve does not implement its tangent derivation,\r\n\t// 2 points a small delta apart will be used to find its gradient\r\n\t// which seems to give a reasonable approximation\r\n\r\n\tgetTangent( t, optionalTarget ) {\r\n\r\n\t\tconst delta = 0.0001;\r\n\t\tlet t1 = t - delta;\r\n\t\tlet t2 = t + delta;\r\n\r\n\t\t// Capping in case of danger\r\n\r\n\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\t\tconst pt1 = this.getPoint( t1 );\r\n\t\tconst pt2 = this.getPoint( t2 );\r\n\r\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\r\n\r\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\r\n\r\n\t\treturn tangent;\r\n\r\n\t}\r\n\r\n\tgetTangentAt( u, optionalTarget ) {\r\n\r\n\t\tconst t = this.getUtoTmapping( u );\r\n\t\treturn this.getTangent( t, optionalTarget );\r\n\r\n\t}\r\n\r\n\tcomputeFrenetFrames( segments, closed ) {\r\n\r\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\tconst tangents = [];\r\n\t\tconst normals = [];\r\n\t\tconst binormals = [];\r\n\r\n\t\tconst vec = new Vector3();\r\n\t\tconst mat = new Matrix4();\r\n\r\n\t\t// compute the tangent vectors for each segment on the curve\r\n\r\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\tconst u = i / segments;\r\n\r\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\r\n\r\n\t\t}\r\n\r\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t// and in the direction of the minimum tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new Vector3();\r\n\t\tbinormals[ 0 ] = new Vector3();\r\n\t\tlet min = Number.MAX_VALUE;\r\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\r\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\r\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= min ) {\r\n\r\n\t\t\tmin = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ty <= min ) {\r\n\r\n\t\t\tmin = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tz <= min ) {\r\n\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\r\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\t\tvec.normalize();\r\n\r\n\t\t\t\tconst theta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\t\tif ( closed === true ) {\r\n\r\n\t\t\tlet theta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\r\n\t\t\ttheta /= segments;\r\n\r\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\r\n\r\n\t\t\t\ttheta = - theta;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\t// twist a little...\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttangents: tangents,\r\n\t\t\tnormals: normals,\r\n\t\t\tbinormals: binormals\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Curve',\r\n\t\t\t\tgenerator: 'Curve.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\r\n\t\tdata.type = this.type;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Curve };\r\n", "import { Curve } from '../core/Curve.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass EllipseCurve extends Curve {\r\n\r\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isEllipseCurve = true;\r\n\r\n\t\tthis.type = 'EllipseCurve';\r\n\r\n\t\tthis.aX = aX;\r\n\t\tthis.aY = aY;\r\n\r\n\t\tthis.xRadius = xRadius;\r\n\t\tthis.yRadius = yRadius;\r\n\r\n\t\tthis.aStartAngle = aStartAngle;\r\n\t\tthis.aEndAngle = aEndAngle;\r\n\r\n\t\tthis.aClockwise = aClockwise;\r\n\r\n\t\tthis.aRotation = aRotation;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector2() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst twoPi = Math.PI * 2;\r\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\r\n\r\n\t\t// ensures that deltaAngle is 0 .. 2 PI\r\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\r\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\r\n\r\n\t\tif ( deltaAngle < Number.EPSILON ) {\r\n\r\n\t\t\tif ( samePoints ) {\r\n\r\n\t\t\t\tdeltaAngle = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aClockwise === true && ! samePoints ) {\r\n\r\n\t\t\tif ( deltaAngle === twoPi ) {\r\n\r\n\t\t\t\tdeltaAngle = - twoPi;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\r\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\t\tconst cos = Math.cos( this.aRotation );\r\n\t\t\tconst sin = Math.sin( this.aRotation );\r\n\r\n\t\t\tconst tx = x - this.aX;\r\n\t\t\tconst ty = y - this.aY;\r\n\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = tx * cos - ty * sin + this.aX;\r\n\t\t\ty = tx * sin + ty * cos + this.aY;\r\n\r\n\t\t}\r\n\r\n\t\treturn point.set( x, y );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.aX = source.aX;\r\n\t\tthis.aY = source.aY;\r\n\r\n\t\tthis.xRadius = source.xRadius;\r\n\t\tthis.yRadius = source.yRadius;\r\n\r\n\t\tthis.aStartAngle = source.aStartAngle;\r\n\t\tthis.aEndAngle = source.aEndAngle;\r\n\r\n\t\tthis.aClockwise = source.aClockwise;\r\n\r\n\t\tthis.aRotation = source.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.aX = this.aX;\r\n\t\tdata.aY = this.aY;\r\n\r\n\t\tdata.xRadius = this.xRadius;\r\n\t\tdata.yRadius = this.yRadius;\r\n\r\n\t\tdata.aStartAngle = this.aStartAngle;\r\n\t\tdata.aEndAngle = this.aEndAngle;\r\n\r\n\t\tdata.aClockwise = this.aClockwise;\r\n\r\n\t\tdata.aRotation = this.aRotation;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.aX = json.aX;\r\n\t\tthis.aY = json.aY;\r\n\r\n\t\tthis.xRadius = json.xRadius;\r\n\t\tthis.yRadius = json.yRadius;\r\n\r\n\t\tthis.aStartAngle = json.aStartAngle;\r\n\t\tthis.aEndAngle = json.aEndAngle;\r\n\r\n\t\tthis.aClockwise = json.aClockwise;\r\n\r\n\t\tthis.aRotation = json.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { EllipseCurve };\r\n", "import { EllipseCurve } from './EllipseCurve.js';\r\n\r\nclass ArcCurve extends EllipseCurve {\r\n\r\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\tthis.isArcCurve = true;\r\n\r\n\t\tthis.type = 'ArcCurve';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ArcCurve };\r\n", "import { Vector3 } from '../../math/Vector3.js';\r\nimport { Curve } from '../core/Curve.js';\r\n\r\n/**\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\n\r\n/*\r\nBased on an optimized c++ solution in\r\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n - http://ideone.com/NoEbVM\r\n\r\nThis CubicPoly class could be used for reusing some variables and calculations,\r\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\nwhich can be placed in CurveUtils.\r\n*/\r\n\r\nfunction CubicPoly() {\r\n\r\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\tc0 = x0;\r\n\t\tc1 = t0;\r\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\tt1 *= dt1;\r\n\t\t\tt2 *= dt1;\r\n\r\n\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t},\r\n\r\n\t\tcalc: function ( t ) {\r\n\r\n\t\t\tconst t2 = t * t;\r\n\t\t\tconst t3 = t2 * t;\r\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\n//\r\n\r\nconst tmp = /*@__PURE__*/ new Vector3();\r\nconst px = /*@__PURE__*/ new CubicPoly();\r\nconst py = /*@__PURE__*/ new CubicPoly();\r\nconst pz = /*@__PURE__*/ new CubicPoly();\r\n\r\nclass CatmullRomCurve3 extends Curve {\r\n\r\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isCatmullRomCurve3 = true;\r\n\r\n\t\tthis.type = 'CatmullRomCurve3';\r\n\r\n\t\tthis.points = points;\r\n\t\tthis.closed = closed;\r\n\t\tthis.curveType = curveType;\r\n\t\tthis.tension = tension;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst points = this.points;\r\n\t\tconst l = points.length;\r\n\r\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\tlet intPoint = Math.floor( p );\r\n\t\tlet weight = p - intPoint;\r\n\r\n\t\tif ( this.closed ) {\r\n\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\tintPoint = l - 2;\r\n\t\t\tweight = 1;\r\n\r\n\t\t}\r\n\r\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\r\n\r\n\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate first point\r\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\tp0 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tconst p1 = points[ intPoint % l ];\r\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate last point\r\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\tp3 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t// safety check for repeated points\r\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t\t}\r\n\r\n\t\tpoint.set(\r\n\t\t\tpx.calc( weight ),\r\n\t\t\tpy.calc( weight ),\r\n\t\t\tpz.calc( weight )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = source.closed;\r\n\t\tthis.curveType = source.curveType;\r\n\t\tthis.tension = source.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\tdata.closed = this.closed;\r\n\t\tdata.curveType = this.curveType;\r\n\t\tdata.tension = this.tension;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = json.closed;\r\n\t\tthis.curveType = json.curveType;\r\n\t\tthis.tension = json.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CatmullRomCurve3 };\r\n", "/**\r\n * Bezier Curves formulas obtained from\r\n * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n */\r\n\r\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\r\n\r\n\tconst v0 = ( p2 - p0 ) * 0.5;\r\n\tconst v1 = ( p3 - p1 ) * 0.5;\r\n\tconst t2 = t * t;\r\n\tconst t3 = t * t2;\r\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n}\r\n\r\n//\r\n\r\nfunction QuadraticBezierP0( t, p ) {\r\n\r\n\tconst k = 1 - t;\r\n\treturn k * k * p;\r\n\r\n}\r\n\r\nfunction QuadraticBezierP1( t, p ) {\r\n\r\n\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n}\r\n\r\nfunction QuadraticBezierP2( t, p ) {\r\n\r\n\treturn t * t * p;\r\n\r\n}\r\n\r\nfunction QuadraticBezier( t, p0, p1, p2 ) {\r\n\r\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\r\n\t\tQuadraticBezierP2( t, p2 );\r\n\r\n}\r\n\r\n//\r\n\r\nfunction CubicBezierP0( t, p ) {\r\n\r\n\tconst k = 1 - t;\r\n\treturn k * k * k * p;\r\n\r\n}\r\n\r\nfunction CubicBezierP1( t, p ) {\r\n\r\n\tconst k = 1 - t;\r\n\treturn 3 * k * k * t * p;\r\n\r\n}\r\n\r\nfunction CubicBezierP2( t, p ) {\r\n\r\n\treturn 3 * ( 1 - t ) * t * t * p;\r\n\r\n}\r\n\r\nfunction CubicBezierP3( t, p ) {\r\n\r\n\treturn t * t * t * p;\r\n\r\n}\r\n\r\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\r\n\r\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\r\n\t\tCubicBezierP3( t, p3 );\r\n\r\n}\r\n\r\nexport { CatmullRom, QuadraticBezier, CubicBezier };\r\n", "import { Curve } from '../core/Curve.js';\r\nimport { CubicBezier } from '../core/Interpolations.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass CubicBezierCurve extends Curve {\r\n\r\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isCubicBezierCurve = true;\r\n\r\n\t\tthis.type = 'CubicBezierCurve';\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector2() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubicBezierCurve };\r\n", "import { Curve } from '../core/Curve.js';\r\nimport { CubicBezier } from '../core/Interpolations.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nclass CubicBezierCurve3 extends Curve {\r\n\r\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isCubicBezierCurve3 = true;\r\n\r\n\t\tthis.type = 'CubicBezierCurve3';\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\r\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubicBezierCurve3 };\r\n", "import { Vector2 } from '../../math/Vector2.js';\r\nimport { Curve } from '../core/Curve.js';\r\n\r\nclass LineCurve extends Curve {\r\n\r\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineCurve = true;\r\n\r\n\t\tthis.type = 'LineCurve';\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector2() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\tgetPointAt( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t}\r\n\r\n\tgetTangent( t, optionalTarget = new Vector2() ) {\r\n\r\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\r\n\r\n\t}\r\n\r\n\tgetTangentAt( u, optionalTarget ) {\r\n\r\n\t\treturn this.getTangent( u, optionalTarget );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineCurve };\r\n", "import { Vector3 } from '../../math/Vector3.js';\r\nimport { Curve } from '../core/Curve.js';\r\n\r\nclass LineCurve3 extends Curve {\r\n\r\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineCurve3 = true;\r\n\r\n\t\tthis.type = 'LineCurve3';\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\tgetPointAt( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t}\r\n\r\n\tgetTangent( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\r\n\r\n\t}\r\n\r\n\tgetTangentAt( u, optionalTarget ) {\r\n\r\n\t\treturn this.getTangent( u, optionalTarget );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineCurve3 };\r\n", "import { Curve } from '../core/Curve.js';\r\nimport { QuadraticBezier } from '../core/Interpolations.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass QuadraticBezierCurve extends Curve {\r\n\r\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isQuadraticBezierCurve = true;\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve';\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector2() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { QuadraticBezierCurve };\r\n", "import { Curve } from '../core/Curve.js';\r\nimport { QuadraticBezier } from '../core/Interpolations.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nclass QuadraticBezierCurve3 extends Curve {\r\n\r\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isQuadraticBezierCurve3 = true;\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve3';\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\r\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { QuadraticBezierCurve3 };\r\n", "import { Curve } from '../core/Curve.js';\r\nimport { CatmullRom } from '../core/Interpolations.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass SplineCurve extends Curve {\r\n\r\n\tconstructor( points = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSplineCurve = true;\r\n\r\n\t\tthis.type = 'SplineCurve';\r\n\r\n\t\tthis.points = points;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector2() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst points = this.points;\r\n\t\tconst p = ( points.length - 1 ) * t;\r\n\r\n\t\tconst intPoint = Math.floor( p );\r\n\t\tconst weight = p - intPoint;\r\n\r\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tconst p1 = points[ intPoint ];\r\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tpoint.set(\r\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\r\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SplineCurve };\r\n", "import { Curve } from './Curve.js';\r\nimport * as Curves from '../curves/Curves.js';\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nclass CurvePath extends Curve {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'CurvePath';\r\n\r\n\t\tthis.curves = [];\r\n\t\tthis.autoClose = false; // Automatically closes the path\r\n\r\n\t}\r\n\r\n\tadd( curve ) {\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t}\r\n\r\n\tclosePath() {\r\n\r\n\t\t// Add a line curve if start and end of lines are not connected\r\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\tconst lineType = ( startPoint.isVector2 === true ) ? 'LineCurve' : 'LineCurve3';\r\n\t\t\tthis.curves.push( new Curves[ lineType ]( endPoint, startPoint ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// To get accurate point with reference to\r\n\t// entire path distance at time t,\r\n\t// following has to be done:\r\n\r\n\t// 1. Length of each sub path have to be known\r\n\t// 2. Locate and identify type of curve\r\n\t// 3. Get t for the curve\r\n\t// 4. Return curve.getPointAt(t')\r\n\r\n\tgetPoint( t, optionalTarget ) {\r\n\r\n\t\tconst d = t * this.getLength();\r\n\t\tconst curveLengths = this.getCurveLengths();\r\n\t\tlet i = 0;\r\n\r\n\t\t// To think about boundaries points.\r\n\r\n\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\tconst diff = curveLengths[ i ] - d;\r\n\t\t\t\tconst curve = this.curves[ i ];\r\n\r\n\t\t\t\tconst segmentLength = curve.getLength();\r\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\r\n\r\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t}\r\n\r\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t// getPoint() depends on getLength\r\n\r\n\tgetLength() {\r\n\r\n\t\tconst lens = this.getCurveLengths();\r\n\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t}\r\n\r\n\t// cacheLengths must be recalculated.\r\n\tupdateArcLengths() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.cacheLengths = null;\r\n\t\tthis.getCurveLengths();\r\n\r\n\t}\r\n\r\n\t// Compute lengths and cache them\r\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\tgetCurveLengths() {\r\n\r\n\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\treturn this.cacheLengths;\r\n\r\n\t\t}\r\n\r\n\t\t// Get length of sub-curve\r\n\t\t// Push sums into cached array\r\n\r\n\t\tconst lengths = [];\r\n\t\tlet sums = 0;\r\n\r\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\tlengths.push( sums );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheLengths = lengths;\r\n\r\n\t\treturn lengths;\r\n\r\n\t}\r\n\r\n\tgetSpacedPoints( divisions = 40 ) {\r\n\r\n\t\tconst points = [];\r\n\r\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClose ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t}\r\n\r\n\tgetPoints( divisions = 12 ) {\r\n\r\n\t\tconst points = [];\r\n\t\tlet last;\r\n\r\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\r\n\r\n\t\t\tconst curve = curves[ i ];\r\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\r\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\r\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\r\n\t\t\t\t\t\t: divisions;\r\n\r\n\t\t\tconst pts = curve.getPoints( resolution );\r\n\r\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\r\n\r\n\t\t\t\tconst point = pts[ j ];\r\n\r\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\r\n\r\n\t\t\t\tpoints.push( point );\r\n\t\t\t\tlast = point;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.curves = [];\r\n\r\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst curve = source.curves[ i ];\r\n\r\n\t\t\tthis.curves.push( curve.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.autoClose = source.autoClose;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.autoClose = this.autoClose;\r\n\t\tdata.curves = [];\r\n\r\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst curve = this.curves[ i ];\r\n\t\t\tdata.curves.push( curve.toJSON() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.autoClose = json.autoClose;\r\n\t\tthis.curves = [];\r\n\r\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst curve = json.curves[ i ];\r\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { CurvePath };\r\n", "import { Vector2 } from '../../math/Vector2.js';\r\nimport { CurvePath } from './CurvePath.js';\r\nimport { EllipseCurve } from '../curves/EllipseCurve.js';\r\nimport { SplineCurve } from '../curves/SplineCurve.js';\r\nimport { CubicBezierCurve } from '../curves/CubicBezierCurve.js';\r\nimport { QuadraticBezierCurve } from '../curves/QuadraticBezierCurve.js';\r\nimport { LineCurve } from '../curves/LineCurve.js';\r\n\r\nclass Path extends CurvePath {\r\n\r\n\tconstructor( points ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'Path';\r\n\r\n\t\tthis.currentPoint = new Vector2();\r\n\r\n\t\tif ( points ) {\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\r\n\r\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmoveTo( x, y ) {\r\n\r\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlineTo( x, y ) {\r\n\r\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( x, y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\tconst curve = new QuadraticBezierCurve(\r\n\t\t\tthis.currentPoint.clone(),\r\n\t\t\tnew Vector2( aCPx, aCPy ),\r\n\t\t\tnew Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\tconst curve = new CubicBezierCurve(\r\n\t\t\tthis.currentPoint.clone(),\r\n\t\t\tnew Vector2( aCP1x, aCP1y ),\r\n\t\t\tnew Vector2( aCP2x, aCP2y ),\r\n\t\t\tnew Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsplineThru( pts /*Array of Vector*/ ) {\r\n\r\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\r\n\r\n\t\tconst curve = new SplineCurve( npts );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tconst x0 = this.currentPoint.x;\r\n\t\tconst y0 = this.currentPoint.y;\r\n\r\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tconst x0 = this.currentPoint.x;\r\n\t\tconst y0 = this.currentPoint.y;\r\n\r\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\tif ( this.curves.length > 0 ) {\r\n\r\n\t\t\t// if a previous curve is present, attempt to join\r\n\t\t\tconst firstPoint = curve.getPoint( 0 );\r\n\r\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\r\n\r\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tconst lastPoint = curve.getPoint( 1 );\r\n\t\tthis.currentPoint.copy( lastPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.currentPoint.copy( source.currentPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.currentPoint = this.currentPoint.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.currentPoint.fromArray( json.currentPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Path };\r\n", "import { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nclass LatheGeometry extends BufferGeometry {\r\n\r\n\tconstructor( points = [ new Vector2( 0, - 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'LatheGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tsegments = Math.floor( segments );\r\n\r\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\r\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst uvs = [];\r\n\t\tconst initNormals = [];\r\n\t\tconst normals = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tconst inverseSegments = 1.0 / segments;\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst uv = new Vector2();\r\n\t\tconst normal = new Vector3();\r\n\t\tconst curNormal = new Vector3();\r\n\t\tconst prevNormal = new Vector3();\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\r\n\t\t// pre-compute normals for initial \"meridian\"\r\n\r\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\tswitch ( j ) {\r\n\r\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\r\n\r\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\r\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\r\n\r\n\t\t\t\t\tnormal.x = dy * 1.0;\r\n\t\t\t\t\tnormal.y = - dx;\r\n\t\t\t\t\tnormal.z = dy * 0.0;\r\n\r\n\t\t\t\t\tprevNormal.copy( normal );\r\n\r\n\t\t\t\t\tnormal.normalize();\r\n\r\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\r\n\r\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\r\n\r\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\r\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\r\n\r\n\t\t\t\t\tnormal.x = dy * 1.0;\r\n\t\t\t\t\tnormal.y = - dx;\r\n\t\t\t\t\tnormal.z = dy * 0.0;\r\n\r\n\t\t\t\t\tcurNormal.copy( normal );\r\n\r\n\t\t\t\t\tnormal.x += prevNormal.x;\r\n\t\t\t\t\tnormal.y += prevNormal.y;\r\n\t\t\t\t\tnormal.z += prevNormal.z;\r\n\r\n\t\t\t\t\tnormal.normalize();\r\n\r\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t\tprevNormal.copy( curNormal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices, uvs and normals\r\n\r\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\t\tconst sin = Math.sin( phi );\r\n\t\t\tconst cos = Math.cos( phi );\r\n\r\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\t\tvertex.y = points[ j ].y;\r\n\t\t\t\tvertex.z = points[ j ].x * cos;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = i / segments;\r\n\t\t\t\tuv.y = j / ( points.length - 1 );\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\r\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\r\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\r\n\r\n\t\t\t\tnormals.push( x, y, z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( let i = 0; i < segments; i ++ ) {\r\n\r\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\tconst base = j + i * points.length;\r\n\r\n\t\t\t\tconst a = base;\r\n\t\t\t\tconst b = base + points.length;\r\n\t\t\t\tconst c = base + points.length + 1;\r\n\t\t\t\tconst d = base + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( c, d, b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { LatheGeometry };\r\n", "import { Path } from '../extras/core/Path.js';\r\nimport { LatheGeometry } from './LatheGeometry.js';\r\n\r\nclass CapsuleGeometry extends LatheGeometry {\r\n\r\n\tconstructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {\r\n\r\n\t\tconst path = new Path();\r\n\t\tpath.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );\r\n\t\tpath.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );\r\n\r\n\t\tsuper( path.getPoints( capSegments ), radialSegments );\r\n\r\n\t\tthis.type = 'CapsuleGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tlength: length,\r\n\t\t\tcapSegments: capSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CapsuleGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\n\r\nclass CircleGeometry extends BufferGeometry {\r\n\r\n\tconstructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'CircleGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tsegments = Math.max( 3, segments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst uv = new Vector2();\r\n\r\n\t\t// center point\r\n\r\n\t\tvertices.push( 0, 0, 0 );\r\n\t\tnormals.push( 0, 0, 1 );\r\n\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\r\n\r\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\r\n\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { CircleGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\n\r\nclass CylinderGeometry extends BufferGeometry {\r\n\r\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'CylinderGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tradialSegments = Math.floor( radialSegments );\r\n\t\theightSegments = Math.floor( heightSegments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tlet index = 0;\r\n\t\tconst indexArray = [];\r\n\t\tconst halfHeight = height / 2;\r\n\t\tlet groupStart = 0;\r\n\r\n\t\t// generate geometry\r\n\r\n\t\tgenerateTorso();\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\r\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction generateTorso() {\r\n\r\n\t\t\tconst normal = new Vector3();\r\n\t\t\tconst vertex = new Vector3();\r\n\r\n\t\t\tlet groupCount = 0;\r\n\r\n\t\t\t// this will be used to calculate the normal\r\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\t\tconst indexRow = [];\r\n\r\n\t\t\t\tconst v = y / heightSegments;\r\n\r\n\t\t\t\t// calculate the radius of the current row\r\n\r\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t\tconst u = x / radialSegments;\r\n\r\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\r\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\r\n\r\n\t\t\t\t\t// vertex\r\n\r\n\t\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t// normal\r\n\r\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\r\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t\t// uv\r\n\r\n\t\t\t\t\tuvs.push( u, 1 - v );\r\n\r\n\t\t\t\t\t// save index of vertex in respective row\r\n\r\n\t\t\t\t\tindexRow.push( index ++ );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// now save vertices of the row in our index array\r\n\r\n\t\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t\t// we use the index array to access the correct indices\r\n\r\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\r\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\r\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tif ( radiusTop > 0 ) {\r\n\r\n\t\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( radiusBottom > 0 ) {\r\n\r\n\t\t\t\t\t\tindices.push( b, c, d );\r\n\t\t\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateCap( top ) {\r\n\r\n\t\t\t// save the index of the first center vertex\r\n\t\t\tconst centerIndexStart = index;\r\n\r\n\t\t\tconst uv = new Vector2();\r\n\t\t\tconst vertex = new Vector3();\r\n\r\n\t\t\tlet groupCount = 0;\r\n\r\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t\t// first we generate the center vertex data of the cap.\r\n\t\t\t// because the geometry needs one set of uvs per face,\r\n\t\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// save the index of the last center vertex\r\n\t\t\tconst centerIndexEnd = index;\r\n\r\n\t\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tconst u = x / radialSegments;\r\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\tconst cosTheta = Math.cos( theta );\r\n\t\t\t\tconst sinTheta = Math.sin( theta );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\r\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tconst c = centerIndexStart + x;\r\n\t\t\t\tconst i = centerIndexEnd + x;\r\n\r\n\t\t\t\tif ( top === true ) {\r\n\r\n\t\t\t\t\t// face top\r\n\r\n\t\t\t\t\tindices.push( i, i + 1, c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// face bottom\r\n\r\n\t\t\t\t\tindices.push( i + 1, i, c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { CylinderGeometry };\r\n", "import { CylinderGeometry } from './CylinderGeometry.js';\r\n\r\nclass ConeGeometry extends CylinderGeometry {\r\n\r\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\r\n\r\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ConeGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\n\r\nclass PolyhedronGeometry extends BufferGeometry {\r\n\r\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'PolyhedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\t// default buffer data\r\n\r\n\t\tconst vertexBuffer = [];\r\n\t\tconst uvBuffer = [];\r\n\r\n\t\t// the subdivision creates the vertex buffer data\r\n\r\n\t\tsubdivide( detail );\r\n\r\n\t\t// all vertices should lie on a conceptual sphere with a given radius\r\n\r\n\t\tapplyRadius( radius );\r\n\r\n\t\t// finally, create the uv data\r\n\r\n\t\tgenerateUVs();\r\n\r\n\t\t// build non-indexed geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\r\n\r\n\t\tif ( detail === 0 ) {\r\n\r\n\t\t\tthis.computeVertexNormals(); // flat normals\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.normalizeNormals(); // smooth normals\r\n\r\n\t\t}\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction subdivide( detail ) {\r\n\r\n\t\t\tconst a = new Vector3();\r\n\t\t\tconst b = new Vector3();\r\n\t\t\tconst c = new Vector3();\r\n\r\n\t\t\t// iterate over all faces and apply a subdivision with the given detail value\r\n\r\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t// get the vertices of the face\r\n\r\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\r\n\r\n\t\t\t\t// perform subdivision\r\n\r\n\t\t\t\tsubdivideFace( a, b, c, detail );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction subdivideFace( a, b, c, detail ) {\r\n\r\n\t\t\tconst cols = detail + 1;\r\n\r\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\r\n\r\n\t\t\tconst v = [];\r\n\r\n\t\t\t// construct all of the vertices for this subdivision\r\n\r\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\r\n\r\n\t\t\t\tv[ i ] = [];\r\n\r\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\r\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\r\n\r\n\t\t\t\tconst rows = cols - i;\r\n\r\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// construct all of the faces\r\n\r\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\r\n\r\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\t\tconst k = Math.floor( j / 2 );\r\n\r\n\t\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction applyRadius( radius ) {\r\n\r\n\t\t\tconst vertex = new Vector3();\r\n\r\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\r\n\r\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\r\n\r\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\r\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\r\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tconst vertex = new Vector3();\r\n\r\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\r\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\r\n\t\t\t\tuvBuffer.push( u, 1 - v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcorrectUVs();\r\n\r\n\t\t\tcorrectSeam();\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctSeam() {\r\n\r\n\t\t\t// handle case when face straddles the seam, see #3269\r\n\r\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\r\n\r\n\t\t\t\t// uv data of a single face\r\n\r\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\r\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\r\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\r\n\r\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\r\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\r\n\r\n\t\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\r\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\r\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushVertex( vertex ) {\r\n\r\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getVertexByIndex( index, vertex ) {\r\n\r\n\t\t\tconst stride = index * 3;\r\n\r\n\t\t\tvertex.x = vertices[ stride + 0 ];\r\n\t\t\tvertex.y = vertices[ stride + 1 ];\r\n\t\t\tvertex.z = vertices[ stride + 2 ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUVs() {\r\n\r\n\t\t\tconst a = new Vector3();\r\n\t\t\tconst b = new Vector3();\r\n\t\t\tconst c = new Vector3();\r\n\r\n\t\t\tconst centroid = new Vector3();\r\n\r\n\t\t\tconst uvA = new Vector2();\r\n\t\t\tconst uvB = new Vector2();\r\n\t\t\tconst uvC = new Vector2();\r\n\r\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\r\n\r\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\r\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\r\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\r\n\r\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\r\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\r\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\r\n\r\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\r\n\r\n\t\t\t\tconst azi = azimuth( centroid );\r\n\r\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\r\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\r\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\r\n\r\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\t\tfunction azimuth( vector ) {\r\n\r\n\t\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Angle above the XZ plane.\r\n\r\n\t\tfunction inclination( vector ) {\r\n\r\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PolyhedronGeometry };\r\n", "import { PolyhedronGeometry } from './PolyhedronGeometry.js';\r\n\r\nclass DodecahedronGeometry extends PolyhedronGeometry {\r\n\r\n\tconstructor( radius = 1, detail = 0 ) {\r\n\r\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\tconst r = 1 / t;\r\n\r\n\t\tconst vertices = [\r\n\r\n\t\t\t// (±1, ±1, ±1)\r\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\r\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\r\n\t\t\t1, - 1, - 1, 1, - 1, 1,\r\n\t\t\t1, 1, - 1, 1, 1, 1,\r\n\r\n\t\t\t// (0, ±1/φ, ±φ)\r\n\t\t\t0, - r, - t, 0, - r, t,\r\n\t\t\t0, r, - t, 0, r, t,\r\n\r\n\t\t\t// (±1/φ, ±φ, 0)\r\n\t\t\t- r, - t, 0, - r, t, 0,\r\n\t\t\tr, - t, 0, r, t, 0,\r\n\r\n\t\t\t// (±φ, 0, ±1/φ)\r\n\t\t\t- t, 0, - r, t, 0, - r,\r\n\t\t\t- t, 0, r, t, 0, r\r\n\t\t];\r\n\r\n\t\tconst indices = [\r\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\r\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\r\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\r\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\r\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\r\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\r\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\r\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\r\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\r\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\r\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\r\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\r\n\t\t];\r\n\r\n\t\tsuper( vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'DodecahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { DodecahedronGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _normal = /*@__PURE__*/ new Vector3();\r\nconst _triangle = /*@__PURE__*/ new Triangle();\r\n\r\nclass EdgesGeometry extends BufferGeometry {\r\n\r\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'EdgesGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tgeometry: geometry,\r\n\t\t\tthresholdAngle: thresholdAngle\r\n\t\t};\r\n\r\n\t\tif ( geometry !== null ) {\r\n\r\n\t\t\tconst precisionPoints = 4;\r\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\r\n\t\t\tconst thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\r\n\r\n\t\t\tconst indexAttr = geometry.getIndex();\r\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\r\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\r\n\r\n\t\t\tconst indexArr = [ 0, 0, 0 ];\r\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\r\n\t\t\tconst hashes = new Array( 3 );\r\n\r\n\t\t\tconst edgeData = {};\r\n\t\t\tconst vertices = [];\r\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\r\n\r\n\t\t\t\tif ( indexAttr ) {\r\n\r\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\r\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\r\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindexArr[ 0 ] = i;\r\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\r\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst { a, b, c } = _triangle;\r\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\r\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\r\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\r\n\t\t\t\t_triangle.getNormal( _normal );\r\n\r\n\t\t\t\t// create hashes for the edge from the vertices\r\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\r\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\r\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\r\n\r\n\t\t\t\t// skip degenerate triangles\r\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// iterate over every edge\r\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t// get the first and next vertex making up the edge\r\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\r\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\r\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\r\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\r\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\r\n\r\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\r\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\r\n\r\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\r\n\r\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\r\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\r\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\r\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\r\n\r\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\r\n\r\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\r\n\t\t\t\t\t\tedgeData[ hash ] = {\r\n\r\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\r\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\r\n\t\t\t\t\t\t\tnormal: _normal.clone(),\r\n\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\r\n\t\t\tfor ( const key in edgeData ) {\r\n\r\n\t\t\t\tif ( edgeData[ key ] ) {\r\n\r\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\r\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\r\n\t\t\t\t\t_v1.fromBufferAttribute( positionAttr, index1 );\r\n\r\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\r\n\t\t\t\t\tvertices.push( _v1.x, _v1.y, _v1.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { EdgesGeometry };\r\n", "import { Path } from './Path.js';\r\nimport * as MathUtils from '../../math/MathUtils.js';\r\n\r\nclass Shape extends Path {\r\n\r\n\tconstructor( points ) {\r\n\r\n\t\tsuper( points );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.type = 'Shape';\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t}\r\n\r\n\tgetPointsHoles( divisions ) {\r\n\r\n\t\tconst holesPts = [];\r\n\r\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t}\r\n\r\n\t\treturn holesPts;\r\n\r\n\t}\r\n\r\n\t// get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\textractPoints( divisions ) {\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst hole = source.holes[ i ];\r\n\r\n\t\t\tthis.holes.push( hole.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.holes = [];\r\n\r\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst hole = this.holes[ i ];\r\n\t\t\tdata.holes.push( hole.toJSON() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.uuid = json.uuid;\r\n\t\tthis.holes = [];\r\n\r\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst hole = json.holes[ i ];\r\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Shape };\r\n", "/**\r\n * Port from https://github.com/mapbox/earcut (v2.2.4)\r\n */\r\n\r\nconst Earcut = {\r\n\r\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\r\n\r\n\t\tconst hasHoles = holeIndices && holeIndices.length;\r\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\r\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\r\n\t\tconst triangles = [];\r\n\r\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\r\n\r\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\r\n\r\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\t\tif ( data.length > 80 * dim ) {\r\n\r\n\t\t\tminX = maxX = data[ 0 ];\r\n\t\t\tminY = maxY = data[ 1 ];\r\n\r\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\r\n\r\n\t\t\t\tx = data[ i ];\r\n\t\t\t\ty = data[ i + 1 ];\r\n\t\t\t\tif ( x < minX ) minX = x;\r\n\t\t\t\tif ( y < minY ) minY = y;\r\n\t\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\t\tif ( y > maxY ) maxY = y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\r\n\t\t\tinvSize = invSize !== 0 ? 32767 / invSize : 0;\r\n\r\n\t\t}\r\n\r\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize, 0 );\r\n\r\n\t\treturn triangles;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n\tlet i, last;\r\n\r\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t} else {\r\n\r\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t}\r\n\r\n\tif ( last && equals( last, last.next ) ) {\r\n\r\n\t\tremoveNode( last );\r\n\t\tlast = last.next;\r\n\r\n\t}\r\n\r\n\treturn last;\r\n\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints( start, end ) {\r\n\r\n\tif ( ! start ) return start;\r\n\tif ( ! end ) end = start;\r\n\r\n\tlet p = start,\r\n\t\tagain;\r\n\tdo {\r\n\r\n\t\tagain = false;\r\n\r\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n\t\t\tremoveNode( p );\r\n\t\t\tp = end = p.prev;\r\n\t\t\tif ( p === p.next ) break;\r\n\t\t\tagain = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t} while ( again || p !== end );\r\n\r\n\treturn end;\r\n\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\r\n\r\n\tif ( ! ear ) return;\r\n\r\n\t// interlink polygon nodes in z-order\r\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\r\n\r\n\tlet stop = ear,\r\n\t\tprev, next;\r\n\r\n\t// iterate through ears, slicing them one by one\r\n\twhile ( ear.prev !== ear.next ) {\r\n\r\n\t\tprev = ear.prev;\r\n\t\tnext = ear.next;\r\n\r\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n\t\t\t// cut off the triangle\r\n\t\t\ttriangles.push( prev.i / dim | 0 );\r\n\t\t\ttriangles.push( ear.i / dim | 0 );\r\n\t\t\ttriangles.push( next.i / dim | 0 );\r\n\r\n\t\t\tremoveNode( ear );\r\n\r\n\t\t\t// skipping the next vertex leads to less sliver triangles\r\n\t\t\tear = next.next;\r\n\t\t\tstop = next.next;\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\tear = next;\r\n\r\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\r\n\t\tif ( ear === stop ) {\r\n\r\n\t\t\t// try filtering points and slicing again\r\n\t\t\tif ( ! pass ) {\r\n\r\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\r\n\r\n\t\t\t} else if ( pass === 1 ) {\r\n\r\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\r\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\r\n\r\n\t\t\t} else if ( pass === 2 ) {\r\n\r\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar( ear ) {\r\n\r\n\tconst a = ear.prev,\r\n\t\tb = ear,\r\n\t\tc = ear.next;\r\n\r\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\t// now make sure we don't have other points inside the potential ear\r\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\r\n\r\n\t// triangle bbox; min & max are calculated like this for speed\r\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\r\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\r\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\r\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\r\n\r\n\tlet p = c.next;\r\n\twhile ( p !== a ) {\r\n\r\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\r\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) &&\r\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\tp = p.next;\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n\tconst a = ear.prev,\r\n\t\tb = ear,\r\n\t\tc = ear.next;\r\n\r\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\r\n\r\n\t// triangle bbox; min & max are calculated like this for speed\r\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\r\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\r\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\r\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\r\n\r\n\t// z-order range for the current triangle bbox;\r\n\tconst minZ = zOrder( x0, y0, minX, minY, invSize ),\r\n\t\tmaxZ = zOrder( x1, y1, minX, minY, invSize );\r\n\r\n\tlet p = ear.prevZ,\r\n\t\tn = ear.nextZ;\r\n\r\n\t// look for points inside the triangle in both directions\r\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\r\n\r\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\r\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\tp = p.prevZ;\r\n\r\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\r\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\r\n\t\tn = n.nextZ;\r\n\r\n\t}\r\n\r\n\t// look for remaining points in decreasing z-order\r\n\twhile ( p && p.z >= minZ ) {\r\n\r\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\r\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\tp = p.prevZ;\r\n\r\n\t}\r\n\r\n\t// look for remaining points in increasing z-order\r\n\twhile ( n && n.z <= maxZ ) {\r\n\r\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\r\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\r\n\t\tn = n.nextZ;\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n\tlet p = start;\r\n\tdo {\r\n\r\n\t\tconst a = p.prev,\r\n\t\t\tb = p.next.next;\r\n\r\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n\t\t\ttriangles.push( a.i / dim | 0 );\r\n\t\t\ttriangles.push( p.i / dim | 0 );\r\n\t\t\ttriangles.push( b.i / dim | 0 );\r\n\r\n\t\t\t// remove two nodes involved\r\n\t\t\tremoveNode( p );\r\n\t\t\tremoveNode( p.next );\r\n\r\n\t\t\tp = start = b;\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\treturn filterPoints( p );\r\n\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n\t// look for a valid diagonal that divides the polygon into two\r\n\tlet a = start;\r\n\tdo {\r\n\r\n\t\tlet b = a.next.next;\r\n\t\twhile ( b !== a.prev ) {\r\n\r\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n\t\t\t\t// split the polygon in two by the diagonal\r\n\t\t\t\tlet c = splitPolygon( a, b );\r\n\r\n\t\t\t\t// filter colinear points around the cuts\r\n\t\t\t\ta = filterPoints( a, a.next );\r\n\t\t\t\tc = filterPoints( c, c.next );\r\n\r\n\t\t\t\t// run earcut on each half\r\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize, 0 );\r\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize, 0 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tb = b.next;\r\n\r\n\t\t}\r\n\r\n\t\ta = a.next;\r\n\r\n\t} while ( a !== start );\r\n\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n\tconst queue = [];\r\n\tlet i, len, start, end, list;\r\n\r\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n\t\tstart = holeIndices[ i ] * dim;\r\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n\t\tlist = linkedList( data, start, end, dim, false );\r\n\t\tif ( list === list.next ) list.steiner = true;\r\n\t\tqueue.push( getLeftmost( list ) );\r\n\r\n\t}\r\n\r\n\tqueue.sort( compareX );\r\n\r\n\t// process holes from left to right\r\n\tfor ( i = 0; i < queue.length; i ++ ) {\r\n\r\n\t\touterNode = eliminateHole( queue[ i ], outerNode );\r\n\r\n\t}\r\n\r\n\treturn outerNode;\r\n\r\n}\r\n\r\nfunction compareX( a, b ) {\r\n\r\n\treturn a.x - b.x;\r\n\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and link it\r\nfunction eliminateHole( hole, outerNode ) {\r\n\r\n\tconst bridge = findHoleBridge( hole, outerNode );\r\n\tif ( ! bridge ) {\r\n\r\n\t\treturn outerNode;\r\n\r\n\t}\r\n\r\n\tconst bridgeReverse = splitPolygon( bridge, hole );\r\n\r\n\t// filter collinear points around the cuts\r\n\tfilterPoints( bridgeReverse, bridgeReverse.next );\r\n\treturn filterPoints( bridge, bridge.next );\r\n\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge( hole, outerNode ) {\r\n\r\n\tlet p = outerNode,\r\n\t\tqx = - Infinity,\r\n\t\tm;\r\n\r\n\tconst hx = hole.x, hy = hole.y;\r\n\r\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\r\n\t// segment's endpoint with lesser x will be potential connection point\r\n\tdo {\r\n\r\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\t\t\tif ( x <= hx && x > qx ) {\r\n\r\n\t\t\t\tqx = x;\r\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\r\n\t\t\t\tif ( x === hx ) return m; // hole touches outer segment; pick leftmost endpoint\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== outerNode );\r\n\r\n\tif ( ! m ) return null;\r\n\r\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\r\n\t// if there are no points found, we have a valid connection;\r\n\t// otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n\tconst stop = m,\r\n\t\tmx = m.x,\r\n\t\tmy = m.y;\r\n\tlet tanMin = Infinity, tan;\r\n\r\n\tp = m;\r\n\r\n\tdo {\r\n\r\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\r\n\r\n\t\t\t\tm = p;\r\n\t\t\t\ttanMin = tan;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== stop );\r\n\r\n\treturn m;\r\n\r\n}\r\n\r\n// whether sector in vertex m contains sector in vertex p in the same coordinates\r\nfunction sectorContainsSector( m, p ) {\r\n\r\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\r\n\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n\tlet p = start;\r\n\tdo {\r\n\r\n\t\tif ( p.z === 0 ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\r\n\t\tp.prevZ = p.prev;\r\n\t\tp.nextZ = p.next;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\tp.prevZ.nextZ = null;\r\n\tp.prevZ = null;\r\n\r\n\tsortLinked( p );\r\n\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked( list ) {\r\n\r\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\r\n\t\tinSize = 1;\r\n\r\n\tdo {\r\n\r\n\t\tp = list;\r\n\t\tlist = null;\r\n\t\ttail = null;\r\n\t\tnumMerges = 0;\r\n\r\n\t\twhile ( p ) {\r\n\r\n\t\t\tnumMerges ++;\r\n\t\t\tq = p;\r\n\t\t\tpSize = 0;\r\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\r\n\r\n\t\t\t\tpSize ++;\r\n\t\t\t\tq = q.nextZ;\r\n\t\t\t\tif ( ! q ) break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tqSize = inSize;\r\n\r\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n\t\t\t\t\te = p;\r\n\t\t\t\t\tp = p.nextZ;\r\n\t\t\t\t\tpSize --;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\te = q;\r\n\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\tqSize --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( tail ) tail.nextZ = e;\r\n\t\t\t\telse list = e;\r\n\r\n\t\t\t\te.prevZ = tail;\r\n\t\t\t\ttail = e;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = q;\r\n\r\n\t\t}\r\n\r\n\t\ttail.nextZ = null;\r\n\t\tinSize *= 2;\r\n\r\n\t} while ( numMerges > 1 );\r\n\r\n\treturn list;\r\n\r\n}\r\n\r\n// z-order of a point given coords and inverse of the longer side of data bbox\r\nfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n\t// coords are transformed into non-negative 15-bit integer range\r\n\tx = ( x - minX ) * invSize | 0;\r\n\ty = ( y - minY ) * invSize | 0;\r\n\r\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\r\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\r\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n\treturn x | ( y << 1 );\r\n\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost( start ) {\r\n\r\n\tlet p = start,\r\n\t\tleftmost = start;\r\n\tdo {\r\n\r\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\treturn leftmost;\r\n\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n\treturn ( cx - px ) * ( ay - py ) >= ( ax - px ) * ( cy - py ) &&\r\n           ( ax - px ) * ( by - py ) >= ( bx - px ) * ( ay - py ) &&\r\n           ( bx - px ) * ( cy - py ) >= ( cx - px ) * ( by - py );\r\n\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal( a, b ) {\r\n\r\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\r\n           ( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\r\n            ( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\r\n            equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\r\n\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area( p, q, r ) {\r\n\r\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals( p1, p2 ) {\r\n\r\n\treturn p1.x === p2.x && p1.y === p2.y;\r\n\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects( p1, q1, p2, q2 ) {\r\n\r\n\tconst o1 = sign( area( p1, q1, p2 ) );\r\n\tconst o2 = sign( area( p1, q1, q2 ) );\r\n\tconst o3 = sign( area( p2, q2, p1 ) );\r\n\tconst o4 = sign( area( p2, q2, q1 ) );\r\n\r\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\r\n\r\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\r\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\r\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\r\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\n// for collinear points p, q, r, check if point q lies on segment pr\r\nfunction onSegment( p, q, r ) {\r\n\r\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\r\n\r\n}\r\n\r\nfunction sign( num ) {\r\n\r\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\r\n\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon( a, b ) {\r\n\r\n\tlet p = a;\r\n\tdo {\r\n\r\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n\t\t\tintersects( p, p.next, a, b ) ) return true;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== a );\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside( a, b ) {\r\n\r\n\treturn area( a.prev, a, a.next ) < 0 ?\r\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\r\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\r\n\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside( a, b ) {\r\n\r\n\tlet p = a,\r\n\t\tinside = false;\r\n\tconst px = ( a.x + b.x ) / 2,\r\n\t\tpy = ( a.y + b.y ) / 2;\r\n\tdo {\r\n\r\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\r\n\t\t\tinside = ! inside;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== a );\r\n\r\n\treturn inside;\r\n\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon( a, b ) {\r\n\r\n\tconst a2 = new Node( a.i, a.x, a.y ),\r\n\t\tb2 = new Node( b.i, b.x, b.y ),\r\n\t\tan = a.next,\r\n\t\tbp = b.prev;\r\n\r\n\ta.next = b;\r\n\tb.prev = a;\r\n\r\n\ta2.next = an;\r\n\tan.prev = a2;\r\n\r\n\tb2.next = a2;\r\n\ta2.prev = b2;\r\n\r\n\tbp.next = b2;\r\n\tb2.prev = bp;\r\n\r\n\treturn b2;\r\n\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode( i, x, y, last ) {\r\n\r\n\tconst p = new Node( i, x, y );\r\n\r\n\tif ( ! last ) {\r\n\r\n\t\tp.prev = p;\r\n\t\tp.next = p;\r\n\r\n\t} else {\r\n\r\n\t\tp.next = last.next;\r\n\t\tp.prev = last;\r\n\t\tlast.next.prev = p;\r\n\t\tlast.next = p;\r\n\r\n\t}\r\n\r\n\treturn p;\r\n\r\n}\r\n\r\nfunction removeNode( p ) {\r\n\r\n\tp.next.prev = p.prev;\r\n\tp.prev.next = p.next;\r\n\r\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\r\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\r\n\r\n}\r\n\r\nfunction Node( i, x, y ) {\r\n\r\n\t// vertex index in coordinates array\r\n\tthis.i = i;\r\n\r\n\t// vertex coordinates\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\r\n\t// previous and next vertex nodes in a polygon ring\r\n\tthis.prev = null;\r\n\tthis.next = null;\r\n\r\n\t// z-order curve value\r\n\tthis.z = 0;\r\n\r\n\t// previous and next nodes in z-order\r\n\tthis.prevZ = null;\r\n\tthis.nextZ = null;\r\n\r\n\t// indicates whether this is a steiner point\r\n\tthis.steiner = false;\r\n\r\n}\r\n\r\nfunction signedArea( data, start, end, dim ) {\r\n\r\n\tlet sum = 0;\r\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n\t\tj = i;\r\n\r\n\t}\r\n\r\n\treturn sum;\r\n\r\n}\r\n\r\nexport { Earcut };\r\n", "import { Earcut } from './Earcut.js';\r\n\r\nclass ShapeUtils {\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tstatic area( contour ) {\r\n\r\n\t\tconst n = contour.length;\r\n\t\tlet a = 0.0;\r\n\r\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t}\r\n\r\n\tstatic isClockWise( pts ) {\r\n\r\n\t\treturn ShapeUtils.area( pts ) < 0;\r\n\r\n\t}\r\n\r\n\tstatic triangulateShape( contour, holes ) {\r\n\r\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n\t\tconst holeIndices = []; // array of hole indices\r\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n\t\tremoveDupEndPts( contour );\r\n\t\taddContour( vertices, contour );\r\n\r\n\t\t//\r\n\r\n\t\tlet holeIndex = contour.length;\r\n\r\n\t\tholes.forEach( removeDupEndPts );\r\n\r\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\r\n\r\n\t\t\tholeIndices.push( holeIndex );\r\n\t\t\tholeIndex += holes[ i ].length;\r\n\t\t\taddContour( vertices, holes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\r\n\r\n\t\t//\r\n\r\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\r\n\r\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn faces;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction removeDupEndPts( points ) {\r\n\r\n\tconst l = points.length;\r\n\r\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\tpoints.pop();\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction addContour( vertices, contour ) {\r\n\r\n\tfor ( let i = 0; i < contour.length; i ++ ) {\r\n\r\n\t\tvertices.push( contour[ i ].x );\r\n\t\tvertices.push( contour[ i ].y );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ShapeUtils };\r\n", "/**\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n *  depth: <float>, // Depth to extrude the shape\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\r\n *  bevelOffset: <float>, // how far from shape outline does bevel start\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\r\n *\r\n *  UVGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n */\r\n\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport * as Curves from '../extras/curves/Curves.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Shape } from '../extras/core/Shape.js';\r\nimport { ShapeUtils } from '../extras/ShapeUtils.js';\r\n\r\nclass ExtrudeGeometry extends BufferGeometry {\r\n\r\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'ExtrudeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst verticesArray = [];\r\n\t\tconst uvArray = [];\r\n\r\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst shape = shapes[ i ];\r\n\t\t\taddShape( shape );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tconst placeholder = [];\r\n\r\n\t\t\t// options\r\n\r\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\r\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\r\n\r\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\r\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\r\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\r\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\r\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\t\t\tconst extrudePath = options.extrudePath;\r\n\r\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlet extrudePts, extrudeByPath = false;\r\n\t\t\tlet splineTube, binormal, normal, position2;\r\n\r\n\t\t\tif ( extrudePath ) {\r\n\r\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\t\t\textrudeByPath = true;\r\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t\t\t// SETUP TNB variables\r\n\r\n\t\t\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\r\n\r\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\t\t\tbinormal = new Vector3();\r\n\t\t\t\tnormal = new Vector3();\r\n\t\t\t\tposition2 = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Safeguards if bevels are not enabled\r\n\r\n\t\t\tif ( ! bevelEnabled ) {\r\n\r\n\t\t\t\tbevelSegments = 0;\r\n\t\t\t\tbevelThickness = 0;\r\n\t\t\t\tbevelSize = 0;\r\n\t\t\t\tbevelOffset = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Variables initialization\r\n\r\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tlet vertices = shapePoints.shape;\r\n\t\t\tconst holes = shapePoints.holes;\r\n\r\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\r\n\r\n\t\t\tif ( reverse ) {\r\n\r\n\t\t\t\tvertices = vertices.reverse();\r\n\r\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tconst ahole = holes[ h ];\r\n\r\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t\t\t/* Vertices */\r\n\r\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tconst ahole = holes[ h ];\r\n\r\n\t\t\t\tvertices = vertices.concat( ahole );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction scalePt2( pt, vec, size ) {\r\n\r\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\r\n\r\n\t\t\t\treturn pt.clone().addScaledVector( vec, size );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst vlen = vertices.length, flen = faces.length;\r\n\r\n\r\n\t\t\t// Find directions for point movement\r\n\r\n\r\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t\t//\r\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\r\n\r\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\r\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\r\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\r\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\r\n\r\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t\t\t// check for collinear edges\r\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not collinear\r\n\r\n\t\t\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\r\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\r\n\r\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\t\tv_trans_y = v_prev_x;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst contourMovements = [];\r\n\r\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\tif ( j === il ) j = 0;\r\n\t\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst holesMovements = [];\r\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tconst ahole = holes[ h ];\r\n\r\n\t\t\t\toneHoleMovements = [];\r\n\r\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\t\tif ( j === il ) j = 0;\r\n\t\t\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\t\t\tconst t = b / bevelSegments;\r\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tconst ahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst bs = bevelSize + bevelOffset;\r\n\r\n\t\t\t// Back facing vertices\r\n\r\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Add stepped vertices...\r\n\t\t\t// Including front facing vertices\r\n\r\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\r\n\r\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Add bevel segments planes\r\n\r\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\t\t\tconst t = b / bevelSegments;\r\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tconst ahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* Faces */\r\n\r\n\t\t\t// Top and bottom faces\r\n\r\n\t\t\tbuildLidFaces();\r\n\r\n\t\t\t// Sides faces\r\n\r\n\t\t\tbuildSideFaces();\r\n\r\n\r\n\t\t\t/////  Internal functions\r\n\r\n\t\t\tfunction buildLidFaces() {\r\n\r\n\t\t\t\tconst start = verticesArray.length / 3;\r\n\r\n\t\t\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\t\t\tlet layer = 0; // steps + 1\r\n\t\t\t\t\tlet offset = vlen * layer;\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst face = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst face = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst face = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst face = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Create faces for the z-sides of the shape\r\n\r\n\t\t\tfunction buildSideFaces() {\r\n\r\n\t\t\t\tconst start = verticesArray.length / 3;\r\n\t\t\t\tlet layeroffset = 0;\r\n\t\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\t\tlayeroffset += contour.length;\r\n\r\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tconst ahole = holes[ h ];\r\n\t\t\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t\t\t//, true\r\n\t\t\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\t\t\tlet i = contour.length;\r\n\r\n\t\t\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\t\t\tconst j = i;\r\n\t\t\t\t\tlet k = i - 1;\r\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\r\n\r\n\t\t\t\t\t\tconst slen1 = vlen * s;\r\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\r\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\t\t\tf4( a, b, c, d );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction v( x, y, z ) {\r\n\r\n\t\t\t\tplaceholder.push( x );\r\n\t\t\t\tplaceholder.push( y );\r\n\t\t\t\tplaceholder.push( z );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction f3( a, b, c ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\r\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\r\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction f4( a, b, c, d ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( d );\r\n\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\t\t\t\taddVertex( d );\r\n\r\n\r\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\r\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addVertex( index ) {\r\n\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction addUV( vector2 ) {\r\n\r\n\t\t\t\tuvArray.push( vector2.x );\r\n\t\t\t\tuvArray.push( vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tconst shapes = this.parameters.shapes;\r\n\t\tconst options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data, shapes ) {\r\n\r\n\t\tconst geometryShapes = [];\r\n\r\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t}\r\n\r\n\t\tconst extrudePath = data.options.extrudePath;\r\n\r\n\t\tif ( extrudePath !== undefined ) {\r\n\r\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\r\n\r\n\t\t}\r\n\r\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\r\n\r\n\t\tconst a_x = vertices[ indexA * 3 ];\r\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\r\n\t\tconst b_x = vertices[ indexB * 3 ];\r\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\r\n\t\tconst c_x = vertices[ indexC * 3 ];\r\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\r\n\r\n\t\treturn [\r\n\t\t\tnew Vector2( a_x, a_y ),\r\n\t\t\tnew Vector2( b_x, b_y ),\r\n\t\t\tnew Vector2( c_x, c_y )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\tconst a_x = vertices[ indexA * 3 ];\r\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\r\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\r\n\t\tconst b_x = vertices[ indexB * 3 ];\r\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\r\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\r\n\t\tconst c_x = vertices[ indexC * 3 ];\r\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\r\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\r\n\t\tconst d_x = vertices[ indexD * 3 ];\r\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\r\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\r\n\r\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\r\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\r\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\r\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\r\n\t\t\t];\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\r\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\r\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\r\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\r\n\t\t\t];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nfunction toJSON( shapes, options, data ) {\r\n\r\n\tdata.shapes = [];\r\n\r\n\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst shape = shapes[ i ];\r\n\r\n\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t}\r\n\r\n\tdata.options = Object.assign( {}, options );\r\n\r\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\r\n\r\n\treturn data;\r\n\r\n}\r\n\r\n\r\nexport { ExtrudeGeometry };\r\n", "import { PolyhedronGeometry } from './PolyhedronGeometry.js';\r\n\r\nclass IcosahedronGeometry extends PolyhedronGeometry {\r\n\r\n\tconstructor( radius = 1, detail = 0 ) {\r\n\r\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\t\tconst vertices = [\r\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\r\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\r\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\r\n\t\t];\r\n\r\n\t\tconst indices = [\r\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\r\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\r\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\r\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\r\n\t\t];\r\n\r\n\t\tsuper( vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'IcosahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { IcosahedronGeometry };\r\n", "import { PolyhedronGeometry } from './PolyhedronGeometry.js';\r\n\r\nclass OctahedronGeometry extends PolyhedronGeometry {\r\n\r\n\tconstructor( radius = 1, detail = 0 ) {\r\n\r\n\t\tconst vertices = [\r\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\r\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\r\n\t\t];\r\n\r\n\t\tconst indices = [\r\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\r\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\r\n\t\t\t1, 3, 4,\t1, 4, 2\r\n\t\t];\r\n\r\n\t\tsuper( vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'OctahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { OctahedronGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass RingGeometry extends BufferGeometry {\r\n\r\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'RingGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthetaSegments = Math.max( 3, thetaSegments );\r\n\t\tphiSegments = Math.max( 1, phiSegments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// some helper variables\r\n\r\n\t\tlet radius = innerRadius;\r\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst uv = new Vector2();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\t\t// values are generate from the inside of the ring to the outside\r\n\r\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// increase the radius for next row of vertices\r\n\r\n\t\t\tradius += radiusStep;\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\t\tconst segment = i + thetaSegmentLevel;\r\n\r\n\t\t\t\tconst a = segment;\r\n\t\t\t\tconst b = segment + thetaSegments + 1;\r\n\t\t\t\tconst c = segment + thetaSegments + 2;\r\n\t\t\t\tconst d = segment + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { RingGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Shape } from '../extras/core/Shape.js';\r\nimport { ShapeUtils } from '../extras/ShapeUtils.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\n\r\nclass ShapeGeometry extends BufferGeometry {\r\n\r\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'ShapeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tlet groupStart = 0;\r\n\t\tlet groupCount = 0;\r\n\r\n\t\t// allow single and array values for \"shapes\" parameter\r\n\r\n\t\tif ( Array.isArray( shapes ) === false ) {\r\n\r\n\t\t\taddShape( shapes );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\r\n\r\n\t\t\t\taddShape( shapes[ i ] );\r\n\r\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\t\t\t\tgroupCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tconst indexOffset = vertices.length / 3;\r\n\t\t\tconst points = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tlet shapeVertices = points.shape;\r\n\t\t\tconst shapeHoles = points.holes;\r\n\r\n\t\t\t// check direction of vertices\r\n\r\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\r\n\r\n\t\t\t\tshapeVertices = shapeVertices.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\r\n\r\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\r\n\r\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\r\n\r\n\t\t\t// join vertices of inner and outer paths to a single array\r\n\r\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\r\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices, normals, uvs\r\n\r\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst vertex = shapeVertices[ i ];\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// indices\r\n\r\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst face = faces[ i ];\r\n\r\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\r\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\r\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\r\n\r\n\t\t\t\tindices.push( a, b, c );\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tconst shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON( shapes, data );\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data, shapes ) {\r\n\r\n\t\tconst geometryShapes = [];\r\n\r\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t}\r\n\r\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction toJSON( shapes, data ) {\r\n\r\n\tdata.shapes = [];\r\n\r\n\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst shape = shapes[ i ];\r\n\r\n\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t}\r\n\r\n\treturn data;\r\n\r\n}\r\n\r\nexport { ShapeGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass SphereGeometry extends BufferGeometry {\r\n\r\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'SphereGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\r\n\r\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\r\n\r\n\t\tlet index = 0;\r\n\t\tconst grid = [];\r\n\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n\t\t\tconst verticesRow = [];\r\n\r\n\t\t\tconst v = iy / heightSegments;\r\n\r\n\t\t\t// special case for the poles\r\n\r\n\t\t\tlet uOffset = 0;\r\n\r\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\r\n\r\n\t\t\t\tuOffset = 0.5 / widthSegments;\r\n\r\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\r\n\r\n\t\t\t\tuOffset = - 0.5 / widthSegments;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tconst u = ix / widthSegments;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.copy( vertex ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\r\n\r\n\t\t\t\tverticesRow.push( index ++ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgrid.push( verticesRow );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\r\n\t\t\t\tconst b = grid[ iy ][ ix ];\r\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\r\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\r\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SphereGeometry };\r\n", "import { PolyhedronGeometry } from './PolyhedronGeometry.js';\r\n\r\nclass TetrahedronGeometry extends PolyhedronGeometry {\r\n\r\n\tconstructor( radius = 1, detail = 0 ) {\r\n\r\n\t\tconst vertices = [\r\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\r\n\t\t];\r\n\r\n\t\tconst indices = [\r\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\r\n\t\t];\r\n\r\n\t\tsuper( vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'TetrahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { TetrahedronGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass TorusGeometry extends BufferGeometry {\r\n\r\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'TorusGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tradialSegments = Math.floor( radialSegments );\r\n\t\ttubularSegments = Math.floor( tubularSegments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tconst center = new Vector3();\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tconst u = i / tubularSegments * arc;\r\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { TorusGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass TorusKnotGeometry extends BufferGeometry {\r\n\r\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'TorusKnotGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\ttubularSegments = Math.floor( tubularSegments );\r\n\t\tradialSegments = Math.floor( radialSegments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\tconst P1 = new Vector3();\r\n\t\tconst P2 = new Vector3();\r\n\r\n\t\tconst B = new Vector3();\r\n\t\tconst T = new Vector3();\r\n\t\tconst N = new Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\r\n\r\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t\t// calculate orthonormal basis\r\n\r\n\t\t\tT.subVectors( P2, P1 );\r\n\t\t\tN.addVectors( P2, P1 );\r\n\t\t\tB.crossVectors( T, N );\r\n\t\t\tN.crossVectors( B, T );\r\n\r\n\t\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\t\tB.normalize();\r\n\t\t\tN.normalize();\r\n\r\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\r\n\t\t\t\tconst cx = - tube * Math.cos( v );\r\n\t\t\t\tconst cy = tube * Math.sin( v );\r\n\r\n\t\t\t\t// now calculate the final vertex position.\r\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\r\n\r\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\r\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// this function calculates the current position on the torus curve\r\n\r\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\t\tconst cu = Math.cos( u );\r\n\t\t\tconst su = Math.sin( u );\r\n\t\t\tconst quOverP = q / p * u;\r\n\t\t\tconst cs = Math.cos( quOverP );\r\n\r\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { TorusKnotGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport * as Curves from '../extras/curves/Curves.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass TubeGeometry extends BufferGeometry {\r\n\r\n\tconstructor( path = new Curves[ 'QuadraticBezierCurve3' ]( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'TubeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = frames.tangents;\r\n\t\tthis.normals = frames.normals;\r\n\t\tthis.binormals = frames.binormals;\r\n\r\n\t\t// helper variables\r\n\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\t\tconst uv = new Vector2();\r\n\t\tlet P = new Vector3();\r\n\r\n\t\t// buffer\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\t\tconst indices = [];\r\n\r\n\t\t// create buffer data\r\n\r\n\t\tgenerateBufferData();\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction generateBufferData() {\r\n\r\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tgenerateSegment( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\r\n\t\t\t// at the regular position on the given path\r\n\t\t\t//\r\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\r\n\r\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\r\n\r\n\t\t\t// uvs are generated in a separate function.\r\n\t\t\t// this makes it easy compute correct values for closed geometries\r\n\r\n\t\t\tgenerateUVs();\r\n\r\n\t\t\t// finally create faces\r\n\r\n\t\t\tgenerateIndices();\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateSegment( i ) {\r\n\r\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\r\n\r\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\r\n\r\n\t\t\t// retrieve corresponding normal and binormal\r\n\r\n\t\t\tconst N = frames.normals[ i ];\r\n\t\t\tconst B = frames.binormals[ i ];\r\n\r\n\t\t\t// generate normals and vertices for the current segment\r\n\r\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\tconst sin = Math.sin( v );\r\n\t\t\t\tconst cos = - Math.cos( v );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\r\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\r\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\r\n\t\t\t\tnormal.normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = P.x + radius * normal.x;\r\n\t\t\t\tvertex.y = P.y + radius * normal.y;\r\n\t\t\t\tvertex.z = P.z + radius * normal.z;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateIndices() {\r\n\r\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\t\tuv.x = i / tubularSegments;\r\n\t\t\t\t\tuv.y = j / radialSegments;\r\n\r\n\t\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.path = this.parameters.path.toJSON();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\r\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\r\n\t\treturn new TubeGeometry(\r\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\r\n\t\t\tdata.tubularSegments,\r\n\t\t\tdata.radius,\r\n\t\t\tdata.radialSegments,\r\n\t\t\tdata.closed\r\n\t\t);\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { TubeGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass WireframeGeometry extends BufferGeometry {\r\n\r\n\tconstructor( geometry = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'WireframeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tgeometry: geometry\r\n\t\t};\r\n\r\n\t\tif ( geometry !== null ) {\r\n\r\n\t\t\t// buffer\r\n\r\n\t\t\tconst vertices = [];\r\n\t\t\tconst edges = new Set();\r\n\r\n\t\t\t// helper variables\r\n\r\n\t\t\tconst start = new Vector3();\r\n\t\t\tconst end = new Vector3();\r\n\r\n\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t// indexed BufferGeometry\r\n\r\n\t\t\t\tconst position = geometry.attributes.position;\r\n\t\t\t\tconst indices = geometry.index;\r\n\t\t\t\tlet groups = geometry.groups;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a data structure that contains all edges without duplicates\r\n\r\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\t\tconst group = groups[ o ];\r\n\r\n\t\t\t\t\tconst groupStart = group.start;\r\n\t\t\t\t\tconst groupCount = group.count;\r\n\r\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\r\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\r\n\r\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\r\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\r\n\r\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\r\n\r\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\r\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\t\tconst position = geometry.attributes.position;\r\n\r\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\r\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\r\n\r\n\t\t\t\t\t\tconst index1 = 3 * i + j;\r\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\r\n\r\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\r\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\r\n\r\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\r\n\r\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\r\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// build geometry\r\n\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction isUniqueEdge( start, end, edges ) {\r\n\r\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\r\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\r\n\r\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\r\n\r\n\t\treturn false;\r\n\r\n\t} else {\r\n\r\n\t\tedges.add( hash1 );\r\n\t\tedges.add( hash2 );\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { WireframeGeometry };\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass ShadowMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isShadowMaterial = true;\r\n\r\n\t\tthis.type = 'ShadowMaterial';\r\n\r\n\t\tthis.color = new Color( 0x000000 );\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ShadowMaterial };\r\n", "import { ShaderMaterial } from './ShaderMaterial.js';\r\n\r\nclass RawShaderMaterial extends ShaderMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper( parameters );\r\n\r\n\t\tthis.isRawShaderMaterial = true;\r\n\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RawShaderMaterial };\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshStandardMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshStandardMaterial = true;\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.type = 'MeshStandardMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.roughness = 1.0;\r\n\t\tthis.metalness = 0.0;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.roughnessMap = null;\r\n\r\n\t\tthis.metalnessMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.envMapIntensity = 1.0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.roughness = source.roughness;\r\n\t\tthis.metalness = source.metalness;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\t\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshStandardMaterial };\r\n", "import { Vector2 } from '../math/Vector2.js';\r\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\r\nimport { Color } from '../math/Color.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhysicalMaterial = true;\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\t\tthis.anisotropyRotation = 0;\r\n\t\tthis.anisotropyMap = null;\r\n\r\n\t\tthis.clearcoatMap = null;\r\n\t\tthis.clearcoatRoughness = 0.0;\r\n\t\tthis.clearcoatRoughnessMap = null;\r\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\r\n\t\tthis.clearcoatNormalMap = null;\r\n\r\n\t\tthis.ior = 1.5;\r\n\r\n\t\tObject.defineProperty( this, 'reflectivity', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn ( MathUtils.clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( reflectivity ) {\r\n\r\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.iridescenceMap = null;\r\n\t\tthis.iridescenceIOR = 1.3;\r\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\r\n\t\tthis.iridescenceThicknessMap = null;\r\n\r\n\t\tthis.sheenColor = new Color( 0x000000 );\r\n\t\tthis.sheenColorMap = null;\r\n\t\tthis.sheenRoughness = 1.0;\r\n\t\tthis.sheenRoughnessMap = null;\r\n\r\n\t\tthis.transmissionMap = null;\r\n\r\n\t\tthis.thickness = 0;\r\n\t\tthis.thicknessMap = null;\r\n\t\tthis.attenuationDistance = Infinity;\r\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\r\n\r\n\t\tthis.specularIntensity = 1.0;\r\n\t\tthis.specularIntensityMap = null;\r\n\t\tthis.specularColor = new Color( 1, 1, 1 );\r\n\t\tthis.specularColorMap = null;\r\n\r\n\t\tthis._anisotropy = 0;\r\n\t\tthis._clearcoat = 0;\r\n\t\tthis._dispersion = 0;\r\n\t\tthis._iridescence = 0;\r\n\t\tthis._sheen = 0.0;\r\n\t\tthis._transmission = 0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tget anisotropy() {\r\n\r\n\t\treturn this._anisotropy;\r\n\r\n\t}\r\n\r\n\tset anisotropy( value ) {\r\n\r\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._anisotropy = value;\r\n\r\n\t}\r\n\r\n\tget clearcoat() {\r\n\r\n\t\treturn this._clearcoat;\r\n\r\n\t}\r\n\r\n\tset clearcoat( value ) {\r\n\r\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._clearcoat = value;\r\n\r\n\t}\r\n\r\n\tget iridescence() {\r\n\r\n\t\treturn this._iridescence;\r\n\r\n\t}\r\n\r\n\tset iridescence( value ) {\r\n\r\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._iridescence = value;\r\n\r\n\t}\r\n\r\n\tget dispersion() {\r\n\r\n\t\treturn this._dispersion;\r\n\r\n\t}\r\n\r\n\tset dispersion( value ) {\r\n\r\n\t\tif ( this._dispersion > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._dispersion = value;\r\n\r\n\t}\r\n\r\n\tget sheen() {\r\n\r\n\t\treturn this._sheen;\r\n\r\n\t}\r\n\r\n\tset sheen( value ) {\r\n\r\n\t\tif ( this._sheen > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._sheen = value;\r\n\r\n\t}\r\n\r\n\tget transmission() {\r\n\r\n\t\treturn this._transmission;\r\n\r\n\t}\r\n\r\n\tset transmission( value ) {\r\n\r\n\t\tif ( this._transmission > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._transmission = value;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\r\n\t\tthis.anisotropyMap = source.anisotropyMap;\r\n\r\n\t\tthis.clearcoat = source.clearcoat;\r\n\t\tthis.clearcoatMap = source.clearcoatMap;\r\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\r\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\r\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\r\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\r\n\r\n\t\tthis.dispersion = source.dispersion;\r\n\t\tthis.ior = source.ior;\r\n\r\n\t\tthis.iridescence = source.iridescence;\r\n\t\tthis.iridescenceMap = source.iridescenceMap;\r\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\r\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\r\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\r\n\r\n\t\tthis.sheen = source.sheen;\r\n\t\tthis.sheenColor.copy( source.sheenColor );\r\n\t\tthis.sheenColorMap = source.sheenColorMap;\r\n\t\tthis.sheenRoughness = source.sheenRoughness;\r\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\r\n\r\n\t\tthis.transmission = source.transmission;\r\n\t\tthis.transmissionMap = source.transmissionMap;\r\n\r\n\t\tthis.thickness = source.thickness;\r\n\t\tthis.thicknessMap = source.thicknessMap;\r\n\t\tthis.attenuationDistance = source.attenuationDistance;\r\n\t\tthis.attenuationColor.copy( source.attenuationColor );\r\n\r\n\t\tthis.specularIntensity = source.specularIntensity;\r\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\r\n\t\tthis.specularColor.copy( source.specularColor );\r\n\t\tthis.specularColorMap = source.specularColorMap;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshPhysicalMaterial };\r\n", "import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshPhongMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhongMaterial = true;\r\n\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.specular = new Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshPhongMaterial };\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass MeshToonMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshToonMaterial = true;\r\n\r\n\t\tthis.defines = { 'TOON': '' };\r\n\r\n\t\tthis.type = 'MeshToonMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.gradientMap = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\t\tthis.gradientMap = source.gradientMap;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshToonMaterial };\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\n\r\nclass MeshNormalMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshNormalMaterial = true;\r\n\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshNormalMaterial };\r\n", "import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshLambertMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshLambertMaterial = true;\r\n\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshLambertMaterial };\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass MeshMatcapMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshMatcapMaterial = true;\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.type = 'MeshMatcapMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.matcap = null;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.matcap = source.matcap;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshMatcapMaterial };\r\n", "import { LineBasicMaterial } from './LineBasicMaterial.js';\r\n\r\nclass LineDashedMaterial extends LineBasicMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineDashedMaterial = true;\r\n\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineDashedMaterial };\r\n", "import { Quaternion } from '../math/Quaternion.js';\r\nimport { AdditiveAnimationBlendMode } from '../constants.js';\r\n\r\n// converts an array to a specific type\r\nfunction convertArray( array, type, forceClone ) {\r\n\r\n\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t! forceClone && array.constructor === type ) return array;\r\n\r\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\treturn new type( array ); // create typed array\r\n\r\n\t}\r\n\r\n\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n}\r\n\r\nfunction isTypedArray( object ) {\r\n\r\n\treturn ArrayBuffer.isView( object ) &&\r\n\t\t! ( object instanceof DataView );\r\n\r\n}\r\n\r\n// returns an array by which times and values can be sorted\r\nfunction getKeyframeOrder( times ) {\r\n\r\n\tfunction compareTime( i, j ) {\r\n\r\n\t\treturn times[ i ] - times[ j ];\r\n\r\n\t}\r\n\r\n\tconst n = times.length;\r\n\tconst result = new Array( n );\r\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\r\n\r\n\tresult.sort( compareTime );\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\n// uses the array previously returned by 'getKeyframeOrder' to sort data\r\nfunction sortedArray( values, stride, order ) {\r\n\r\n\tconst nValues = values.length;\r\n\tconst result = new values.constructor( nValues );\r\n\r\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\tconst srcOffset = order[ i ] * stride;\r\n\r\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\n// function for parsing AOS keyframe formats\r\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\tlet i = 1, key = jsonKeys[ 0 ];\r\n\r\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t}\r\n\r\n\tif ( key === undefined ) return; // no data\r\n\r\n\tlet value = key[ valuePropertyName ];\r\n\tif ( value === undefined ) return; // no data\r\n\r\n\tif ( Array.isArray( value ) ) {\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\ttimes.push( key.time );\r\n\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t}\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t} while ( key !== undefined );\r\n\r\n\t} else if ( value.toArray !== undefined ) {\r\n\r\n\t\t// ...assume THREE.Math-ish\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\ttimes.push( key.time );\r\n\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t} while ( key !== undefined );\r\n\r\n\t} else {\r\n\r\n\t\t// otherwise push as-is\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\ttimes.push( key.time );\r\n\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t} while ( key !== undefined );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\r\n\r\n\tconst clip = sourceClip.clone();\r\n\r\n\tclip.name = name;\r\n\r\n\tconst tracks = [];\r\n\r\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\tconst track = clip.tracks[ i ];\r\n\t\tconst valueSize = track.getValueSize();\r\n\r\n\t\tconst times = [];\r\n\t\tconst values = [];\r\n\r\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\r\n\r\n\t\t\tconst frame = track.times[ j ] * fps;\r\n\r\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\r\n\r\n\t\t\ttimes.push( track.times[ j ] );\r\n\r\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\r\n\r\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( times.length === 0 ) continue;\r\n\r\n\t\ttrack.times = convertArray( times, track.times.constructor );\r\n\t\ttrack.values = convertArray( values, track.values.constructor );\r\n\r\n\t\ttracks.push( track );\r\n\r\n\t}\r\n\r\n\tclip.tracks = tracks;\r\n\r\n\t// find minimum .times value across all tracks in the trimmed clip\r\n\r\n\tlet minStartTime = Infinity;\r\n\r\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\r\n\r\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// shift all tracks such that clip begins at t=0\r\n\r\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\r\n\r\n\t}\r\n\r\n\tclip.resetDuration();\r\n\r\n\treturn clip;\r\n\r\n}\r\n\r\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\r\n\r\n\tif ( fps <= 0 ) fps = 30;\r\n\r\n\tconst numTracks = referenceClip.tracks.length;\r\n\tconst referenceTime = referenceFrame / fps;\r\n\r\n\t// Make each track's values relative to the values at the reference frame\r\n\tfor ( let i = 0; i < numTracks; ++ i ) {\r\n\r\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\r\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\r\n\r\n\t\t// Skip this track if it's non-numeric\r\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\r\n\r\n\t\t// Find the track in the target clip whose name and type matches the reference track\r\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\r\n\r\n\t\t\treturn track.name === referenceTrack.name\r\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\r\n\r\n\t\t} );\r\n\r\n\t\tif ( targetTrack === undefined ) continue;\r\n\r\n\t\tlet referenceOffset = 0;\r\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\r\n\r\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\r\n\r\n\t\t\treferenceOffset = referenceValueSize / 3;\r\n\r\n\t\t}\r\n\r\n\t\tlet targetOffset = 0;\r\n\t\tconst targetValueSize = targetTrack.getValueSize();\r\n\r\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\r\n\r\n\t\t\ttargetOffset = targetValueSize / 3;\r\n\r\n\t\t}\r\n\r\n\t\tconst lastIndex = referenceTrack.times.length - 1;\r\n\t\tlet referenceValue;\r\n\r\n\t\t// Find the value to subtract out of the track\r\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\r\n\r\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\r\n\t\t\tconst startIndex = referenceOffset;\r\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\r\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\r\n\r\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\r\n\r\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\r\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\r\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\r\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Interpolate to the reference value\r\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\r\n\t\t\tconst startIndex = referenceOffset;\r\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\r\n\t\t\tinterpolant.evaluate( referenceTime );\r\n\t\t\treferenceValue = interpolant.resultBuffer.slice( startIndex, endIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// Conjugate the quaternion\r\n\t\tif ( referenceTrackType === 'quaternion' ) {\r\n\r\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\r\n\t\t\treferenceQuat.toArray( referenceValue );\r\n\r\n\t\t}\r\n\r\n\t\t// Subtract the reference value from all of the track values\r\n\r\n\t\tconst numTimes = targetTrack.times.length;\r\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\r\n\r\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\r\n\r\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\r\n\r\n\t\t\t\t// Multiply the conjugate for quaternion track types\r\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\r\n\t\t\t\t\ttargetTrack.values,\r\n\t\t\t\t\tvalueStart,\r\n\t\t\t\t\treferenceValue,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\ttargetTrack.values,\r\n\t\t\t\t\tvalueStart\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\r\n\r\n\t\t\t\t// Subtract each value for all other numeric track types\r\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\r\n\r\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\r\n\r\n\treturn targetClip;\r\n\r\n}\r\n\r\nconst AnimationUtils = {\r\n\tconvertArray: convertArray,\r\n\tisTypedArray: isTypedArray,\r\n\tgetKeyframeOrder: getKeyframeOrder,\r\n\tsortedArray: sortedArray,\r\n\tflattenJSON: flattenJSON,\r\n\tsubclip: subclip,\r\n\tmakeClipAdditive: makeClipAdditive\r\n};\r\n\r\nexport {\r\n\tconvertArray,\r\n\tisTypedArray,\r\n\tgetKeyframeOrder,\r\n\tsortedArray,\r\n\tflattenJSON,\r\n\tsubclip,\r\n\tmakeClipAdditive,\r\n\tAnimationUtils\r\n};\r\n", "/**\r\n * Abstract base class of interpolants over parametric samples.\r\n *\r\n * The parameter domain is one dimensional, typically the time or a path\r\n * along a curve defined by the data.\r\n *\r\n * The sample values can have any dimensionality and derived classes may\r\n * apply special interpretations to the data.\r\n *\r\n * This class provides the interval seek in a Template Method, deferring\r\n * the actual interpolation to derived classes.\r\n *\r\n * Time complexity is O(1) for linear access crossing at most two points\r\n * and O(log N) for random access, where N is the number of positions.\r\n *\r\n * References:\r\n *\r\n * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n *\r\n */\r\n\r\nclass Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\r\n\t\tthis.settings = null;\r\n\t\tthis.DefaultSettings_ = {};\r\n\r\n\t}\r\n\r\n\tevaluate( t ) {\r\n\r\n\t\tconst pp = this.parameterPositions;\r\n\t\tlet i1 = this._cachedIndex,\r\n\t\t\tt1 = pp[ i1 ],\r\n\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\tvalidate_interval: {\r\n\r\n\t\t\tseek: {\r\n\r\n\t\t\t\tlet right;\r\n\r\n\t\t\t\tlinear_scan: {\r\n\r\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t//-\r\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\r\n\r\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\r\n\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\r\n\r\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t// binary search\r\n\r\n\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt1 = pp[ i1 ];\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\treturn this.copySampleValue_( 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // seek\r\n\r\n\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t} // validate_interval\r\n\r\n\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t}\r\n\r\n\tgetSettings_() {\r\n\r\n\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t}\r\n\r\n\tcopySampleValue_( index ) {\r\n\r\n\t\t// copies a sample value to the result buffer\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = index * stride;\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// Template methods for derived classes:\r\n\r\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\r\n\r\n\t\tthrow new Error( 'call to abstract method' );\r\n\t\t// implementations shall return this.resultBuffer\r\n\r\n\t}\r\n\r\n\tintervalChanged_( /* i1, t0, t1 */ ) {\r\n\r\n\t\t// empty\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Interpolant };\r\n", "import { ZeroCurvatureEnding, WrapAroundEnding, ZeroSlopeEnding } from '../../constants.js';\r\nimport { Interpolant } from '../Interpolant.js';\r\n\r\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n */\r\n\r\nclass CubicInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t\tthis._weightPrev = - 0;\r\n\t\tthis._offsetPrev = - 0;\r\n\t\tthis._weightNext = - 0;\r\n\t\tthis._offsetNext = - 0;\r\n\r\n\t\tthis.DefaultSettings_ = {\r\n\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tintervalChanged_( i1, t0, t1 ) {\r\n\r\n\t\tconst pp = this.parameterPositions;\r\n\t\tlet iPrev = i1 - 2,\r\n\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\tstride = this.valueSize;\r\n\r\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\tthis._offsetPrev = iPrev * stride;\r\n\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tpp = p * p,\r\n\t\t\tppp = pp * p;\r\n\r\n\t\t// evaluate polynomials\r\n\r\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\r\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\r\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\r\n\t\tconst sN = wN * ppp - wN * pp;\r\n\r\n\t\t// combine data linearly\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubicInterpolant };\r\n", "import { Interpolant } from '../Interpolant.js';\r\n\r\nclass LinearInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset1 = i1 * stride,\r\n\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { LinearInterpolant };\r\n", "import { Interpolant } from '../Interpolant.js';\r\n\r\n/**\r\n *\r\n * Interpolant that evaluates to the sample value at the position preceding\r\n * the parameter.\r\n */\r\n\r\nclass DiscreteInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\r\n\r\n\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { DiscreteInterpolant };\r\n", "import {\r\n\tInterpolateLinear,\r\n\tInterpolateSmooth,\r\n\tInterpolateDiscrete\r\n} from '../constants.js';\r\nimport { CubicInterpolant } from '../math/interpolants/CubicInterpolant.js';\r\nimport { LinearInterpolant } from '../math/interpolants/LinearInterpolant.js';\r\nimport { DiscreteInterpolant } from '../math/interpolants/DiscreteInterpolant.js';\r\nimport * as AnimationUtils from './AnimationUtils.js';\r\n\r\nclass KeyframeTrack {\r\n\r\n\tconstructor( name, times, values, interpolation ) {\r\n\r\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\r\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\t}\r\n\r\n\t// Serialization (in static context, because of constructor invocation\r\n\t// and automatic invocation of .toJSON):\r\n\r\n\tstatic toJSON( track ) {\r\n\r\n\t\tconst trackType = track.constructor;\r\n\r\n\t\tlet json;\r\n\r\n\t\t// derived classes can define a static toJSON method\r\n\t\tif ( trackType.toJSON !== this.toJSON ) {\r\n\r\n\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\tjson = {\r\n\r\n\t\t\t\t'name': track.name,\r\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tconst interpolation = track.getInterpolation();\r\n\r\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\treturn json;\r\n\r\n\t}\r\n\r\n\tInterpolantFactoryMethodDiscrete( result ) {\r\n\r\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n\tInterpolantFactoryMethodLinear( result ) {\r\n\r\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n\tInterpolantFactoryMethodSmooth( result ) {\r\n\r\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n\tsetInterpolation( interpolation ) {\r\n\r\n\t\tlet factoryMethod;\r\n\r\n\t\tswitch ( interpolation ) {\r\n\r\n\t\t\tcase InterpolateDiscrete:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase InterpolateLinear:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase InterpolateSmooth:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\tconst message = 'unsupported interpolation for ' +\r\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\r\n\r\n\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetInterpolation() {\r\n\r\n\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\treturn InterpolateDiscrete;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\treturn InterpolateLinear;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\treturn InterpolateSmooth;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetValueSize() {\r\n\r\n\t\treturn this.values.length / this.times.length;\r\n\r\n\t}\r\n\r\n\t// move all keyframes either forwards or backwards in time\r\n\tshift( timeOffset ) {\r\n\r\n\t\tif ( timeOffset !== 0.0 ) {\r\n\r\n\t\t\tconst times = this.times;\r\n\r\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\tscale( timeScale ) {\r\n\r\n\t\tif ( timeScale !== 1.0 ) {\r\n\r\n\t\t\tconst times = this.times;\r\n\r\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\ttrim( startTime, endTime ) {\r\n\r\n\t\tconst times = this.times,\r\n\t\t\tnKeys = times.length;\r\n\r\n\t\tlet from = 0,\r\n\t\t\tto = nKeys - 1;\r\n\r\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\r\n\r\n\t\t\t++ from;\r\n\r\n\t\t}\r\n\r\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\r\n\r\n\t\t\t-- to;\r\n\r\n\t\t}\r\n\r\n\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\tif ( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\tif ( from >= to ) {\r\n\r\n\t\t\t\tto = Math.max( to, 1 );\r\n\t\t\t\tfrom = to - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst stride = this.getValueSize();\r\n\t\t\tthis.times = times.slice( from, to );\r\n\t\t\tthis.values = this.values.slice( from * stride, to * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\tvalidate() {\r\n\r\n\t\tlet valid = true;\r\n\r\n\t\tconst valueSize = this.getValueSize();\r\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tconst times = this.times,\r\n\t\t\tvalues = this.values,\r\n\r\n\t\t\tnKeys = times.length;\r\n\r\n\t\tif ( nKeys === 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tlet prevTime = null;\r\n\r\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\tconst currTime = times[ i ];\r\n\r\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevTime = currTime;\r\n\r\n\t\t}\r\n\r\n\t\tif ( values !== undefined ) {\r\n\r\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tconst value = values[ i ];\r\n\r\n\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\r\n\t}\r\n\r\n\t// removes equivalent sequential keys as common in morph target sequences\r\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\toptimize() {\r\n\r\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\r\n\t\tconst times = this.times.slice(),\r\n\t\t\tvalues = this.values.slice(),\r\n\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\r\n\r\n\t\t\tlastIndex = times.length - 1;\r\n\r\n\t\tlet writeIndex = 1;\r\n\r\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\r\n\r\n\t\t\tlet keep = false;\r\n\r\n\t\t\tconst time = times[ i ];\r\n\t\t\tconst timeNext = times[ i + 1 ];\r\n\r\n\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\r\n\r\n\t\t\t\tif ( ! smoothInterpolation ) {\r\n\r\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\r\n\t\t\t\t\tconst offset = i * stride,\r\n\t\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\tconst value = values[ offset + j ];\r\n\r\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tkeep = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// in-place compaction\r\n\r\n\t\t\tif ( keep ) {\r\n\r\n\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\tconst readOffset = i * stride,\r\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// flush last keyframe (compaction looks ahead)\r\n\r\n\t\tif ( lastIndex > 0 ) {\r\n\r\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\r\n\r\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++ writeIndex;\r\n\r\n\t\t}\r\n\r\n\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\tthis.times = times.slice( 0, writeIndex );\r\n\t\t\tthis.values = values.slice( 0, writeIndex * stride );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.times = times;\r\n\t\t\tthis.values = values;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst times = this.times.slice();\r\n\t\tconst values = this.values.slice();\r\n\r\n\t\tconst TypedKeyframeTrack = this.constructor;\r\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\r\n\r\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\r\n\t\ttrack.createInterpolant = this.createInterpolant;\r\n\r\n\t\treturn track;\r\n\r\n\t}\r\n\r\n}\r\n\r\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\r\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\r\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\r\n\r\nexport { KeyframeTrack };\r\n", "import { InterpolateDiscrete } from '../../constants.js';\r\nimport { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of Boolean keyframe values.\r\n */\r\nclass BooleanKeyframeTrack extends KeyframeTrack {\r\n\r\n\t// No interpolation parameter because only InterpolateDiscrete is valid.\r\n\tconstructor( name, times, values ) {\r\n\r\n\t\tsuper( name, times, values );\r\n\r\n\t}\r\n\r\n}\r\n\r\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\r\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\r\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\r\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\r\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\n// Note: Actually this track could have a optimized / compressed\r\n// representation of a single value and a custom interpolant that\r\n// computes \"firstValue ^ isOdd( index )\".\r\n\r\nexport { BooleanKeyframeTrack };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of keyframe values that represent color.\r\n */\r\nclass ColorKeyframeTrack extends KeyframeTrack {}\r\n\r\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited\r\n\r\n// Note: Very basic implementation and nothing special yet.\r\n// However, this is the place for color space parameterization.\r\n\r\nexport { ColorKeyframeTrack };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of numeric keyframe values.\r\n */\r\nclass NumberKeyframeTrack extends KeyframeTrack {}\r\n\r\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited\r\n\r\nexport { NumberKeyframeTrack };\r\n", "import { Interpolant } from '../Interpolant.js';\r\nimport { Quaternion } from '../Quaternion.js';\r\n\r\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n */\r\n\r\nclass QuaternionLinearInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\tlet offset = i1 * stride;\r\n\r\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { QuaternionLinearInterpolant };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\nimport { QuaternionLinearInterpolant } from '../../math/interpolants/QuaternionLinearInterpolant.js';\r\n\r\n/**\r\n * A Track of quaternion keyframe values.\r\n */\r\nclass QuaternionKeyframeTrack extends KeyframeTrack {\r\n\r\n\tInterpolantFactoryMethodLinear( result ) {\r\n\r\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n}\r\n\r\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited;\r\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\nexport { QuaternionKeyframeTrack };\r\n", "import { InterpolateDiscrete } from '../../constants.js';\r\nimport { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track that interpolates Strings\r\n */\r\nclass StringKeyframeTrack extends KeyframeTrack {\r\n\r\n\t// No interpolation parameter because only InterpolateDiscrete is valid.\r\n\tconstructor( name, times, values ) {\r\n\r\n\t\tsuper( name, times, values );\r\n\r\n\t}\r\n\r\n}\r\n\r\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\r\nStringKeyframeTrack.prototype.ValueBufferType = Array;\r\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\r\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\r\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\nexport { StringKeyframeTrack };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of vectored keyframe values.\r\n */\r\nclass VectorKeyframeTrack extends KeyframeTrack {}\r\n\r\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited\r\n\r\nexport { VectorKeyframeTrack };\r\n", "import * as AnimationUtils from './AnimationUtils.js';\r\nimport { KeyframeTrack } from './KeyframeTrack.js';\r\nimport { BooleanKeyframeTrack } from './tracks/BooleanKeyframeTrack.js';\r\nimport { ColorKeyframeTrack } from './tracks/ColorKeyframeTrack.js';\r\nimport { NumberKeyframeTrack } from './tracks/NumberKeyframeTrack.js';\r\nimport { QuaternionKeyframeTrack } from './tracks/QuaternionKeyframeTrack.js';\r\nimport { StringKeyframeTrack } from './tracks/StringKeyframeTrack.js';\r\nimport { VectorKeyframeTrack } from './tracks/VectorKeyframeTrack.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { NormalAnimationBlendMode } from '../constants.js';\r\n\r\nclass AnimationClip {\r\n\r\n\tconstructor( name = '', duration = - 1, tracks = [], blendMode = NormalAnimationBlendMode ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.tracks = tracks;\r\n\t\tthis.duration = duration;\r\n\t\tthis.blendMode = blendMode;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\t// this means it should figure out its duration by scanning the tracks\r\n\t\tif ( this.duration < 0 ) {\r\n\r\n\t\t\tthis.resetDuration();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tstatic parse( json ) {\r\n\r\n\t\tconst tracks = [],\r\n\t\t\tjsonTracks = json.tracks,\r\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\r\n\t\tclip.uuid = json.uuid;\r\n\r\n\t\treturn clip;\r\n\r\n\t}\r\n\r\n\tstatic toJSON( clip ) {\r\n\r\n\t\tconst tracks = [],\r\n\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\tconst json = {\r\n\r\n\t\t\t'name': clip.name,\r\n\t\t\t'duration': clip.duration,\r\n\t\t\t'tracks': tracks,\r\n\t\t\t'uuid': clip.uuid,\r\n\t\t\t'blendMode': clip.blendMode\r\n\r\n\t\t};\r\n\r\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn json;\r\n\r\n\t}\r\n\r\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\r\n\r\n\t\tconst numMorphTargets = morphTargetSequence.length;\r\n\t\tconst tracks = [];\r\n\r\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\tlet times = [];\r\n\t\t\tlet values = [];\r\n\r\n\t\t\ttimes.push(\r\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\ti,\r\n\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\tconst order = AnimationUtils.getKeyframeOrder( times );\r\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t// last frame as well for perfect loop.\r\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttracks.push(\r\n\t\t\t\tnew NumberKeyframeTrack(\r\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\ttimes, values\r\n\t\t\t\t).scale( 1.0 / fps ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn new this( name, - 1, tracks );\r\n\r\n\t}\r\n\r\n\tstatic findByName( objectOrClipArray, name ) {\r\n\r\n\t\tlet clipArray = objectOrClipArray;\r\n\r\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\r\n\r\n\t\t\tconst o = objectOrClipArray;\r\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\r\n\r\n\t\tconst animationToMorphTargets = {};\r\n\r\n\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t// sort morph target names into animation groups based\r\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst morphTarget = morphTargets[ i ];\r\n\t\t\tconst parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\tconst name = parts[ 1 ];\r\n\r\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\r\n\r\n\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst clips = [];\r\n\r\n\t\tfor ( const name in animationToMorphTargets ) {\r\n\r\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn clips;\r\n\r\n\t}\r\n\r\n\t// parse the animation.hierarchy format\r\n\tstatic parseAnimation( animation, bones ) {\r\n\r\n\t\tif ( ! animation ) {\r\n\r\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t// only return track if there are actually keys.\r\n\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\tconst times = [];\r\n\t\t\t\tconst values = [];\r\n\r\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tconst tracks = [];\r\n\r\n\t\tconst clipName = animation.name || 'default';\r\n\t\tconst fps = animation.fps || 30;\r\n\t\tconst blendMode = animation.blendMode;\r\n\r\n\t\t// automatic length determination in AnimationClip.\r\n\t\tlet duration = animation.length || - 1;\r\n\r\n\t\tconst hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t// skip empty tracks\r\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\r\n\r\n\t\t\t// process morph targets\r\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\r\n\r\n\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\tconst morphTargetNames = {};\r\n\r\n\t\t\t\tlet k;\r\n\r\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\r\n\r\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t// the morphTarget is named.\r\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\tconst times = [];\r\n\t\t\t\t\tconst values = [];\r\n\r\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\r\n\r\n\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tduration = morphTargetNames.length * fps;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\r\n\r\n\t\treturn clip;\r\n\r\n\t}\r\n\r\n\tresetDuration() {\r\n\r\n\t\tconst tracks = this.tracks;\r\n\t\tlet duration = 0;\r\n\r\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst track = this.tracks[ i ];\r\n\r\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.duration = duration;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttrim() {\r\n\r\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tvalidate() {\r\n\r\n\t\tlet valid = true;\r\n\r\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tvalid = valid && this.tracks[ i ].validate();\r\n\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\r\n\t}\r\n\r\n\toptimize() {\r\n\r\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst tracks = [];\r\n\r\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\ttracks.push( this.tracks[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\treturn this.constructor.toJSON( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction getTrackTypeForValueTypeName( typeName ) {\r\n\r\n\tswitch ( typeName.toLowerCase() ) {\r\n\r\n\t\tcase 'scalar':\r\n\t\tcase 'double':\r\n\t\tcase 'float':\r\n\t\tcase 'number':\r\n\t\tcase 'integer':\r\n\r\n\t\t\treturn NumberKeyframeTrack;\r\n\r\n\t\tcase 'vector':\r\n\t\tcase 'vector2':\r\n\t\tcase 'vector3':\r\n\t\tcase 'vector4':\r\n\r\n\t\t\treturn VectorKeyframeTrack;\r\n\r\n\t\tcase 'color':\r\n\r\n\t\t\treturn ColorKeyframeTrack;\r\n\r\n\t\tcase 'quaternion':\r\n\r\n\t\t\treturn QuaternionKeyframeTrack;\r\n\r\n\t\tcase 'bool':\r\n\t\tcase 'boolean':\r\n\r\n\t\t\treturn BooleanKeyframeTrack;\r\n\r\n\t\tcase 'string':\r\n\r\n\t\t\treturn StringKeyframeTrack;\r\n\r\n\t}\r\n\r\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\r\n\r\n}\r\n\r\nfunction parseKeyframeTrack( json ) {\r\n\r\n\tif ( json.type === undefined ) {\r\n\r\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\r\n\r\n\t}\r\n\r\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\r\n\r\n\tif ( json.times === undefined ) {\r\n\r\n\t\tconst times = [], values = [];\r\n\r\n\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\tjson.times = times;\r\n\t\tjson.values = values;\r\n\r\n\t}\r\n\r\n\t// derived classes can define a static parse method\r\n\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\treturn trackType.parse( json );\r\n\r\n\t} else {\r\n\r\n\t\t// by default, we assume a constructor compatible with the base\r\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AnimationClip };\r\n", "const Cache = {\r\n\r\n\tenabled: false,\r\n\r\n\tfiles: {},\r\n\r\n\tadd: function ( key, file ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\tthis.files[ key ] = file;\r\n\r\n\t},\r\n\r\n\tget: function ( key ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\treturn this.files[ key ];\r\n\r\n\t},\r\n\r\n\tremove: function ( key ) {\r\n\r\n\t\tdelete this.files[ key ];\r\n\r\n\t},\r\n\r\n\tclear: function () {\r\n\r\n\t\tthis.files = {};\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\nexport { Cache };\r\n", "class LoadingManager {\r\n\r\n\tconstructor( onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tlet isLoading = false;\r\n\t\tlet itemsLoaded = 0;\r\n\t\tlet itemsTotal = 0;\r\n\t\tlet urlModifier = undefined;\r\n\t\tconst handlers = [];\r\n\r\n\t\t// Refer to #5689 for the reason why we don't set .onStart\r\n\t\t// in the constructor\r\n\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\r\n\t\tthis.itemStart = function ( url ) {\r\n\r\n\t\t\titemsTotal ++;\r\n\r\n\t\t\tif ( isLoading === false ) {\r\n\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tisLoading = true;\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemEnd = function ( url ) {\r\n\r\n\t\t\titemsLoaded ++;\r\n\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\t\tisLoading = false;\r\n\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemError = function ( url ) {\r\n\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\t\tscope.onError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.resolveURL = function ( url ) {\r\n\r\n\t\t\tif ( urlModifier ) {\r\n\r\n\t\t\t\treturn urlModifier( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn url;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setURLModifier = function ( transform ) {\r\n\r\n\t\t\turlModifier = transform;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.addHandler = function ( regex, loader ) {\r\n\r\n\t\t\thandlers.push( regex, loader );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.removeHandler = function ( regex ) {\r\n\r\n\t\t\tconst index = handlers.indexOf( regex );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\thandlers.splice( index, 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getHandler = function ( file ) {\r\n\r\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tconst regex = handlers[ i ];\r\n\t\t\t\tconst loader = handlers[ i + 1 ];\r\n\r\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\r\n\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\t\treturn loader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\r\n\r\nexport { DefaultLoadingManager, LoadingManager };\r\n", "import { DefaultLoadingManager } from './LoadingManager.js';\r\n\r\nclass Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\tthis.crossOrigin = 'anonymous';\r\n\t\tthis.withCredentials = false;\r\n\t\tthis.path = '';\r\n\t\tthis.resourcePath = '';\r\n\t\tthis.requestHeader = {};\r\n\r\n\t}\r\n\r\n\tload( /* url, onLoad, onProgress, onError */ ) {}\r\n\r\n\tloadAsync( url, onProgress ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\treturn new Promise( function ( resolve, reject ) {\r\n\r\n\t\t\tscope.load( url, resolve, onProgress, reject );\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tparse( /* data */ ) {}\r\n\r\n\tsetCrossOrigin( crossOrigin ) {\r\n\r\n\t\tthis.crossOrigin = crossOrigin;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetWithCredentials( value ) {\r\n\r\n\t\tthis.withCredentials = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetPath( path ) {\r\n\r\n\t\tthis.path = path;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetResourcePath( resourcePath ) {\r\n\r\n\t\tthis.resourcePath = resourcePath;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRequestHeader( requestHeader ) {\r\n\r\n\t\tthis.requestHeader = requestHeader;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\r\n\r\nexport { Loader };\r\n", "import { Cache } from './Cache.js';\r\nimport { Loader } from './Loader.js';\r\n\r\nconst loading = {};\r\n\r\nclass HttpError extends Error {\r\n\r\n\tconstructor( message, response ) {\r\n\r\n\t\tsuper( message );\r\n\t\tthis.response = response;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass FileLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( url === undefined ) url = '';\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\tconst cached = Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tthis.manager.itemStart( url );\r\n\r\n\t\t\tsetTimeout( () => {\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( cached );\r\n\r\n\t\t\t\tthis.manager.itemEnd( url );\r\n\r\n\t\t\t}, 0 );\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\t// Check if request is duplicate\r\n\r\n\t\tif ( loading[ url ] !== undefined ) {\r\n\r\n\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\tonLoad: onLoad,\r\n\t\t\t\tonProgress: onProgress,\r\n\t\t\t\tonError: onError\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// Initialise array for duplicate requests\r\n\t\tloading[ url ] = [];\r\n\r\n\t\tloading[ url ].push( {\r\n\t\t\tonLoad: onLoad,\r\n\t\t\tonProgress: onProgress,\r\n\t\t\tonError: onError,\r\n\t\t} );\r\n\r\n\t\t// create request\r\n\t\tconst req = new Request( url, {\r\n\t\t\theaders: new Headers( this.requestHeader ),\r\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\r\n\t\t\t// An abort controller could be added within a future PR\r\n\t\t} );\r\n\r\n\t\t// record states ( avoid data race )\r\n\t\tconst mimeType = this.mimeType;\r\n\t\tconst responseType = this.responseType;\r\n\r\n\t\t// start the fetch\r\n\t\tfetch( req )\r\n\t\t\t.then( response => {\r\n\r\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\r\n\r\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\t\tif ( response.status === 0 ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\r\n\r\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\r\n\r\n\t\t\t\t\t\treturn response;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst callbacks = loading[ url ];\r\n\t\t\t\t\tconst reader = response.body.getReader();\r\n\r\n\t\t\t\t\t// Nginx needs X-File-Size check\r\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\r\n\t\t\t\t\tconst contentLength = response.headers.get( 'X-File-Size' ) || response.headers.get( 'Content-Length' );\r\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\r\n\t\t\t\t\tconst lengthComputable = total !== 0;\r\n\t\t\t\t\tlet loaded = 0;\r\n\r\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\r\n\t\t\t\t\tconst stream = new ReadableStream( {\r\n\t\t\t\t\t\tstart( controller ) {\r\n\r\n\t\t\t\t\t\t\treadData();\r\n\r\n\t\t\t\t\t\t\tfunction readData() {\r\n\r\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( done ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\r\n\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\r\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\r\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\r\n\t\t\t\t\t\t\t\t\t\treadData();\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}, ( e ) => {\r\n\r\n\t\t\t\t\t\t\t\t\tcontroller.error( e );\r\n\r\n\t\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\treturn new Response( stream );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\t\t\t.then( response => {\r\n\r\n\t\t\t\tswitch ( responseType ) {\r\n\r\n\t\t\t\t\tcase 'arraybuffer':\r\n\r\n\t\t\t\t\t\treturn response.arrayBuffer();\r\n\r\n\t\t\t\t\tcase 'blob':\r\n\r\n\t\t\t\t\t\treturn response.blob();\r\n\r\n\t\t\t\t\tcase 'document':\r\n\r\n\t\t\t\t\t\treturn response.text()\r\n\t\t\t\t\t\t\t.then( text => {\r\n\r\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\r\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tcase 'json':\r\n\r\n\t\t\t\t\t\treturn response.json();\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tif ( mimeType === undefined ) {\r\n\r\n\t\t\t\t\t\t\treturn response.text();\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// sniff encoding\r\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\r\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\r\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\r\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\r\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\t\t\t.then( data => {\r\n\r\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\r\n\t\t\t\t// error response bodies as proper responses to requests.\r\n\t\t\t\tCache.add( url, data );\r\n\r\n\t\t\t\tconst callbacks = loading[ url ];\r\n\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst callback = callbacks[ i ];\r\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\t\t\t.catch( err => {\r\n\r\n\t\t\t\t// Abort errors and other errors are handled the same\r\n\r\n\t\t\t\tconst callbacks = loading[ url ];\r\n\r\n\t\t\t\tif ( callbacks === undefined ) {\r\n\r\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\r\n\t\t\t\t\tthis.manager.itemError( url );\r\n\t\t\t\t\tthrow err;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst callback = callbacks[ i ];\r\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.manager.itemError( url );\r\n\r\n\t\t\t} )\r\n\t\t\t.finally( () => {\r\n\r\n\t\t\t\tthis.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\tthis.manager.itemStart( url );\r\n\r\n\t}\r\n\r\n\tsetResponseType( value ) {\r\n\r\n\t\tthis.responseType = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetMimeType( value ) {\r\n\r\n\t\tthis.mimeType = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { FileLoader };\r\n", "import { AnimationClip } from '../animation/AnimationClip.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { Loader } from './Loader.js';\r\n\r\nclass AnimationLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\tconst animations = [];\r\n\r\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\r\n\r\n\t\t\tanimations.push( clip );\r\n\r\n\t\t}\r\n\r\n\t\treturn animations;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { AnimationLoader };\r\n", "import { LinearFilter } from '../constants.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { CompressedTexture } from '../textures/CompressedTexture.js';\r\nimport { Loader } from './Loader.js';\r\n\r\n/**\r\n * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n *\r\n * Sub classes have to implement the parse() method which will be used in load().\r\n */\r\n\r\nclass CompressedTextureLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst images = [];\r\n\r\n\t\tconst texture = new CompressedTexture();\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\r\n\t\tlet loaded = 0;\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\timages[ i ] = {\r\n\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t};\r\n\r\n\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t\ttexture.image = images;\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\r\n\r\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.image = images;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { CompressedTextureLoader };\r\n", "import { Cache } from './Cache.js';\r\nimport { Loader } from './Loader.js';\r\nimport { createElementNS } from '../utils.js';\r\n\r\nclass ImageLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst cached = Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( cached );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}, 0 );\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tconst image = createElementNS( 'img' );\r\n\r\n\t\tfunction onImageLoad() {\r\n\r\n\t\t\tremoveEventListeners();\r\n\r\n\t\t\tCache.add( url, this );\r\n\r\n\t\t\tif ( onLoad ) onLoad( this );\r\n\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onImageError( event ) {\r\n\r\n\t\t\tremoveEventListeners();\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t}\r\n\r\n\t\tfunction removeEventListeners() {\r\n\r\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t}\r\n\r\n\t\timage.addEventListener( 'load', onImageLoad, false );\r\n\t\timage.addEventListener( 'error', onImageError, false );\r\n\r\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\r\n\r\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\r\n\t\t}\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\timage.src = url;\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { ImageLoader };\r\n", "import { ImageLoader } from './ImageLoader.js';\r\nimport { CubeTexture } from '../textures/CubeTexture.js';\r\nimport { Loader } from './Loader.js';\r\nimport { SRGBColorSpace } from '../constants.js';\r\n\r\nclass CubeTextureLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst texture = new CubeTexture();\r\n\t\ttexture.colorSpace = SRGBColorSpace;\r\n\r\n\t\tconst loader = new ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\r\n\t\tlet loaded = 0;\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\tloaded ++;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, onError );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\tloadTexture( i );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { CubeTextureLoader };\r\n", "import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport { Loader } from './Loader.js';\r\n\r\n/**\r\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n *\r\n * Sub classes have to implement the parse() method which will be used in load().\r\n */\r\n\r\nclass DataTextureLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst texture = new DataTexture();\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\tlet texData;\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\ttexData = scope.parse( buffer );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tif ( onError !== undefined ) {\r\n\r\n\t\t\t\t\tonError( error );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( error );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texData.image !== undefined ) {\r\n\r\n\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t} else if ( texData.data !== undefined ) {\r\n\r\n\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\r\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\r\n\r\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\r\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\r\n\r\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\r\n\r\n\t\t\tif ( texData.colorSpace !== undefined ) {\r\n\r\n\t\t\t\ttexture.colorSpace = texData.colorSpace;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texData.flipY !== undefined ) {\r\n\r\n\t\t\t\ttexture.flipY = texData.flipY;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texData.format !== undefined ) {\r\n\r\n\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texData.type !== undefined ) {\r\n\r\n\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texData.mipmaps !== undefined ) {\r\n\r\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texData.mipmapCount === 1 ) {\r\n\r\n\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\r\n\r\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { DataTextureLoader };\r\n", "import { ImageLoader } from './ImageLoader.js';\r\nimport { Texture } from '../textures/Texture.js';\r\nimport { Loader } from './Loader.js';\r\n\r\nclass TextureLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst texture = new Texture();\r\n\r\n\t\tconst loader = new ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\r\n\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\ttexture.image = image;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { TextureLoader };\r\n", "import { Object3D } from '../core/Object3D.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass Light extends Object3D {\r\n\r\n\tconstructor( color, intensity = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLight = true;\r\n\r\n\t\tthis.type = 'Light';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.intensity = intensity;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\t// Empty here in base class; some subclasses override.\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.intensity = source.intensity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.color = this.color.getHex();\r\n\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\r\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\r\n\r\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\r\n\t\tif ( this.target !== undefined ) data.object.target = this.target.uuid;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Light };\r\n", "import { Light } from './Light.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass HemisphereLight extends Light {\r\n\r\n\tconstructor( skyColor, groundColor, intensity ) {\r\n\r\n\t\tsuper( skyColor, intensity );\r\n\r\n\t\tthis.isHemisphereLight = true;\r\n\r\n\t\tthis.type = 'HemisphereLight';\r\n\r\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.groundColor = new Color( groundColor );\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { HemisphereLight };\r\n", "import { Matrix4 } from '../math/Matrix4.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Frustum } from '../math/Frustum.js';\r\n\r\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\r\nconst _lookTarget = /*@__PURE__*/ new Vector3();\r\n\r\nclass LightShadow {\r\n\r\n\tconstructor( camera ) {\r\n\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.intensity = 1;\r\n\r\n\t\tthis.bias = 0;\r\n\t\tthis.normalBias = 0;\r\n\t\tthis.radius = 1;\r\n\t\tthis.blurSamples = 8;\r\n\r\n\t\tthis.mapSize = new Vector2( 512, 512 );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.mapPass = null;\r\n\t\tthis.matrix = new Matrix4();\r\n\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tthis._frustum = new Frustum();\r\n\t\tthis._frameExtents = new Vector2( 1, 1 );\r\n\r\n\t\tthis._viewportCount = 1;\r\n\r\n\t\tthis._viewports = [\r\n\r\n\t\t\tnew Vector4( 0, 0, 1, 1 )\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tgetViewportCount() {\r\n\r\n\t\treturn this._viewportCount;\r\n\r\n\t}\r\n\r\n\tgetFrustum() {\r\n\r\n\t\treturn this._frustum;\r\n\r\n\t}\r\n\r\n\tupdateMatrices( light ) {\r\n\r\n\t\tconst shadowCamera = this.camera;\r\n\t\tconst shadowMatrix = this.matrix;\r\n\r\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\r\n\r\n\t\tshadowMatrix.set(\r\n\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t);\r\n\r\n\t\tshadowMatrix.multiply( _projScreenMatrix );\r\n\r\n\t}\r\n\r\n\tgetViewport( viewportIndex ) {\r\n\r\n\t\treturn this._viewports[ viewportIndex ];\r\n\r\n\t}\r\n\r\n\tgetFrameExtents() {\r\n\r\n\t\treturn this._frameExtents;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tif ( this.map ) {\r\n\r\n\t\t\tthis.map.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.mapPass ) {\r\n\r\n\t\t\tthis.mapPass.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.camera = source.camera.clone();\r\n\r\n\t\tthis.intensity = source.intensity;\r\n\r\n\t\tthis.bias = source.bias;\r\n\t\tthis.radius = source.radius;\r\n\r\n\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst object = {};\r\n\r\n\t\tif ( this.intensity !== 1 ) object.intensity = this.intensity;\r\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\r\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\r\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\r\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\r\n\r\n\t\tobject.camera = this.camera.toJSON( false ).object;\r\n\t\tdelete object.camera.matrix;\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LightShadow };\r\n", "import { LightShadow } from './LightShadow.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\r\n\r\nclass SpotLightShadow extends LightShadow {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n\t\tthis.isSpotLightShadow = true;\r\n\r\n\t\tthis.focus = 1;\r\n\r\n\t}\r\n\r\n\tupdateMatrices( light ) {\r\n\r\n\t\tconst camera = this.camera;\r\n\r\n\t\tconst fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\r\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\r\n\t\tconst far = light.distance || camera.far;\r\n\r\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\tcamera.fov = fov;\r\n\t\t\tcamera.aspect = aspect;\r\n\t\t\tcamera.far = far;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t}\r\n\r\n\t\tsuper.updateMatrices( light );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.focus = source.focus;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SpotLightShadow };\r\n", "import { Light } from './Light.js';\r\nimport { SpotLightShadow } from './SpotLightShadow.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass SpotLight extends Light {\r\n\r\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isSpotLight = true;\r\n\r\n\t\tthis.type = 'SpotLight';\r\n\r\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.distance = distance;\r\n\t\tthis.angle = angle;\r\n\t\tthis.penumbra = penumbra;\r\n\t\tthis.decay = decay;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.shadow = new SpotLightShadow();\r\n\r\n\t}\r\n\r\n\tget power() {\r\n\r\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\r\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\r\n\t\treturn this.intensity * Math.PI;\r\n\r\n\t}\r\n\r\n\tset power( power ) {\r\n\r\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\r\n\t\tthis.intensity = power / Math.PI;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shadow.dispose();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.angle = source.angle;\r\n\t\tthis.penumbra = source.penumbra;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.target = source.target.clone();\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SpotLight };\r\n", "import { LightShadow } from './LightShadow.js';\r\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\n\r\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\r\nconst _lookTarget = /*@__PURE__*/ new Vector3();\r\n\r\nclass PointLightShadow extends LightShadow {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n\t\tthis.isPointLightShadow = true;\r\n\r\n\t\tthis._frameExtents = new Vector2( 4, 2 );\r\n\r\n\t\tthis._viewportCount = 6;\r\n\r\n\t\tthis._viewports = [\r\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t// following orientation:\r\n\t\t\t//\r\n\t\t\t//  xzXZ\r\n\t\t\t//   y Y\r\n\t\t\t//\r\n\t\t\t// X - Positive x direction\r\n\t\t\t// x - Negative x direction\r\n\t\t\t// Y - Positive y direction\r\n\t\t\t// y - Negative y direction\r\n\t\t\t// Z - Positive z direction\r\n\t\t\t// z - Negative z direction\r\n\r\n\t\t\t// positive X\r\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\r\n\t\t\t// negative X\r\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\r\n\t\t\t// positive Z\r\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\r\n\t\t\t// negative Z\r\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\r\n\t\t\t// positive Y\r\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\r\n\t\t\t// negative Y\r\n\t\t\tnew Vector4( 1, 0, 1, 1 )\r\n\t\t];\r\n\r\n\t\tthis._cubeDirections = [\r\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\r\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\r\n\t\tthis._cubeUps = [\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tupdateMatrices( light, viewportIndex = 0 ) {\r\n\r\n\t\tconst camera = this.camera;\r\n\t\tconst shadowMatrix = this.matrix;\r\n\r\n\t\tconst far = light.distance || camera.far;\r\n\r\n\t\tif ( far !== camera.far ) {\r\n\r\n\t\t\tcamera.far = far;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t}\r\n\r\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\tcamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t_lookTarget.copy( camera.position );\r\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\r\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\r\n\t\tcamera.lookAt( _lookTarget );\r\n\t\tcamera.updateMatrixWorld();\r\n\r\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PointLightShadow };\r\n", "import { Light } from './Light.js';\r\nimport { PointLightShadow } from './PointLightShadow.js';\r\n\r\nclass PointLight extends Light {\r\n\r\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isPointLight = true;\r\n\r\n\t\tthis.type = 'PointLight';\r\n\r\n\t\tthis.distance = distance;\r\n\t\tthis.decay = decay;\r\n\r\n\t\tthis.shadow = new PointLightShadow();\r\n\r\n\t}\r\n\r\n\tget power() {\r\n\r\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\r\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\r\n\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t}\r\n\r\n\tset power( power ) {\r\n\r\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\r\n\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shadow.dispose();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PointLight };\r\n", "import { LightShadow } from './LightShadow.js';\r\nimport { OrthographicCamera } from '../cameras/OrthographicCamera.js';\r\n\r\nclass DirectionalLightShadow extends LightShadow {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n\t\tthis.isDirectionalLightShadow = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DirectionalLightShadow };\r\n", "import { Light } from './Light.js';\r\nimport { DirectionalLightShadow } from './DirectionalLightShadow.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass DirectionalLight extends Light {\r\n\r\n\tconstructor( color, intensity ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isDirectionalLight = true;\r\n\r\n\t\tthis.type = 'DirectionalLight';\r\n\r\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.shadow = new DirectionalLightShadow();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shadow.dispose();\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.target = source.target.clone();\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DirectionalLight };\r\n", "import { Light } from './Light.js';\r\n\r\nclass AmbientLight extends Light {\r\n\r\n\tconstructor( color, intensity ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isAmbientLight = true;\r\n\r\n\t\tthis.type = 'AmbientLight';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AmbientLight };\r\n", "import { Light } from './Light.js';\r\n\r\nclass RectAreaLight extends Light {\r\n\r\n\tconstructor( color, intensity, width = 10, height = 10 ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isRectAreaLight = true;\r\n\r\n\t\tthis.type = 'RectAreaLight';\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t}\r\n\r\n\tget power() {\r\n\r\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\r\n\t\treturn this.intensity * this.width * this.height * Math.PI;\r\n\r\n\t}\r\n\r\n\tset power( power ) {\r\n\r\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\r\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.width = this.width;\r\n\t\tdata.object.height = this.height;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RectAreaLight };\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\n/**\r\n * Primary reference:\r\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n *\r\n * Secondary reference:\r\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\r\n */\r\n\r\n// 3-band SH defined by 9 coefficients\r\n\r\nclass SphericalHarmonics3 {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.isSphericalHarmonics3 = true;\r\n\r\n\t\tthis.coefficients = [];\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients.push( new Vector3() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tset( coefficients ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tzero() {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// get the radiance in the direction of the normal\r\n\t// target is a Vector3\r\n\tgetAt( normal, target ) {\r\n\r\n\t\t// normal is assumed to be unit length\r\n\r\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\tconst coeff = this.coefficients;\r\n\r\n\t\t// band 0\r\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\r\n\r\n\t\t// band 1\r\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\r\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\r\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\r\n\r\n\t\t// band 2\r\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\r\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\r\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\r\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\r\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\r\n\t// target is a Vector3\r\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\tgetIrradianceAt( normal, target ) {\r\n\r\n\t\t// normal is assumed to be unit length\r\n\r\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\tconst coeff = this.coefficients;\r\n\r\n\t\t// band 0\r\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\r\n\r\n\t\t// band 1\r\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\r\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\r\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\r\n\r\n\t\t// band 2\r\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\r\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\r\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\r\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\r\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tadd( sh ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledSH( sh, s ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tscale( s ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerp( sh, alpha ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( sh ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tcopy( sh ) {\r\n\r\n\t\treturn this.set( sh.coefficients );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tconst coefficients = this.coefficients;\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst coefficients = this.coefficients;\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t// evaluate the basis functions\r\n\t// shBasis is an Array[ 9 ]\r\n\tstatic getBasisAt( normal, shBasis ) {\r\n\r\n\t\t// normal is assumed to be unit length\r\n\r\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t// band 0\r\n\t\tshBasis[ 0 ] = 0.282095;\r\n\r\n\t\t// band 1\r\n\t\tshBasis[ 1 ] = 0.488603 * y;\r\n\t\tshBasis[ 2 ] = 0.488603 * z;\r\n\t\tshBasis[ 3 ] = 0.488603 * x;\r\n\r\n\t\t// band 2\r\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\r\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\r\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\r\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\r\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SphericalHarmonics3 };\r\n", "import { SphericalHarmonics3 } from '../math/SphericalHarmonics3.js';\r\nimport { Light } from './Light.js';\r\n\r\nclass LightProbe extends Light {\r\n\r\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\r\n\r\n\t\tsuper( undefined, intensity );\r\n\r\n\t\tthis.isLightProbe = true;\r\n\r\n\t\tthis.sh = sh;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.sh.copy( source.sh );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\r\n\t\tthis.sh.fromArray( json.sh );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.sh = this.sh.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LightProbe };\r\n", "import { Color } from '../math/Color.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { Loader } from './Loader.js';\r\nimport {\r\n\tShadowMaterial,\r\n\tSpriteMaterial,\r\n\tRawShaderMaterial,\r\n\tShaderMaterial,\r\n\tPointsMaterial,\r\n\tMeshPhysicalMaterial,\r\n\tMeshStandardMaterial,\r\n\tMeshPhongMaterial,\r\n\tMeshToonMaterial,\r\n\tMeshNormalMaterial,\r\n\tMeshLambertMaterial,\r\n\tMeshDepthMaterial,\r\n\tMeshDistanceMaterial,\r\n\tMeshBasicMaterial,\r\n\tMeshMatcapMaterial,\r\n\tLineDashedMaterial,\r\n\tLineBasicMaterial,\r\n\tMaterial,\r\n} from '../materials/Materials.js';\r\n\r\nclass MaterialLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\t\tthis.textures = {};\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\tconst textures = this.textures;\r\n\r\n\t\tfunction getTexture( name ) {\r\n\r\n\t\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textures[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tconst material = this.createMaterialFromType( json.type );\r\n\r\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\r\n\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\r\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\r\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\r\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\r\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\r\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\r\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\r\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\r\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\r\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\r\n\t\tif ( json.dispersion !== undefined ) material.dispersion = json.dispersion;\r\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\r\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\r\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\r\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\r\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\r\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\r\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\r\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\r\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\r\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\r\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\r\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\r\n\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\r\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\tif ( json.alphaHash !== undefined ) material.alphaHash = json.alphaHash;\r\n\t\tif ( json.depthFunc !== undefined ) material.depthFunc = json.depthFunc;\r\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\r\n\t\tif ( json.blendSrc !== undefined ) material.blendSrc = json.blendSrc;\r\n\t\tif ( json.blendDst !== undefined ) material.blendDst = json.blendDst;\r\n\t\tif ( json.blendEquation !== undefined ) material.blendEquation = json.blendEquation;\r\n\t\tif ( json.blendSrcAlpha !== undefined ) material.blendSrcAlpha = json.blendSrcAlpha;\r\n\t\tif ( json.blendDstAlpha !== undefined ) material.blendDstAlpha = json.blendDstAlpha;\r\n\t\tif ( json.blendEquationAlpha !== undefined ) material.blendEquationAlpha = json.blendEquationAlpha;\r\n\t\tif ( json.blendColor !== undefined && material.blendColor !== undefined ) material.blendColor.setHex( json.blendColor );\r\n\t\tif ( json.blendAlpha !== undefined ) material.blendAlpha = json.blendAlpha;\r\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\r\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\r\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\r\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\r\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\r\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\r\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\r\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\r\n\r\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\r\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\r\n\r\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\r\n\r\n\t\tif ( json.linewidth !== undefined ) material.linewidth = json.linewidth;\r\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\r\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\r\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\r\n\r\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\r\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\r\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\r\n\r\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\r\n\r\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\r\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\r\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\r\n\r\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\r\n\r\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\r\n\r\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\r\n\r\n\t\tif ( json.vertexColors !== undefined ) {\r\n\r\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\r\n\r\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Shader Material\r\n\r\n\t\tif ( json.uniforms !== undefined ) {\r\n\r\n\t\t\tfor ( const name in json.uniforms ) {\r\n\r\n\t\t\t\tconst uniform = json.uniforms[ name ];\r\n\r\n\t\t\t\tmaterial.uniforms[ name ] = {};\r\n\r\n\t\t\t\tswitch ( uniform.type ) {\r\n\r\n\t\t\t\t\tcase 't':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'v2':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'v3':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'v4':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'm3':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'm4':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\r\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\r\n\r\n\t\tif ( json.extensions !== undefined ) {\r\n\r\n\t\t\tfor ( const key in json.extensions ) {\r\n\r\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\r\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\r\n\r\n\t\t// for PointsMaterial\r\n\r\n\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\r\n\t\t// maps\r\n\r\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\r\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\r\n\r\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\r\n\r\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\r\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\r\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\r\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\r\n\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\tlet normalScale = json.normalScale;\r\n\r\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\r\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\r\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\r\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\r\n\r\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\r\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\r\n\r\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\r\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\r\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\r\n\r\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\r\n\t\tif ( json.envMapRotation !== undefined ) material.envMapRotation.fromArray( json.envMapRotation );\r\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\r\n\r\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\r\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\r\n\r\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\r\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\r\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\r\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\r\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\r\n\r\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\r\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\r\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\r\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\r\n\r\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\r\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\r\n\r\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\r\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\r\n\r\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\r\n\r\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\r\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\tsetTextures( value ) {\r\n\r\n\t\tthis.textures = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcreateMaterialFromType( type ) {\r\n\r\n\t\treturn MaterialLoader.createMaterialFromType( type );\r\n\r\n\t}\r\n\r\n\tstatic createMaterialFromType( type ) {\r\n\r\n\t\tconst materialLib = {\r\n\t\t\tShadowMaterial,\r\n\t\t\tSpriteMaterial,\r\n\t\t\tRawShaderMaterial,\r\n\t\t\tShaderMaterial,\r\n\t\t\tPointsMaterial,\r\n\t\t\tMeshPhysicalMaterial,\r\n\t\t\tMeshStandardMaterial,\r\n\t\t\tMeshPhongMaterial,\r\n\t\t\tMeshToonMaterial,\r\n\t\t\tMeshNormalMaterial,\r\n\t\t\tMeshLambertMaterial,\r\n\t\t\tMeshDepthMaterial,\r\n\t\t\tMeshDistanceMaterial,\r\n\t\t\tMeshBasicMaterial,\r\n\t\t\tMeshMatcapMaterial,\r\n\t\t\tLineDashedMaterial,\r\n\t\t\tLineBasicMaterial,\r\n\t\t\tMaterial\r\n\t\t};\r\n\r\n\t\treturn new materialLib[ type ]();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MaterialLoader };\r\n", "class LoaderUtils {\r\n\r\n\tstatic decodeText( array ) { // @deprecated, r165\r\n\r\n\t\tconsole.warn( 'THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead.' );\r\n\r\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\r\n\r\n\t\t\treturn new TextDecoder().decode( array );\r\n\r\n\t\t}\r\n\r\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\r\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\r\n\r\n\t\tlet s = '';\r\n\r\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t// Implicitly assumes little-endian.\r\n\t\t\ts += String.fromCharCode( array[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\ttry {\r\n\r\n\t\t\t// merges multi-byte utf-8 characters.\r\n\r\n\t\t\treturn decodeURIComponent( escape( s ) );\r\n\r\n\t\t} catch ( e ) { // see #16358\r\n\r\n\t\t\treturn s;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic extractUrlBase( url ) {\r\n\r\n\t\tconst index = url.lastIndexOf( '/' );\r\n\r\n\t\tif ( index === - 1 ) return './';\r\n\r\n\t\treturn url.slice( 0, index + 1 );\r\n\r\n\t}\r\n\r\n\tstatic resolveURL( url, path ) {\r\n\r\n\t\t// Invalid URL\r\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\r\n\r\n\t\t// Host Relative URL\r\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\r\n\r\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\r\n\r\n\t\t}\r\n\r\n\t\t// Absolute URL http://,https://,//\r\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\r\n\r\n\t\t// Data URI\r\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\r\n\r\n\t\t// Blob URL\r\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\r\n\r\n\t\t// Relative URL\r\n\t\treturn path + url;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LoaderUtils };\r\n", "import { BufferGeometry } from './BufferGeometry.js';\r\n\r\nclass InstancedBufferGeometry extends BufferGeometry {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isInstancedBufferGeometry = true;\r\n\r\n\t\tthis.type = 'InstancedBufferGeometry';\r\n\t\tthis.instanceCount = Infinity;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.instanceCount = source.instanceCount;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.instanceCount = this.instanceCount;\r\n\r\n\t\tdata.isInstancedBufferGeometry = true;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedBufferGeometry };\r\n", "import { Sphere } from '../math/Sphere.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { Loader } from './Loader.js';\r\nimport { InstancedBufferGeometry } from '../core/InstancedBufferGeometry.js';\r\nimport { InstancedBufferAttribute } from '../core/InstancedBufferAttribute.js';\r\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\r\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\r\nimport { getTypedArray } from '../utils.js';\r\n\r\nclass BufferGeometryLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\tconst interleavedBufferMap = {};\r\n\t\tconst arrayBufferMap = {};\r\n\r\n\t\tfunction getInterleavedBuffer( json, uuid ) {\r\n\r\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\r\n\r\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\r\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\r\n\r\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\r\n\r\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\r\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\r\n\t\t\tib.uuid = interleavedBuffer.uuid;\r\n\r\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\r\n\r\n\t\t\treturn ib;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getArrayBuffer( json, uuid ) {\r\n\r\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\r\n\r\n\t\t\tconst arrayBuffers = json.arrayBuffers;\r\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\r\n\r\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\r\n\r\n\t\t\tarrayBufferMap[ uuid ] = ab;\r\n\r\n\t\t\treturn ab;\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\r\n\r\n\t\tconst index = json.data.index;\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\r\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst attributes = json.data.attributes;\r\n\r\n\t\tfor ( const key in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ key ];\r\n\t\t\tlet bufferAttribute;\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\r\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\r\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\r\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\r\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\r\n\r\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\r\n\r\n\t\t}\r\n\r\n\t\tconst morphAttributes = json.data.morphAttributes;\r\n\r\n\t\tif ( morphAttributes ) {\r\n\r\n\t\t\tfor ( const key in morphAttributes ) {\r\n\r\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\r\n\r\n\t\t\t\tconst array = [];\r\n\r\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst attribute = attributeArray[ i ];\r\n\t\t\t\t\tlet bufferAttribute;\r\n\r\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\r\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\r\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\r\n\t\t\t\t\tarray.push( bufferAttribute );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\r\n\r\n\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\tgeometry.morphTargetsRelative = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst boundingSphere = json.data.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\tconst center = new Vector3();\r\n\r\n\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.name ) geometry.name = json.name;\r\n\t\tif ( json.userData ) geometry.userData = json.userData;\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BufferGeometryLoader };\r\n", "import {\r\n\tUVMapping,\r\n\tCubeReflectionMapping,\r\n\tCubeRefractionMapping,\r\n\tEquirectangularReflectionMapping,\r\n\tEquirectangularRefractionMapping,\r\n\tCubeUVReflectionMapping,\r\n\r\n\tRepeatWrapping,\r\n\tClampToEdgeWrapping,\r\n\tMirroredRepeatWrapping,\r\n\r\n\tNearestFilter,\r\n\tNearestMipmapNearestFilter,\r\n\tNearestMipmapLinearFilter,\r\n\tLinearFilter,\r\n\tLinearMipmapNearestFilter,\r\n\tLinearMipmapLinearFilter\r\n} from '../constants.js';\r\nimport { InstancedBufferAttribute } from '../core/InstancedBufferAttribute.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Group } from '../objects/Group.js';\r\nimport { InstancedMesh } from '../objects/InstancedMesh.js';\r\nimport { BatchedMesh } from '../objects/BatchedMesh.js';\r\nimport { Sprite } from '../objects/Sprite.js';\r\nimport { Points } from '../objects/Points.js';\r\nimport { Line } from '../objects/Line.js';\r\nimport { LineLoop } from '../objects/LineLoop.js';\r\nimport { LineSegments } from '../objects/LineSegments.js';\r\nimport { LOD } from '../objects/LOD.js';\r\nimport { Mesh } from '../objects/Mesh.js';\r\nimport { SkinnedMesh } from '../objects/SkinnedMesh.js';\r\nimport { Bone } from '../objects/Bone.js';\r\nimport { Skeleton } from '../objects/Skeleton.js';\r\nimport { Shape } from '../extras/core/Shape.js';\r\nimport { Fog } from '../scenes/Fog.js';\r\nimport { FogExp2 } from '../scenes/FogExp2.js';\r\nimport { HemisphereLight } from '../lights/HemisphereLight.js';\r\nimport { SpotLight } from '../lights/SpotLight.js';\r\nimport { PointLight } from '../lights/PointLight.js';\r\nimport { DirectionalLight } from '../lights/DirectionalLight.js';\r\nimport { AmbientLight } from '../lights/AmbientLight.js';\r\nimport { RectAreaLight } from '../lights/RectAreaLight.js';\r\nimport { LightProbe } from '../lights/LightProbe.js';\r\nimport { OrthographicCamera } from '../cameras/OrthographicCamera.js';\r\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\r\nimport { Scene } from '../scenes/Scene.js';\r\nimport { CubeTexture } from '../textures/CubeTexture.js';\r\nimport { Texture } from '../textures/Texture.js';\r\nimport { Source } from '../textures/Source.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport { ImageLoader } from './ImageLoader.js';\r\nimport { LoadingManager } from './LoadingManager.js';\r\nimport { AnimationClip } from '../animation/AnimationClip.js';\r\nimport { MaterialLoader } from './MaterialLoader.js';\r\nimport { LoaderUtils } from './LoaderUtils.js';\r\nimport { BufferGeometryLoader } from './BufferGeometryLoader.js';\r\nimport { Loader } from './Loader.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport * as Geometries from '../geometries/Geometries.js';\r\nimport { getTypedArray } from '../utils.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\n\r\nclass ObjectLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\t\tthis.resourcePath = this.resourcePath || path;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tlet json = null;\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tif ( onError !== undefined ) onError( error );\r\n\r\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst metadata = json.metadata;\r\n\r\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\r\n\r\n\t\t\t\tif ( onError !== undefined ) onError( new Error( 'THREE.ObjectLoader: Can\\'t load ' + url ) );\r\n\r\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.parse( json, onLoad );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tasync loadAsync( url, onProgress ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\t\tthis.resourcePath = this.resourcePath || path;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\r\n\t\tconst text = await loader.loadAsync( url, onProgress );\r\n\r\n\t\tconst json = JSON.parse( text );\r\n\r\n\t\tconst metadata = json.metadata;\r\n\r\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\r\n\r\n\t\t}\r\n\r\n\t\treturn await scope.parseAsync( json );\r\n\r\n\t}\r\n\r\n\tparse( json, onLoad ) {\r\n\r\n\t\tconst animations = this.parseAnimations( json.animations );\r\n\t\tconst shapes = this.parseShapes( json.shapes );\r\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\r\n\r\n\t\tconst images = this.parseImages( json.images, function () {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t} );\r\n\r\n\t\tconst textures = this.parseTextures( json.textures, images );\r\n\t\tconst materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\r\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\r\n\r\n\t\tthis.bindSkeletons( object, skeletons );\r\n\t\tthis.bindLightTargets( object );\r\n\r\n\t\t//\r\n\r\n\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\tlet hasImages = false;\r\n\r\n\t\t\tfor ( const uuid in images ) {\r\n\r\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\r\n\r\n\t\t\t\t\thasImages = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasImages === false ) onLoad( object );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n\tasync parseAsync( json ) {\r\n\r\n\t\tconst animations = this.parseAnimations( json.animations );\r\n\t\tconst shapes = this.parseShapes( json.shapes );\r\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\r\n\r\n\t\tconst images = await this.parseImagesAsync( json.images );\r\n\r\n\t\tconst textures = this.parseTextures( json.textures, images );\r\n\t\tconst materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\r\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\r\n\r\n\t\tthis.bindSkeletons( object, skeletons );\r\n\t\tthis.bindLightTargets( object );\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n\tparseShapes( json ) {\r\n\r\n\t\tconst shapes = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\r\n\r\n\t\t\t\tshapes[ shape.uuid ] = shape;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n\tparseSkeletons( json, object ) {\r\n\r\n\t\tconst skeletons = {};\r\n\t\tconst bones = {};\r\n\r\n\t\t// generate bone lookup table\r\n\r\n\t\tobject.traverse( function ( child ) {\r\n\r\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\r\n\r\n\t\t} );\r\n\r\n\t\t// create skeletons\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\r\n\r\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn skeletons;\r\n\r\n\t}\r\n\r\n\tparseGeometries( json, shapes ) {\r\n\r\n\t\tconst geometries = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\r\n\r\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet geometry;\r\n\t\t\t\tconst data = json[ i ];\r\n\r\n\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\tcase 'BufferGeometry':\r\n\t\t\t\t\tcase 'InstancedBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tif ( data.type in Geometries ) {\r\n\r\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\t\t\t\tif ( data.userData !== undefined ) geometry.userData = data.userData;\r\n\r\n\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometries;\r\n\r\n\t}\r\n\r\n\tparseMaterials( json, textures ) {\r\n\r\n\t\tconst cache = {}; // MultiMaterial\r\n\t\tconst materials = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tconst loader = new MaterialLoader();\r\n\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst data = json[ i ];\r\n\r\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tparseAnimations( json ) {\r\n\r\n\t\tconst animations = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tconst data = json[ i ];\r\n\r\n\t\t\t\tconst clip = AnimationClip.parse( data );\r\n\r\n\t\t\t\tanimations[ clip.uuid ] = clip;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn animations;\r\n\r\n\t}\r\n\r\n\tparseImages( json, onLoad ) {\r\n\r\n\t\tconst scope = this;\r\n\t\tconst images = {};\r\n\r\n\t\tlet loader;\r\n\r\n\t\tfunction loadImage( url ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}, undefined, function () {\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tfunction deserializeImage( image ) {\r\n\r\n\t\t\tif ( typeof image === 'string' ) {\r\n\r\n\t\t\t\tconst url = image;\r\n\r\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\r\n\r\n\t\t\t\treturn loadImage( path );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( image.data ) {\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\r\n\t\t\t\t\t\twidth: image.width,\r\n\t\t\t\t\t\theight: image.height\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\tconst manager = new LoadingManager( onLoad );\r\n\r\n\t\t\tloader = new ImageLoader( manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst image = json[ i ];\r\n\t\t\t\tconst url = image.url;\r\n\r\n\t\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\t\t// load array of images e.g CubeTexture\r\n\r\n\t\t\t\t\tconst imageArray = [];\r\n\r\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tconst currentUrl = url[ j ];\r\n\r\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\r\n\r\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\r\n\r\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\r\n\r\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\r\n\r\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// load single image\r\n\r\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\r\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn images;\r\n\r\n\t}\r\n\r\n\tasync parseImagesAsync( json ) {\r\n\r\n\t\tconst scope = this;\r\n\t\tconst images = {};\r\n\r\n\t\tlet loader;\r\n\r\n\t\tasync function deserializeImage( image ) {\r\n\r\n\t\t\tif ( typeof image === 'string' ) {\r\n\r\n\t\t\t\tconst url = image;\r\n\r\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\r\n\r\n\t\t\t\treturn await loader.loadAsync( path );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( image.data ) {\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\r\n\t\t\t\t\t\twidth: image.width,\r\n\t\t\t\t\t\theight: image.height\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\tloader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst image = json[ i ];\r\n\t\t\t\tconst url = image.url;\r\n\r\n\t\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\t\t// load array of images e.g CubeTexture\r\n\r\n\t\t\t\t\tconst imageArray = [];\r\n\r\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tconst currentUrl = url[ j ];\r\n\r\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\r\n\r\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\r\n\r\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\r\n\r\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\r\n\r\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// load single image\r\n\r\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\r\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn images;\r\n\r\n\t}\r\n\r\n\tparseTextures( json, images ) {\r\n\r\n\t\tfunction parseConstant( value, type ) {\r\n\r\n\t\t\tif ( typeof value === 'number' ) return value;\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\treturn type[ value ];\r\n\r\n\t\t}\r\n\r\n\t\tconst textures = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst data = json[ i ];\r\n\r\n\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst source = images[ data.image ];\r\n\t\t\t\tconst image = source.data;\r\n\r\n\t\t\t\tlet texture;\r\n\r\n\t\t\t\tif ( Array.isArray( image ) ) {\r\n\r\n\t\t\t\t\ttexture = new CubeTexture();\r\n\r\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( image && image.data ) {\r\n\r\n\t\t\t\t\t\ttexture = new DataTexture();\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture = new Texture();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.source = source;\r\n\r\n\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\r\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\r\n\t\t\t\tif ( data.channel !== undefined ) texture.channel = data.channel;\r\n\r\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\r\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\r\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\r\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\r\n\r\n\t\t\t\tif ( data.wrap !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\r\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\r\n\t\t\t\tif ( data.internalFormat !== undefined ) texture.internalFormat = data.internalFormat;\r\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\r\n\t\t\t\tif ( data.colorSpace !== undefined ) texture.colorSpace = data.colorSpace;\r\n\r\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\r\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\r\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\r\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\r\n\r\n\t\t\t\tif ( data.generateMipmaps !== undefined ) texture.generateMipmaps = data.generateMipmaps;\r\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\r\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\r\n\t\t\t\tif ( data.compareFunction !== undefined ) texture.compareFunction = data.compareFunction;\r\n\r\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\r\n\r\n\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn textures;\r\n\r\n\t}\r\n\r\n\tparseObject( data, geometries, materials, textures, animations ) {\r\n\r\n\t\tlet object;\r\n\r\n\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometries[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\tif ( name === undefined ) return undefined;\r\n\r\n\t\t\tif ( Array.isArray( name ) ) {\r\n\r\n\t\t\t\tconst array = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst uuid = name[ i ];\r\n\r\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tarray.push( materials[ uuid ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn materials[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getTexture( uuid ) {\r\n\r\n\t\t\tif ( textures[ uuid ] === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textures[ uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tlet geometry, material;\r\n\r\n\t\tswitch ( data.type ) {\r\n\r\n\t\t\tcase 'Scene':\r\n\r\n\t\t\t\tobject = new Scene();\r\n\r\n\t\t\t\tif ( data.background !== undefined ) {\r\n\r\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\r\n\r\n\t\t\t\t\t\tobject.background = new Color( data.background );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject.background = getTexture( data.background );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( data.environment !== undefined ) {\r\n\r\n\t\t\t\t\tobject.environment = getTexture( data.environment );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( data.fog !== undefined ) {\r\n\r\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\r\n\r\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\r\n\r\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\r\n\r\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.fog.name !== '' ) {\r\n\r\n\t\t\t\t\t\tobject.fog.name = data.fog.name;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( data.backgroundBlurriness !== undefined ) object.backgroundBlurriness = data.backgroundBlurriness;\r\n\t\t\t\tif ( data.backgroundIntensity !== undefined ) object.backgroundIntensity = data.backgroundIntensity;\r\n\t\t\t\tif ( data.backgroundRotation !== undefined ) object.backgroundRotation.fromArray( data.backgroundRotation );\r\n\r\n\t\t\t\tif ( data.environmentIntensity !== undefined ) object.environmentIntensity = data.environmentIntensity;\r\n\t\t\t\tif ( data.environmentRotation !== undefined ) object.environmentRotation.fromArray( data.environmentRotation );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\r\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\r\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\r\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\r\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\r\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\r\n\t\t\t\tobject.target = data.target || '';\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'RectAreaLight':\r\n\r\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\t\t\t\tobject.target = data.target || '';\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'LightProbe':\r\n\r\n\t\t\t\tobject = new LightProbe().fromJSON( data );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'SkinnedMesh':\r\n\r\n\t\t\t\tgeometry = getGeometry( data.geometry );\r\n\t\t\t \tmaterial = getMaterial( data.material );\r\n\r\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\r\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\r\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\tgeometry = getGeometry( data.geometry );\r\n\t\t\t\tmaterial = getMaterial( data.material );\r\n\r\n\t\t\t\tobject = new Mesh( geometry, material );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'InstancedMesh':\r\n\r\n\t\t\t\tgeometry = getGeometry( data.geometry );\r\n\t\t\t\tmaterial = getMaterial( data.material );\r\n\t\t\t\tconst count = data.count;\r\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\r\n\t\t\t\tconst instanceColor = data.instanceColor;\r\n\r\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\r\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\r\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'BatchedMesh':\r\n\r\n\t\t\t\tgeometry = getGeometry( data.geometry );\r\n\t\t\t\tmaterial = getMaterial( data.material );\r\n\r\n\t\t\t\tobject = new BatchedMesh( data.maxInstanceCount, data.maxVertexCount, data.maxIndexCount, material );\r\n\t\t\t\tobject.geometry = geometry;\r\n\t\t\t\tobject.perObjectFrustumCulled = data.perObjectFrustumCulled;\r\n\t\t\t\tobject.sortObjects = data.sortObjects;\r\n\r\n\t\t\t\tobject._drawRanges = data.drawRanges;\r\n\t\t\t\tobject._reservedRanges = data.reservedRanges;\r\n\r\n\t\t\t\tobject._visibility = data.visibility;\r\n\t\t\t\tobject._active = data.active;\r\n\t\t\t\tobject._bounds = data.bounds.map( bound => {\r\n\r\n\t\t\t\t\tconst box = new Box3();\r\n\t\t\t\t\tbox.min.fromArray( bound.boxMin );\r\n\t\t\t\t\tbox.max.fromArray( bound.boxMax );\r\n\r\n\t\t\t\t\tconst sphere = new Sphere();\r\n\t\t\t\t\tsphere.radius = bound.sphereRadius;\r\n\t\t\t\t\tsphere.center.fromArray( bound.sphereCenter );\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tboxInitialized: bound.boxInitialized,\r\n\t\t\t\t\t\tbox: box,\r\n\r\n\t\t\t\t\t\tsphereInitialized: bound.sphereInitialized,\r\n\t\t\t\t\t\tsphere: sphere\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tobject._maxInstanceCount = data.maxInstanceCount;\r\n\t\t\t\tobject._maxVertexCount = data.maxVertexCount;\r\n\t\t\t\tobject._maxIndexCount = data.maxIndexCount;\r\n\r\n\t\t\t\tobject._geometryInitialized = data.geometryInitialized;\r\n\t\t\t\tobject._geometryCount = data.geometryCount;\r\n\r\n\t\t\t\tobject._matricesTexture = getTexture( data.matricesTexture.uuid );\r\n\t\t\t\tif ( data.colorsTexture !== undefined ) object._colorsTexture = getTexture( data.colorsTexture.uuid );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'LOD':\r\n\r\n\t\t\t\tobject = new LOD();\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'Line':\r\n\r\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'LineLoop':\r\n\r\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'LineSegments':\r\n\r\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'PointCloud':\r\n\t\t\tcase 'Points':\r\n\r\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'Group':\r\n\r\n\t\t\t\tobject = new Group();\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'Bone':\r\n\r\n\t\t\t\tobject = new Bone();\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tobject = new Object3D();\r\n\r\n\t\t}\r\n\r\n\t\tobject.uuid = data.uuid;\r\n\r\n\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\r\n\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\tobject.matrix.fromArray( data.matrix );\r\n\r\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\r\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\r\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.up !== undefined ) object.up.fromArray( data.up );\r\n\r\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\r\n\t\tif ( data.shadow ) {\r\n\r\n\t\t\tif ( data.shadow.intensity !== undefined ) object.shadow.intensity = data.shadow.intensity;\r\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\r\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\r\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\r\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\r\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\r\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\r\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\r\n\r\n\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\tconst children = data.children;\r\n\r\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.animations !== undefined ) {\r\n\r\n\t\t\tconst objectAnimations = data.animations;\r\n\r\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\r\n\r\n\t\t\t\tconst uuid = objectAnimations[ i ];\r\n\r\n\t\t\t\tobject.animations.push( animations[ uuid ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\r\n\r\n\t\t\tconst levels = data.levels;\r\n\r\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\tconst level = levels[ l ];\r\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\tobject.addLevel( child, level.distance, level.hysteresis );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n\tbindSkeletons( object, skeletons ) {\r\n\r\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\r\n\r\n\t\tobject.traverse( function ( child ) {\r\n\r\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\r\n\r\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\r\n\r\n\t\t\t\tif ( skeleton === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tbindLightTargets( object ) {\r\n\r\n\t\tobject.traverse( function ( child ) {\r\n\r\n\t\t\tif ( child.isDirectionalLight || child.isSpotLight ) {\r\n\r\n\t\t\t\tconst uuid = child.target;\r\n\r\n\t\t\t\tconst target = object.getObjectByProperty( 'uuid', uuid );\r\n\r\n\t\t\t\tif ( target !== undefined ) {\r\n\r\n\t\t\t\t\tchild.target = target;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tchild.target = new Object3D();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst TEXTURE_MAPPING = {\r\n\tUVMapping: UVMapping,\r\n\tCubeReflectionMapping: CubeReflectionMapping,\r\n\tCubeRefractionMapping: CubeRefractionMapping,\r\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\r\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\r\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\r\n};\r\n\r\nconst TEXTURE_WRAPPING = {\r\n\tRepeatWrapping: RepeatWrapping,\r\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\r\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\r\n};\r\n\r\nconst TEXTURE_FILTER = {\r\n\tNearestFilter: NearestFilter,\r\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\r\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\r\n\tLinearFilter: LinearFilter,\r\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\r\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\r\n};\r\n\r\nexport { ObjectLoader };\r\n", "import { Cache } from './Cache.js';\r\nimport { Loader } from './Loader.js';\r\n\r\nclass ImageBitmapLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.isImageBitmapLoader = true;\r\n\r\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof fetch === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.options = { premultiplyAlpha: 'none' };\r\n\r\n\t}\r\n\r\n\tsetOptions( options ) {\r\n\r\n\t\tthis.options = options;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( url === undefined ) url = '';\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst cached = Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t// If cached is a promise, wait for it to resolve\r\n\t\t\tif ( cached.then ) {\r\n\r\n\t\t\t\tcached.then( imageBitmap => {\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t} ).catch( e => {\r\n\r\n\t\t\t\t\tif ( onError ) onError( e );\r\n\r\n\t\t\t\t} );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// If cached is not a promise (i.e., it's already an imageBitmap)\r\n\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( cached );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}, 0 );\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tconst fetchOptions = {};\r\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\r\n\t\tfetchOptions.headers = this.requestHeader;\r\n\r\n\t\tconst promise = fetch( url, fetchOptions ).then( function ( res ) {\r\n\r\n\t\t\treturn res.blob();\r\n\r\n\t\t} ).then( function ( blob ) {\r\n\r\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\r\n\r\n\t\t} ).then( function ( imageBitmap ) {\r\n\r\n\t\t\tCache.add( url, imageBitmap );\r\n\r\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\r\n\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\treturn imageBitmap;\r\n\r\n\t\t} ).catch( function ( e ) {\r\n\r\n\t\t\tif ( onError ) onError( e );\r\n\r\n\t\t\tCache.remove( url );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t} );\r\n\r\n\t\tCache.add( url, promise );\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ImageBitmapLoader };\r\n", "let _context;\r\n\r\nclass AudioContext {\r\n\r\n\tstatic getContext() {\r\n\r\n\t\tif ( _context === undefined ) {\r\n\r\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\t\t}\r\n\r\n\t\treturn _context;\r\n\r\n\t}\r\n\r\n\tstatic setContext( value ) {\r\n\r\n\t\t_context = value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AudioContext };\r\n", "import { AudioContext } from '../audio/AudioContext.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { Loader } from './Loader.js';\r\n\r\nclass AudioLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\r\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\r\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\r\n\r\n\t\t\t\tconst context = AudioContext.getContext();\r\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\r\n\r\n\t\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t\t} ).catch( handleError );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\thandleError( e );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t\tfunction handleError( e ) {\r\n\r\n\t\t\tif ( onError ) {\r\n\r\n\t\t\t\tonError( e );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { AudioLoader };\r\n", "import { Matrix4 } from '../math/Matrix4.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { PerspectiveCamera } from './PerspectiveCamera.js';\r\n\r\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\r\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\r\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nclass StereoCamera {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.type = 'StereoCamera';\r\n\r\n\t\tthis.aspect = 1;\r\n\r\n\t\tthis.eyeSep = 0.064;\r\n\r\n\t\tthis.cameraL = new PerspectiveCamera();\r\n\t\tthis.cameraL.layers.enable( 1 );\r\n\t\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\t\tthis.cameraR = new PerspectiveCamera();\r\n\t\tthis.cameraR.layers.enable( 2 );\r\n\t\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n\t\tthis._cache = {\r\n\t\t\tfocus: null,\r\n\t\t\tfov: null,\r\n\t\t\taspect: null,\r\n\t\t\tnear: null,\r\n\t\t\tfar: null,\r\n\t\t\tzoom: null,\r\n\t\t\teyeSep: null\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tupdate( camera ) {\r\n\r\n\t\tconst cache = this._cache;\r\n\r\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\r\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\r\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\r\n\r\n\t\tif ( needsUpdate ) {\r\n\r\n\t\t\tcache.focus = camera.focus;\r\n\t\t\tcache.fov = camera.fov;\r\n\t\t\tcache.aspect = camera.aspect * this.aspect;\r\n\t\t\tcache.near = camera.near;\r\n\t\t\tcache.far = camera.far;\r\n\t\t\tcache.zoom = camera.zoom;\r\n\t\t\tcache.eyeSep = this.eyeSep;\r\n\r\n\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\r\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\r\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\r\n\t\t\tconst ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\r\n\t\t\tlet xmin, xmax;\r\n\r\n\t\t\t// translate xOffset\r\n\r\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\r\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\r\n\r\n\t\t\t// for left eye\r\n\r\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\r\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\r\n\r\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\r\n\r\n\t\t\t// for right eye\r\n\r\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\r\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\r\n\r\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\r\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { StereoCamera };\r\n", "class Clock {\r\n\r\n\tconstructor( autoStart = true ) {\r\n\r\n\t\tthis.autoStart = autoStart;\r\n\r\n\t\tthis.startTime = 0;\r\n\t\tthis.oldTime = 0;\r\n\t\tthis.elapsedTime = 0;\r\n\r\n\t\tthis.running = false;\r\n\r\n\t}\r\n\r\n\tstart() {\r\n\r\n\t\tthis.startTime = now();\r\n\r\n\t\tthis.oldTime = this.startTime;\r\n\t\tthis.elapsedTime = 0;\r\n\t\tthis.running = true;\r\n\r\n\t}\r\n\r\n\tstop() {\r\n\r\n\t\tthis.getElapsedTime();\r\n\t\tthis.running = false;\r\n\t\tthis.autoStart = false;\r\n\r\n\t}\r\n\r\n\tgetElapsedTime() {\r\n\r\n\t\tthis.getDelta();\r\n\t\treturn this.elapsedTime;\r\n\r\n\t}\r\n\r\n\tgetDelta() {\r\n\r\n\t\tlet diff = 0;\r\n\r\n\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\tthis.start();\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.running ) {\r\n\r\n\t\t\tconst newTime = now();\r\n\r\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\r\n\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t}\r\n\r\n\t\treturn diff;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction now() {\r\n\r\n\treturn performance.now();\r\n\r\n}\r\n\r\nexport { Clock };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Quaternion } from '../math/Quaternion.js';\r\nimport { Clock } from '../core/Clock.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { AudioContext } from './AudioContext.js';\r\n\r\nconst _position = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\nconst _scale = /*@__PURE__*/ new Vector3();\r\nconst _orientation = /*@__PURE__*/ new Vector3();\r\n\r\nclass AudioListener extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'AudioListener';\r\n\r\n\t\tthis.context = AudioContext.getContext();\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( this.context.destination );\r\n\r\n\t\tthis.filter = null;\r\n\r\n\t\tthis.timeDelta = 0;\r\n\r\n\t\t// private\r\n\r\n\t\tthis._clock = new Clock();\r\n\r\n\t}\r\n\r\n\tgetInput() {\r\n\r\n\t\treturn this.gain;\r\n\r\n\t}\r\n\r\n\tremoveFilter() {\r\n\r\n\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\tthis.filter = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetFilter() {\r\n\r\n\t\treturn this.filter;\r\n\r\n\t}\r\n\r\n\tsetFilter( value ) {\r\n\r\n\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t\t}\r\n\r\n\t\tthis.filter = value;\r\n\t\tthis.gain.connect( this.filter );\r\n\t\tthis.filter.connect( this.context.destination );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMasterVolume() {\r\n\r\n\t\treturn this.gain.gain.value;\r\n\r\n\t}\r\n\r\n\tsetMasterVolume( value ) {\r\n\r\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t\tconst listener = this.context.listener;\r\n\t\tconst up = this.up;\r\n\r\n\t\tthis.timeDelta = this._clock.getDelta();\r\n\r\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\r\n\r\n\t\tif ( ! Number.isFinite( _position.x ) || ! Number.isFinite( _position.y ) || ! Number.isFinite( _position.z ) )\r\n\t\t\treturn;\r\n\r\n\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion );\r\n\r\n\t\tif ( listener.positionX ) {\r\n\r\n\t\t\t// code path for Chrome (see #14393)\r\n\r\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\r\n\r\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position.x, endTime );\r\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position.y, endTime );\r\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position.z, endTime );\r\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\r\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\r\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\r\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\r\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\r\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlistener.setPosition( _position.x, _position.y, _position.z );\r\n\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AudioListener };\r\n", "import { Object3D } from '../core/Object3D.js';\r\n\r\nclass Audio extends Object3D {\r\n\r\n\tconstructor( listener ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'Audio';\r\n\r\n\t\tthis.listener = listener;\r\n\t\tthis.context = listener.context;\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( listener.getInput() );\r\n\r\n\t\tthis.autoplay = false;\r\n\r\n\t\tthis.buffer = null;\r\n\t\tthis.detune = 0;\r\n\t\tthis.loop = false;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopEnd = 0;\r\n\t\tthis.offset = 0;\r\n\t\tthis.duration = undefined;\r\n\t\tthis.playbackRate = 1;\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.hasPlaybackControl = true;\r\n\t\tthis.source = null;\r\n\t\tthis.sourceType = 'empty';\r\n\r\n\t\tthis._startedAt = 0;\r\n\t\tthis._progress = 0;\r\n\t\tthis._connected = false;\r\n\r\n\t\tthis.filters = [];\r\n\r\n\t}\r\n\r\n\tgetOutput() {\r\n\r\n\t\treturn this.gain;\r\n\r\n\t}\r\n\r\n\tsetNodeSource( audioNode ) {\r\n\r\n\t\tthis.hasPlaybackControl = false;\r\n\t\tthis.sourceType = 'audioNode';\r\n\t\tthis.source = audioNode;\r\n\t\tthis.connect();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetMediaElementSource( mediaElement ) {\r\n\r\n\t\tthis.hasPlaybackControl = false;\r\n\t\tthis.sourceType = 'mediaNode';\r\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\r\n\t\tthis.connect();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetMediaStreamSource( mediaStream ) {\r\n\r\n\t\tthis.hasPlaybackControl = false;\r\n\t\tthis.sourceType = 'mediaStreamNode';\r\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\r\n\t\tthis.connect();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetBuffer( audioBuffer ) {\r\n\r\n\t\tthis.buffer = audioBuffer;\r\n\t\tthis.sourceType = 'buffer';\r\n\r\n\t\tif ( this.autoplay ) this.play();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tplay( delay = 0 ) {\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis._startedAt = this.context.currentTime + delay;\r\n\r\n\t\tconst source = this.context.createBufferSource();\r\n\t\tsource.buffer = this.buffer;\r\n\t\tsource.loop = this.loop;\r\n\t\tsource.loopStart = this.loopStart;\r\n\t\tsource.loopEnd = this.loopEnd;\r\n\t\tsource.onended = this.onEnded.bind( this );\r\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\r\n\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tthis.source = source;\r\n\r\n\t\tthis.setDetune( this.detune );\r\n\t\tthis.setPlaybackRate( this.playbackRate );\r\n\r\n\t\treturn this.connect();\r\n\r\n\t}\r\n\r\n\tpause() {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t// update current progress\r\n\r\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\r\n\r\n\t\t\tif ( this.loop === true ) {\r\n\r\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\r\n\r\n\t\t\t\tthis._progress = this._progress % ( this.duration || ( this.buffer ? this.buffer.duration : Number.MAX_VALUE ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.source.onended = null;\r\n\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstop( delay = 0 ) {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis._progress = 0;\r\n\r\n\t\tif ( this.source !== null ) {\r\n\r\n\t\t\tthis.source.stop( this.context.currentTime + delay );\r\n\t\t\tthis.source.onended = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis.isPlaying = false;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconnect() {\r\n\r\n\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\tthis.source.connect( this.filters[ 0 ] );\r\n\r\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t\t}\r\n\r\n\t\tthis._connected = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdisconnect() {\r\n\r\n\t\tif ( this._connected === false ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\r\n\r\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t\t}\r\n\r\n\t\tthis._connected = false;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetFilters() {\r\n\r\n\t\treturn this.filters;\r\n\r\n\t}\r\n\r\n\tsetFilters( value ) {\r\n\r\n\t\tif ( ! value ) value = [];\r\n\r\n\t\tif ( this._connected === true ) {\r\n\r\n\t\t\tthis.disconnect();\r\n\t\t\tthis.filters = value.slice();\r\n\t\t\tthis.connect();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.filters = value.slice();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetDetune( value ) {\r\n\r\n\t\tthis.detune = value;\r\n\r\n\t\tif ( this.isPlaying === true && this.source.detune !== undefined ) {\r\n\r\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetDetune() {\r\n\r\n\t\treturn this.detune;\r\n\r\n\t}\r\n\r\n\tgetFilter() {\r\n\r\n\t\treturn this.getFilters()[ 0 ];\r\n\r\n\t}\r\n\r\n\tsetFilter( filter ) {\r\n\r\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\r\n\r\n\t}\r\n\r\n\tsetPlaybackRate( value ) {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.playbackRate = value;\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetPlaybackRate() {\r\n\r\n\t\treturn this.playbackRate;\r\n\r\n\t}\r\n\r\n\tonEnded() {\r\n\r\n\t\tthis.isPlaying = false;\r\n\r\n\t}\r\n\r\n\tgetLoop() {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.loop;\r\n\r\n\t}\r\n\r\n\tsetLoop( value ) {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.loop = value;\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tthis.source.loop = this.loop;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetLoopStart( value ) {\r\n\r\n\t\tthis.loopStart = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetLoopEnd( value ) {\r\n\r\n\t\tthis.loopEnd = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetVolume() {\r\n\r\n\t\treturn this.gain.gain.value;\r\n\r\n\t}\r\n\r\n\tsetVolume( value ) {\r\n\r\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Audio };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Quaternion } from '../math/Quaternion.js';\r\nimport { Audio } from './Audio.js';\r\n\r\nconst _position = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\nconst _scale = /*@__PURE__*/ new Vector3();\r\nconst _orientation = /*@__PURE__*/ new Vector3();\r\n\r\nclass PositionalAudio extends Audio {\r\n\r\n\tconstructor( listener ) {\r\n\r\n\t\tsuper( listener );\r\n\r\n\t\tthis.panner = this.context.createPanner();\r\n\t\tthis.panner.panningModel = 'HRTF';\r\n\t\tthis.panner.connect( this.gain );\r\n\r\n\t}\r\n\r\n\tconnect() {\r\n\r\n\t\tsuper.connect();\r\n\r\n\t\tthis.panner.connect( this.gain );\r\n\r\n\t}\r\n\r\n\tdisconnect() {\r\n\r\n\t\tsuper.disconnect();\r\n\r\n\t\tthis.panner.disconnect( this.gain );\r\n\r\n\t}\r\n\r\n\tgetOutput() {\r\n\r\n\t\treturn this.panner;\r\n\r\n\t}\r\n\r\n\tgetRefDistance() {\r\n\r\n\t\treturn this.panner.refDistance;\r\n\r\n\t}\r\n\r\n\tsetRefDistance( value ) {\r\n\r\n\t\tthis.panner.refDistance = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetRolloffFactor() {\r\n\r\n\t\treturn this.panner.rolloffFactor;\r\n\r\n\t}\r\n\r\n\tsetRolloffFactor( value ) {\r\n\r\n\t\tthis.panner.rolloffFactor = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetDistanceModel() {\r\n\r\n\t\treturn this.panner.distanceModel;\r\n\r\n\t}\r\n\r\n\tsetDistanceModel( value ) {\r\n\r\n\t\tthis.panner.distanceModel = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMaxDistance() {\r\n\r\n\t\treturn this.panner.maxDistance;\r\n\r\n\t}\r\n\r\n\tsetMaxDistance( value ) {\r\n\r\n\t\tthis.panner.maxDistance = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\r\n\r\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\r\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\r\n\t\tthis.panner.coneOuterGain = coneOuterGain;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\r\n\r\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\r\n\r\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\r\n\r\n\t\tconst panner = this.panner;\r\n\r\n\t\tif ( panner.positionX ) {\r\n\r\n\t\t\t// code path for Chrome and Firefox (see #14393)\r\n\r\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\r\n\r\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\r\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\r\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\r\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\r\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\r\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\r\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PositionalAudio };\r\n", "class AudioAnalyser {\r\n\r\n\tconstructor( audio, fftSize = 2048 ) {\r\n\r\n\t\tthis.analyser = audio.context.createAnalyser();\r\n\t\tthis.analyser.fftSize = fftSize;\r\n\r\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\t\taudio.getOutput().connect( this.analyser );\r\n\r\n\t}\r\n\r\n\r\n\tgetFrequencyData() {\r\n\r\n\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\r\n\t\treturn this.data;\r\n\r\n\t}\r\n\r\n\tgetAverageFrequency() {\r\n\r\n\t\tlet value = 0;\r\n\t\tconst data = this.getFrequencyData();\r\n\r\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\tvalue += data[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value / data.length;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AudioAnalyser };\r\n", "import { Quaternion } from '../math/Quaternion.js';\r\n\r\nclass PropertyMixer {\r\n\r\n\tconstructor( binding, typeName, valueSize ) {\r\n\r\n\t\tthis.binding = binding;\r\n\t\tthis.valueSize = valueSize;\r\n\r\n\t\tlet mixFunction,\r\n\t\t\tmixFunctionAdditive,\r\n\t\t\tsetIdentity;\r\n\r\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\r\n\t\t//\r\n\t\t// interpolators can use .buffer as their .result\r\n\t\t// the data then goes to 'incoming'\r\n\t\t//\r\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t\t// the cumulative result and are compared to detect\r\n\t\t// changes\r\n\t\t//\r\n\t\t// 'orig' stores the original state of the property\r\n\t\t//\r\n\t\t// 'add' is used for additive cumulative results\r\n\t\t//\r\n\t\t// 'work' is optional and is only present for quaternion types. It is used\r\n\t\t// to store intermediate quaternion multiplication results\r\n\r\n\t\tswitch ( typeName ) {\r\n\r\n\t\t\tcase 'quaternion':\r\n\t\t\t\tmixFunction = this._slerp;\r\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\r\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\r\n\r\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\r\n\t\t\t\tthis._workIndex = 5;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'bool':\r\n\t\t\t\tmixFunction = this._select;\r\n\r\n\t\t\t\t// Use the regular mix function and for additive on these types,\r\n\t\t\t\t// additive is not relevant for non-numeric types\r\n\t\t\t\tmixFunctionAdditive = this._select;\r\n\r\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\r\n\r\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tmixFunction = this._lerp;\r\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\r\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\r\n\r\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\r\n\r\n\t\t}\r\n\r\n\t\tthis._mixBufferRegion = mixFunction;\r\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\r\n\t\tthis._setIdentity = setIdentity;\r\n\t\tthis._origIndex = 3;\r\n\t\tthis._addIndex = 4;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\t\tthis.cumulativeWeightAdditive = 0;\r\n\r\n\t\tthis.useCount = 0;\r\n\t\tthis.referenceCount = 0;\r\n\r\n\t}\r\n\r\n\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\taccumulate( accuIndex, weight ) {\r\n\r\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\tconst buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = accuIndex * stride + stride;\r\n\r\n\t\tlet currentWeight = this.cumulativeWeight;\r\n\r\n\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentWeight = weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\tcurrentWeight += weight;\r\n\t\t\tconst mix = weight / currentWeight;\r\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t}\r\n\r\n\t// accumulate data in the 'incoming' region into 'add'\r\n\taccumulateAdditive( weight ) {\r\n\r\n\t\tconst buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = stride * this._addIndex;\r\n\r\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\r\n\r\n\t\t\t// add = identity\r\n\r\n\t\t\tthis._setIdentity();\r\n\r\n\t\t}\r\n\r\n\t\t// add := add + incoming * weight\r\n\r\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\r\n\t\tthis.cumulativeWeightAdditive += weight;\r\n\r\n\t}\r\n\r\n\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\tapply( accuIndex ) {\r\n\r\n\t\tconst stride = this.valueSize,\r\n\t\t\tbuffer = this.buffer,\r\n\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\tweight = this.cumulativeWeight,\r\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\r\n\r\n\t\t\tbinding = this.binding;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\t\tthis.cumulativeWeightAdditive = 0;\r\n\r\n\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\tconst originalValueOffset = stride * this._origIndex;\r\n\r\n\t\t\tthis._mixBufferRegion(\r\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t}\r\n\r\n\t\tif ( weightAdditive > 0 ) {\r\n\r\n\t\t\t// accuN := accuN + additive accuN\r\n\r\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// remember the state of the bound property and copy it to both accus\r\n\tsaveOriginalState() {\r\n\r\n\t\tconst binding = this.binding;\r\n\r\n\t\tconst buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toriginalValueOffset = stride * this._origIndex;\r\n\r\n\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t}\r\n\r\n\t\t// Add to identity for additive\r\n\t\tthis._setIdentity();\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\t\tthis.cumulativeWeightAdditive = 0;\r\n\r\n\t}\r\n\r\n\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\trestoreOriginalState() {\r\n\r\n\t\tconst originalValueOffset = this.valueSize * 3;\r\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t}\r\n\r\n\t_setAdditiveIdentityNumeric() {\r\n\r\n\t\tconst startIndex = this._addIndex * this.valueSize;\r\n\t\tconst endIndex = startIndex + this.valueSize;\r\n\r\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\r\n\r\n\t\t\tthis.buffer[ i ] = 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_setAdditiveIdentityQuaternion() {\r\n\r\n\t\tthis._setAdditiveIdentityNumeric();\r\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\r\n\r\n\t}\r\n\r\n\t_setAdditiveIdentityOther() {\r\n\r\n\t\tconst startIndex = this._origIndex * this.valueSize;\r\n\t\tconst targetIndex = this._addIndex * this.valueSize;\r\n\r\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\r\n\r\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// mix functions\r\n\r\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\r\n\r\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t}\r\n\r\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tconst workOffset = this._workIndex * stride;\r\n\r\n\t\t// Store result in intermediate buffer offset\r\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\r\n\r\n\t\t// Slerp to the intermediate result\r\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\r\n\r\n\t}\r\n\r\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tconst s = 1 - t;\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tconst j = dstOffset + i;\r\n\r\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tconst j = dstOffset + i;\r\n\r\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { PropertyMixer };\r\n", "// Characters [].:/ are reserved for track binding syntax.\r\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\r\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\r\n\r\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\r\n// only latin characters, and the unicode \\p{L} is not yet supported. So\r\n// instead, we exclude reserved characters and match everything else.\r\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\r\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\r\n\r\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\r\n// be matched to parse the rest of the track name.\r\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\r\n\r\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\r\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\r\n\r\n// Object on target node, and accessor. May not contain reserved\r\n// characters. Accessor may contain any character except closing bracket.\r\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\r\n\r\n// Property and accessor. May not contain reserved characters. Accessor may\r\n// contain any non-bracket characters.\r\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\r\n\r\nconst _trackRe = new RegExp( ''\r\n\t+ '^'\r\n\t+ _directoryRe\r\n\t+ _nodeRe\r\n\t+ _objectRe\r\n\t+ _propertyRe\r\n\t+ '$'\r\n);\r\n\r\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\r\n\r\nclass Composite {\r\n\r\n\tconstructor( targetGroup, path, optionalParsedPath ) {\r\n\r\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis._targetGroup = targetGroup;\r\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n\t}\r\n\r\n\tgetValue( array, offset ) {\r\n\r\n\t\tthis.bind(); // bind all binding\r\n\r\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t// and only call .getValue on the first\r\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\r\n\r\n\t}\r\n\r\n\tsetValue( array, offset ) {\r\n\r\n\t\tconst bindings = this._bindings;\r\n\r\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbind() {\r\n\r\n\t\tconst bindings = this._bindings;\r\n\r\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].bind();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tunbind() {\r\n\r\n\t\tconst bindings = this._bindings;\r\n\r\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Note: This class uses a State pattern on a per-method basis:\r\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n// prototype version of these methods with one that represents\r\n// the bound state. When the property is not found, the methods\r\n// become no-ops.\r\nclass PropertyBinding {\r\n\r\n\tconstructor( rootNode, path, parsedPath ) {\r\n\r\n\t\tthis.path = path;\r\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName );\r\n\r\n\t\tthis.rootNode = rootNode;\r\n\r\n\t\t// initial state of these methods that calls 'bind'\r\n\t\tthis.getValue = this._getValue_unbound;\r\n\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t}\r\n\r\n\r\n\tstatic create( root, path, parsedPath ) {\r\n\r\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\r\n\r\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Replaces spaces with underscores and removes unsupported characters from\r\n\t * node names, to ensure compatibility with parseTrackName().\r\n\t *\r\n\t * @param {string} name Node name to be sanitized.\r\n\t * @return {string}\r\n\t */\r\n\tstatic sanitizeNodeName( name ) {\r\n\r\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\r\n\r\n\t}\r\n\r\n\tstatic parseTrackName( trackName ) {\r\n\r\n\t\tconst matches = _trackRe.exec( trackName );\r\n\r\n\t\tif ( matches === null ) {\r\n\r\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\r\n\r\n\t\t}\r\n\r\n\t\tconst results = {\r\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\r\n\t\t\tnodeName: matches[ 2 ],\r\n\t\t\tobjectName: matches[ 3 ],\r\n\t\t\tobjectIndex: matches[ 4 ],\r\n\t\t\tpropertyName: matches[ 5 ], // required\r\n\t\t\tpropertyIndex: matches[ 6 ]\r\n\t\t};\r\n\r\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\r\n\r\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\r\n\r\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\r\n\r\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\r\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\r\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\r\n\t\t\t// include '.' characters).\r\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\r\n\r\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\r\n\t\t\t\tresults.objectName = objectName;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\r\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\r\n\r\n\t\t}\r\n\r\n\t\treturn results;\r\n\r\n\t}\r\n\r\n\tstatic findNode( root, nodeName ) {\r\n\r\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\t\treturn root;\r\n\r\n\t\t}\r\n\r\n\t\t// search into skeleton bones.\r\n\t\tif ( root.skeleton ) {\r\n\r\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\r\n\r\n\t\t\tif ( bone !== undefined ) {\r\n\r\n\t\t\t\treturn bone;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// search into node subtree.\r\n\t\tif ( root.children ) {\r\n\r\n\t\t\tconst searchNodeSubtree = function ( children, checkByUserDataName ) {\r\n\r\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\tconst childNode = children[ i ];\r\n\r\n\t\t\t\t\tif ( ! checkByUserDataName && ( childNode.name === nodeName || childNode.uuid === nodeName ) ) {\r\n\r\n\t\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t\t} else if ( checkByUserDataName && childNode.userData && childNode.userData.name === nodeName ) {\r\n\r\n\t\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children, checkByUserDataName );\r\n\r\n\t\t\t\t\tif ( result ) return result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\t\tif ( subTreeNode ) {\r\n\r\n\t\t\t\treturn subTreeNode;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Search again by userData.name, as set by GLTFLoader.\r\n\t\t\t\t// We don't want to do that in a single pass to avoid incorrect matches.\r\n\t\t\t\tconst subTreeNode = searchNodeSubtree( root.children, true );\r\n\r\n\t\t\t\tif ( subTreeNode ) {\r\n\r\n\t\t\t\t\treturn subTreeNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\t// these are used to \"bind\" a nonexistent property\r\n\t_getValue_unavailable() {}\r\n\t_setValue_unavailable() {}\r\n\r\n\t// Getters\r\n\r\n\t_getValue_direct( buffer, offset ) {\r\n\r\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\r\n\r\n\t}\r\n\r\n\t_getValue_array( buffer, offset ) {\r\n\r\n\t\tconst source = this.resolvedProperty;\r\n\r\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t}\r\n\r\n\t_getValue_toArray( buffer, offset ) {\r\n\r\n\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t}\r\n\r\n\t// Direct\r\n\r\n\t_setValue_direct( buffer, offset ) {\r\n\r\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t}\r\n\r\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\t// EntireArray\r\n\r\n\t_setValue_array( buffer, offset ) {\r\n\r\n\t\tconst dest = this.resolvedProperty;\r\n\r\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tconst dest = this.resolvedProperty;\r\n\r\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tconst dest = this.resolvedProperty;\r\n\r\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\t// ArrayElement\r\n\r\n\t_setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t}\r\n\r\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\t// HasToFromArray\r\n\r\n\t_setValue_fromArray( buffer, offset ) {\r\n\r\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t}\r\n\r\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\t_getValue_unbound( targetArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.getValue( targetArray, offset );\r\n\r\n\t}\r\n\r\n\t_setValue_unbound( sourceArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t}\r\n\r\n\t// create getter / setter pair for a property in the scene graph\r\n\tbind() {\r\n\r\n\t\tlet targetObject = this.node;\r\n\t\tconst parsedPath = this.parsedPath;\r\n\r\n\t\tconst objectName = parsedPath.objectName;\r\n\t\tconst propertyName = parsedPath.propertyName;\r\n\t\tlet propertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName );\r\n\r\n\t\t\tthis.node = targetObject;\r\n\r\n\t\t}\r\n\r\n\t\t// set fail state so we can just 'return' on error\r\n\t\tthis.getValue = this._getValue_unavailable;\r\n\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n\t\t// ensure there is a value node\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.PropertyBinding: No target node found for track: ' + this.path + '.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( objectName ) {\r\n\r\n\t\t\tlet objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\tif ( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map':\r\n\r\n\t\t\t\t\tif ( 'map' in targetObject ) {\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.map;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! targetObject.material.map ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject.material.map;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// resolve property\r\n\t\tconst nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\tif ( nodeProperty === undefined ) {\r\n\r\n\t\t\tconst nodeName = parsedPath.nodeName;\r\n\r\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\r\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// determine versioning scheme\r\n\t\tlet versioning = this.Versioning.None;\r\n\r\n\t\tthis.targetObject = targetObject;\r\n\r\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\r\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\r\n\t\t}\r\n\r\n\t\t// determine how the property gets bound\r\n\t\tlet bindingType = this.BindingType.Direct;\r\n\r\n\t\tif ( propertyIndex !== undefined ) {\r\n\r\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\r\n\r\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\r\n\r\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\r\n\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\r\n\r\n\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t}\r\n\r\n\t\t// select getter / setter\r\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t}\r\n\r\n\tunbind() {\r\n\r\n\t\tthis.node = null;\r\n\r\n\t\t// back to the prototype version of getValue / setValue\r\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\tthis.getValue = this._getValue_unbound;\r\n\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t}\r\n\r\n}\r\n\r\nPropertyBinding.Composite = Composite;\r\n\r\nPropertyBinding.prototype.BindingType = {\r\n\tDirect: 0,\r\n\tEntireArray: 1,\r\n\tArrayElement: 2,\r\n\tHasFromToArray: 3\r\n};\r\n\r\nPropertyBinding.prototype.Versioning = {\r\n\tNone: 0,\r\n\tNeedsUpdate: 1,\r\n\tMatrixWorldNeedsUpdate: 2\r\n};\r\n\r\nPropertyBinding.prototype.GetterByBindingType = [\r\n\r\n\tPropertyBinding.prototype._getValue_direct,\r\n\tPropertyBinding.prototype._getValue_array,\r\n\tPropertyBinding.prototype._getValue_arrayElement,\r\n\tPropertyBinding.prototype._getValue_toArray,\r\n\r\n];\r\n\r\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\r\n\r\n\t[\r\n\t\t// Direct\r\n\t\tPropertyBinding.prototype._setValue_direct,\r\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\r\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\r\n\r\n\t], [\r\n\r\n\t\t// EntireArray\r\n\r\n\t\tPropertyBinding.prototype._setValue_array,\r\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\r\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\r\n\r\n\t], [\r\n\r\n\t\t// ArrayElement\r\n\t\tPropertyBinding.prototype._setValue_arrayElement,\r\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\r\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\r\n\r\n\t], [\r\n\r\n\t\t// HasToFromArray\r\n\t\tPropertyBinding.prototype._setValue_fromArray,\r\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\r\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\r\n\r\n\t]\r\n\r\n];\r\n\r\n\r\nexport { PropertyBinding };\r\n", "import { PropertyBinding } from './PropertyBinding.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\n/**\r\n *\r\n * A group of objects that receives a shared animation state.\r\n *\r\n * Usage:\r\n *\r\n *  - Add objects you would otherwise pass as 'root' to the\r\n *    constructor or the .clipAction method of AnimationMixer.\r\n *\r\n *  - Instead pass this object as 'root'.\r\n *\r\n *  - You can also add and remove objects later when the mixer\r\n *    is running.\r\n *\r\n * Note:\r\n *\r\n *    Objects of this class appear as one object to the mixer,\r\n *    so cache control of the individual objects must be done\r\n *    on the group.\r\n *\r\n * Limitation:\r\n *\r\n *  - The animated properties must be compatible among the\r\n *    all objects in the group.\r\n *\r\n *  - A single property can either be controlled through a\r\n *    target group or directly, but not both.\r\n */\r\n\r\nclass AnimationObjectGroup {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.isAnimationObjectGroup = true;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\t// cached objects followed by the active ones\r\n\t\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\t\tthis.nCachedObjects_ = 0; // threshold\r\n\t\t// note: read by PropertyBinding.Composite\r\n\r\n\t\tconst indices = {};\r\n\t\tthis._indicesByUUID = indices; // for bookkeeping\r\n\r\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tthis._paths = []; // inside: string\r\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\r\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\r\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tobjects: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._objects.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tget bindingsPerObject() {\r\n\r\n\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tadd() {\r\n\r\n\t\tconst objects = this._objects,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tpaths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tlet knownObject = undefined,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_;\r\n\r\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid;\r\n\t\t\tlet index = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\tindex = nObjects ++;\r\n\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\tknownObject = objects[ index ];\r\n\r\n\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\r\n\r\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\r\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\r\n\r\n\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t}\r\n\r\n\tremove() {\r\n\r\n\t\tconst objects = this._objects,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tlet nCachedObjects = this.nCachedObjects_;\r\n\r\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t}\r\n\r\n\t// remove & forget\r\n\tuncache() {\r\n\r\n\t\tconst objects = this._objects,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tlet nCachedObjects = this.nCachedObjects_,\r\n\t\t\tnObjects = objects.length;\r\n\r\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\tconst lastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\tif ( lastIndex > 0 ) {\r\n\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // cached or active\r\n\r\n\t\t\t} // if object is known\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t}\r\n\r\n\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\tsubscribe_( path, parsedPath ) {\r\n\r\n\t\t// returns an array of bindings for the given path that is changed\r\n\t\t// according to the contained objects in the group\r\n\r\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\r\n\t\tlet index = indicesByPath[ path ];\r\n\t\tconst bindings = this._bindings;\r\n\r\n\t\tif ( index !== undefined ) return bindings[ index ];\r\n\r\n\t\tconst paths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tobjects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\tindex = bindings.length;\r\n\r\n\t\tindicesByPath[ path ] = index;\r\n\r\n\t\tpaths.push( path );\r\n\t\tparsedPaths.push( parsedPath );\r\n\t\tbindings.push( bindingsForPath );\r\n\r\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst object = objects[ i ];\r\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t}\r\n\r\n\t\treturn bindingsForPath;\r\n\r\n\t}\r\n\r\n\tunsubscribe_( path ) {\r\n\r\n\t\t// tells the group to forget about a property path and no longer\r\n\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tconst paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\tparsedPaths.pop();\r\n\r\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\tpaths.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AnimationObjectGroup };\r\n", "import { WrapAroundEnding, ZeroCurvatureEnding, ZeroSlopeEnding, LoopPingPong, LoopOnce, LoopRepeat, NormalAnimationBlendMode, AdditiveAnimationBlendMode } from '../constants.js';\r\n\r\n\r\nclass AnimationAction {\r\n\r\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\r\n\r\n\t\tthis._mixer = mixer;\r\n\t\tthis._clip = clip;\r\n\t\tthis._localRoot = localRoot;\r\n\t\tthis.blendMode = blendMode;\r\n\r\n\t\tconst tracks = clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tinterpolants = new Array( nTracks );\r\n\r\n\t\tconst interpolantSettings = {\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\t\t};\r\n\r\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\r\n\t\t\tinterpolants[ i ] = interpolant;\r\n\t\t\tinterpolant.settings = interpolantSettings;\r\n\r\n\t\t}\r\n\r\n\t\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\t\tthis._interpolants = interpolants; // bound by the mixer\r\n\r\n\t\t// inside: PropertyMixer (managed by the mixer)\r\n\t\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\t\tthis._cacheIndex = null; // for the memory manager\r\n\t\tthis._byClipCacheIndex = null; // for the memory manager\r\n\r\n\t\tthis._timeScaleInterpolant = null;\r\n\t\tthis._weightInterpolant = null;\r\n\r\n\t\tthis.loop = LoopRepeat;\r\n\t\tthis._loopCount = - 1;\r\n\r\n\t\t// global mixer time when the action is to be started\r\n\t\t// it's set back to 'null' upon start of the action\r\n\t\tthis._startTime = null;\r\n\r\n\t\t// scaled local time of the action\r\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1;\r\n\t\tthis._effectiveTimeScale = 1;\r\n\r\n\t\tthis.weight = 1;\r\n\t\tthis._effectiveWeight = 1;\r\n\r\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\r\n\r\n\t\tthis.paused = false; // true -> zero effective time scale\r\n\t\tthis.enabled = true; // false -> zero effective weight\r\n\r\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\r\n\r\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\r\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\r\n\r\n\t}\r\n\r\n\t// State & Scheduling\r\n\r\n\tplay() {\r\n\r\n\t\tthis._mixer._activateAction( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstop() {\r\n\r\n\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\treturn this.reset();\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.paused = false;\r\n\t\tthis.enabled = true;\r\n\r\n\t\tthis.time = 0; // restart clip\r\n\t\tthis._loopCount = - 1;// forget previous loops\r\n\t\tthis._startTime = null;// forget scheduling\r\n\r\n\t\treturn this.stopFading().stopWarping();\r\n\r\n\t}\r\n\r\n\tisRunning() {\r\n\r\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\r\n\r\n\t}\r\n\r\n\t// return true when play has been called\r\n\tisScheduled() {\r\n\r\n\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t}\r\n\r\n\tstartAt( time ) {\r\n\r\n\t\tthis._startTime = time;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetLoop( mode, repetitions ) {\r\n\r\n\t\tthis.loop = mode;\r\n\t\tthis.repetitions = repetitions;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Weight\r\n\r\n\t// set the weight stopping any scheduled fading\r\n\t// although .enabled = false yields an effective weight of zero, this\r\n\t// method does *not* change .enabled, because it would be confusing\r\n\tsetEffectiveWeight( weight ) {\r\n\r\n\t\tthis.weight = weight;\r\n\r\n\t\t// note: same logic as when updated at runtime\r\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\treturn this.stopFading();\r\n\r\n\t}\r\n\r\n\t// return the weight considering fading and .enabled\r\n\tgetEffectiveWeight() {\r\n\r\n\t\treturn this._effectiveWeight;\r\n\r\n\t}\r\n\r\n\tfadeIn( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t}\r\n\r\n\tfadeOut( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t}\r\n\r\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\r\n\r\n\t\tfadeOutAction.fadeOut( duration );\r\n\t\tthis.fadeIn( duration );\r\n\r\n\t\tif ( warp ) {\r\n\r\n\t\t\tconst fadeInDuration = this._clip.duration,\r\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcrossFadeTo( fadeInAction, duration, warp ) {\r\n\r\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t}\r\n\r\n\tstopFading() {\r\n\r\n\t\tconst weightInterpolant = this._weightInterpolant;\r\n\r\n\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\tthis._weightInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Time Scale Control\r\n\r\n\t// set the time scale stopping any scheduled warping\r\n\t// although .paused = true yields an effective time scale of zero, this\r\n\t// method does *not* change .paused, because it would be confusing\r\n\tsetEffectiveTimeScale( timeScale ) {\r\n\r\n\t\tthis.timeScale = timeScale;\r\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t}\r\n\r\n\t// return the time scale considering warping and .paused\r\n\tgetEffectiveTimeScale() {\r\n\r\n\t\treturn this._effectiveTimeScale;\r\n\r\n\t}\r\n\r\n\tsetDuration( duration ) {\r\n\r\n\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t}\r\n\r\n\tsyncWith( action ) {\r\n\r\n\t\tthis.time = action.time;\r\n\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t}\r\n\r\n\thalt( duration ) {\r\n\r\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\r\n\r\n\t}\r\n\r\n\twarp( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\tconst mixer = this._mixer,\r\n\t\t\tnow = mixer.time,\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\tlet interpolant = this._timeScaleInterpolant;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tconst times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now;\r\n\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstopWarping() {\r\n\r\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Object Accessors\r\n\r\n\tgetMixer() {\r\n\r\n\t\treturn this._mixer;\r\n\r\n\t}\r\n\r\n\tgetClip() {\r\n\r\n\t\treturn this._clip;\r\n\r\n\t}\r\n\r\n\tgetRoot() {\r\n\r\n\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t}\r\n\r\n\t// Interna\r\n\r\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\r\n\r\n\t\t// called by the mixer\r\n\r\n\t\tif ( ! this.enabled ) {\r\n\r\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\r\n\r\n\t\t\tthis._updateWeight( time );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst startTime = this._startTime;\r\n\r\n\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t// check for scheduled start of action\r\n\r\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\tdeltaTime = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\r\n\t\t\t\tthis._startTime = null; // unschedule\r\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// apply time scale and advance time\r\n\r\n\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\tconst clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t// note: _updateTime may disable the action resulting in\r\n\t\t// an effective weight of 0\r\n\r\n\t\tconst weight = this._updateWeight( time );\r\n\r\n\t\tif ( weight > 0 ) {\r\n\r\n\t\t\tconst interpolants = this._interpolants;\r\n\t\t\tconst propertyMixers = this._propertyBindings;\r\n\r\n\t\t\tswitch ( this.blendMode ) {\r\n\r\n\t\t\t\tcase AdditiveAnimationBlendMode:\r\n\r\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase NormalAnimationBlendMode:\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_updateWeight( time ) {\r\n\r\n\t\tlet weight = 0;\r\n\r\n\t\tif ( this.enabled ) {\r\n\r\n\t\t\tweight = this.weight;\r\n\t\t\tconst interpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveWeight = weight;\r\n\t\treturn weight;\r\n\r\n\t}\r\n\r\n\t_updateTimeScale( time ) {\r\n\r\n\t\tlet timeScale = 0;\r\n\r\n\t\tif ( ! this.paused ) {\r\n\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tconst interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\tthis.paused = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveTimeScale = timeScale;\r\n\t\treturn timeScale;\r\n\r\n\t}\r\n\r\n\t_updateTime( deltaTime ) {\r\n\r\n\t\tconst duration = this._clip.duration;\r\n\t\tconst loop = this.loop;\r\n\r\n\t\tlet time = this.time + deltaTime;\r\n\t\tlet loopCount = this._loopCount;\r\n\r\n\t\tconst pingPong = ( loop === LoopPingPong );\r\n\r\n\t\tif ( deltaTime === 0 ) {\r\n\r\n\t\t\tif ( loopCount === - 1 ) return time;\r\n\r\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\r\n\r\n\t\t}\r\n\r\n\t\tif ( loop === LoopOnce ) {\r\n\r\n\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t// just started\r\n\r\n\t\t\t\tthis._loopCount = 0;\r\n\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t\thandle_stop: {\r\n\r\n\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\tbreak handle_stop;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else { // repetitive Repeat or PingPong\r\n\r\n\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t// just started\r\n\r\n\t\t\t\tif ( deltaTime >= 0 ) {\r\n\r\n\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( time >= duration || time < 0 ) {\r\n\r\n\t\t\t\t// wrap around\r\n\r\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\tconst pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\tif ( pending <= 0 ) {\r\n\r\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// keep running\r\n\r\n\t\t\t\t\tif ( pending === 1 ) {\r\n\r\n\t\t\t\t\t\t// entering the last round\r\n\r\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\r\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.time = time;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\r\n\r\n\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\treturn duration - time;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn time;\r\n\r\n\t}\r\n\r\n\t_setEndings( atStart, atEnd, pingPong ) {\r\n\r\n\t\tconst settings = this._interpolantSettings;\r\n\r\n\t\tif ( pingPong ) {\r\n\r\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\r\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_scheduleFading( duration, weightNow, weightThen ) {\r\n\r\n\t\tconst mixer = this._mixer, now = mixer.time;\r\n\t\tlet interpolant = this._weightInterpolant;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tconst times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now;\r\n\t\tvalues[ 0 ] = weightNow;\r\n\t\ttimes[ 1 ] = now + duration;\r\n\t\tvalues[ 1 ] = weightThen;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { AnimationAction };\r\n", "import { AnimationAction } from './AnimationAction.js';\r\nimport { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport { LinearInterpolant } from '../math/interpolants/LinearInterpolant.js';\r\nimport { PropertyBinding } from './PropertyBinding.js';\r\nimport { PropertyMixer } from './PropertyMixer.js';\r\nimport { AnimationClip } from './AnimationClip.js';\r\nimport { NormalAnimationBlendMode } from '../constants.js';\r\n\r\n\r\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\r\n\r\n\r\nclass AnimationMixer extends EventDispatcher {\r\n\r\n\tconstructor( root ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis._root = root;\r\n\t\tthis._initMemoryManager();\r\n\t\tthis._accuIndex = 0;\r\n\t\tthis.time = 0;\r\n\t\tthis.timeScale = 1.0;\r\n\r\n\t}\r\n\r\n\t_bindAction( action, prototypeAction ) {\r\n\r\n\t\tconst root = action._localRoot || this._root,\r\n\t\t\ttracks = action._clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tbindings = action._propertyBindings,\r\n\t\t\tinterpolants = action._interpolants,\r\n\t\t\trootUuid = root.uuid,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\r\n\r\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\tbindingsByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tconst track = tracks[ i ],\r\n\t\t\t\ttrackName = track.name;\r\n\r\n\t\t\tlet binding = bindingsByName[ trackName ];\r\n\r\n\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\tbinding = new PropertyMixer(\r\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_activateAction( action ) {\r\n\r\n\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\tclipUuid = action._clip.uuid,\r\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst bindings = action._propertyBindings;\r\n\r\n\t\t\t// increment reference counts / sort out state\r\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tconst binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._lendAction( action );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_deactivateAction( action ) {\r\n\r\n\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\tconst bindings = action._propertyBindings;\r\n\r\n\t\t\t// decrement reference counts / sort out state\r\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tconst binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Memory manager\r\n\r\n\t_initMemoryManager() {\r\n\r\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\tthis._nActiveActions = 0;\r\n\r\n\t\tthis._actionsByClip = {};\r\n\t\t// inside:\r\n\t\t// {\r\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\r\n\t\t// \tactionByRoot: AnimationAction - lookup\r\n\t\t// }\r\n\r\n\r\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\tthis._nActiveBindings = 0;\r\n\r\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\tthis._controlInterpolants = []; // same game as above\r\n\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tactions: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._actions.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn scope._nActiveActions;\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tbindings: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn scope._nActiveBindings;\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcontrolInterpolants: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._controlInterpolants.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// Memory management for AnimationAction objects\r\n\r\n\t_isActiveAction( action ) {\r\n\r\n\t\tconst index = action._cacheIndex;\r\n\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t}\r\n\r\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\r\n\r\n\t\tconst actions = this._actions,\r\n\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\tactionsForClip = {\r\n\r\n\t\t\t\tknownActions: [ action ],\r\n\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t};\r\n\r\n\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\tknownActions.push( action );\r\n\r\n\t\t}\r\n\r\n\t\taction._cacheIndex = actions.length;\r\n\t\tactions.push( action );\r\n\r\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t}\r\n\r\n\t_removeInactiveAction( action ) {\r\n\r\n\t\tconst actions = this._actions,\r\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\tactions.pop();\r\n\r\n\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\tconst clipUuid = action._clip.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\r\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\tlastKnownAction =\r\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\tknownActionsForClip.pop();\r\n\r\n\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\r\n\r\n\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t}\r\n\r\n\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t}\r\n\r\n\t_removeInactiveBindingsForAction( action ) {\r\n\r\n\t\tconst bindings = action._propertyBindings;\r\n\r\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tconst binding = bindings[ i ];\r\n\r\n\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_lendAction( action ) {\r\n\r\n\t\t// [ active actions |  inactive actions  ]\r\n\t\t// [  active actions >| inactive actions ]\r\n\t\t//                 s        a\r\n\t\t//                  <-swap->\r\n\t\t//                 a        s\r\n\r\n\t\tconst actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\taction._cacheIndex = lastActiveIndex;\r\n\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t}\r\n\r\n\t_takeBackAction( action ) {\r\n\r\n\t\t// [  active actions  | inactive actions ]\r\n\t\t// [ active actions |< inactive actions  ]\r\n\t\t//        a        s\r\n\t\t//         <-swap->\r\n\t\t//        s        a\r\n\r\n\t\tconst actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t}\r\n\r\n\t// Memory management for PropertyMixer objects\r\n\r\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\r\n\r\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindings = this._bindings;\r\n\r\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\tbindingByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t}\r\n\r\n\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\tbinding._cacheIndex = bindings.length;\r\n\t\tbindings.push( binding );\r\n\r\n\t}\r\n\r\n\t_removeInactiveBinding( binding ) {\r\n\r\n\t\tconst bindings = this._bindings,\r\n\t\t\tpropBinding = binding.binding,\r\n\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\ttrackName = propBinding.path,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\tbindings.pop();\r\n\r\n\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\r\n\r\n\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_lendBinding( binding ) {\r\n\r\n\t\tconst bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t}\r\n\r\n\t_takeBackBinding( binding ) {\r\n\r\n\t\tconst bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t}\r\n\r\n\r\n\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t_lendControlInterpolant() {\r\n\r\n\t\tconst interpolants = this._controlInterpolants,\r\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\r\n\r\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\tinterpolant = new LinearInterpolant(\r\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t1, _controlInterpolantsResultBuffer );\r\n\r\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\treturn interpolant;\r\n\r\n\t}\r\n\r\n\t_takeBackControlInterpolant( interpolant ) {\r\n\r\n\t\tconst interpolants = this._controlInterpolants,\r\n\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t}\r\n\r\n\t// return an action for a clip optionally using a custom root target\r\n\t// object (this method allocates a lot of dynamic memory in case a\r\n\t// previously unknown clip/root combination is specified)\r\n\tclipAction( clip, optionalRoot, blendMode ) {\r\n\r\n\t\tconst root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid;\r\n\r\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\r\n\r\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\r\n\r\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\r\n\t\tlet prototypeAction = null;\r\n\r\n\t\tif ( blendMode === undefined ) {\r\n\r\n\t\t\tif ( clipObject !== null ) {\r\n\r\n\t\t\t\tblendMode = clipObject.blendMode;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tblendMode = NormalAnimationBlendMode;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\r\n\r\n\t\t\t\treturn existingAction;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t// the bindings again but can just copy\r\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t// also, take the clip from the prototype action\r\n\t\t\tif ( clipObject === null )\r\n\t\t\t\tclipObject = prototypeAction._clip;\r\n\r\n\t\t}\r\n\r\n\t\t// clip must be known when specified via string\r\n\t\tif ( clipObject === null ) return null;\r\n\r\n\t\t// allocate all resources required to run it\r\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\r\n\r\n\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t// and make the action known to the memory manager\r\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\r\n\r\n\t\treturn newAction;\r\n\r\n\t}\r\n\r\n\t// get an existing action\r\n\texistingAction( clip, optionalRoot ) {\r\n\r\n\t\tconst root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\r\n\r\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\t// deactivates all previously scheduled actions\r\n\tstopAllAction() {\r\n\r\n\t\tconst actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions;\r\n\r\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\r\n\r\n\t\t\tactions[ i ].stop();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// advance the time and update apply the animation\r\n\tupdate( deltaTime ) {\r\n\r\n\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\tconst actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\ttime = this.time += deltaTime,\r\n\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t// run active actions\r\n\r\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\tconst action = actions[ i ];\r\n\r\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tconst bindings = this._bindings,\r\n\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Allows you to seek to a specific time in an animation.\r\n\tsetTime( timeInSeconds ) {\r\n\r\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\r\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\r\n\r\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\r\n\r\n\t\t}\r\n\r\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\r\n\r\n\t}\r\n\r\n\t// return this mixer's root target object\r\n\tgetRoot() {\r\n\r\n\t\treturn this._root;\r\n\r\n\t}\r\n\r\n\t// free all resources specific to a particular clip\r\n\tuncacheClip( clip ) {\r\n\r\n\t\tconst actions = this._actions,\r\n\t\t\tclipUuid = clip.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t// just throw away\r\n\r\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tconst action = actionsToRemove[ i ];\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\tconst cacheIndex = action._cacheIndex,\r\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\tactions.pop();\r\n\r\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// free all resources specific to a particular root target object\r\n\tuncacheRoot( root ) {\r\n\r\n\t\tconst rootUuid = root.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\tfor ( const clipUuid in actionsByClip ) {\r\n\r\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\r\n\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\tfor ( const trackName in bindingByName ) {\r\n\r\n\t\t\t\tconst binding = bindingByName[ trackName ];\r\n\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// remove a targeted clip from the cache\r\n\tuncacheAction( clip, optionalRoot ) {\r\n\r\n\t\tconst action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\tif ( action !== null ) {\r\n\r\n\t\t\tthis._deactivateAction( action );\r\n\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AnimationMixer };\r\n", "class Uniform {\r\n\r\n\tconstructor( value ) {\r\n\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Uniform };\r\n", "import { EventDispatcher } from './EventDispatcher.js';\r\nimport { StaticDrawUsage } from '../constants.js';\r\n\r\nlet _id = 0;\r\n\r\nclass UniformsGroup extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isUniformsGroup = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.uniforms = [];\r\n\r\n\t}\r\n\r\n\tadd( uniform ) {\r\n\r\n\t\tthis.uniforms.push( uniform );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremove( uniform ) {\r\n\r\n\t\tconst index = this.uniforms.indexOf( uniform );\r\n\r\n\t\tif ( index !== - 1 ) this.uniforms.splice( index, 1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetName( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\t\tthis.usage = source.usage;\r\n\r\n\t\tconst uniformsSource = source.uniforms;\r\n\r\n\t\tthis.uniforms.length = 0;\r\n\r\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst uniforms = Array.isArray( uniformsSource[ i ] ) ? uniformsSource[ i ] : [ uniformsSource[ i ] ];\r\n\r\n\t\t\tfor ( let j = 0; j < uniforms.length; j ++ ) {\r\n\r\n\t\t\t\tthis.uniforms.push( uniforms[ j ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { UniformsGroup };\r\n", "import { InterleavedBuffer } from './InterleavedBuffer.js';\r\n\r\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\r\n\r\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\r\n\r\n\t\tsuper( array, stride );\r\n\r\n\t\tthis.isInstancedInterleavedBuffer = true;\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone( data ) {\r\n\r\n\t\tconst ib = super.clone( data );\r\n\r\n\t\tib.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\treturn ib;\r\n\r\n\t}\r\n\r\n\ttoJSON( data ) {\r\n\r\n\t\tconst json = super.toJSON( data );\r\n\r\n\t\tjson.isInstancedInterleavedBuffer = true;\r\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\treturn json;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedInterleavedBuffer };\r\n", "class GLBufferAttribute {\r\n\r\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\r\n\r\n\t\tthis.isGLBufferAttribute = true;\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.buffer = buffer;\r\n\t\tthis.type = type;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.elementSize = elementSize;\r\n\t\tthis.count = count;\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tsetBuffer( buffer ) {\r\n\r\n\t\tthis.buffer = buffer;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetType( type, elementSize ) {\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.elementSize = elementSize;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetItemSize( itemSize ) {\r\n\r\n\t\tthis.itemSize = itemSize;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetCount( count ) {\r\n\r\n\t\tthis.count = count;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { GLBufferAttribute };\r\n", "import { Matrix4 } from '../math/Matrix4.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Layers } from './Layers.js';\r\n\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\n\r\nclass Raycaster {\r\n\r\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\r\n\r\n\t\tthis.ray = new Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near;\r\n\t\tthis.far = far;\r\n\t\tthis.camera = null;\r\n\t\tthis.layers = new Layers();\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: { threshold: 1 },\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tset( origin, direction ) {\r\n\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.ray.set( origin, direction );\r\n\r\n\t}\r\n\r\n\tsetFromCamera( coords, camera ) {\r\n\r\n\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\t\t\tthis.camera = camera;\r\n\r\n\t\t} else if ( camera.isOrthographicCamera ) {\r\n\r\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\r\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\t\t\tthis.camera = camera;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetFromXRController( controller ) {\r\n\r\n\t\t_matrix.identity().extractRotation( controller.matrixWorld );\r\n\r\n\t\tthis.ray.origin.setFromMatrixPosition( controller.matrixWorld );\r\n\t\tthis.ray.direction.set( 0, 0, - 1 ).applyMatrix4( _matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tintersectObject( object, recursive = true, intersects = [] ) {\r\n\r\n\t\tintersect( object, this, intersects, recursive );\r\n\r\n\t\tintersects.sort( ascSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t}\r\n\r\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\r\n\r\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersect( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t}\r\n\r\n\t\tintersects.sort( ascSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction ascSort( a, b ) {\r\n\r\n\treturn a.distance - b.distance;\r\n\r\n}\r\n\r\nfunction intersect( object, raycaster, intersects, recursive ) {\r\n\r\n\tlet propagate = true;\r\n\r\n\tif ( object.layers.test( raycaster.layers ) ) {\r\n\r\n\t\tconst result = object.raycast( raycaster, intersects );\r\n\r\n\t\tif ( result === false ) propagate = false;\r\n\r\n\t}\r\n\r\n\tif ( propagate === true && recursive === true ) {\r\n\r\n\t\tconst children = object.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersect( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Raycaster };\r\n", "import * as MathUtils from './MathUtils.js';\r\n\r\n/**\r\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n *\r\n * phi (the polar angle) is measured from the positive y-axis. The positive y-axis is up.\r\n * theta (the azimuthal angle) is measured from the positive z-axis.\r\n */\r\nclass Spherical {\r\n\r\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.phi = phi; // polar angle\r\n\t\tthis.theta = theta; // azimuthal angle\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.phi = phi;\r\n\t\tthis.theta = theta;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tthis.radius = other.radius;\r\n\t\tthis.phi = other.phi;\r\n\t\tthis.theta = other.theta;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// restrict phi to be between EPS and PI-EPS\r\n\tmakeSafe() {\r\n\r\n\t\tconst EPS = 0.000001;\r\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v ) {\r\n\r\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t}\r\n\r\n\tsetFromCartesianCoords( x, y, z ) {\r\n\r\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\tthis.theta = 0;\r\n\t\t\tthis.phi = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Spherical };\r\n", "/**\r\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\r\n */\r\n\r\nclass Cylindrical {\r\n\r\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\r\n\r\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\r\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\r\n\t\tthis.y = y; // height above the x-z plane\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( radius, theta, y ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.theta = theta;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tthis.radius = other.radius;\r\n\t\tthis.theta = other.theta;\r\n\t\tthis.y = other.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v ) {\r\n\r\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t}\r\n\r\n\tsetFromCartesianCoords( x, y, z ) {\r\n\r\n\t\tthis.radius = Math.sqrt( x * x + z * z );\r\n\t\tthis.theta = Math.atan2( x, z );\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Cylindrical };\r\n", "export class Matrix2 {\r\n\r\n\tconstructor( n11, n12, n21, n22 ) {\r\n\r\n\t\tMatrix2.prototype.isMatrix2 = true;\r\n\r\n\t\tthis.elements = [\r\n\t\t\t1, 0,\r\n\t\t\t0, 1,\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n21, n22 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\t\t\t1, 0,\r\n\t\t\t0, 1,\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( n11, n12, n21, n22 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 2 ] = n12;\r\n\t\tte[ 1 ] = n21; te[ 3 ] = n22;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n", "import { Vector2 } from './Vector2.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector2();\r\n\r\nclass Box2 {\r\n\r\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\r\n\r\n\t\tthis.isBox2 = true;\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tset( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCenterAndSize( center, size ) {\r\n\r\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t}\r\n\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tgetSize( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByVector( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByScalar( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\r\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y;\r\n\r\n\t}\r\n\r\n\tcontainsBox( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\r\n\r\n\t}\r\n\r\n\tgetParameter( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\t// using 4 splitting planes to rule out intersections\r\n\r\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\r\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y;\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.clampPoint( point, _vector ).distanceTo( point );\r\n\r\n\t}\r\n\r\n\tintersect( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Box2 };\r\n", "import { Vector3 } from './Vector3.js';\r\nimport * as MathUtils from './MathUtils.js';\r\n\r\nconst _startP = /*@__PURE__*/ new Vector3();\r\nconst _startEnd = /*@__PURE__*/ new Vector3();\r\n\r\nclass Line3 {\r\n\r\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\r\n\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\r\n\t}\r\n\r\n\tset( start, end ) {\r\n\r\n\t\tthis.start.copy( start );\r\n\t\tthis.end.copy( end );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( line ) {\r\n\r\n\t\tthis.start.copy( line.start );\r\n\t\tthis.end.copy( line.end );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tdelta( target ) {\r\n\r\n\t\treturn target.subVectors( this.end, this.start );\r\n\r\n\t}\r\n\r\n\tdistanceSq() {\r\n\r\n\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t}\r\n\r\n\tdistance() {\r\n\r\n\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t}\r\n\r\n\tat( t, target ) {\r\n\r\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t}\r\n\r\n\tclosestPointToPointParameter( point, clampToLine ) {\r\n\r\n\t\t_startP.subVectors( point, this.start );\r\n\t\t_startEnd.subVectors( this.end, this.start );\r\n\r\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\r\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\r\n\r\n\t\tlet t = startEnd_startP / startEnd2;\r\n\r\n\t\tif ( clampToLine ) {\r\n\r\n\t\t\tt = MathUtils.clamp( t, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn t;\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( point, clampToLine, target ) {\r\n\r\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tthis.start.applyMatrix4( matrix );\r\n\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( line ) {\r\n\r\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Line3 };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass SpotLightHelper extends Object3D {\r\n\r\n\tconstructor( light, color ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tthis.type = 'SpotLightHelper';\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\tconst positions = [\r\n\t\t\t0, 0, 0, \t0, 0, 1,\r\n\t\t\t0, 0, 0, \t1, 0, 1,\r\n\t\t\t0, 0, 0,\t- 1, 0, 1,\r\n\t\t\t0, 0, 0, \t0, 1, 1,\r\n\t\t\t0, 0, 0, \t0, - 1, 1\r\n\t\t];\r\n\r\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\r\n\r\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\r\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\r\n\r\n\t\t\tpositions.push(\r\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\r\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\r\n\r\n\t\tthis.cone = new LineSegments( geometry, material );\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tthis.light.updateWorldMatrix( true, false );\r\n\t\tthis.light.target.updateWorldMatrix( true, false );\r\n\r\n\t\t// update the local matrix based on the parent and light target transforms\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tthis.parent.updateWorldMatrix( true );\r\n\r\n\t\t\tthis.matrix\r\n\t\t\t\t.copy( this.parent.matrixWorld )\r\n\t\t\t\t.invert()\r\n\t\t\t\t.multiply( this.light.matrixWorld );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrix.copy( this.light.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorld.copy( this.light.matrixWorld );\r\n\r\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\r\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\t_vector.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( _vector );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.cone.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.cone.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { SpotLightHelper };\r\n", "import { LineSegments } from '../objects/LineSegments.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\r\n\r\n\r\nclass SkeletonHelper extends LineSegments {\r\n\r\n\tconstructor( object ) {\r\n\r\n\t\tconst bones = getBoneList( object );\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst colors = [];\r\n\r\n\t\tconst color1 = new Color( 0, 0, 1 );\r\n\t\tconst color2 = new Color( 0, 1, 0 );\r\n\r\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tconst bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\r\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isSkeletonHelper = true;\r\n\r\n\t\tthis.type = 'SkeletonHelper';\r\n\r\n\t\tthis.root = object;\r\n\t\tthis.bones = bones;\r\n\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tconst bones = this.bones;\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst position = geometry.getAttribute( 'position' );\r\n\r\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\r\n\r\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tconst bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\r\n\t\t\t\t_vector.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\t\t_vector.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j + 1, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t\t\tj += 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nfunction getBoneList( object ) {\r\n\r\n\tconst boneList = [];\r\n\r\n\tif ( object.isBone === true ) {\r\n\r\n\t\tboneList.push( object );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\r\n\r\n\t}\r\n\r\n\treturn boneList;\r\n\r\n}\r\n\r\n\r\nexport { SkeletonHelper };\r\n", "import { Mesh } from '../objects/Mesh.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { SphereGeometry } from '../geometries/SphereGeometry.js';\r\n\r\nclass PointLightHelper extends Mesh {\r\n\r\n\tconstructor( light, sphereSize, color ) {\r\n\r\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\r\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tthis.type = 'PointLightHelper';\r\n\r\n\t\tthis.matrix = this.light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\r\n\t\t/*\r\n\t// TODO: delete this comment?\r\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tconst d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightDistance );\r\n\t*/\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tthis.light.updateWorldMatrix( true, false );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tconst d = this.light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.visible = true;\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\t\t*/\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { PointLightHelper };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Mesh } from '../objects/Mesh.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { OctahedronGeometry } from '../geometries/OctahedronGeometry.js';\r\nimport { BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _color1 = /*@__PURE__*/ new Color();\r\nconst _color2 = /*@__PURE__*/ new Color();\r\n\r\nclass HemisphereLightHelper extends Object3D {\r\n\r\n\tconstructor( light, size, color ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tthis.type = 'HemisphereLightHelper';\r\n\r\n\t\tconst geometry = new OctahedronGeometry( size );\r\n\t\tgeometry.rotateY( Math.PI * 0.5 );\r\n\r\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\r\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\r\n\r\n\t\tconst position = geometry.getAttribute( 'position' );\r\n\t\tconst colors = new Float32Array( position.count * 3 );\r\n\r\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\r\n\r\n\t\tthis.add( new Mesh( geometry, this.material ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst mesh = this.children[ 0 ];\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\r\n\r\n\t\t\t_color1.copy( this.light.color );\r\n\t\t\t_color2.copy( this.light.groundColor );\r\n\r\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\r\n\r\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolors.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tthis.light.updateWorldMatrix( true, false );\r\n\r\n\t\tmesh.lookAt( _vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { HemisphereLightHelper };\r\n", "import { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass GridHelper extends LineSegments {\r\n\r\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\r\n\r\n\t\tcolor1 = new Color( color1 );\r\n\t\tcolor2 = new Color( color2 );\r\n\r\n\t\tconst center = divisions / 2;\r\n\t\tconst step = size / divisions;\r\n\t\tconst halfSize = size / 2;\r\n\r\n\t\tconst vertices = [], colors = [];\r\n\r\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\r\n\r\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\r\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\r\n\r\n\t\t\tconst color = i === center ? color1 : color2;\r\n\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.type = 'GridHelper';\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { GridHelper };\r\n", "import { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass PolarGridHelper extends LineSegments {\r\n\r\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\r\n\r\n\t\tcolor1 = new Color( color1 );\r\n\t\tcolor2 = new Color( color2 );\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst colors = [];\r\n\r\n\t\t// create the sectors\r\n\r\n\t\tif ( sectors > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\r\n\r\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tconst x = Math.sin( v ) * radius;\r\n\t\t\t\tconst z = Math.cos( v ) * radius;\r\n\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\r\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// create the rings\r\n\r\n\t\tfor ( let i = 0; i < rings; i ++ ) {\r\n\r\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tconst r = radius - ( radius / rings * i );\r\n\r\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\r\n\r\n\t\t\t\t// first vertex\r\n\r\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tlet x = Math.sin( v ) * r;\r\n\t\t\t\tlet z = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t\t// second vertex\r\n\r\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.type = 'PolarGridHelper';\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { PolarGridHelper };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Line } from '../objects/Line.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\n\r\nclass DirectionalLightHelper extends Object3D {\r\n\r\n\tconstructor( light, size, color ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tthis.type = 'DirectionalLightHelper';\r\n\r\n\t\tif ( size === undefined ) size = 1;\r\n\r\n\t\tlet geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\r\n\t\t\t- size, size, 0,\r\n\t\t\tsize, size, 0,\r\n\t\t\tsize, - size, 0,\r\n\t\t\t- size, - size, 0,\r\n\t\t\t- size, size, 0\r\n\t\t], 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\r\n\r\n\t\tthis.lightPlane = new Line( geometry, material );\r\n\t\tthis.add( this.lightPlane );\r\n\r\n\t\tgeometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\r\n\r\n\t\tthis.targetLine = new Line( geometry, material );\r\n\t\tthis.add( this.targetLine );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.lightPlane.geometry.dispose();\r\n\t\tthis.lightPlane.material.dispose();\r\n\t\tthis.targetLine.geometry.dispose();\r\n\t\tthis.targetLine.material.dispose();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tthis.light.updateWorldMatrix( true, false );\r\n\t\tthis.light.target.updateWorldMatrix( true, false );\r\n\r\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\t_v3.subVectors( _v2, _v1 );\r\n\r\n\t\tthis.lightPlane.lookAt( _v2 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.lightPlane.material.color.set( this.color );\r\n\t\t\tthis.targetLine.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\r\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\tthis.targetLine.lookAt( _v2 );\r\n\t\tthis.targetLine.scale.z = _v3.length();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { DirectionalLightHelper };\r\n", "import { Camera } from '../cameras/Camera.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { LineSegments } from '../objects/LineSegments.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _camera = /*@__PURE__*/ new Camera();\r\n\r\n/**\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttps://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html\r\n */\r\n\r\nclass CameraHelper extends LineSegments {\r\n\r\n\tconstructor( camera ) {\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst colors = [];\r\n\r\n\t\tconst pointMap = {};\r\n\r\n\t\t// near\r\n\r\n\t\taddLine( 'n1', 'n2' );\r\n\t\taddLine( 'n2', 'n4' );\r\n\t\taddLine( 'n4', 'n3' );\r\n\t\taddLine( 'n3', 'n1' );\r\n\r\n\t\t// far\r\n\r\n\t\taddLine( 'f1', 'f2' );\r\n\t\taddLine( 'f2', 'f4' );\r\n\t\taddLine( 'f4', 'f3' );\r\n\t\taddLine( 'f3', 'f1' );\r\n\r\n\t\t// sides\r\n\r\n\t\taddLine( 'n1', 'f1' );\r\n\t\taddLine( 'n2', 'f2' );\r\n\t\taddLine( 'n3', 'f3' );\r\n\t\taddLine( 'n4', 'f4' );\r\n\r\n\t\t// cone\r\n\r\n\t\taddLine( 'p', 'n1' );\r\n\t\taddLine( 'p', 'n2' );\r\n\t\taddLine( 'p', 'n3' );\r\n\t\taddLine( 'p', 'n4' );\r\n\r\n\t\t// up\r\n\r\n\t\taddLine( 'u1', 'u2' );\r\n\t\taddLine( 'u2', 'u3' );\r\n\t\taddLine( 'u3', 'u1' );\r\n\r\n\t\t// target\r\n\r\n\t\taddLine( 'c', 't' );\r\n\t\taddLine( 'p', 'c' );\r\n\r\n\t\t// cross\r\n\r\n\t\taddLine( 'cn1', 'cn2' );\r\n\t\taddLine( 'cn3', 'cn4' );\r\n\r\n\t\taddLine( 'cf1', 'cf2' );\r\n\t\taddLine( 'cf3', 'cf4' );\r\n\r\n\t\tfunction addLine( a, b ) {\r\n\r\n\t\t\taddPoint( a );\r\n\t\t\taddPoint( b );\r\n\r\n\t\t}\r\n\r\n\t\tfunction addPoint( id ) {\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tcolors.push( 0, 0, 0 );\r\n\r\n\t\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.type = 'CameraHelper';\r\n\r\n\t\tthis.camera = camera;\r\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\r\n\r\n\t\tthis.matrix = camera.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.pointMap = pointMap;\r\n\r\n\t\tthis.update();\r\n\r\n\t\t// colors\r\n\r\n\t\tconst colorFrustum = new Color( 0xffaa00 );\r\n\t\tconst colorCone = new Color( 0xff0000 );\r\n\t\tconst colorUp = new Color( 0x00aaff );\r\n\t\tconst colorTarget = new Color( 0xffffff );\r\n\t\tconst colorCross = new Color( 0x333333 );\r\n\r\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\r\n\r\n\t}\r\n\r\n\tsetColors( frustum, cone, up, target, cross ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\r\n\r\n\t\t// near\r\n\r\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\r\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\r\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\r\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\r\n\r\n\t\t// far\r\n\r\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\r\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\r\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\r\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\r\n\r\n\t\t// sides\r\n\r\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\r\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\r\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\r\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\r\n\r\n\t\t// cone\r\n\r\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\r\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\r\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\r\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\r\n\r\n\t\t// up\r\n\r\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\r\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\r\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\r\n\r\n\t\t// target\r\n\r\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\r\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\r\n\r\n\t\t// cross\r\n\r\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\r\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\r\n\r\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\r\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\r\n\r\n\t\tcolorAttribute.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst pointMap = this.pointMap;\r\n\r\n\t\tconst w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix inverse\r\n\t\t// world matrix must be identity\r\n\r\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\r\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\r\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\r\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\r\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\r\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\r\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\r\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\r\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\r\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\r\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\r\n\r\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\r\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\r\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\r\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\r\n\r\n\t_vector.set( x, y, z ).unproject( camera );\r\n\r\n\tconst points = pointMap[ point ];\r\n\r\n\tif ( points !== undefined ) {\r\n\r\n\t\tconst position = geometry.getAttribute( 'position' );\r\n\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CameraHelper };\r\n", "import { Box3 } from '../math/Box3.js';\r\nimport { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nconst _box = /*@__PURE__*/ new Box3();\r\n\r\nclass BoxHelper extends LineSegments {\r\n\r\n\tconstructor( object, color = 0xffff00 ) {\r\n\r\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\t\tconst positions = new Float32Array( 8 * 3 );\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.type = 'BoxHelper';\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate( object ) {\r\n\r\n\t\tif ( object !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.object !== undefined ) {\r\n\r\n\t\t\t_box.setFromObject( this.object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _box.isEmpty() ) return;\r\n\r\n\t\tconst min = _box.min;\r\n\t\tconst max = _box.max;\r\n\r\n\t\t/*\r\n\t\t\t5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tconst position = this.geometry.attributes.position;\r\n\t\tconst array = position.array;\r\n\r\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\r\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\r\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\r\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t}\r\n\r\n\tsetFromObject( object ) {\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.update();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.object = source.object;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { BoxHelper };\r\n", "import { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { BufferAttribute, Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nclass Box3Helper extends LineSegments {\r\n\r\n\tconstructor( box, color = 0xffff00 ) {\r\n\r\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\r\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\r\n\r\n\t\tthis.box = box;\r\n\r\n\t\tthis.type = 'Box3Helper';\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tconst box = this.box;\r\n\r\n\t\tif ( box.isEmpty() ) return;\r\n\r\n\t\tbox.getCenter( this.position );\r\n\r\n\t\tbox.getSize( this.scale );\r\n\r\n\t\tthis.scale.multiplyScalar( 0.5 );\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Box3Helper };\r\n", "import { Line } from '../objects/Line.js';\r\nimport { Mesh } from '../objects/Mesh.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nclass PlaneHelper extends Line {\r\n\r\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\r\n\r\n\t\tconst color = hex;\r\n\r\n\t\tconst positions = [ 1, - 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\r\n\r\n\t\tthis.type = 'PlaneHelper';\r\n\r\n\t\tthis.plane = plane;\r\n\r\n\t\tthis.size = size;\r\n\r\n\t\tconst positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\r\n\r\n\t\tconst geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tthis.position.set( 0, 0, 0 );\r\n\r\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\r\n\r\n\t\tthis.lookAt( this.plane.normal );\r\n\r\n\t\tthis.translateZ( - this.plane.constant );\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PlaneHelper };\r\n", "import { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { CylinderGeometry } from '../geometries/CylinderGeometry.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Mesh } from '../objects/Mesh.js';\r\nimport { Line } from '../objects/Line.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nconst _axis = /*@__PURE__*/ new Vector3();\r\nlet _lineGeometry, _coneGeometry;\r\n\r\nclass ArrowHelper extends Object3D {\r\n\r\n\t// dir is assumed to be normalized\r\n\r\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'ArrowHelper';\r\n\r\n\t\tif ( _lineGeometry === undefined ) {\r\n\r\n\t\t\t_lineGeometry = new BufferGeometry();\r\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\r\n\r\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\r\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( origin );\r\n\r\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t}\r\n\r\n\tsetDirection( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tconst radians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\r\n\r\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\r\n\t\tthis.line.updateMatrix();\r\n\r\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\t\tthis.cone.position.y = length;\r\n\t\tthis.cone.updateMatrix();\r\n\r\n\t}\r\n\r\n\tsetColor( color ) {\r\n\r\n\t\tthis.line.material.color.set( color );\r\n\t\tthis.cone.material.color.set( color );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source, false );\r\n\r\n\t\tthis.line.copy( source.line );\r\n\t\tthis.cone.copy( source.cone );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.line.geometry.dispose();\r\n\t\tthis.line.material.dispose();\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { ArrowHelper };\r\n", "import { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass AxesHelper extends LineSegments {\r\n\r\n\tconstructor( size = 1 ) {\r\n\r\n\t\tconst vertices = [\r\n\t\t\t0, 0, 0,\tsize, 0, 0,\r\n\t\t\t0, 0, 0,\t0, size, 0,\r\n\t\t\t0, 0, 0,\t0, 0, size\r\n\t\t];\r\n\r\n\t\tconst colors = [\r\n\t\t\t1, 0, 0,\t1, 0.6, 0,\r\n\t\t\t0, 1, 0,\t0.6, 1, 0,\r\n\t\t\t0, 0, 1,\t0, 0.6, 1\r\n\t\t];\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.type = 'AxesHelper';\r\n\r\n\t}\r\n\r\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\r\n\r\n\t\tconst color = new Color();\r\n\t\tconst array = this.geometry.attributes.color.array;\r\n\r\n\t\tcolor.set( xAxisColor );\r\n\t\tcolor.toArray( array, 0 );\r\n\t\tcolor.toArray( array, 3 );\r\n\r\n\t\tcolor.set( yAxisColor );\r\n\t\tcolor.toArray( array, 6 );\r\n\t\tcolor.toArray( array, 9 );\r\n\r\n\t\tcolor.set( zAxisColor );\r\n\t\tcolor.toArray( array, 12 );\r\n\t\tcolor.toArray( array, 15 );\r\n\r\n\t\tthis.geometry.attributes.color.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { AxesHelper };\r\n", "import { Color } from '../../math/Color.js';\r\nimport { Path } from './Path.js';\r\nimport { Shape } from './Shape.js';\r\nimport { ShapeUtils } from '../ShapeUtils.js';\r\n\r\nclass ShapePath {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.type = 'ShapePath';\r\n\r\n\t\tthis.color = new Color();\r\n\r\n\t\tthis.subPaths = [];\r\n\t\tthis.currentPath = null;\r\n\r\n\t}\r\n\r\n\tmoveTo( x, y ) {\r\n\r\n\t\tthis.currentPath = new Path();\r\n\t\tthis.subPaths.push( this.currentPath );\r\n\t\tthis.currentPath.moveTo( x, y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlineTo( x, y ) {\r\n\r\n\t\tthis.currentPath.lineTo( x, y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsplineThru( pts ) {\r\n\r\n\t\tthis.currentPath.splineThru( pts );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoShapes( isCCW ) {\r\n\r\n\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\t\tconst shapes = [];\r\n\r\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\t\tconst tmpShape = new Shape();\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\t\tconst polyLen = inPolygon.length;\r\n\r\n\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\tlet inside = false;\r\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\r\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not parallel\r\n\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\r\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t\t// continue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn\tinside;\r\n\r\n\t\t}\r\n\r\n\t\tconst isClockWise = ShapeUtils.isClockWise;\r\n\r\n\t\tconst subPaths = this.subPaths;\r\n\t\tif ( subPaths.length === 0 ) return [];\r\n\r\n\t\tlet solid, tmpPath, tmpShape;\r\n\t\tconst shapes = [];\r\n\r\n\t\tif ( subPaths.length === 1 ) {\r\n\r\n\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\ttmpShape = new Shape();\r\n\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\t\tconst betterShapeHoles = [];\r\n\t\tconst newShapes = [];\r\n\t\tlet newShapeHoles = [];\r\n\t\tlet mainIdx = 0;\r\n\t\tlet tmpPoints;\r\n\r\n\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\t\tif ( solid ) {\r\n\r\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\r\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\r\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\t\tif ( newShapes.length > 1 ) {\r\n\r\n\t\t\tlet ambiguous = false;\r\n\t\t\tlet toChange = 0;\r\n\r\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\tconst ho = sho[ hIdx ];\r\n\t\t\t\t\tlet hole_unassigned = true;\r\n\r\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\r\n\r\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\r\n\r\n\t\t\t\tnewShapeHoles = betterShapeHoles;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet tmpHoles;\r\n\r\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { ShapePath };\r\n", "import { EventDispatcher } from '../core/EventDispatcher.js';\r\n\r\nclass Controls extends EventDispatcher {\r\n\r\n\tconstructor( object, domElement = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.domElement = domElement;\r\n\r\n\t\tthis.enabled = true;\r\n\r\n\t\tthis.state = - 1;\r\n\r\n\t\tthis.keys = {};\r\n\t\tthis.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };\r\n\t\tthis.touches = { ONE: null, TWO: null };\r\n\r\n\t}\r\n\r\n\tconnect() {}\r\n\r\n\tdisconnect() {}\r\n\r\n\tdispose() {}\r\n\r\n\tupdate( /* delta */ ) {}\r\n\r\n}\r\n\r\nexport { Controls };\r\n", "import { WebGLRenderTarget } from './renderers/WebGLRenderTarget.js';\r\n\r\nexport class WebGLMultipleRenderTargets extends WebGLRenderTarget { // @deprecated, r162\r\n\r\n\tconstructor( width = 1, height = 1, count = 1, options = {} ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the \"count\" parameter to enable MRT.' );\r\n\r\n\t\tsuper( width, height, { ...options, count } );\r\n\r\n\t\tthis.isWebGLMultipleRenderTargets = true;\r\n\r\n\t}\r\n\r\n\tget texture() {\r\n\r\n\t\treturn this.textures;\r\n\r\n\t}\r\n\r\n}\r\n", "const refreshUniforms = [\r\n\t'alphaMap',\r\n\t'alphaTest',\r\n\t'anisotropy',\r\n\t'anisotropyMap',\r\n\t'anisotropyRotation',\r\n\t'aoMap',\r\n\t'attenuationColor',\r\n\t'attenuationDistance',\r\n\t'bumpMap',\r\n\t'clearcoat',\r\n\t'clearcoatMap',\r\n\t'clearcoatNormalMap',\r\n\t'clearcoatNormalScale',\r\n\t'clearcoatRoughness',\r\n\t'color',\r\n\t'dispersion',\r\n\t'displacementMap',\r\n\t'emissive',\r\n\t'emissiveMap',\r\n\t'envMap',\r\n\t'gradientMap',\r\n\t'ior',\r\n\t'iridescence',\r\n\t'iridescenceIOR',\r\n\t'iridescenceMap',\r\n\t'iridescenceThicknessMap',\r\n\t'lightMap',\r\n\t'map',\r\n\t'matcap',\r\n\t'metalness',\r\n\t'metalnessMap',\r\n\t'normalMap',\r\n\t'normalScale',\r\n\t'opacity',\r\n\t'roughness',\r\n\t'roughnessMap',\r\n\t'sheen',\r\n\t'sheenColor',\r\n\t'sheenColorMap',\r\n\t'sheenRoughnessMap',\r\n\t'shininess',\r\n\t'specular',\r\n\t'specularColor',\r\n\t'specularColorMap',\r\n\t'specularIntensity',\r\n\t'specularIntensityMap',\r\n\t'specularMap',\r\n\t'thickness',\r\n\t'transmission',\r\n\t'transmissionMap'\r\n];\r\n\r\nclass NodeMaterialObserver {\r\n\r\n\tconstructor( builder ) {\r\n\r\n\t\tthis.renderObjects = new WeakMap();\r\n\t\tthis.hasNode = this.containsNode( builder );\r\n\t\tthis.hasAnimation = builder.object.isSkinnedMesh === true;\r\n\t\tthis.refreshUniforms = refreshUniforms;\r\n\t\tthis.renderId = 0;\r\n\r\n\t}\r\n\r\n\tfirstInitialization( renderObject ) {\r\n\r\n\t\tconst hasInitialized = this.renderObjects.has( renderObject );\r\n\r\n\t\tif ( hasInitialized === false ) {\r\n\r\n\t\t\tthis.getRenderObjectData( renderObject );\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetRenderObjectData( renderObject ) {\r\n\r\n\t\tlet data = this.renderObjects.get( renderObject );\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tdata = {\r\n\t\t\t\tmaterial: this.getMaterialData( renderObject.material ),\r\n\t\t\t\tworldMatrix: renderObject.object.matrixWorld.clone()\r\n\t\t\t};\r\n\r\n\t\t\tif ( renderObject.object.center ) {\r\n\r\n\t\t\t\tdata.center = renderObject.object.center.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderObject.object.morphTargetInfluences ) {\r\n\r\n\t\t\t\tdata.morphTargetInfluences = renderObject.object.morphTargetInfluences.slice();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderObject.bundle !== null ) {\r\n\r\n\t\t\t\tdata.version = renderObject.bundle.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.renderObjects.set( renderObject, data );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tcontainsNode( builder ) {\r\n\r\n\t\tconst material = builder.material;\r\n\r\n\t\tfor ( const property in material ) {\r\n\r\n\t\t\tif ( material[ property ] && material[ property ].isNode )\r\n\t\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( builder.renderer.nodes.modelViewMatrix !== null || builder.renderer.nodes.modelNormalViewMatrix !== null )\r\n\t\t\treturn true;\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetMaterialData( material ) {\r\n\r\n\t\tconst data = {};\r\n\r\n\t\tfor ( const property of this.refreshUniforms ) {\r\n\r\n\t\t\tconst value = material[ property ];\r\n\r\n\t\t\tif ( value === null || value === undefined ) continue;\r\n\r\n\t\t\tif ( typeof value === 'object' && value.clone !== undefined ) {\r\n\r\n\t\t\t\tif ( value.isTexture === true ) {\r\n\r\n\t\t\t\t\tdata[ property ] = { id: value.id, version: value.version };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdata[ property ] = value.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata[ property ] = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tequals( renderObject ) {\r\n\r\n\t\tconst { object, material } = renderObject;\r\n\r\n\t\tconst renderObjectData = this.getRenderObjectData( renderObject );\r\n\r\n\t\t// world matrix\r\n\r\n\t\tif ( renderObjectData.worldMatrix.equals( object.matrixWorld ) !== true ) {\r\n\r\n\t\t\trenderObjectData.worldMatrix.copy( object.matrixWorld );\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// material\r\n\r\n\t\tconst materialData = renderObjectData.material;\r\n\r\n\t\tfor ( const property in materialData ) {\r\n\r\n\t\t\tconst value = materialData[ property ];\r\n\t\t\tconst mtlValue = material[ property ];\r\n\r\n\t\t\tif ( value.equals !== undefined ) {\r\n\r\n\t\t\t\tif ( value.equals( mtlValue ) === false ) {\r\n\r\n\t\t\t\t\tvalue.copy( mtlValue );\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( mtlValue.isTexture === true ) {\r\n\r\n\t\t\t\tif ( value.id !== mtlValue.id || value.version !== mtlValue.version ) {\r\n\r\n\t\t\t\t\tvalue.id = mtlValue.id;\r\n\t\t\t\t\tvalue.version = mtlValue.version;\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( value !== mtlValue ) {\r\n\r\n\t\t\t\tmaterialData[ property ] = mtlValue;\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tif ( renderObjectData.morphTargetInfluences ) {\r\n\r\n\t\t\tlet morphChanged = false;\r\n\r\n\t\t\tfor ( let i = 0; i < renderObjectData.morphTargetInfluences.length; i ++ ) {\r\n\r\n\t\t\t\tif ( renderObjectData.morphTargetInfluences[ i ] !== object.morphTargetInfluences[ i ] ) {\r\n\r\n\t\t\t\t\tmorphChanged = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( morphChanged ) return true;\r\n\r\n\t\t}\r\n\r\n\t\t// center\r\n\r\n\t\tif ( renderObjectData.center ) {\r\n\r\n\t\t\tif ( renderObjectData.center.equals( object.center ) === false ) {\r\n\r\n\t\t\t\trenderObjectData.center.copy( object.center );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// bundle\r\n\r\n\t\tif ( renderObject.bundle !== null ) {\r\n\r\n\t\t\trenderObjectData.version = renderObject.bundle.version;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tneedsRefresh( renderObject, nodeFrame ) {\r\n\r\n\t\tif ( this.hasNode || this.hasAnimation || this.firstInitialization( renderObject ) )\r\n\t\t\treturn true;\r\n\r\n\t\tconst { renderId } = nodeFrame;\r\n\r\n\t\tif ( this.renderId !== renderId ) {\r\n\r\n\t\t\tthis.renderId = renderId;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tconst isStatic = renderObject.object.static === true;\r\n\t\tconst isBundle = renderObject.bundle !== null && renderObject.bundle.static === true && this.getRenderObjectData( renderObject ).version === renderObject.bundle.version;\r\n\r\n\t\tif ( isStatic || isBundle )\r\n\t\t\treturn false;\r\n\r\n\t\tconst notEqual = this.equals( renderObject ) !== true;\r\n\r\n\t\treturn notEqual;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeMaterialObserver;\r\n", "import { Color } from '../../math/Color.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\n// cyrb53 (c) 2018 bryc (github.com/bryc). License: Public domain. Attribution appreciated.\r\n// A fast and simple 64-bit (or 53-bit) string hash function with decent collision resistance.\r\n// Largely inspired by MurmurHash2/3, but with a focus on speed/simplicity.\r\n// See https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/52171480#52171480\r\n// https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js\r\nfunction cyrb53( value, seed = 0 ) {\r\n\r\n\tlet h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\r\n\r\n\tif ( value instanceof Array ) {\r\n\r\n\t\tfor ( let i = 0, val; i < value.length; i ++ ) {\r\n\r\n\t\t\tval = value[ i ];\r\n\t\t\th1 = Math.imul( h1 ^ val, 2654435761 );\r\n\t\t\th2 = Math.imul( h2 ^ val, 1597334677 );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tfor ( let i = 0, ch; i < value.length; i ++ ) {\r\n\r\n\t\t\tch = value.charCodeAt( i );\r\n\t\t\th1 = Math.imul( h1 ^ ch, 2654435761 );\r\n\t\t\th2 = Math.imul( h2 ^ ch, 1597334677 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\th1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 );\r\n\th1 ^= Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );\r\n\th2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 );\r\n\th2 ^= Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );\r\n\r\n\treturn 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );\r\n\r\n}\r\n\r\nexport const hashString = ( str ) => cyrb53( str );\r\nexport const hashArray = ( array ) => cyrb53( array );\r\nexport const hash = ( ...params ) => cyrb53( params );\r\n\r\nexport function getCacheKey( object, force = false ) {\r\n\r\n\tconst values = [];\r\n\r\n\tif ( object.isNode === true ) {\r\n\r\n\t\tvalues.push( object.id );\r\n\t\tobject = object.getSelf();\r\n\r\n\t}\r\n\r\n\tfor ( const { property, childNode } of getNodeChildren( object ) ) {\r\n\r\n\t\tvalues.push( values, cyrb53( property.slice( 0, - 4 ) ), childNode.getCacheKey( force ) );\r\n\r\n\t}\r\n\r\n\treturn cyrb53( values );\r\n\r\n}\r\n\r\nexport function* getNodeChildren( node, toJSON = false ) {\r\n\r\n\tfor ( const property in node ) {\r\n\r\n\t\t// Ignore private properties.\r\n\t\tif ( property.startsWith( '_' ) === true ) continue;\r\n\r\n\t\tconst object = node[ property ];\r\n\r\n\t\tif ( Array.isArray( object ) === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < object.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = object[ i ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: i, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object && object.isNode === true ) {\r\n\r\n\t\t\tyield { property, childNode: object };\r\n\r\n\t\t} else if ( typeof object === 'object' ) {\r\n\r\n\t\t\tfor ( const subProperty in object ) {\r\n\r\n\t\t\t\tconst child = object[ subProperty ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: subProperty, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function getValueType( value ) {\r\n\r\n\tif ( value === undefined || value === null ) return null;\r\n\r\n\tconst typeOf = typeof value;\r\n\r\n\tif ( value.isNode === true ) {\r\n\r\n\t\treturn 'node';\r\n\r\n\t} else if ( typeOf === 'number' ) {\r\n\r\n\t\treturn 'float';\r\n\r\n\t} else if ( typeOf === 'boolean' ) {\r\n\r\n\t\treturn 'bool';\r\n\r\n\t} else if ( typeOf === 'string' ) {\r\n\r\n\t\treturn 'string';\r\n\r\n\t} else if ( typeOf === 'function' ) {\r\n\r\n\t\treturn 'shader';\r\n\r\n\t} else if ( value.isVector2 === true ) {\r\n\r\n\t\treturn 'vec2';\r\n\r\n\t} else if ( value.isVector3 === true ) {\r\n\r\n\t\treturn 'vec3';\r\n\r\n\t} else if ( value.isVector4 === true ) {\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t} else if ( value.isMatrix3 === true ) {\r\n\r\n\t\treturn 'mat3';\r\n\r\n\t} else if ( value.isMatrix4 === true ) {\r\n\r\n\t\treturn 'mat4';\r\n\r\n\t} else if ( value.isColor === true ) {\r\n\r\n\t\treturn 'color';\r\n\r\n\t} else if ( value instanceof ArrayBuffer ) {\r\n\r\n\t\treturn 'ArrayBuffer';\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\nexport function getValueFromType( type, ...params ) {\r\n\r\n\tconst last4 = type ? type.slice( - 4 ) : undefined;\r\n\r\n\tif ( params.length === 1 ) { // ensure same behaviour as in NodeBuilder.format()\r\n\r\n\t\tif ( last4 === 'vec2' ) params = [ params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec3' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec4' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\r\n\t}\r\n\r\n\tif ( type === 'color' ) {\r\n\r\n\t\treturn new Color( ...params );\r\n\r\n\t} else if ( last4 === 'vec2' ) {\r\n\r\n\t\treturn new Vector2( ...params );\r\n\r\n\t} else if ( last4 === 'vec3' ) {\r\n\r\n\t\treturn new Vector3( ...params );\r\n\r\n\t} else if ( last4 === 'vec4' ) {\r\n\r\n\t\treturn new Vector4( ...params );\r\n\r\n\t} else if ( last4 === 'mat3' ) {\r\n\r\n\t\treturn new Matrix3( ...params );\r\n\r\n\t} else if ( last4 === 'mat4' ) {\r\n\r\n\t\treturn new Matrix4( ...params );\r\n\r\n\t} else if ( type === 'bool' ) {\r\n\r\n\t\treturn params[ 0 ] || false;\r\n\r\n\t} else if ( ( type === 'float' ) || ( type === 'int' ) || ( type === 'uint' ) ) {\r\n\r\n\t\treturn params[ 0 ] || 0;\r\n\r\n\t} else if ( type === 'string' ) {\r\n\r\n\t\treturn params[ 0 ] || '';\r\n\r\n\t} else if ( type === 'ArrayBuffer' ) {\r\n\r\n\t\treturn base64ToArrayBuffer( params[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\nexport function arrayBufferToBase64( arrayBuffer ) {\r\n\r\n\tlet chars = '';\r\n\r\n\tconst array = new Uint8Array( arrayBuffer );\r\n\r\n\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\tchars += String.fromCharCode( array[ i ] );\r\n\r\n\t}\r\n\r\n\treturn btoa( chars );\r\n\r\n}\r\n\r\nexport function base64ToArrayBuffer( base64 ) {\r\n\r\n\treturn Uint8Array.from( atob( base64 ), c => c.charCodeAt( 0 ) ).buffer;\r\n\r\n}\r\n", "export const NodeShaderStage = {\r\n\tVERTEX: 'vertex',\r\n\tFRAGMENT: 'fragment'\r\n};\r\n\r\nexport const NodeUpdateType = {\r\n\tNONE: 'none',\r\n\tFRAME: 'frame',\r\n\tRENDER: 'render',\r\n\tOBJECT: 'object'\r\n};\r\n\r\nexport const NodeType = {\r\n\tBOOLEAN: 'bool',\r\n\tINTEGER: 'int',\r\n\tFLOAT: 'float',\r\n\tVECTOR2: 'vec2',\r\n\tVECTOR3: 'vec3',\r\n\tVECTOR4: 'vec4',\r\n\tMATRIX2: 'mat2',\r\n\tMATRIX3: 'mat3',\r\n\tMATRIX4: 'mat4'\r\n};\r\n\r\nexport const defaultShaderStages = [ 'fragment', 'vertex' ];\r\nexport const defaultBuildStages = [ 'setup', 'analyze', 'generate' ];\r\nexport const shaderStages = [ ...defaultShaderStages, 'compute' ];\r\nexport const vectorComponents = [ 'x', 'y', 'z', 'w' ];\r\n", "import { NodeUpdateType } from './constants.js';\r\nimport { getNodeChildren, getCacheKey } from './NodeUtils.js';\r\n\r\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\r\nimport { MathUtils } from '../../math/MathUtils.js';\r\n\r\nlet _nodeId = 0;\r\n\r\nclass Node extends EventDispatcher {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Node';\r\n\r\n\t}\r\n\r\n\tconstructor( nodeType = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.nodeType = nodeType;\r\n\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\r\n\t\tthis.updateAfterType = NodeUpdateType.NONE;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis._cacheKey = null;\r\n\t\tthis._cacheKeyVersion = 0;\r\n\r\n\t\tthis.global = false;\r\n\r\n\t\tthis.isNode = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tget type() {\r\n\r\n\t\treturn this.constructor.type;\r\n\r\n\t}\r\n\r\n\tonUpdate( callback, updateType ) {\r\n\r\n\t\tthis.updateType = updateType;\r\n\t\tthis.update = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tonFrameUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.FRAME );\r\n\r\n\t}\r\n\r\n\tonRenderUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.RENDER );\r\n\r\n\t}\r\n\r\n\tonObjectUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.OBJECT );\r\n\r\n\t}\r\n\r\n\tonReference( callback ) {\r\n\r\n\t\tthis.updateReference = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetSelf() {\r\n\r\n\t\t// Returns non-node object.\r\n\r\n\t\treturn this.self || this;\r\n\r\n\t}\r\n\r\n\tupdateReference( /*state*/ ) {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisGlobal( /*builder*/ ) {\r\n\r\n\t\treturn this.global;\r\n\r\n\t}\r\n\r\n\t* getChildren() {\r\n\r\n\t\tfor ( const { childNode } of getNodeChildren( this ) ) {\r\n\r\n\t\t\tyield childNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tchildNode.traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetCacheKey( force = false ) {\r\n\r\n\t\tforce = force || this.version !== this._cacheKeyVersion;\r\n\r\n\t\tif ( force === true || this._cacheKey === null ) {\r\n\r\n\t\t\tthis._cacheKey = getCacheKey( this, force );\r\n\t\t\tthis._cacheKeyVersion = this.version;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._cacheKey;\r\n\r\n\t}\r\n\r\n\tgetScope() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetHash( /*builder*/ ) {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetUpdateType() {\r\n\r\n\t\treturn this.updateType;\r\n\r\n\t}\r\n\r\n\tgetUpdateBeforeType() {\r\n\r\n\t\treturn this.updateBeforeType;\r\n\r\n\t}\r\n\r\n\tgetUpdateAfterType() {\r\n\r\n\t\treturn this.updateAfterType;\r\n\r\n\t}\r\n\r\n\tgetElementType( builder ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst elementType = builder.getElementType( type );\r\n\r\n\t\treturn elementType;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( nodeProperties.outputNode ) {\r\n\r\n\t\t\treturn nodeProperties.outputNode.getNodeType( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tgetShared( builder ) {\r\n\r\n\t\tconst hash = this.getHash( builder );\r\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\r\n\r\n\t\treturn nodeFromHash || this;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tnodeProperties[ 'node' + index ++ ] = childNode;\r\n\r\n\t\t}\r\n\r\n\t\t// return a outputNode if exists\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tconst usageCount = builder.increaseUsage( this );\r\n\r\n\t\tif ( usageCount === 1 ) {\r\n\r\n\t\t\t// node flow children\r\n\r\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\r\n\r\n\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( outputNode && outputNode.isNode === true ) {\r\n\r\n\t\t\treturn outputNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateBefore( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tupdateAfter( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tbuild( builder, output = null ) {\r\n\r\n\t\tconst refNode = this.getShared( builder );\r\n\r\n\t\tif ( this !== refNode ) {\r\n\r\n\t\t\treturn refNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addNode( this );\r\n\t\tbuilder.addChain( this );\r\n\r\n\t\t/* Build stages expected results:\r\n\t\t\t- \"setup\"\t\t-> Node\r\n\t\t\t- \"analyze\"\t\t-> null\r\n\t\t\t- \"generate\"\t-> String\r\n\t\t*/\r\n\t\tlet result = null;\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'setup' ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\r\n\t\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\t\tif ( properties.initialized !== true ) {\r\n\r\n\t\t\t\tconst stackNodesBeforeSetup = builder.stack.nodes.length;\r\n\r\n\t\t\t\tproperties.initialized = true;\r\n\t\t\t\tproperties.outputNode = this.setup( builder );\r\n\r\n\t\t\t\tif ( properties.outputNode !== null && builder.stack.nodes.length !== stackNodesBeforeSetup ) {\r\n\r\n\t\t\t\t\t// !! no outputNode !!\r\n\t\t\t\t\t//properties.outputNode = builder.stack;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\r\n\r\n\t\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( buildStage === 'analyze' ) {\r\n\r\n\t\t\tthis.analyze( builder );\r\n\r\n\t\t} else if ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\r\n\r\n\t\t\tif ( isGenerateOnce ) {\r\n\r\n\t\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\t\tresult = nodeData.snippet;\r\n\r\n\t\t\t\tif ( result === undefined ) {\r\n\r\n\t\t\t\t\tresult = this.generate( builder ) || '';\r\n\r\n\t\t\t\t\tnodeData.snippet = result;\r\n\r\n\t\t\t\t} else if ( nodeData.flowCodes !== undefined && builder.context.nodeBlock !== undefined ) {\r\n\r\n\t\t\t\t\tbuilder.addFlowCodeHierarchy( this, builder.context.nodeBlock );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = builder.format( result, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = this.generate( builder, output ) || '';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeChain( this );\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgetSerializeChildren() {\r\n\r\n\t\treturn getNodeChildren( this );\r\n\r\n\t}\r\n\r\n\tserialize( json ) {\r\n\r\n\t\tconst nodeChildren = this.getSerializeChildren();\r\n\r\n\t\tconst inputNodes = {};\r\n\r\n\t\tfor ( const { property, index, childNode } of nodeChildren ) {\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tif ( inputNodes[ property ] === undefined ) {\r\n\r\n\t\t\t\t\tinputNodes[ property ] = Number.isInteger( index ) ? [] : {};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinputNodes[ property ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( inputNodes ).length > 0 ) {\r\n\r\n\t\t\tjson.inputNodes = inputNodes;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdeserialize( json ) {\r\n\r\n\t\tif ( json.inputNodes !== undefined ) {\r\n\r\n\t\t\tconst nodes = json.meta.nodes;\r\n\r\n\t\t\tfor ( const property in json.inputNodes ) {\r\n\r\n\t\t\t\tif ( Array.isArray( json.inputNodes[ property ] ) ) {\r\n\r\n\t\t\t\t\tconst inputArray = [];\r\n\r\n\t\t\t\t\tfor ( const uuid of json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tinputArray.push( nodes[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputArray;\r\n\r\n\t\t\t\t} else if ( typeof json.inputNodes[ property ] === 'object' ) {\r\n\r\n\t\t\t\t\tconst inputObject = {};\r\n\r\n\t\t\t\t\tfor ( const subProperty in json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tconst uuid = json.inputNodes[ property ][ subProperty ];\r\n\r\n\t\t\t\t\t\tinputObject[ subProperty ] = nodes[ uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputObject;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst uuid = json.inputNodes[ property ];\r\n\r\n\t\t\t\t\tthis[ property ] = nodes[ uuid ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst { uuid, type } = this;\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\r\n\t\tlet data = meta.nodes[ uuid ];\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tdata = {\r\n\t\t\t\tuuid,\r\n\t\t\t\ttype,\r\n\t\t\t\tmeta,\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.6,\r\n\t\t\t\t\ttype: 'Node',\r\n\t\t\t\t\tgenerator: 'Node.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif ( isRoot !== true ) meta.nodes[ data.uuid ] = data;\r\n\r\n\t\t\tthis.serialize( data );\r\n\r\n\t\t\tdelete data.meta;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Node;\r\n", "import Node from '../core/Node.js';\r\n\r\nclass ArrayElementNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ArrayElementNode';\r\n\r\n\t} // @TODO: If extending from TempNode it breaks webgpu_compute\r\n\r\n\tconstructor( node, indexNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.indexNode = indexNode;\r\n\r\n\t\tthis.isArrayElementNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getElementType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeSnippet = this.node.build( builder );\r\n\t\tconst indexSnippet = this.indexNode.build( builder, 'uint' );\r\n\r\n\t\treturn `${nodeSnippet}[ ${indexSnippet} ]`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ArrayElementNode;\r\n", "import Node from '../core/Node.js';\r\n\r\nclass ConvertNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ConvertNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, convertTo ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.convertTo = convertTo;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst requestType = this.node.getNodeType( builder );\r\n\r\n\t\tlet convertTo = null;\r\n\r\n\t\tfor ( const overloadingType of this.convertTo.split( '|' ) ) {\r\n\r\n\t\t\tif ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {\r\n\r\n\t\t\t\tconvertTo = overloadingType;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn convertTo;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.convertTo = this.convertTo;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.convertTo = data.convertTo;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst snippet = node.build( builder, type );\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConvertNode;\r\n", "import Node from './Node.js';\r\n\r\nclass TempNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TempNode';\r\n\r\n\t}\r\n\r\n\tconstructor( type ) {\r\n\r\n\t\tsuper( type );\r\n\r\n\t\tthis.isTempNode = true;\r\n\r\n\t}\r\n\r\n\thasDependencies( builder ) {\r\n\r\n\t\treturn builder.getDataFromNode( this ).usageCount > 1;\r\n\r\n\t}\r\n\r\n\tbuild( builder, output ) {\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tif ( nodeData.propertyName !== undefined ) {\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t} else if ( type !== 'void' && output !== 'void' && this.hasDependencies( builder ) ) {\r\n\r\n\t\t\t\tconst snippet = super.build( builder, type );\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, null, type );\r\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}`, this );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn super.build( builder, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TempNode;\r\n", "import TempNode from '../core/TempNode.js';\r\n\r\nclass JoinNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'JoinNode';\r\n\r\n\t}\r\n\r\n\tconstructor( nodes = [], nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.nodes = nodes;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.nodeType !== null ) {\r\n\r\n\t\t\treturn builder.getVectorType( this.nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst nodes = this.nodes;\r\n\r\n\t\tconst primitiveType = builder.getComponentType( type );\r\n\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( const input of nodes ) {\r\n\r\n\t\t\tlet inputSnippet = input.build( builder );\r\n\r\n\t\t\tconst inputPrimitiveType = builder.getComponentType( input.getNodeType( builder ) );\r\n\r\n\t\t\tif ( inputPrimitiveType !== primitiveType ) {\r\n\r\n\t\t\t\tinputSnippet = builder.format( inputSnippet, inputPrimitiveType, primitiveType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsnippetValues.push( inputSnippet );\r\n\r\n\t\t}\r\n\r\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default JoinNode;\r\n", "import Node from '../core/Node.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nconst stringVectorComponents = vectorComponents.join( '' );\r\n\r\nclass SplitNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SplitNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, components = 'x' ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.components = components;\r\n\r\n\t\tthis.isSplitNode = true;\r\n\r\n\t}\r\n\r\n\tgetVectorLength() {\r\n\r\n\t\tlet vectorLength = this.components.length;\r\n\r\n\t\tfor ( const c of this.components ) {\r\n\r\n\t\t\tvectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );\r\n\r\n\t\t}\r\n\r\n\t\treturn vectorLength;\r\n\r\n\t}\r\n\r\n\tgetComponentType( builder ) {\r\n\r\n\t\treturn builder.getComponentType( this.node.getNodeType( builder ) );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.getTypeFromLength( this.components.length, this.getComponentType( builder ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\r\n\r\n\t\tlet snippet = null;\r\n\r\n\t\tif ( nodeTypeLength > 1 ) {\r\n\r\n\t\t\tlet type = null;\r\n\r\n\t\t\tconst componentsLength = this.getVectorLength();\r\n\r\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\r\n\r\n\t\t\t\t// needed expand the input node\r\n\r\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength(), this.getComponentType( builder ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeSnippet = node.build( builder, type );\r\n\r\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice( 0, this.components.length ) ) {\r\n\r\n\t\t\t\t// unnecessary swizzle\r\n\r\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// ignore .components if .node returns float/integer\r\n\r\n\t\t\tsnippet = node.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.components = this.components;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.components = data.components;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SplitNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nclass SetNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SetNode';\r\n\r\n\t}\r\n\r\n\tconstructor( sourceNode, components, targetNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.sourceNode = sourceNode;\r\n\t\tthis.components = components;\r\n\t\tthis.targetNode = targetNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.sourceNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { sourceNode, components, targetNode } = this;\r\n\r\n\t\tconst sourceType = this.getNodeType( builder );\r\n\t\tconst targetType = builder.getTypeFromLength( components.length, targetNode.getNodeType( builder ) );\r\n\r\n\t\tconst targetSnippet = targetNode.build( builder, targetType );\r\n\t\tconst sourceSnippet = sourceNode.build( builder, sourceType );\r\n\r\n\t\tconst length = builder.getTypeLength( sourceType );\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tconst component = vectorComponents[ i ];\r\n\r\n\t\t\tif ( component === components[ 0 ] ) {\r\n\r\n\t\t\t\tsnippetValues.push( targetSnippet );\r\n\r\n\t\t\t\ti += components.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippetValues.push( sourceSnippet + '.' + component );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SetNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nclass FlipNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FlipNode';\r\n\r\n\t}\r\n\r\n\tconstructor( sourceNode, components ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.sourceNode = sourceNode;\r\n\t\tthis.components = components;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.sourceNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { components, sourceNode } = this;\r\n\r\n\t\tconst sourceType = this.getNodeType( builder );\r\n\t\tconst sourceSnippet = sourceNode.build( builder );\r\n\r\n\t\tconst sourceCache = builder.getVarFromNode( this );\r\n\t\tconst sourceProperty = builder.getPropertyName( sourceCache );\r\n\r\n\t\tbuilder.addLineFlowCode( sourceProperty + ' = ' + sourceSnippet, this );\r\n\r\n\t\tconst length = builder.getTypeLength( sourceType );\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tlet componentIndex = 0;\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tconst component = vectorComponents[ i ];\r\n\r\n\t\t\tif ( component === components[ componentIndex ] ) {\r\n\r\n\t\t\t\tsnippetValues.push( '1.0 - ' + ( sourceProperty + '.' + component ) );\r\n\r\n\t\t\t\tcomponentIndex ++;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippetValues.push( sourceProperty + '.' + component );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FlipNode;\r\n", "import Node from './Node.js';\r\nimport { getValueType, getValueFromType, arrayBufferToBase64 } from './NodeUtils.js';\r\n\r\nclass InputNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'InputNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.isInputNode = true;\r\n\r\n\t\tthis.value = value;\r\n\t\tthis.precision = null;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.nodeType === null ) {\r\n\r\n\t\t\treturn getValueType( this.value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tgetInputType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetPrecision( precision ) {\r\n\r\n\t\tthis.precision = precision;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value;\r\n\r\n\t\tif ( this.value && this.value.toArray ) data.value = this.value.toArray();\r\n\r\n\t\tdata.valueType = getValueType( this.value );\r\n\t\tdata.nodeType = this.nodeType;\r\n\r\n\t\tif ( data.valueType === 'ArrayBuffer' ) data.value = arrayBufferToBase64( data.value );\r\n\r\n\t\tdata.precision = this.precision;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.nodeType = data.nodeType;\r\n\t\tthis.value = Array.isArray( data.value ) ? getValueFromType( data.valueType, ...data.value ) : data.value;\r\n\r\n\t\tthis.precision = data.precision || null;\r\n\r\n\t\tif ( this.value && this.value.fromArray ) this.value = this.value.fromArray( data.value );\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder, output*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InputNode;\r\n", "import InputNode from './InputNode.js';\r\n\r\nclass ConstNode extends InputNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ConstNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( value, nodeType );\r\n\r\n\t\tthis.isConstNode = true;\r\n\r\n\t}\r\n\r\n\tgenerateConst( builder ) {\r\n\r\n\t\treturn builder.generateConst( this.getNodeType( builder ), this.value );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\treturn builder.format( this.generateConst( builder ), type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConstNode;\r\n", "import Node from '../core/Node.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport ConvertNode from '../utils/ConvertNode.js';\r\nimport JoinNode from '../utils/JoinNode.js';\r\nimport SplitNode from '../utils/SplitNode.js';\r\nimport SetNode from '../utils/SetNode.js';\r\nimport FlipNode from '../utils/FlipNode.js';\r\nimport ConstNode from '../core/ConstNode.js';\r\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\r\n\r\n//\r\n\r\nlet currentStack = null;\r\n\r\nconst NodeElements = new Map();\r\n\r\nexport function addMethodChaining( name, nodeElement ) {\r\n\r\n\tif ( NodeElements.has( name ) ) {\r\n\r\n\t\tconsole.warn( `Redefinition of method chaining ${ name }` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tif ( typeof nodeElement !== 'function' ) throw new Error( `Node element ${ name } is not a function` );\r\n\r\n\tNodeElements.set( name, nodeElement );\r\n\r\n}\r\n\r\nconst parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );\r\nconst parseSwizzleAndSort = ( props ) => parseSwizzle( props ).split( '' ).sort().join( '' );\r\n\r\nconst shaderNodeHandler = {\r\n\r\n\tsetup( NodeClosure, params ) {\r\n\r\n\t\tconst inputs = params.shift();\r\n\r\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\r\n\r\n\t},\r\n\r\n\tget( node, prop, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\tif ( node.isStackNode !== true && prop === 'assign' ) {\r\n\r\n\t\t\t\treturn ( ...params ) => {\r\n\r\n\t\t\t\t\tcurrentStack.assign( nodeObj, ...params );\r\n\r\n\t\t\t\t\treturn nodeObj;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( NodeElements.has( prop ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.add( nodeElement( ...params ) ) : ( ...params ) => nodeElement( nodeObj, ...params );\r\n\r\n\t\t\t} else if ( prop === 'self' ) {\r\n\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.assign( params[ 0 ], nodeElement( ...params ) ) : ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );\r\n\r\n\t\t\t} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing properties ( swizzle )\r\n\r\n\t\t\t\tprop = parseSwizzle( prop );\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( nodeObj, prop ) );\r\n\r\n\t\t\t} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// set properties ( swizzle ) and sort to xyzw sequence\r\n\r\n\t\t\t\tprop = parseSwizzleAndSort( prop.slice( 3 ).toLowerCase() );\r\n\r\n\t\t\t\treturn ( value ) => nodeObject( new SetNode( node, prop, value ) );\r\n\r\n\t\t\t} else if ( /^flip[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// set properties ( swizzle ) and sort to xyzw sequence\r\n\r\n\t\t\t\tprop = parseSwizzleAndSort( prop.slice( 4 ).toLowerCase() );\r\n\r\n\t\t\t\treturn () => nodeObject( new FlipNode( nodeObject( node ), prop ) );\r\n\r\n\t\t\t} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {\r\n\r\n\t\t\t\t// accessing property\r\n\r\n\t\t\t\tif ( prop === 'width' ) prop = 'x';\r\n\t\t\t\telse if ( prop === 'height' ) prop = 'y';\r\n\t\t\t\telse if ( prop === 'depth' ) prop = 'z';\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\r\n\r\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing array\r\n\r\n\t\t\t\treturn nodeObject( new ArrayElementNode( nodeObj, new ConstNode( Number( prop ), 'uint' ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.get( node, prop, nodeObj );\r\n\r\n\t},\r\n\r\n\tset( node, prop, value, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\t// setting properties\r\n\r\n\t\t\tif ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\tnodeObj[ prop ].assign( value );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.set( node, prop, value, nodeObj );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst nodeObjectsCacheMap = new WeakMap();\r\nconst nodeBuilderFunctionsCacheMap = new WeakMap();\r\n\r\nconst ShaderNodeObject = function ( obj, altType = null ) {\r\n\r\n\tconst type = getValueType( obj );\r\n\r\n\tif ( type === 'node' ) {\r\n\r\n\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\r\n\r\n\t\tif ( nodeObject === undefined ) {\r\n\r\n\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\r\n\r\n\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\r\n\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeObject;\r\n\r\n\t} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {\r\n\r\n\t\treturn nodeObject( getConstNode( obj, altType ) );\r\n\r\n\t} else if ( type === 'shader' ) {\r\n\r\n\t\treturn Fn( obj );\r\n\r\n\t}\r\n\r\n\treturn obj;\r\n\r\n};\r\n\r\nconst ShaderNodeObjects = function ( objects, altType = null ) {\r\n\r\n\tfor ( const name in objects ) {\r\n\r\n\t\tobjects[ name ] = nodeObject( objects[ name ], altType );\r\n\r\n\t}\r\n\r\n\treturn objects;\r\n\r\n};\r\n\r\nconst ShaderNodeArray = function ( array, altType = null ) {\r\n\r\n\tconst len = array.length;\r\n\r\n\tfor ( let i = 0; i < len; i ++ ) {\r\n\r\n\t\tarray[ i ] = nodeObject( array[ i ], altType );\r\n\r\n\t}\r\n\r\n\treturn array;\r\n\r\n};\r\n\r\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {\r\n\r\n\tconst assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );\r\n\r\n\tif ( scope === null ) {\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( ...nodeArray( params ) ) );\r\n\r\n\t\t};\r\n\r\n\t} else if ( factor !== null ) {\r\n\r\n\t\tfactor = nodeObject( factor );\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ), factor ) );\r\n\r\n\t\t};\r\n\r\n\t} else {\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ) ) );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\r\n\r\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\r\n\r\n};\r\n\r\nclass ShaderCallNodeInternal extends Node {\r\n\r\n\tconstructor( shaderNode, inputNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.shaderNode = shaderNode;\r\n\t\tthis.inputNodes = inputNodes;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.shaderNode.nodeType || this.getOutputNode( builder ).getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tcall( builder ) {\r\n\r\n\t\tconst { shaderNode, inputNodes } = this;\r\n\r\n\t\tconst properties = builder.getNodeProperties( shaderNode );\r\n\t\tif ( properties.onceOutput ) return properties.onceOutput;\r\n\r\n\t\t//\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tif ( shaderNode.layout ) {\r\n\r\n\t\t\tlet functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get( builder.constructor );\r\n\r\n\t\t\tif ( functionNodesCacheMap === undefined ) {\r\n\r\n\t\t\t\tfunctionNodesCacheMap = new WeakMap();\r\n\r\n\t\t\t\tnodeBuilderFunctionsCacheMap.set( builder.constructor, functionNodesCacheMap );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet functionNode = functionNodesCacheMap.get( shaderNode );\r\n\r\n\t\t\tif ( functionNode === undefined ) {\r\n\r\n\t\t\t\tfunctionNode = nodeObject( builder.buildFunctionNode( shaderNode ) );\r\n\r\n\t\t\t\tfunctionNodesCacheMap.set( shaderNode, functionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( builder.currentFunctionNode !== null ) {\r\n\r\n\t\t\t\tbuilder.currentFunctionNode.includes.push( functionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult = nodeObject( functionNode.call( inputNodes ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst jsFunc = shaderNode.jsFunc;\r\n\t\t\tconst outputNode = inputNodes !== null ? jsFunc( inputNodes, builder ) : jsFunc( builder );\r\n\r\n\t\t\tresult = nodeObject( outputNode );\r\n\r\n\t\t}\r\n\r\n\t\tif ( shaderNode.once ) {\r\n\r\n\t\t\tproperties.onceOutput = result;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgetOutputNode( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.outputNode === null ) {\r\n\r\n\t\t\tproperties.outputNode = this.setupOutput( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.outputNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\treturn this.getOutputNode( builder );\r\n\r\n\t}\r\n\r\n\tsetupOutput( builder ) {\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tbuilder.stack.outputNode = this.call( builder );\r\n\r\n\t\treturn builder.removeStack();\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst outputNode = this.getOutputNode( builder );\r\n\r\n\t\treturn outputNode.build( builder, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ShaderNodeInternal extends Node {\r\n\r\n\tconstructor( jsFunc, nodeType ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.jsFunc = jsFunc;\r\n\t\tthis.layout = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tthis.once = false;\r\n\r\n\t}\r\n\r\n\tsetLayout( layout ) {\r\n\r\n\t\tthis.layout = layout;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcall( inputs = null ) {\r\n\r\n\t\tnodeObjects( inputs );\r\n\r\n\t\treturn nodeObject( new ShaderCallNodeInternal( this, inputs ) );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.call();\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst bools = [ false, true ];\r\nconst uints = [ 0, 1, 2, 3 ];\r\nconst ints = [ - 1, - 2 ];\r\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\r\n\r\nconst boolsCacheMap = new Map();\r\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\r\n\r\nconst uintsCacheMap = new Map();\r\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\r\n\r\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\r\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\r\n\r\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\r\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\r\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\r\n\r\nconst cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\r\n\r\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\r\n\r\nconst getConstNode = ( value, type ) => {\r\n\r\n\tif ( constNodesCacheMap.has( value ) ) {\r\n\r\n\t\treturn constNodesCacheMap.get( value );\r\n\r\n\t} else if ( value.isNode === true ) {\r\n\r\n\t\treturn value;\r\n\r\n\t} else {\r\n\r\n\t\treturn new ConstNode( value, type );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst safeGetNodeType = ( node ) => {\r\n\r\n\ttry {\r\n\r\n\t\treturn node.getNodeType();\r\n\r\n\t} catch ( _ ) {\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst ConvertType = function ( type, cacheMap = null ) {\r\n\r\n\treturn ( ...params ) => {\r\n\r\n\t\tif ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {\r\n\r\n\t\t\tparams = [ getValueFromType( type, ...params ) ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\r\n\r\n\t\t\treturn nodeObject( cacheMap.get( params[ 0 ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 ) {\r\n\r\n\t\t\tconst node = getConstNode( params[ 0 ], type );\r\n\t\t\tif ( safeGetNodeType( node ) === type ) return nodeObject( node );\r\n\t\t\treturn nodeObject( new ConvertNode( node, type ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodes = params.map( param => getConstNode( param ) );\r\n\t\treturn nodeObject( new JoinNode( nodes, type ) );\r\n\r\n\t};\r\n\r\n};\r\n\r\n// exports\r\n\r\nexport const defined = ( v ) => typeof v === 'object' && v !== null ? v.value : v; // TODO: remove boolean conversion and defined function\r\n\r\n// utils\r\n\r\nexport const getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;\r\n\r\n// shader node base\r\n\r\nexport function ShaderNode( jsFunc, nodeType ) {\r\n\r\n\treturn new Proxy( new ShaderNodeInternal( jsFunc, nodeType ), shaderNodeHandler );\r\n\r\n}\r\n\r\nexport const nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );\r\nexport const nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );\r\nexport const nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );\r\nexport const nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );\r\nexport const nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );\r\n\r\nexport const Fn = ( jsFunc, nodeType ) => {\r\n\r\n\tconst shaderNode = new ShaderNode( jsFunc, nodeType );\r\n\r\n\tconst fn = ( ...params ) => {\r\n\r\n\t\tlet inputs;\r\n\r\n\t\tnodeObjects( params );\r\n\r\n\t\tif ( params[ 0 ] && params[ 0 ].isNode ) {\r\n\r\n\t\t\tinputs = [ ...params ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tinputs = params[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn shaderNode.call( inputs );\r\n\r\n\t};\r\n\r\n\tfn.shaderNode = shaderNode;\r\n\r\n\tfn.setLayout = ( layout ) => {\r\n\r\n\t\tshaderNode.setLayout( layout );\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\tfn.once = () => {\r\n\r\n\t\tshaderNode.once = true;\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\treturn fn;\r\n\r\n};\r\n\r\nexport const tslFn = ( ...params ) => { // @deprecated, r168\r\n\r\n\tconsole.warn( 'TSL.ShaderNode: tslFn() has been renamed to Fn().' );\r\n\treturn Fn( ...params );\r\n\r\n};\r\n\r\n//\r\n\r\naddMethodChaining( 'toGlobal', ( node ) => {\r\n\r\n\tnode.global = true;\r\n\r\n\treturn node;\r\n\r\n} );\r\n\r\n//\r\n\r\nexport const setCurrentStack = ( stack ) => {\r\n\r\n\tif ( currentStack === stack ) {\r\n\r\n\t\t//throw new Error( 'Stack already defined.' );\r\n\r\n\t}\r\n\r\n\tcurrentStack = stack;\r\n\r\n};\r\n\r\nexport const getCurrentStack = () => currentStack;\r\n\r\nexport const If = ( ...params ) => currentStack.If( ...params );\r\n\r\nexport function append( node ) {\r\n\r\n\tif ( currentStack ) currentStack.add( node );\r\n\r\n\treturn node;\r\n\r\n}\r\n\r\naddMethodChaining( 'append', append );\r\n\r\n// types\r\n\r\nexport const color = new ConvertType( 'color' );\r\n\r\nexport const float = new ConvertType( 'float', cacheMaps.float );\r\nexport const int = new ConvertType( 'int', cacheMaps.ints );\r\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\r\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\r\n\r\nexport const vec2 = new ConvertType( 'vec2' );\r\nexport const ivec2 = new ConvertType( 'ivec2' );\r\nexport const uvec2 = new ConvertType( 'uvec2' );\r\nexport const bvec2 = new ConvertType( 'bvec2' );\r\n\r\nexport const vec3 = new ConvertType( 'vec3' );\r\nexport const ivec3 = new ConvertType( 'ivec3' );\r\nexport const uvec3 = new ConvertType( 'uvec3' );\r\nexport const bvec3 = new ConvertType( 'bvec3' );\r\n\r\nexport const vec4 = new ConvertType( 'vec4' );\r\nexport const ivec4 = new ConvertType( 'ivec4' );\r\nexport const uvec4 = new ConvertType( 'uvec4' );\r\nexport const bvec4 = new ConvertType( 'bvec4' );\r\n\r\nexport const mat2 = new ConvertType( 'mat2' );\r\nexport const mat3 = new ConvertType( 'mat3' );\r\nexport const mat4 = new ConvertType( 'mat4' );\r\n\r\nexport const string = ( value = '' ) => nodeObject( new ConstNode( value, 'string' ) );\r\nexport const arrayBuffer = ( value ) => nodeObject( new ConstNode( value, 'ArrayBuffer' ) );\r\n\r\naddMethodChaining( 'toColor', color );\r\naddMethodChaining( 'toFloat', float );\r\naddMethodChaining( 'toInt', int );\r\naddMethodChaining( 'toUint', uint );\r\naddMethodChaining( 'toBool', bool );\r\naddMethodChaining( 'toVec2', vec2 );\r\naddMethodChaining( 'toIVec2', ivec2 );\r\naddMethodChaining( 'toUVec2', uvec2 );\r\naddMethodChaining( 'toBVec2', bvec2 );\r\naddMethodChaining( 'toVec3', vec3 );\r\naddMethodChaining( 'toIVec3', ivec3 );\r\naddMethodChaining( 'toUVec3', uvec3 );\r\naddMethodChaining( 'toBVec3', bvec3 );\r\naddMethodChaining( 'toVec4', vec4 );\r\naddMethodChaining( 'toIVec4', ivec4 );\r\naddMethodChaining( 'toUVec4', uvec4 );\r\naddMethodChaining( 'toBVec4', bvec4 );\r\naddMethodChaining( 'toMat2', mat2 );\r\naddMethodChaining( 'toMat3', mat3 );\r\naddMethodChaining( 'toMat4', mat4 );\r\n\r\n// basic nodes\r\n\r\nexport const element = /*@__PURE__*/ nodeProxy( ArrayElementNode );\r\nexport const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\r\nexport const split = ( node, channels ) => nodeObject( new SplitNode( nodeObject( node ), channels ) );\r\n\r\naddMethodChaining( 'element', element );\r\naddMethodChaining( 'convert', convert );\r\n", "import Node from './Node.js';\r\n\r\nclass UniformGroupNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformGroupNode';\r\n\r\n\t}\r\n\r\n\tconstructor( name, shared = false, order = 1 ) {\r\n\r\n\t\tsuper( 'string' );\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis.shared = shared;\r\n\t\tthis.order = order;\r\n\t\tthis.isUniformGroup = true;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.name = this.name;\r\n\t\tdata.version = this.version;\r\n\t\tdata.shared = this.shared;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.name = data.name;\r\n\t\tthis.version = data.version;\r\n\t\tthis.shared = data.shared;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformGroupNode;\r\n\r\nexport const uniformGroup = ( name ) => new UniformGroupNode( name );\r\nexport const sharedUniformGroup = ( name, order = 0 ) => new UniformGroupNode( name, true, order );\r\n\r\nexport const frameGroup = /*@__PURE__*/ sharedUniformGroup( 'frame' );\r\nexport const renderGroup = /*@__PURE__*/ sharedUniformGroup( 'render' );\r\nexport const objectGroup = /*@__PURE__*/ uniformGroup( 'object' );\r\n", "import InputNode from './InputNode.js';\r\nimport { objectGroup } from './UniformGroupNode.js';\r\nimport { nodeObject, getConstNodeType } from '../tsl/TSLCore.js';\r\n\r\nclass UniformNode extends InputNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( value, nodeType );\r\n\r\n\t\tthis.isUniformNode = true;\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.groupNode = objectGroup;\r\n\r\n\t}\r\n\r\n\tlabel( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetGroup( group ) {\r\n\r\n\t\tthis.groupNode = group;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetGroup() {\r\n\r\n\t\treturn this.groupNode;\r\n\r\n\t}\r\n\r\n\tgetUniformHash( builder ) {\r\n\r\n\t\treturn this.getHash( builder );\r\n\r\n\t}\r\n\r\n\tonUpdate( callback, updateType ) {\r\n\r\n\t\tconst self = this.getSelf();\r\n\r\n\t\tcallback = callback.bind( self );\r\n\r\n\t\treturn super.onUpdate( ( frame ) => {\r\n\r\n\t\t\tconst value = callback( frame, self );\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\tthis.value = value;\r\n\r\n\t\t\t}\r\n\r\n\t \t}, updateType );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst hash = this.getUniformHash( builder );\r\n\r\n\t\tlet sharedNode = builder.getNodeFromHash( hash );\r\n\r\n\t\tif ( sharedNode === undefined ) {\r\n\r\n\t\t\tbuilder.setHashNode( this, hash );\r\n\r\n\t\t\tsharedNode = this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sharedNodeType = sharedNode.getInputType( builder );\r\n\r\n\t\tconst nodeUniform = builder.getUniformFromNode( sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label );\r\n\t\tconst propertyName = builder.getPropertyName( nodeUniform );\r\n\r\n\t\tif ( builder.context.label !== undefined ) delete builder.context.label;\r\n\r\n\t\treturn builder.format( propertyName, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformNode;\r\n\r\nexport const uniform = ( arg1, arg2 ) => {\r\n\r\n\tconst nodeType = getConstNodeType( arg2 || arg1 );\r\n\r\n\t// @TODO: get ConstNode from .traverse() in the future\r\n\tconst value = ( arg1 && arg1.isNode === true ) ? ( arg1.node && arg1.node.value ) || arg1.value : arg1;\r\n\r\n\treturn nodeObject( new UniformNode( value, nodeType ) );\r\n\r\n};\r\n", "import Node from './Node.js';\r\nimport { nodeImmutable, nodeObject } from '../tsl/TSLCore.js';\r\n\r\nclass PropertyNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PropertyNode';\r\n\r\n\t}\r\n\r\n\tconstructor( nodeType, name = null, varying = false ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.varying = varying;\r\n\r\n\t\tthis.isPropertyNode = true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tisGlobal( /*builder*/ ) {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tlet nodeVar;\r\n\r\n\t\tif ( this.varying === true ) {\r\n\r\n\t\t\tnodeVar = builder.getVaryingFromNode( this, this.name );\r\n\t\t\tnodeVar.needsInterpolation = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnodeVar = builder.getVarFromNode( this, this.name );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getPropertyName( nodeVar );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PropertyNode;\r\n\r\nexport const property = ( type, name ) => nodeObject( new PropertyNode( type, name ) );\r\nexport const varyingProperty = ( type, name ) => nodeObject( new PropertyNode( type, name, true ) );\r\n\r\nexport const diffuseColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'DiffuseColor' );\r\nexport const emissive = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'EmissiveColor' );\r\nexport const roughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Roughness' );\r\nexport const metalness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Metalness' );\r\nexport const clearcoat = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Clearcoat' );\r\nexport const clearcoatRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'ClearcoatRoughness' );\r\nexport const sheen = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'Sheen' );\r\nexport const sheenRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SheenRoughness' );\r\nexport const iridescence = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Iridescence' );\r\nexport const iridescenceIOR = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceIOR' );\r\nexport const iridescenceThickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceThickness' );\r\nexport const alphaT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AlphaT' );\r\nexport const anisotropy = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Anisotropy' );\r\nexport const anisotropyT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyT' );\r\nexport const anisotropyB = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyB' );\r\nexport const specularColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'SpecularColor' );\r\nexport const specularF90 = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SpecularF90' );\r\nexport const shininess = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Shininess' );\r\nexport const output = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'Output' );\r\nexport const dashSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'dashSize' );\r\nexport const gapSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'gapSize' );\r\nexport const pointWidth = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'pointWidth' );\r\nexport const ior = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IOR' );\r\nexport const transmission = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Transmission' );\r\nexport const thickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Thickness' );\r\nexport const attenuationDistance = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AttenuationDistance' );\r\nexport const attenuationColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'AttenuationColor' );\r\nexport const dispersion = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Dispersion' );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nclass AssignNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AssignNode';\r\n\r\n\t}\r\n\r\n\tconstructor( targetNode, sourceNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.targetNode = targetNode;\r\n\t\tthis.sourceNode = sourceNode;\r\n\r\n\t}\r\n\r\n\thasDependencies() {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder, output ) {\r\n\r\n\t\treturn output !== 'void' ? this.targetNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tneedsSplitAssign( builder ) {\r\n\r\n\t\tconst { targetNode } = this;\r\n\r\n\t\tif ( builder.isAvailable( 'swizzleAssign' ) === false && targetNode.isSplitNode && targetNode.components.length > 1 ) {\r\n\r\n\t\t\tconst targetLength = builder.getTypeLength( targetNode.node.getNodeType( builder ) );\r\n\t\t\tconst assignDiferentVector = vectorComponents.join( '' ).slice( 0, targetLength ) !== targetNode.components;\r\n\r\n\t\t\treturn assignDiferentVector;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { targetNode, sourceNode } = this;\r\n\r\n\t\tconst needsSplitAssign = this.needsSplitAssign( builder );\r\n\r\n\t\tconst targetType = targetNode.getNodeType( builder );\r\n\r\n\t\tconst target = targetNode.context( { assign: true } ).build( builder );\r\n\t\tconst source = sourceNode.build( builder, targetType );\r\n\r\n\t\tconst sourceType = sourceNode.getNodeType( builder );\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t//\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( nodeData.initialized === true ) {\r\n\r\n\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\tsnippet = target;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( needsSplitAssign ) {\r\n\r\n\t\t\tconst sourceVar = builder.getVarFromNode( this, null, targetType );\r\n\t\t\tconst sourceProperty = builder.getPropertyName( sourceVar );\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${ sourceProperty } = ${ source }`, this );\r\n\r\n\t\t\tconst targetRoot = targetNode.node.context( { assign: true } ).build( builder );\r\n\r\n\t\t\tfor ( let i = 0; i < targetNode.components.length; i ++ ) {\r\n\r\n\t\t\t\tconst component = targetNode.components[ i ];\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${ targetRoot }.${ component } = ${ sourceProperty }[ ${ i } ]`, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\tsnippet = target;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = `${ target } = ${ source }`;\r\n\r\n\t\t\tif ( output === 'void' || sourceType === 'void' ) {\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\t\tsnippet = target;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnodeData.initialized = true;\r\n\r\n\t\treturn builder.format( snippet, targetType, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AssignNode;\r\n\r\nexport const assign = /*@__PURE__*/ nodeProxy( AssignNode );\r\n\r\naddMethodChaining( 'assign', assign );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeArray, nodeObject, nodeObjects } from '../tsl/TSLCore.js';\r\n\r\nclass FunctionCallNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FunctionCallNode';\r\n\r\n\t}\r\n\r\n\tconstructor( functionNode = null, parameters = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.functionNode = functionNode;\r\n\t\tthis.parameters = parameters;\r\n\r\n\t}\r\n\r\n\tsetParameters( parameters ) {\r\n\r\n\t\tthis.parameters = parameters;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetParameters() {\r\n\r\n\t\treturn this.parameters;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.functionNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst params = [];\r\n\r\n\t\tconst functionNode = this.functionNode;\r\n\r\n\t\tconst inputs = functionNode.getInputs( builder );\r\n\t\tconst parameters = this.parameters;\r\n\r\n\t\tif ( Array.isArray( parameters ) ) {\r\n\r\n\t\t\tfor ( let i = 0; i < parameters.length; i ++ ) {\r\n\r\n\t\t\t\tconst inputNode = inputs[ i ];\r\n\t\t\t\tconst node = parameters[ i ];\r\n\r\n\t\t\t\tparams.push( node.build( builder, inputNode.type ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( const inputNode of inputs ) {\r\n\r\n\t\t\t\tconst node = parameters[ inputNode.name ];\r\n\r\n\t\t\t\tif ( node !== undefined ) {\r\n\r\n\t\t\t\t\tparams.push( node.build( builder, inputNode.type ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( `FunctionCallNode: Input '${inputNode.name}' not found in FunctionNode.` );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst functionName = functionNode.build( builder, 'property' );\r\n\r\n\t\treturn `${functionName}( ${params.join( ', ' )} )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionCallNode;\r\n\r\nexport const call = ( func, ...params ) => {\r\n\r\n\tparams = params.length > 1 || ( params[ 0 ] && params[ 0 ].isNode === true ) ? nodeArray( params ) : nodeObjects( params[ 0 ] );\r\n\r\n\treturn nodeObject( new FunctionCallNode( nodeObject( func ), params ) );\r\n\r\n};\r\n\r\naddMethodChaining( 'call', call );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass OperatorNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'OperatorNode';\r\n\r\n\t}\r\n\r\n\tconstructor( op, aNode, bNode, ...params ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tif ( params.length > 0 ) {\r\n\r\n\t\t\tlet finalOp = new OperatorNode( op, aNode, bNode );\r\n\r\n\t\t\tfor ( let i = 0; i < params.length - 1; i ++ ) {\r\n\r\n\t\t\t\tfinalOp = new OperatorNode( op, finalOp, params[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taNode = finalOp;\r\n\t\t\tbNode = params[ params.length - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.op = op;\r\n\t\tthis.aNode = aNode;\r\n\t\tthis.bNode = bNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder, output ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst aNode = this.aNode;\r\n\t\tconst bNode = this.bNode;\r\n\r\n\t\tconst typeA = aNode.getNodeType( builder );\r\n\t\tconst typeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\tif ( typeA === 'void' || typeB === 'void' ) {\r\n\r\n\t\t\treturn 'void';\r\n\r\n\t\t} else if ( op === '%' ) {\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t} else if ( op === '~' || op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {\r\n\r\n\t\t\treturn builder.getIntegerType( typeA );\r\n\r\n\t\t} else if ( op === '!' || op === '==' || op === '&&' || op === '||' || op === '^^' ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' ) {\r\n\r\n\t\t\tconst typeLength = output ? builder.getTypeLength( output ) : Math.max( builder.getTypeLength( typeA ), builder.getTypeLength( typeB ) );\r\n\r\n\t\t\treturn typeLength > 1 ? `bvec${ typeLength }` : 'bool';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( typeA === 'float' && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\treturn typeB;\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t// matrix x vector\r\n\r\n\t\t\t\treturn builder.getVectorFromMatrix( typeA );\r\n\r\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t// vector x matrix\r\n\r\n\t\t\t\treturn builder.getVectorFromMatrix( typeB );\r\n\r\n\t\t\t} else if ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {\r\n\r\n\t\t\t\t// anytype x anytype: use the greater length vector\r\n\r\n\t\t\t\treturn typeB;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst aNode = this.aNode;\r\n\t\tconst bNode = this.bNode;\r\n\r\n\t\tconst type = this.getNodeType( builder, output );\r\n\r\n\t\tlet typeA = null;\r\n\t\tlet typeB = null;\r\n\r\n\t\tif ( type !== 'void' ) {\r\n\r\n\t\t\ttypeA = aNode.getNodeType( builder );\r\n\t\t\ttypeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\t\tif ( op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==' ) {\r\n\r\n\t\t\t\tif ( builder.isVector( typeA ) ) {\r\n\r\n\t\t\t\t\ttypeB = typeA;\r\n\r\n\t\t\t\t} else if ( typeA !== typeB ) {\r\n\r\n\t\t\t\t\ttypeA = typeB = 'float';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '>>' || op === '<<' ) {\r\n\r\n\t\t\t\ttypeA = type;\r\n\t\t\t\ttypeB = builder.changeComponentType( typeB, 'uint' );\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t// matrix x vector\r\n\r\n\t\t\t\ttypeB = builder.getVectorFromMatrix( typeA );\r\n\r\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t// vector x matrix\r\n\r\n\t\t\t\ttypeA = builder.getVectorFromMatrix( typeB );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// anytype x anytype\r\n\r\n\t\t\t\ttypeA = typeB = type;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttypeA = typeB = type;\r\n\r\n\t\t}\r\n\r\n\t\tconst a = aNode.build( builder, typeA );\r\n\t\tconst b = typeof bNode !== 'undefined' ? bNode.build( builder, typeB ) : null;\r\n\r\n\t\tconst outputLength = builder.getTypeLength( output );\r\n\t\tconst fnOpSnippet = builder.getFunctionOperator( op );\r\n\r\n\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\tif ( op === '<' && outputLength > 1 ) {\r\n\r\n\t\t\t\tif ( builder.useComparisonMethod ) {\r\n\r\n\t\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThan', output ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn builder.format( `( ${ a } < ${ b } )`, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '<=' && outputLength > 1 ) {\r\n\r\n\t\t\t\tif ( builder.useComparisonMethod ) {\r\n\r\n\t\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThanEqual', output ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn builder.format( `( ${ a } <= ${ b } )`, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '>' && outputLength > 1 ) {\r\n\r\n\t\t\t\tif ( builder.useComparisonMethod ) {\r\n\r\n\t\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThan', output ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn builder.format( `( ${ a } > ${ b } )`, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '>=' && outputLength > 1 ) {\r\n\r\n\t\t\t\tif ( builder.useComparisonMethod ) {\r\n\r\n\t\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThanEqual', output ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn builder.format( `( ${ a } >= ${ b } )`, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '!' || op === '~' ) {\r\n\r\n\t\t\t\treturn builder.format( `(${op}${a})`, typeA, output );\r\n\r\n\t\t\t} else if ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn builder.format( `( ${ a } ${ op } ${ b } )`, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( typeA !== 'void' ) {\r\n\r\n\t\t\tif ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn builder.format( `${ a } ${ op } ${ b }`, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.op = this.op;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.op = data.op;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default OperatorNode;\r\n\r\nexport const add = /*@__PURE__*/ nodeProxy( OperatorNode, '+' );\r\nexport const sub = /*@__PURE__*/ nodeProxy( OperatorNode, '-' );\r\nexport const mul = /*@__PURE__*/ nodeProxy( OperatorNode, '*' );\r\nexport const div = /*@__PURE__*/ nodeProxy( OperatorNode, '/' );\r\nexport const modInt = /*@__PURE__*/ nodeProxy( OperatorNode, '%' );\r\nexport const equal = /*@__PURE__*/ nodeProxy( OperatorNode, '==' );\r\nexport const notEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '!=' );\r\nexport const lessThan = /*@__PURE__*/ nodeProxy( OperatorNode, '<' );\r\nexport const greaterThan = /*@__PURE__*/ nodeProxy( OperatorNode, '>' );\r\nexport const lessThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '<=' );\r\nexport const greaterThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '>=' );\r\nexport const and = /*@__PURE__*/ nodeProxy( OperatorNode, '&&' );\r\nexport const or = /*@__PURE__*/ nodeProxy( OperatorNode, '||' );\r\nexport const not = /*@__PURE__*/ nodeProxy( OperatorNode, '!' );\r\nexport const xor = /*@__PURE__*/ nodeProxy( OperatorNode, '^^' );\r\nexport const bitAnd = /*@__PURE__*/ nodeProxy( OperatorNode, '&' );\r\nexport const bitNot = /*@__PURE__*/ nodeProxy( OperatorNode, '~' );\r\nexport const bitOr = /*@__PURE__*/ nodeProxy( OperatorNode, '|' );\r\nexport const bitXor = /*@__PURE__*/ nodeProxy( OperatorNode, '^' );\r\nexport const shiftLeft = /*@__PURE__*/ nodeProxy( OperatorNode, '<<' );\r\nexport const shiftRight = /*@__PURE__*/ nodeProxy( OperatorNode, '>>' );\r\n\r\naddMethodChaining( 'add', add );\r\naddMethodChaining( 'sub', sub );\r\naddMethodChaining( 'mul', mul );\r\naddMethodChaining( 'div', div );\r\naddMethodChaining( 'modInt', modInt );\r\naddMethodChaining( 'equal', equal );\r\naddMethodChaining( 'notEqual', notEqual );\r\naddMethodChaining( 'lessThan', lessThan );\r\naddMethodChaining( 'greaterThan', greaterThan );\r\naddMethodChaining( 'lessThanEqual', lessThanEqual );\r\naddMethodChaining( 'greaterThanEqual', greaterThanEqual );\r\naddMethodChaining( 'and', and );\r\naddMethodChaining( 'or', or );\r\naddMethodChaining( 'not', not );\r\naddMethodChaining( 'xor', xor );\r\naddMethodChaining( 'bitAnd', bitAnd );\r\naddMethodChaining( 'bitNot', bitNot );\r\naddMethodChaining( 'bitOr', bitOr );\r\naddMethodChaining( 'bitXor', bitXor );\r\naddMethodChaining( 'shiftLeft', shiftLeft );\r\naddMethodChaining( 'shiftRight', shiftRight );\r\n\r\n\r\nexport const remainder = ( ...params ) => { // @deprecated, r168\r\n\r\n\tconsole.warn( 'TSL.OperatorNode: .remainder() has been renamed to .modInt().' );\r\n\treturn modInt( ...params );\r\n\r\n};\r\n\r\naddMethodChaining( 'remainder', remainder );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { sub, mul, div } from './OperatorNode.js';\r\nimport { addMethodChaining, nodeObject, nodeProxy, float, vec2, vec3, vec4, Fn } from '../tsl/TSLCore.js';\r\n\r\nclass MathNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MathNode';\r\n\r\n\t}\r\n\r\n\tconstructor( method, aNode, bNode = null, cNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.method = method;\r\n\r\n\t\tthis.aNode = aNode;\r\n\t\tthis.bNode = bNode;\r\n\t\tthis.cNode = cNode;\r\n\r\n\t}\r\n\r\n\tgetInputType( builder ) {\r\n\r\n\t\tconst aType = this.aNode.getNodeType( builder );\r\n\t\tconst bType = this.bNode ? this.bNode.getNodeType( builder ) : null;\r\n\t\tconst cType = this.cNode ? this.cNode.getNodeType( builder ) : null;\r\n\r\n\t\tconst aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );\r\n\t\tconst bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );\r\n\t\tconst cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );\r\n\r\n\t\tif ( aLen > bLen && aLen > cLen ) {\r\n\r\n\t\t\treturn aType;\r\n\r\n\t\t} else if ( bLen > cLen ) {\r\n\r\n\t\t\treturn bType;\r\n\r\n\t\t} else if ( cLen > aLen ) {\r\n\r\n\t\t\treturn cType;\r\n\r\n\t\t}\r\n\r\n\t\treturn aType;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tif ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {\r\n\r\n\t\t\treturn 'float';\r\n\r\n\t\t} else if ( method === MathNode.CROSS ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t} else if ( method === MathNode.ALL ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( method === MathNode.EQUALS ) {\r\n\r\n\t\t\treturn builder.changeComponentType( this.aNode.getNodeType( builder ), 'bool' );\r\n\r\n\t\t} else if ( method === MathNode.MOD ) {\r\n\r\n\t\t\treturn this.aNode.getNodeType( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn this.getInputType( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst inputType = this.getInputType( builder );\r\n\r\n\t\tconst a = this.aNode;\r\n\t\tconst b = this.bNode;\r\n\t\tconst c = this.cNode;\r\n\r\n\t\tconst isWebGL = builder.renderer.isWebGLRenderer === true;\r\n\r\n\t\tif ( method === MathNode.TRANSFORM_DIRECTION ) {\r\n\r\n\t\t\t// dir can be either a direction vector or a normal vector\r\n\t\t\t// upper-left 3x3 of matrix is assumed to be orthogonal\r\n\r\n\t\t\tlet tA = a;\r\n\t\t\tlet tB = b;\r\n\r\n\t\t\tif ( builder.isMatrix( tA.getNodeType( builder ) ) ) {\r\n\r\n\t\t\t\ttB = vec4( vec3( tB ), 0.0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttA = vec4( vec3( tA ), 0.0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst mulNode = mul( tA, tB ).xyz;\r\n\r\n\t\t\treturn normalize( mulNode ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.NEGATE ) {\r\n\r\n\t\t\treturn builder.format( '( - ' + a.build( builder, inputType ) + ' )', type, output );\r\n\r\n\t\t} else if ( method === MathNode.ONE_MINUS ) {\r\n\r\n\t\t\treturn sub( 1.0, a ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.RECIPROCAL ) {\r\n\r\n\t\t\treturn div( 1.0, a ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.DIFFERENCE ) {\r\n\r\n\t\t\treturn abs( sub( a, b ) ).build( builder, output );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst params = [];\r\n\r\n\t\t\tif ( method === MathNode.CROSS || method === MathNode.MOD ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, type ),\r\n\t\t\t\t\tb.build( builder, type )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( isWebGL && method === MathNode.STEP ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),\r\n\t\t\t\t\tb.build( builder, inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( ( isWebGL && ( method === MathNode.MIN || method === MathNode.MAX ) ) || method === MathNode.MOD ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.REFRACT ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, 'float' )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.MIX ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tparams.push( a.build( builder, inputType ) );\r\n\t\t\t\tif ( b !== null ) params.push( b.build( builder, inputType ) );\r\n\t\t\t\tif ( c !== null ) params.push( c.build( builder, inputType ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.method = this.method;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.method = data.method;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// 1 input\r\n\r\nMathNode.ALL = 'all';\r\nMathNode.ANY = 'any';\r\nMathNode.EQUALS = 'equals';\r\n\r\nMathNode.RADIANS = 'radians';\r\nMathNode.DEGREES = 'degrees';\r\nMathNode.EXP = 'exp';\r\nMathNode.EXP2 = 'exp2';\r\nMathNode.LOG = 'log';\r\nMathNode.LOG2 = 'log2';\r\nMathNode.SQRT = 'sqrt';\r\nMathNode.INVERSE_SQRT = 'inversesqrt';\r\nMathNode.FLOOR = 'floor';\r\nMathNode.CEIL = 'ceil';\r\nMathNode.NORMALIZE = 'normalize';\r\nMathNode.FRACT = 'fract';\r\nMathNode.SIN = 'sin';\r\nMathNode.COS = 'cos';\r\nMathNode.TAN = 'tan';\r\nMathNode.ASIN = 'asin';\r\nMathNode.ACOS = 'acos';\r\nMathNode.ATAN = 'atan';\r\nMathNode.ABS = 'abs';\r\nMathNode.SIGN = 'sign';\r\nMathNode.LENGTH = 'length';\r\nMathNode.NEGATE = 'negate';\r\nMathNode.ONE_MINUS = 'oneMinus';\r\nMathNode.DFDX = 'dFdx';\r\nMathNode.DFDY = 'dFdy';\r\nMathNode.ROUND = 'round';\r\nMathNode.RECIPROCAL = 'reciprocal';\r\nMathNode.TRUNC = 'trunc';\r\nMathNode.FWIDTH = 'fwidth';\r\nMathNode.BITCAST = 'bitcast';\r\nMathNode.TRANSPOSE = 'transpose';\r\n\r\n// 2 inputs\r\n\r\nMathNode.ATAN2 = 'atan2';\r\nMathNode.MIN = 'min';\r\nMathNode.MAX = 'max';\r\nMathNode.MOD = 'mod';\r\nMathNode.STEP = 'step';\r\nMathNode.REFLECT = 'reflect';\r\nMathNode.DISTANCE = 'distance';\r\nMathNode.DIFFERENCE = 'difference';\r\nMathNode.DOT = 'dot';\r\nMathNode.CROSS = 'cross';\r\nMathNode.POW = 'pow';\r\nMathNode.TRANSFORM_DIRECTION = 'transformDirection';\r\n\r\n// 3 inputs\r\n\r\nMathNode.MIX = 'mix';\r\nMathNode.CLAMP = 'clamp';\r\nMathNode.REFRACT = 'refract';\r\nMathNode.SMOOTHSTEP = 'smoothstep';\r\nMathNode.FACEFORWARD = 'faceforward';\r\n\r\nexport default MathNode;\r\n\r\nexport const EPSILON = /*@__PURE__*/ float( 1e-6 );\r\nexport const INFINITY = /*@__PURE__*/ float( 1e6 );\r\nexport const PI = /*@__PURE__*/ float( Math.PI );\r\nexport const PI2 = /*@__PURE__*/ float( Math.PI * 2 );\r\n\r\nexport const all = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ALL );\r\nexport const any = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ANY );\r\nexport const equals = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EQUALS );\r\n\r\nexport const radians = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RADIANS );\r\nexport const degrees = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DEGREES );\r\nexport const exp = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP );\r\nexport const exp2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP2 );\r\nexport const log = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG );\r\nexport const log2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG2 );\r\nexport const sqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SQRT );\r\nexport const inverseSqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.INVERSE_SQRT );\r\nexport const floor = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FLOOR );\r\nexport const ceil = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CEIL );\r\nexport const normalize = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NORMALIZE );\r\nexport const fract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FRACT );\r\nexport const sin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIN );\r\nexport const cos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.COS );\r\nexport const tan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TAN );\r\nexport const asin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ASIN );\r\nexport const acos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ACOS );\r\nexport const atan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ATAN );\r\nexport const abs = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ABS );\r\nexport const sign = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIGN );\r\nexport const length = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LENGTH );\r\nexport const negate = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NEGATE );\r\nexport const oneMinus = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ONE_MINUS );\r\nexport const dFdx = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDX );\r\nexport const dFdy = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDY );\r\nexport const round = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ROUND );\r\nexport const reciprocal = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RECIPROCAL );\r\nexport const trunc = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRUNC );\r\nexport const fwidth = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FWIDTH );\r\nexport const bitcast = /*@__PURE__*/ nodeProxy( MathNode, MathNode.BITCAST );\r\nexport const transpose = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSPOSE );\r\n\r\nexport const atan2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ATAN2 );\r\nexport const min = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIN );\r\nexport const max = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MAX );\r\nexport const mod = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MOD );\r\nexport const step = /*@__PURE__*/ nodeProxy( MathNode, MathNode.STEP );\r\nexport const reflect = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFLECT );\r\nexport const distance = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DISTANCE );\r\nexport const difference = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DIFFERENCE );\r\nexport const dot = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DOT );\r\nexport const cross = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CROSS );\r\nexport const pow = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW );\r\nexport const pow2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 2 );\r\nexport const pow3 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 3 );\r\nexport const pow4 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 4 );\r\nexport const transformDirection = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION );\r\n\r\nexport const cbrt = ( a ) => mul( sign( a ), pow( abs( a ), 1.0 / 3.0 ) );\r\nexport const lengthSq = ( a ) => dot( a, a );\r\nexport const mix = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIX );\r\nexport const clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );\r\nexport const saturate = ( value ) => clamp( value );\r\nexport const refract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFRACT );\r\nexport const smoothstep = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SMOOTHSTEP );\r\nexport const faceForward = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FACEFORWARD );\r\n\r\nexport const rand = /*@__PURE__*/ Fn( ( [ uv ] ) => {\r\n\r\n\tconst a = 12.9898, b = 78.233, c = 43758.5453;\r\n\tconst dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\r\n\r\n\treturn fract( sin( sn ).mul( c ) );\r\n\r\n} );\r\n\r\nexport const mixElement = ( t, e1, e2 ) => mix( e1, e2, t );\r\nexport const smoothstepElement = ( x, low, high ) => smoothstep( low, high, x );\r\n\r\naddMethodChaining( 'all', all );\r\naddMethodChaining( 'any', any );\r\naddMethodChaining( 'equals', equals );\r\n\r\naddMethodChaining( 'radians', radians );\r\naddMethodChaining( 'degrees', degrees );\r\naddMethodChaining( 'exp', exp );\r\naddMethodChaining( 'exp2', exp2 );\r\naddMethodChaining( 'log', log );\r\naddMethodChaining( 'log2', log2 );\r\naddMethodChaining( 'sqrt', sqrt );\r\naddMethodChaining( 'inverseSqrt', inverseSqrt );\r\naddMethodChaining( 'floor', floor );\r\naddMethodChaining( 'ceil', ceil );\r\naddMethodChaining( 'normalize', normalize );\r\naddMethodChaining( 'fract', fract );\r\naddMethodChaining( 'sin', sin );\r\naddMethodChaining( 'cos', cos );\r\naddMethodChaining( 'tan', tan );\r\naddMethodChaining( 'asin', asin );\r\naddMethodChaining( 'acos', acos );\r\naddMethodChaining( 'atan', atan );\r\naddMethodChaining( 'abs', abs );\r\naddMethodChaining( 'sign', sign );\r\naddMethodChaining( 'length', length );\r\naddMethodChaining( 'lengthSq', lengthSq );\r\naddMethodChaining( 'negate', negate );\r\naddMethodChaining( 'oneMinus', oneMinus );\r\naddMethodChaining( 'dFdx', dFdx );\r\naddMethodChaining( 'dFdy', dFdy );\r\naddMethodChaining( 'round', round );\r\naddMethodChaining( 'reciprocal', reciprocal );\r\naddMethodChaining( 'trunc', trunc );\r\naddMethodChaining( 'fwidth', fwidth );\r\naddMethodChaining( 'atan2', atan2 );\r\naddMethodChaining( 'min', min );\r\naddMethodChaining( 'max', max );\r\naddMethodChaining( 'mod', mod );\r\naddMethodChaining( 'step', step );\r\naddMethodChaining( 'reflect', reflect );\r\naddMethodChaining( 'distance', distance );\r\naddMethodChaining( 'dot', dot );\r\naddMethodChaining( 'cross', cross );\r\naddMethodChaining( 'pow', pow );\r\naddMethodChaining( 'pow2', pow2 );\r\naddMethodChaining( 'pow3', pow3 );\r\naddMethodChaining( 'pow4', pow4 );\r\naddMethodChaining( 'transformDirection', transformDirection );\r\naddMethodChaining( 'mix', mixElement );\r\naddMethodChaining( 'clamp', clamp );\r\naddMethodChaining( 'refract', refract );\r\naddMethodChaining( 'smoothstep', smoothstepElement );\r\naddMethodChaining( 'faceForward', faceForward );\r\naddMethodChaining( 'difference', difference );\r\naddMethodChaining( 'saturate', saturate );\r\naddMethodChaining( 'cbrt', cbrt );\r\naddMethodChaining( 'transpose', transpose );\r\naddMethodChaining( 'rand', rand );\r\n", "import Node from '../core/Node.js';\r\nimport { property } from '../core/PropertyNode.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass ConditionalNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ConditionalNode';\r\n\r\n\t}\r\n\r\n\tconstructor( condNode, ifNode, elseNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.condNode = condNode;\r\n\r\n\t\tthis.ifNode = ifNode;\r\n\t\tthis.elseNode = elseNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst ifType = this.ifNode.getNodeType( builder );\r\n\r\n\t\tif ( this.elseNode !== null ) {\r\n\r\n\t\t\tconst elseType = this.elseNode.getNodeType( builder );\r\n\r\n\t\t\tif ( builder.getTypeLength( elseType ) > builder.getTypeLength( ifType ) ) {\r\n\r\n\t\t\t\treturn elseType;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn ifType;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst condNode = this.condNode.cache();\r\n\t\tconst ifNode = this.ifNode.cache();\r\n\t\tconst elseNode = this.elseNode ? this.elseNode.cache() : null;\r\n\r\n\t\t//\r\n\r\n\t\tconst currentNodeBlock = builder.context.nodeBlock;\r\n\r\n\t\tbuilder.getDataFromNode( ifNode ).parentNodeBlock = currentNodeBlock;\r\n\t\tif ( elseNode !== null ) builder.getDataFromNode( elseNode ).parentNodeBlock = currentNodeBlock;\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.condNode = condNode;\r\n\t\tproperties.ifNode = ifNode.context( { nodeBlock: ifNode } );\r\n\t\tproperties.elseNode = elseNode ? elseNode.context( { nodeBlock: elseNode } ) : null;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\tif ( nodeData.nodeProperty !== undefined ) {\r\n\r\n\t\t\treturn nodeData.nodeProperty;\r\n\r\n\t\t}\r\n\r\n\t\tconst { condNode, ifNode, elseNode } = builder.getNodeProperties( this );\r\n\r\n\t\tconst needsOutput = output !== 'void';\r\n\t\tconst nodeProperty = needsOutput ? property( type ).build( builder ) : '';\r\n\r\n\t\tnodeData.nodeProperty = nodeProperty;\r\n\r\n\t\tconst nodeSnippet = condNode.build( builder, 'bool' );\r\n\r\n\t\tbuilder.addFlowCode( `\\n${ builder.tab }if ( ${ nodeSnippet } ) {\\n\\n` ).addFlowTab();\r\n\r\n\t\tlet ifSnippet = ifNode.build( builder, type );\r\n\r\n\t\tif ( ifSnippet ) {\r\n\r\n\t\t\tif ( needsOutput ) {\r\n\r\n\t\t\t\tifSnippet = nodeProperty + ' = ' + ifSnippet + ';';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tifSnippet = 'return ' + ifSnippet + ';';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + ifSnippet + '\\n\\n' + builder.tab + '}' );\r\n\r\n\t\tif ( elseNode !== null ) {\r\n\r\n\t\t\tbuilder.addFlowCode( ' else {\\n\\n' ).addFlowTab();\r\n\r\n\t\t\tlet elseSnippet = elseNode.build( builder, type );\r\n\r\n\t\t\tif ( elseSnippet ) {\r\n\r\n\t\t\t\tif ( needsOutput ) {\r\n\r\n\t\t\t\t\telseSnippet = nodeProperty + ' = ' + elseSnippet + ';';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\telseSnippet = 'return ' + elseSnippet + ';';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + elseSnippet + '\\n\\n' + builder.tab + '}\\n\\n' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbuilder.addFlowCode( '\\n\\n' );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.format( nodeProperty, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConditionalNode;\r\n\r\nexport const select = /*@__PURE__*/ nodeProxy( ConditionalNode );\r\n\r\naddMethodChaining( 'select', select );\r\n\r\n//\r\n\r\nexport const cond = ( ...params ) => { // @deprecated, r168\r\n\r\n\tconsole.warn( 'TSL.ConditionalNode: cond() has been renamed to select().' );\r\n\treturn select( ...params );\r\n\r\n};\r\n\r\naddMethodChaining( 'cond', cond );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass ContextNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ContextNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, value = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isContextNode = true;\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\tgetScope() {\r\n\r\n\t\treturn this.node.getScope();\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tthis.node.build( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst previousContext = builder.getContext();\r\n\r\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\r\n\r\n\t\tconst node = this.node.build( builder );\r\n\r\n\t\tbuilder.setContext( previousContext );\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst previousContext = builder.getContext();\r\n\r\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\r\n\r\n\t\tconst snippet = this.node.build( builder, output );\r\n\r\n\t\tbuilder.setContext( previousContext );\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ContextNode;\r\n\r\nexport const context = /*@__PURE__*/ nodeProxy( ContextNode );\r\nexport const label = ( node, name ) => context( node, { label: name } );\r\n\r\naddMethodChaining( 'context', context );\r\naddMethodChaining( 'label', label );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass VarNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VarNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, name = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tthis.isVarNode = true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { node, name } = this;\r\n\r\n\t\tconst nodeVar = builder.getVarFromNode( this, name, builder.getVectorType( this.getNodeType( builder ) ) );\r\n\r\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\tconst snippet = node.build( builder, nodeVar.type );\r\n\r\n\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}`, this );\r\n\r\n\t\treturn propertyName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VarNode;\r\n\r\nexport const temp = /*@__PURE__*/ nodeProxy( VarNode );\r\n\r\naddMethodChaining( 'temp', temp ); // @TODO: Will be removed in the future\r\naddMethodChaining( 'toVar', ( ...params ) => temp( ...params ).append() );\r\n", "import Node from './Node.js';\r\nimport { NodeShaderStage } from './constants.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass VaryingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VaryingNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, name = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.isVaryingNode = true;\r\n\r\n\t}\r\n\r\n\tisGlobal() {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\t// VaryingNode is auto type\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetupVarying( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tlet varying = properties.varying;\r\n\r\n\t\tif ( varying === undefined ) {\r\n\r\n\t\t\tconst name = this.name;\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\t\tproperties.varying = varying = builder.getVaryingFromNode( this, name, type );\r\n\t\t\tproperties.node = this.node;\r\n\r\n\t\t}\r\n\r\n\t\t// this property can be used to check if the varying can be optimized for a variable\r\n\t\tvarying.needsInterpolation || ( varying.needsInterpolation = ( builder.shaderStage === 'fragment' ) );\r\n\r\n\t\treturn varying;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.setupVarying( builder );\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tthis.setupVarying( builder );\r\n\r\n\t\treturn this.node.analyze( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tconst varying = this.setupVarying( builder );\r\n\r\n\t\tif ( properties.propertyName === undefined ) {\r\n\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\tconst propertyName = builder.getPropertyName( varying, NodeShaderStage.VERTEX );\r\n\r\n\t\t\t// force node run in vertex stage\r\n\t\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, this.node, type, propertyName );\r\n\r\n\t\t\tproperties.propertyName = propertyName;\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getPropertyName( varying );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VaryingNode;\r\n\r\nexport const varying = /*@__PURE__*/ nodeProxy( VaryingNode );\r\n\r\naddMethodChaining( 'varying', varying );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeObject, vec4 } from '../tsl/TSLCore.js';\r\n\r\nimport { LinearSRGBColorSpace, SRGBColorSpace } from '../../constants.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\n\r\nconst WORKING_COLOR_SPACE = 'WorkingColorSpace';\r\nconst OUTPUT_COLOR_SPACE = 'OutputColorSpace';\r\n\r\nfunction getColorSpaceName( colorSpace ) {\r\n\r\n\tlet method = null;\r\n\r\n\tif ( colorSpace === LinearSRGBColorSpace ) {\r\n\r\n\t\tmethod = 'Linear';\r\n\r\n\t} else if ( colorSpace === SRGBColorSpace ) {\r\n\r\n\t\tmethod = 'sRGB';\r\n\r\n\t}\r\n\r\n\treturn method;\r\n\r\n}\r\n\r\nexport function getColorSpaceMethod( source, target ) {\r\n\r\n\treturn getColorSpaceName( source ) + 'To' + getColorSpaceName( target );\r\n\r\n}\r\n\r\nclass ColorSpaceNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ColorSpaceNode';\r\n\r\n\t}\r\n\r\n\tconstructor( colorNode, source, target ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.colorNode = colorNode;\r\n\t\tthis.source = source;\r\n\t\tthis.target = target;\r\n\r\n\t}\r\n\r\n\tgetColorSpace( builder, colorSpace ) {\r\n\r\n\t\tif ( colorSpace === WORKING_COLOR_SPACE ) {\r\n\r\n\t\t\treturn ColorManagement.workingColorSpace;\r\n\r\n\t\t} else if ( colorSpace === OUTPUT_COLOR_SPACE ) {\r\n\r\n\t\t\treturn builder.context.outputColorSpace || builder.renderer.outputColorSpace;\r\n\r\n\t\t}\r\n\r\n\t\treturn colorSpace;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { renderer } = builder;\r\n\t\tconst { colorNode } = this;\r\n\r\n\t\tconst source = this.getColorSpace( builder, this.source );\r\n\t\tconst target = this.getColorSpace( builder, this.target );\r\n\r\n\t\tif ( source === target ) return colorNode;\r\n\r\n\t\tconst colorSpace = getColorSpaceMethod( source, target );\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tconst colorSpaceFn = renderer.nodes.library.getColorSpaceFunction( colorSpace );\r\n\r\n\t\tif ( colorSpaceFn !== null ) {\r\n\r\n\t\t\toutputNode = vec4( colorSpaceFn( colorNode.rgb ), colorNode.a );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'ColorSpaceNode: Unsupported Color Space configuration.', colorSpace );\r\n\r\n\t\t\toutputNode = colorNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ColorSpaceNode;\r\n\r\nexport const toOutputColorSpace = ( node ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, OUTPUT_COLOR_SPACE ) );\r\nexport const toWorkingColorSpace = ( node ) => nodeObject( new ColorSpaceNode( nodeObject( node ), OUTPUT_COLOR_SPACE, WORKING_COLOR_SPACE ) );\r\n\r\nexport const workingToColorSpace = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, colorSpace ) );\r\nexport const colorSpaceToWorking = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), colorSpace, WORKING_COLOR_SPACE ) );\r\n\r\naddMethodChaining( 'toOutputColorSpace', toOutputColorSpace );\r\naddMethodChaining( 'toWorkingColorSpace', toWorkingColorSpace );\r\n\r\naddMethodChaining( 'workingToColorSpace', workingToColorSpace );\r\naddMethodChaining( 'colorSpaceToWorking', colorSpaceToWorking );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { nodeObject } from '../tsl/TSLCore.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\n\r\nclass ReferenceElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceElementNode';\r\n\r\n\t}\r\n\r\n\tconstructor( referenceNode, indexNode ) {\r\n\r\n\t\tsuper( referenceNode, indexNode );\r\n\r\n\t\tthis.referenceNode = referenceNode;\r\n\r\n\t\tthis.isReferenceElementNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.referenceNode.uniformType;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst arrayType = this.referenceNode.getNodeType();\r\n\t\tconst elementType = this.getNodeType();\r\n\r\n\t\treturn builder.format( snippet, arrayType, elementType );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ReferenceBaseNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceBaseNode';\r\n\r\n\t}\r\n\r\n\tconstructor( property, uniformType, object = null, count = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.property = property;\r\n\t\tthis.uniformType = uniformType;\r\n\t\tthis.object = object;\r\n\t\tthis.count = count;\r\n\r\n\t\tthis.properties = property.split( '.' );\r\n\t\tthis.reference = object;\r\n\t\tthis.node = null;\r\n\t\tthis.group = null;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\tsetGroup( group ) {\r\n\r\n\t\tthis.group = group;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n\tsetNodeType( uniformType ) {\r\n\r\n\t\tconst node = uniform( null, uniformType ).getSelf();\r\n\r\n\t\tif ( this.group !== null ) {\r\n\r\n\t\t\tnode.setGroup( this.group );\r\n\r\n\t\t}\r\n\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.node === null ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\t\t\tthis.updateValue();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgetValueFromReference( object = this.reference ) {\r\n\r\n\t\tconst { properties } = this;\r\n\r\n\t\tlet value = object[ properties[ 0 ] ];\r\n\r\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\r\n\r\n\t\t\tvalue = value[ properties[ i ] ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.object !== null ? this.object : state.object;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t}\r\n\r\n\tupdateValue() {\r\n\r\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\r\n\r\n\t\tconst value = this.getValueFromReference();\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tthis.node.array = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.node.value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ReferenceBaseNode;\r\n\r\nexport const reference = ( name, type, object ) => nodeObject( new ReferenceBaseNode( name, type, object ) );\r\nexport const referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceBaseNode( name, type, object, count ) );\r\n", "import ReferenceBaseNode from './ReferenceBaseNode.js';\r\nimport { nodeObject } from '../tsl/TSLCore.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\n\r\nclass RendererReferenceNode extends ReferenceBaseNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RendererReferenceNode';\r\n\r\n\t}\r\n\r\n\tconstructor( property, inputType, renderer = null ) {\r\n\r\n\t\tsuper( property, inputType, renderer );\r\n\r\n\t\tthis.renderer = renderer;\r\n\r\n\t\tthis.setGroup( renderGroup );\r\n\r\n\t}\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.renderer !== null ? this.renderer : state.renderer;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RendererReferenceNode;\r\n\r\nexport const rendererReference = ( name, type, renderer ) => nodeObject( new RendererReferenceNode( name, type, renderer ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeObject, vec4 } from '../tsl/TSLCore.js';\r\nimport { rendererReference } from '../accessors/RendererReferenceNode.js';\r\n\r\nimport { NoToneMapping } from '../../constants.js';\r\nimport { hash } from '../core/NodeUtils.js';\r\n\r\nclass ToneMappingNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ToneMappingNode';\r\n\r\n\t}\r\n\r\n\tconstructor( toneMapping, exposureNode = toneMappingExposure, colorNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.toneMapping = toneMapping;\r\n\r\n\t\tthis.exposureNode = exposureNode;\r\n\t\tthis.colorNode = colorNode;\r\n\r\n\t}\r\n\r\n\tgetCacheKey() {\r\n\r\n\t\treturn hash( super.getCacheKey(), this.toneMapping );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst colorNode = this.colorNode || builder.context.color;\r\n\t\tconst toneMapping = this.toneMapping;\r\n\r\n\t\tif ( toneMapping === NoToneMapping ) return colorNode;\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tconst toneMappingFn = builder.renderer.nodes.library.getToneMappingFunction( toneMapping );\r\n\r\n\t\tif ( toneMappingFn !== null ) {\r\n\r\n\t\t\toutputNode = vec4( toneMappingFn( colorNode.rgb, this.exposureNode ), colorNode.a );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping );\r\n\r\n\t\t\toutputNode = colorNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ToneMappingNode;\r\n\r\nexport const toneMapping = ( mapping, exposure, color ) => nodeObject( new ToneMappingNode( mapping, nodeObject( exposure ), nodeObject( color ) ) );\r\nexport const toneMappingExposure = /*@__PURE__*/ rendererReference( 'toneMappingExposure', 'float' );\r\n\r\naddMethodChaining( 'toneMapping', ( color, mapping, exposure ) => toneMapping( mapping, exposure, color ) );\r\n", "import InputNode from '../core/InputNode.js';\r\nimport { nodeObject, addMethodChaining } from '../tsl/TSLCore.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\n\r\nimport { InterleavedBufferAttribute } from '../../core/InterleavedBufferAttribute.js';\r\nimport { InterleavedBuffer } from '../../core/InterleavedBuffer.js';\r\nimport { StaticDrawUsage, DynamicDrawUsage } from '../../constants.js';\r\n\r\nclass BufferAttributeNode extends InputNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BufferAttributeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, bufferType = null, bufferStride = 0, bufferOffset = 0 ) {\r\n\r\n\t\tsuper( value, bufferType );\r\n\r\n\t\tthis.isBufferNode = true;\r\n\r\n\t\tthis.bufferType = bufferType;\r\n\t\tthis.bufferStride = bufferStride;\r\n\t\tthis.bufferOffset = bufferOffset;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.instanced = false;\r\n\r\n\t\tthis.attribute = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tif ( value && value.isBufferAttribute === true ) {\r\n\r\n\t\t\tthis.attribute = value;\r\n\t\t\tthis.usage = value.usage;\r\n\t\t\tthis.instanced = value.isInstancedBufferAttribute;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\tif ( this.bufferStride === 0 && this.bufferOffset === 0 ) {\r\n\r\n\t\t\tlet bufferData = builder.globalCache.getData( this.value );\r\n\r\n\t\t\tif ( bufferData === undefined ) {\r\n\r\n\t\t\t\tbufferData = {\r\n\t\t\t\t\tnode: this\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbuilder.globalCache.setData( this.value, bufferData );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bufferData.node.uuid;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.bufferType === null ) {\r\n\r\n\t\t\tthis.bufferType = builder.getTypeFromAttribute( this.attribute );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.bufferType;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this.attribute !== null ) return;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst array = this.value;\r\n\t\tconst itemSize = builder.getTypeLength( type );\r\n\t\tconst stride = this.bufferStride || itemSize;\r\n\t\tconst offset = this.bufferOffset;\r\n\r\n\t\tconst buffer = array.isInterleavedBuffer === true ? array : new InterleavedBuffer( array, stride );\r\n\t\tconst bufferAttribute = new InterleavedBufferAttribute( buffer, itemSize, offset );\r\n\r\n\t\tbuffer.setUsage( this.usage );\r\n\r\n\t\tthis.attribute = bufferAttribute;\r\n\t\tthis.attribute.isInstancedBufferAttribute = this.instanced; // @TODO: Add a possible: InstancedInterleavedBufferAttribute\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tconst nodeAttribute = builder.getBufferAttributeFromNode( this, nodeType );\r\n\t\tconst propertyName = builder.getPropertyName( nodeAttribute );\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\tthis.name = propertyName;\r\n\r\n\t\t\toutput = propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\toutput = nodeVarying.build( builder, nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'bufferAttribute';\r\n\r\n\t}\r\n\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\tif ( this.attribute && this.attribute.isBufferAttribute === true ) {\r\n\r\n\t\t\tthis.attribute.usage = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetInstanced( value ) {\r\n\r\n\t\tthis.instanced = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BufferAttributeNode;\r\n\r\nexport const bufferAttribute = ( array, type, stride, offset ) => nodeObject( new BufferAttributeNode( array, type, stride, offset ) );\r\nexport const dynamicBufferAttribute = ( array, type, stride, offset ) => bufferAttribute( array, type, stride, offset ).setUsage( DynamicDrawUsage );\r\n\r\nexport const instancedBufferAttribute = ( array, type, stride, offset ) => bufferAttribute( array, type, stride, offset ).setInstanced( true );\r\nexport const instancedDynamicBufferAttribute = ( array, type, stride, offset ) => dynamicBufferAttribute( array, type, stride, offset ).setInstanced( true );\r\n\r\naddMethodChaining( 'toAttribute', ( bufferNode ) => bufferAttribute( bufferNode.value ) );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\nclass ComputeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ComputeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.isComputeNode = true;\r\n\r\n\t\tthis.computeNode = computeNode;\r\n\r\n\t\tthis.count = count;\r\n\t\tthis.workgroupSize = workgroupSize;\r\n\t\tthis.dispatchCount = 0;\r\n\r\n\t\tthis.version = 1;\r\n\t\tthis.updateBeforeType = NodeUpdateType.OBJECT;\r\n\r\n\t\tthis.updateDispatchCount();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tupdateDispatchCount() {\r\n\r\n\t\tconst { count, workgroupSize } = this;\r\n\r\n\t\tlet size = workgroupSize[ 0 ];\r\n\r\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\r\n\t\t\tsize *= workgroupSize[ i ];\r\n\r\n\t\tthis.dispatchCount = Math.ceil( count / size );\r\n\r\n\t}\r\n\r\n\tonInit() { }\r\n\r\n\tupdateBefore( { renderer } ) {\r\n\r\n\t\trenderer.compute( this );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { shaderStage } = builder;\r\n\r\n\t\tif ( shaderStage === 'compute' ) {\r\n\r\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\r\n\r\n\t\t\tif ( snippet !== '' ) {\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ComputeNode;\r\n\r\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\r\n\r\naddMethodChaining( 'compute', compute );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\nclass CacheNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'CacheNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, parent = true ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.parent = parent;\r\n\r\n\t\tthis.isCacheNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tbuild( builder, ...params ) {\r\n\r\n\t\tconst previousCache = builder.getCache();\r\n\t\tconst cache = builder.getCacheFromNode( this, this.parent );\r\n\r\n\t\tbuilder.setCache( cache );\r\n\r\n\t\tconst data = this.node.build( builder, ...params );\r\n\r\n\t\tbuilder.setCache( previousCache );\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CacheNode;\r\n\r\nexport const cache = ( node, ...params ) => nodeObject( new CacheNode( nodeObject( node ), ...params ) );\r\n\r\naddMethodChaining( 'cache', cache );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass BypassNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BypassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( returnNode, callNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isBypassNode = true;\r\n\r\n\t\tthis.outputNode = returnNode;\r\n\t\tthis.callNode = callNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.outputNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = this.callNode.build( builder, 'void' );\r\n\r\n\t\tif ( snippet !== '' ) {\r\n\r\n\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.outputNode.build( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BypassNode;\r\n\r\nexport const bypass = /*@__PURE__*/ nodeProxy( BypassNode );\r\n\r\naddMethodChaining( 'bypass', bypass );\r\n", "import Node from '../core/Node.js';\r\nimport { float, addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass RemapNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RemapNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, inLowNode, inHighNode, outLowNode = float( 0 ), outHighNode = float( 1 ) ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.inLowNode = inLowNode;\r\n\t\tthis.inHighNode = inHighNode;\r\n\t\tthis.outLowNode = outLowNode;\r\n\t\tthis.outHighNode = outHighNode;\r\n\r\n\t\tthis.doClamp = true;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;\r\n\r\n\t\tlet t = node.sub( inLowNode ).div( inHighNode.sub( inLowNode ) );\r\n\r\n\t\tif ( doClamp === true ) t = t.clamp();\r\n\r\n\t\treturn t.mul( outHighNode.sub( outLowNode ) ).add( outLowNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RemapNode;\r\n\r\nexport const remap = /*@__PURE__*/ nodeProxy( RemapNode, null, null, { doClamp: false } );\r\nexport const remapClamp = /*@__PURE__*/ nodeProxy( RemapNode );\r\n\r\naddMethodChaining( 'remap', remap );\r\naddMethodChaining( 'remapClamp', remapClamp );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass ExpressionNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ExpressionNode';\r\n\r\n\t}\r\n\r\n\tconstructor( snippet = '', nodeType = 'void' ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.snippet = snippet;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst snippet = this.snippet;\r\n\r\n\t\tif ( type === 'void' ) {\r\n\r\n\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn builder.format( `( ${ snippet } )`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ExpressionNode;\r\n\r\nexport const expression = /*@__PURE__*/ nodeProxy( ExpressionNode );\r\n", "import { select } from '../math/ConditionalNode.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { addMethodChaining } from '../tsl/TSLCore.js';\r\n\r\nexport const Discard = ( conditional ) => ( conditional ? select( conditional, expression( 'discard' ) ) : expression( 'discard' ) ).append();\r\nexport const Return = () => expression( 'return' ).append();\r\n\r\naddMethodChaining( 'discard', Discard );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\nimport { NoColorSpace, NoToneMapping } from '../../constants.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\n\r\nclass RenderOutputNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RenderOutputNode';\r\n\r\n\t}\r\n\r\n\tconstructor( colorNode, toneMapping, outputColorSpace ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.colorNode = colorNode;\r\n\t\tthis.toneMapping = toneMapping;\r\n\t\tthis.outputColorSpace = outputColorSpace;\r\n\r\n\t\tthis.isRenderOutput = true;\r\n\r\n\t}\r\n\r\n\tsetup( { context } ) {\r\n\r\n\t\tlet outputNode = this.colorNode || context.color;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tconst toneMapping = ( this.toneMapping !== null ? this.toneMapping : context.toneMapping ) || NoToneMapping;\r\n\t\tconst outputColorSpace = ( this.outputColorSpace !== null ? this.outputColorSpace : context.outputColorSpace ) || NoColorSpace;\r\n\r\n\t\tif ( toneMapping !== NoToneMapping ) {\r\n\r\n\t\t\toutputNode = outputNode.toneMapping( toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\t// working to output color space\r\n\r\n\t\tif ( outputColorSpace !== NoColorSpace && outputColorSpace !== ColorManagement.workingColorSpace ) {\r\n\r\n\t\t\toutputNode = outputNode.workingToColorSpace( outputColorSpace );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RenderOutputNode;\r\n\r\nexport const renderOutput = ( color, toneMapping = null, outputColorSpace = null ) => nodeObject( new RenderOutputNode( nodeObject( color ), toneMapping, outputColorSpace ) );\r\n\r\naddMethodChaining( 'renderOutput', renderOutput );\r\n", "// Non-PURE exports list, side-effects are required here.\r\n// TSL Base Syntax\r\n\r\nexport * from './TSLCore.js'; // float(), vec2(), vec3(), vec4(), mat3(), mat4(), Fn(), If(), element(), nodeObject(), nodeProxy(), ...\r\nexport * from '../core/UniformNode.js'; // uniform()\r\nexport * from '../core/PropertyNode.js'; // property()  <-> TODO: Seperate Material Properties in other file\r\nexport * from '../core/AssignNode.js'; // .assign()\r\nexport * from '../code/FunctionCallNode.js'; // .call()\r\nexport * from '../math/OperatorNode.js'; // .add(), .sub(), ...\r\nexport * from '../math/MathNode.js'; // abs(), floor(), ...\r\nexport * from '../math/ConditionalNode.js'; // select(), ...\r\nexport * from '../core/ContextNode.js'; // .context()\r\nexport * from '../core/VarNode.js'; // .var() -> TODO: Maybe rename .toVar() -> .var()\r\nexport * from '../core/VaryingNode.js'; // varying() -> TODO: Add vertexStage()\r\nexport * from '../display/ColorSpaceNode.js'; // .toColorSpace()\r\nexport * from '../display/ToneMappingNode.js'; // .toToneMapping()\r\nexport * from '../accessors/BufferAttributeNode.js'; // .toAttribute()\r\nexport * from '../gpgpu/ComputeNode.js'; // .compute()\r\nexport * from '../core/CacheNode.js'; // .cache()\r\nexport * from '../core/BypassNode.js'; // .bypass()\r\nexport * from '../utils/RemapNode.js'; // .remap(), .remapClamp()\r\nexport * from '../code/ExpressionNode.js'; // expression()\r\nexport * from '../utils/Discard.js'; // Discard(), Return()\r\nexport * from '../display/RenderOutputNode.js'; // .renderOutput()\r\n\r\nexport function addNodeElement( name/*, nodeElement*/ ) {\r\n\r\n\tconsole.warn( 'THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add', name );\r\n\r\n}\r\n", "import Node from './Node.js';\r\nimport { nodeObject, varying } from '../tsl/TSLBase.js';\r\n\r\nclass AttributeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AttributeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( attributeName, nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tthis._attributeName = attributeName;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.getAttributeName( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tlet nodeType = this.nodeType;\r\n\r\n\t\tif ( nodeType === null ) {\r\n\r\n\t\t\tconst attributeName = this.getAttributeName( builder );\r\n\r\n\t\t\tif ( builder.hasGeometryAttribute( attributeName ) ) {\r\n\r\n\t\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\r\n\r\n\t\t\t\tnodeType = builder.getTypeFromAttribute( attribute );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnodeType = 'float';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeType;\r\n\r\n\t}\r\n\r\n\tsetAttributeName( attributeName ) {\r\n\r\n\t\tthis._attributeName = attributeName;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetAttributeName( /*builder*/ ) {\r\n\r\n\t\treturn this._attributeName;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst attributeName = this.getAttributeName( builder );\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\r\n\r\n\t\tif ( geometryAttribute === true ) {\r\n\r\n\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\r\n\t\t\tconst attributeType = builder.getTypeFromAttribute( attribute );\r\n\r\n\t\t\tconst nodeAttribute = builder.getAttribute( attributeName, attributeType );\r\n\r\n\t\t\tif ( builder.shaderStage === 'vertex' ) {\r\n\r\n\t\t\t\treturn builder.format( nodeAttribute.name, attributeType, nodeType );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\t\treturn nodeVarying.build( builder, nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( `AttributeNode: Vertex attribute \"${ attributeName }\" not found on geometry.` );\r\n\r\n\t\t\treturn builder.generateConst( nodeType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.global = this.global;\r\n\t\tdata._attributeName = this._attributeName;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.global = data.global;\r\n\t\tthis._attributeName = data._attributeName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AttributeNode;\r\n\r\nexport const attribute = ( name, nodeType ) => nodeObject( new AttributeNode( name, nodeType ) );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\n\r\nexport const uv = ( index ) => attribute( 'uv' + ( index > 0 ? index : '' ), 'vec2' );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass TextureSizeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TextureSizeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, levelNode = null ) {\r\n\r\n\t\tsuper( 'uvec2' );\r\n\r\n\t\tthis.isTextureSizeNode = true;\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst textureProperty = this.textureNode.build( builder, 'property' );\r\n\t\tconst level = this.levelNode === null ? '0' : this.levelNode.build( builder, 'int' );\r\n\r\n\t\treturn builder.format( `${ builder.getMethod( 'textureDimensions' ) }( ${ textureProperty }, ${ level } )`, this.getNodeType( builder ), output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureSizeNode;\r\n\r\nexport const textureSize = /*@__PURE__*/ nodeProxy( TextureSizeNode );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass MaxMipLevelNode extends UniformNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MaxMipLevelNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode ) {\r\n\r\n\t\tsuper( 0 );\r\n\r\n\t\tthis._textureNode = textureNode;\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tget textureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tget texture() {\r\n\r\n\t\treturn this._textureNode.value;\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst texture = this.texture;\r\n\t\tconst images = texture.images;\r\n\t\tconst image = ( images && images.length > 0 ) ? ( ( images[ 0 ] && images[ 0 ].image ) || images[ 0 ] ) : texture.image;\r\n\r\n\t\tif ( image && image.width !== undefined ) {\r\n\r\n\t\t\tconst { width, height } = image;\r\n\r\n\t\t\tthis.value = Math.log2( Math.max( width, height ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MaxMipLevelNode;\r\n\r\nexport const maxMipLevel = /*@__PURE__*/ nodeProxy( MaxMipLevelNode );\r\n", "import UniformNode, { uniform } from '../core/UniformNode.js';\r\nimport { uv } from './UV.js';\r\nimport { textureSize } from './TextureSizeNode.js';\r\nimport { colorSpaceToWorking } from '../display/ColorSpaceNode.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { maxMipLevel } from '../utils/MaxMipLevelNode.js';\r\nimport { nodeProxy, vec3, nodeObject, int } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\n\r\nimport { IntType, UnsignedIntType } from '../../constants.js';\r\n\r\nclass TextureNode extends UniformNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\r\n\r\n\t\tsuper( value );\r\n\r\n\t\tthis.isTextureNode = true;\r\n\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.levelNode = levelNode;\r\n\t\tthis.biasNode = biasNode;\r\n\t\tthis.compareNode = null;\r\n\t\tthis.depthNode = null;\r\n\t\tthis.gradNode = null;\r\n\r\n\t\tthis.sampler = true;\r\n\t\tthis.updateMatrix = false;\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\r\n\t\tthis.referenceNode = null;\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._matrixUniform = null;\r\n\r\n\t\tthis.setUpdateMatrix( uvNode === null );\r\n\r\n\t}\r\n\r\n\tset value( value ) {\r\n\r\n\t\tif ( this.referenceNode ) {\r\n\r\n\t\t\tthis.referenceNode.value = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tget value() {\r\n\r\n\t\treturn this.referenceNode ? this.referenceNode.value : this._value;\r\n\r\n\t}\r\n\r\n\tgetUniformHash( /*builder*/ ) {\r\n\r\n\t\treturn this.value.uuid;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.value.isDepthTexture === true ) return 'float';\r\n\r\n\t\tif ( this.value.type === UnsignedIntType ) {\r\n\r\n\t\t\treturn 'uvec4';\r\n\r\n\t\t} else if ( this.value.type === IntType ) {\r\n\r\n\t\t\treturn 'ivec4';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'texture';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn uv( this.value.channel );\r\n\r\n\t}\r\n\r\n\tupdateReference( /*state*/ ) {\r\n\r\n\t\treturn this.value;\r\n\r\n\t}\r\n\r\n\tgetTransformedUV( uvNode ) {\r\n\r\n\t\tif ( this._matrixUniform === null ) this._matrixUniform = uniform( this.value.matrix );\r\n\r\n\t\treturn this._matrixUniform.mul( vec3( uvNode, 1 ) ).xy;\r\n\r\n\t}\r\n\r\n\tsetUpdateMatrix( value ) {\r\n\r\n\t\tthis.updateMatrix = value;\r\n\t\tthis.updateType = value ? NodeUpdateType.FRAME : NodeUpdateType.NONE;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.isFlipY() && ( texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true || texture.isDepthTexture === true ) ) {\r\n\r\n\t\t\tif ( this.sampler ) {\r\n\r\n\t\t\t\tuvNode = uvNode.flipY();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tuvNode = uvNode.setY( int( textureSize( this, this.levelNode ).y ).sub( uvNode.y ).sub( 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uvNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.referenceNode = this.referenceNode;\r\n\r\n\t\t//\r\n\r\n\t\tlet uvNode = this.uvNode;\r\n\r\n\t\tif ( ( uvNode === null || builder.context.forceUVContext === true ) && builder.context.getUV ) {\r\n\r\n\t\t\tuvNode = builder.context.getUV( this );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! uvNode ) uvNode = this.getDefaultUV();\r\n\r\n\t\tif ( this.updateMatrix === true ) {\r\n\r\n\t\t\tuvNode = this.getTransformedUV( uvNode );\r\n\r\n\t\t}\r\n\r\n\t\tuvNode = this.setupUV( builder, uvNode );\r\n\r\n\t\t//\r\n\r\n\t\tlet levelNode = this.levelNode;\r\n\r\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\r\n\r\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tproperties.uvNode = uvNode;\r\n\t\tproperties.levelNode = levelNode;\r\n\t\tproperties.biasNode = this.biasNode;\r\n\t\tproperties.compareNode = this.compareNode;\r\n\t\tproperties.gradNode = this.gradNode;\r\n\t\tproperties.depthNode = this.depthNode;\r\n\r\n\t}\r\n\r\n\tgenerateUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode.build( builder, this.sampler === true ? 'vec2' : 'ivec2' );\r\n\r\n\t}\r\n\r\n\tgenerateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( levelSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet );\r\n\r\n\t\t} else if ( biasSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet );\r\n\r\n\t\t} else if ( gradSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet );\r\n\r\n\t\t} else if ( compareSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet );\r\n\r\n\t\t} else if ( this.sampler === false ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureLoad( texture, textureProperty, uvSnippet, depthSnippet );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = builder.generateTexture( texture, textureProperty, uvSnippet, depthSnippet );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( ! texture || texture.isTexture !== true ) {\r\n\r\n\t\t\tthrow new Error( 'TextureNode: Need a three.js texture.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst textureProperty = super.generate( builder, 'property' );\r\n\r\n\t\tif ( output === 'sampler' ) {\r\n\r\n\t\t\treturn textureProperty + '_sampler';\r\n\r\n\t\t} else if ( builder.isReference( output ) ) {\r\n\r\n\t\t\treturn textureProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tlet propertyName = nodeData.propertyName;\r\n\r\n\t\t\tif ( propertyName === undefined ) {\r\n\r\n\t\t\t\tconst { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode } = properties;\r\n\r\n\t\t\t\tconst uvSnippet = this.generateUV( builder, uvNode );\r\n\t\t\t\tconst levelSnippet = levelNode ? levelNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst biasSnippet = biasNode ? biasNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst depthSnippet = depthNode ? depthNode.build( builder, 'int' ) : null;\r\n\t\t\t\tconst compareSnippet = compareNode ? compareNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst gradSnippet = gradNode ? [ gradNode[ 0 ].build( builder, 'vec2' ), gradNode[ 1 ].build( builder, 'vec2' ) ] : null;\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this );\r\n\r\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tconst snippet = this.generateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet );\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}`, this );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet snippet = propertyName;\r\n\t\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\t\tif ( builder.needsToWorkingColorSpace( texture ) ) {\r\n\r\n\t\t\t\tsnippet = colorSpaceToWorking( expression( snippet, nodeType ), texture.colorSpace ).setup( builder ).build( builder, nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( snippet, nodeType, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetSampler( value ) {\r\n\r\n\t\tthis.sampler = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetSampler() {\r\n\r\n\t\treturn this.sampler;\r\n\r\n\t}\r\n\r\n\t// @TODO: Move to TSL\r\n\r\n\tuv( uvNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.uvNode = nodeObject( uvNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tblur( amountNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.biasNode = nodeObject( amountNode ).mul( maxMipLevel( textureNode ) );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tlevel( levelNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.levelNode = nodeObject( levelNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tsize( levelNode ) {\r\n\r\n\t\treturn textureSize( this, levelNode );\r\n\r\n\t}\r\n\r\n\tbias( biasNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.biasNode = nodeObject( biasNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tcompare( compareNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.compareNode = nodeObject( compareNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tgrad( gradNodeX, gradNodeY ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.gradNode = [ nodeObject( gradNodeX ), nodeObject( gradNodeY ) ];\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tdepth( depthNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.depthNode = nodeObject( depthNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t// --\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\r\n\t\tdata.sampler = this.sampler;\r\n\t\tdata.updateMatrix = this.updateMatrix;\r\n\t\tdata.updateType = this.updateType;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.value = data.meta.textures[ data.value ];\r\n\t\tthis.sampler = data.sampler;\r\n\t\tthis.updateMatrix = data.updateMatrix;\r\n\t\tthis.updateType = data.updateType;\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst texture = this.value;\r\n\t\tconst matrixUniform = this._matrixUniform;\r\n\r\n\t\tif ( matrixUniform !== null ) matrixUniform.value = texture.matrix;\r\n\r\n\t\tif ( texture.matrixAutoUpdate === true ) {\r\n\r\n\t\t\ttexture.updateMatrix();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = new this.constructor( this.value, this.uvNode, this.levelNode, this.biasNode );\r\n\t\tnewNode.sampler = this.sampler;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureNode;\r\n\r\nexport const texture = /*@__PURE__*/ nodeProxy( TextureNode );\r\nexport const textureLoad = ( ...params ) => texture( ...params ).setSampler( false );\r\n\r\n//export const textureLevel = ( value, uv, level ) => texture( value, uv ).level( level );\r\n\r\nexport const sampler = ( aTexture ) => ( aTexture.isNode === true ? aTexture : texture( aTexture ) ).convert( 'sampler' );\r\n", "import { uniform } from '../core/UniformNode.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nexport const cameraNear = /*@__PURE__*/ uniform( 'float' ).label( 'cameraNear' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.near );\r\nexport const cameraFar = /*@__PURE__*/ uniform( 'float' ).label( 'cameraFar' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.far );\r\nexport const cameraLogDepth = /*@__PURE__*/ uniform( 'float' ).label( 'cameraLogDepth' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\nexport const cameraProjectionMatrix = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraProjectionMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrix );\r\nexport const cameraProjectionMatrixInverse = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraProjectionMatrixInverse' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrixInverse );\r\nexport const cameraViewMatrix = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraViewMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorldInverse );\r\nexport const cameraWorldMatrix = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraWorldMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorld );\r\nexport const cameraNormalMatrix = /*@__PURE__*/ uniform( 'mat3' ).label( 'cameraNormalMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.normalMatrix );\r\nexport const cameraPosition = /*@__PURE__*/ uniform( new Vector3() ).label( 'cameraPosition' ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => self.value.setFromMatrixPosition( camera.matrixWorld ) );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport UniformNode from '../core/UniformNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nclass Object3DNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Object3DNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope, object3d = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.object3d = object3d;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\tthis._uniformNode = new UniformNode( null );\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\r\n\r\n\t\t\treturn 'mat4';\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst object = this.object3d;\r\n\t\tconst uniformNode = this._uniformNode;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\r\n\r\n\t\t\tuniformNode.value = object.matrixWorld;\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\r\n\r\n\t\t} else if ( scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tuniformNode.value.setFromMatrixScale( object.matrixWorld );\r\n\r\n\t\t} else if ( scope === Object3DNode.DIRECTION ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tobject.getWorldDirection( uniformNode.value );\r\n\r\n\t\t} else if ( scope === Object3DNode.VIEW_POSITION ) {\r\n\r\n\t\t\tconst camera = frame.camera;\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\r\n\r\n\t\t\tuniformNode.value.applyMatrix4( camera.matrixWorldInverse );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\r\n\r\n\t\t\tthis._uniformNode.nodeType = 'mat4';\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\tthis._uniformNode.nodeType = 'vec3';\r\n\r\n\t\t}\r\n\r\n\t\treturn this._uniformNode.build( builder );\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject3DNode.WORLD_MATRIX = 'worldMatrix';\r\nObject3DNode.POSITION = 'position';\r\nObject3DNode.SCALE = 'scale';\r\nObject3DNode.VIEW_POSITION = 'viewPosition';\r\nObject3DNode.DIRECTION = 'direction';\r\n\r\nexport default Object3DNode;\r\n\r\nexport const objectDirection = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.DIRECTION );\r\nexport const objectWorldMatrix = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.WORLD_MATRIX );\r\nexport const objectPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.POSITION );\r\nexport const objectScale = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.SCALE );\r\nexport const objectViewPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.VIEW_POSITION );\r\n", "import Object3DNode from './Object3DNode.js';\r\nimport { Fn, nodeImmutable } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\n\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\n\r\nclass ModelNode extends Object3DNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ModelNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper( scope );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tthis.object3d = frame.object;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ModelNode;\r\n\r\nexport const modelDirection = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.DIRECTION );\r\nexport const modelWorldMatrix = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.WORLD_MATRIX );\r\nexport const modelPosition = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.POSITION );\r\nexport const modelScale = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.SCALE );\r\nexport const modelViewPosition = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.VIEW_POSITION );\r\nexport const modelNormalMatrix = /*@__PURE__*/ uniform( new Matrix3() ).onObjectUpdate( ( { object }, self ) => self.value.getNormalMatrix( object.matrixWorld ) );\r\nexport const modelWorldMatrixInverse = /*@__PURE__*/ uniform( new Matrix4() ).onObjectUpdate( ( { object }, self ) => self.value.copy( object.matrixWorld ).invert() );\r\nexport const modelViewMatrix = /*@__PURE__*/ cameraViewMatrix.mul( modelWorldMatrix ).toVar( 'modelViewMatrix_2' );\r\n\r\nexport const highPrecisionModelViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tbuilder.context.isHighPrecisionModelViewMatrix = true;\r\n\r\n\treturn uniform( 'mat4' ).onObjectUpdate( ( { object, camera } ) => {\r\n\r\n\t\treturn object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t} );\r\n\r\n} ).once() )().toVar( 'highPrecisionModelViewMatrix' );\r\n\r\nexport const highPrecisionModelNormalViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tconst isHighPrecisionModelViewMatrix = builder.context.isHighPrecisionModelViewMatrix;\r\n\r\n\treturn uniform( 'mat3' ).onObjectUpdate( ( { object, camera } ) => {\r\n\r\n\t\tif ( isHighPrecisionModelViewMatrix !== true ) {\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn object.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t} );\r\n\r\n} ).once() )().toVar( 'highPrecisionModelNormalMatrix' );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { modelWorldMatrix, modelViewMatrix } from './ModelNode.js';\r\n\r\nexport const positionGeometry = /*@__PURE__*/ attribute( 'position', 'vec3' );\r\nexport const positionLocal = /*@__PURE__*/ positionGeometry.varying( 'positionLocal' );\r\nexport const positionPrevious = /*@__PURE__*/ positionGeometry.varying( 'positionPrevious' );\r\nexport const positionWorld = /*@__PURE__*/ modelWorldMatrix.mul( positionLocal ).xyz.varying( 'v_positionWorld' );\r\nexport const positionWorldDirection = /*@__PURE__*/ positionLocal.transformDirection( modelWorldMatrix ).varying( 'v_positionWorldDirection' ).normalize().toVar( 'positionWorldDirection' );\r\nexport const positionView = /*@__PURE__*/ modelViewMatrix.mul( positionLocal ).xyz.varying( 'v_positionView' );\r\nexport const positionViewDirection = /*@__PURE__*/ positionView.negate().varying( 'v_positionViewDirection' ).normalize().toVar( 'positionViewDirection' );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeImmutable, float } from '../tsl/TSLBase.js';\r\n\r\nimport { BackSide, WebGLCoordinateSystem } from '../../constants.js';\r\n\r\nclass FrontFacingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FrontFacingNode';\r\n\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'bool' );\r\n\r\n\t\tthis.isFrontFacingNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { renderer, material } = builder;\r\n\r\n\t\tif ( renderer.coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\treturn 'false';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getFrontFacing();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FrontFacingNode;\r\n\r\nexport const frontFacing = /*@__PURE__*/ nodeImmutable( FrontFacingNode );\r\nexport const faceDirection = /*@__PURE__*/ float( frontFacing ).mul( 2.0 ).sub( 1.0 );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\nimport { modelNormalMatrix, modelWorldMatrix } from './ModelNode.js';\r\nimport { mat3, vec3 } from '../tsl/TSLBase.js';\r\nimport { positionView } from './Position.js';\r\nimport { Fn, varying } from '../tsl/TSLBase.js';\r\nimport { faceDirection } from '../display/FrontFacingNode.js';\r\n\r\nexport const normalGeometry = /*@__PURE__*/ attribute( 'normal', 'vec3' );\r\n\r\nexport const normalLocal = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tif ( builder.geometry.hasAttribute( 'normal' ) === false ) {\r\n\r\n\t\tconsole.warn( 'TSL.NormalNode: Vertex attribute \"normal\" not found on geometry.' );\r\n\r\n\t\treturn vec3( 0, 1, 0 );\r\n\r\n\t}\r\n\r\n\treturn normalGeometry;\r\n\r\n}, 'vec3' ).once() )().toVar( 'normalLocal' );\r\n\r\nexport const normalFlat = /*@__PURE__*/ positionView.dFdx().cross( positionView.dFdy() ).normalize().toVar( 'normalFlat' );\r\n\r\nexport const normalView = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tlet node;\r\n\r\n\tif ( builder.material.flatShading === true ) {\r\n\r\n\t\tnode = normalFlat;\r\n\r\n\t} else {\r\n\r\n\t\tnode = varying( transformNormalToView( normalLocal ), 'v_normalView' ).normalize();\r\n\r\n\t}\r\n\r\n\treturn node;\r\n\r\n}, 'vec3' ).once() )().toVar( 'normalView' );\r\n\r\nexport const normalWorld = /*@__PURE__*/ varying( normalView.transformDirection( cameraViewMatrix ), 'v_normalWorld' ).normalize().toVar( 'normalWorld' );\r\n\r\nexport const transformedNormalView = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\treturn builder.context.setupNormal();\r\n\r\n}, 'vec3' ).once() )().mul( faceDirection ).toVar( 'transformedNormalView' );\r\n\r\n\r\nexport const transformedNormalWorld = /*@__PURE__*/ transformedNormalView.transformDirection( cameraViewMatrix ).toVar( 'transformedNormalWorld' );\r\n\r\nexport const transformedClearcoatNormalView = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\treturn builder.context.setupClearcoatNormal();\r\n\r\n}, 'vec3' ).once() )().mul( faceDirection ).toVar( 'transformedClearcoatNormalView' );\r\n\r\nexport const transformNormal = /*@__PURE__*/ Fn( ( [ normal, matrix = modelWorldMatrix ] ) => {\r\n\r\n\tconst m = mat3( matrix );\r\n\r\n\tconst transformedNormal = normal.div( vec3( m[ 0 ].dot( m[ 0 ] ), m[ 1 ].dot( m[ 1 ] ), m[ 2 ].dot( m[ 2 ] ) ) );\r\n\r\n\treturn m.mul( transformedNormal ).xyz;\r\n\r\n} );\r\n\r\nexport const transformNormalToView = /*@__PURE__*/ Fn( ( [ normal ], builder ) => {\r\n\r\n\tconst modelNormalViewMatrix = builder.renderer.nodes.modelNormalViewMatrix;\r\n\r\n\tif ( modelNormalViewMatrix !== null ) {\r\n\r\n\t\treturn modelNormalViewMatrix.transformDirection( normal );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tconst transformedNormal = modelNormalMatrix.mul( normal );\r\n\r\n\treturn cameraViewMatrix.transformDirection( transformedNormal );\r\n\r\n} );\r\n", "import { uniform } from '../core/UniformNode.js';\r\n\r\nexport const materialRefractionRatio = /*@__PURE__*/ uniform( 0 ).onReference( ( { material } ) => material ).onRenderUpdate( ( { material } ) => material.refractionRatio );\r\n", "import { cameraViewMatrix } from './Camera.js';\r\nimport { transformedNormalView } from './Normal.js';\r\nimport { positionViewDirection } from './Position.js';\r\nimport { materialRefractionRatio } from './MaterialProperties.js';\r\n\r\nexport const reflectView = /*@__PURE__*/ positionViewDirection.negate().reflect( transformedNormalView );\r\nexport const refractView = /*@__PURE__*/ positionViewDirection.negate().refract( transformedNormalView, materialRefractionRatio );\r\n\r\nexport const reflectVector = /*@__PURE__*/ reflectView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\r\nexport const refractVector = /*@__PURE__*/ refractView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\r\n", "import TextureNode from './TextureNode.js';\r\nimport { reflectVector, refractVector } from './ReflectVector.js';\r\nimport { nodeProxy, vec3 } from '../tsl/TSLBase.js';\r\n\r\nimport { CubeReflectionMapping, CubeRefractionMapping, WebGPUCoordinateSystem } from '../../constants.js';\r\n\r\nclass CubeTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'CubeTextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\r\n\r\n\t\tsuper( value, uvNode, levelNode, biasNode );\r\n\r\n\t\tthis.isCubeTextureNode = true;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'cubeTexture';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( texture.mapping === CubeReflectionMapping ) {\r\n\r\n\t\t\treturn reflectVector;\r\n\r\n\t\t} else if ( texture.mapping === CubeRefractionMapping ) {\r\n\r\n\t\t\treturn refractVector;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.CubeTextureNode: Mapping \"%s\" not supported.', texture.mapping );\r\n\r\n\t\t\treturn vec3( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for CubeTextureNode\r\n\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem || ! texture.isRenderTargetTexture ) {\r\n\r\n\t\t\treturn vec3( uvNode.x.negate(), uvNode.yz );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn uvNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerateUV( builder, cubeUV ) {\r\n\r\n\t\treturn cubeUV.build( builder, 'vec3' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CubeTextureNode;\r\n\r\nexport const cubeTexture = /*@__PURE__*/ nodeProxy( CubeTextureNode );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\nclass BufferNode extends UniformNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BufferNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, bufferType, bufferCount = 0 ) {\r\n\r\n\t\tsuper( value, bufferType );\r\n\r\n\t\tthis.isBufferNode = true;\r\n\r\n\t\tthis.bufferType = bufferType;\r\n\t\tthis.bufferCount = bufferCount;\r\n\r\n\t}\r\n\r\n\tgetElementType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'buffer';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BufferNode;\r\n\r\nexport const buffer = ( value, type, count ) => nodeObject( new BufferNode( value, type, count ) );\r\n", "import { nodeObject } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { getValueType } from '../core/NodeUtils.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport BufferNode from './BufferNode.js';\r\n\r\nclass UniformArrayElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformArrayElementNode';\r\n\r\n\t}\r\n\r\n\tconstructor( arrayBuffer, indexNode ) {\r\n\r\n\t\tsuper( arrayBuffer, indexNode );\r\n\r\n\t\tthis.isArrayBufferElementNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst type = this.getNodeType();\r\n\r\n\t\treturn builder.format( snippet, 'vec4', type );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass UniformArrayNode extends BufferNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformArrayNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, elementType = null ) {\r\n\r\n\t\tsuper( null, 'vec4' );\r\n\r\n\t\tthis.array = value;\r\n\t\tthis.elementType = elementType;\r\n\r\n\t\tthis._elementType = null;\r\n\t\tthis._elementLength = 0;\r\n\r\n\t\tthis.updateType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis.isArrayBufferNode = true;\r\n\r\n\t}\r\n\r\n\tgetElementType() {\r\n\r\n\t\treturn this.elementType || this._elementType;\r\n\r\n\t}\r\n\r\n\tgetElementLength() {\r\n\r\n\t\treturn this._elementLength;\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconst { array, value } = this;\r\n\r\n\t\tconst elementLength = this.getElementLength();\r\n\t\tconst elementType = this.getElementType();\r\n\r\n\t\tif ( elementLength === 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\r\n\t\t\t\tvalue[ index ] = array[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( elementType === 'color' ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\t\t\t\tconst vector = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = vector.r;\r\n\t\t\t\tvalue[ index + 1 ] = vector.g;\r\n\t\t\t\tvalue[ index + 2 ] = vector.b || 0;\r\n\t\t\t\t//value[ index + 3 ] = vector.a || 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\t\t\t\tconst vector = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = vector.x;\r\n\t\t\t\tvalue[ index + 1 ] = vector.y;\r\n\t\t\t\tvalue[ index + 2 ] = vector.z || 0;\r\n\t\t\t\tvalue[ index + 3 ] = vector.w || 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst length = this.array.length;\r\n\r\n\t\tthis._elementType = this.elementType === null ? getValueType( this.array[ 0 ] ) : this.elementType;\r\n\t\tthis._elementLength = builder.getTypeLength( this._elementType );\r\n\r\n\t\tlet arrayType = Float32Array;\r\n\r\n\t\tif ( this._elementType.charAt( 0 ) === 'i' ) arrayType = Int32Array;\r\n\t\telse if ( this._elementType.charAt( 0 ) === 'u' ) arrayType = Uint32Array;\r\n\r\n\t\tthis.value = new arrayType( length * 4 );\r\n\t\tthis.bufferCount = length;\r\n\t\tthis.bufferType = builder.changeComponentType( 'vec4', builder.getComponentType( this._elementType ) );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new UniformArrayElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformArrayNode;\r\n\r\nexport const uniformArray = ( values, nodeType ) => nodeObject( new UniformArrayNode( values, nodeType ) );\r\n\r\n//\r\n\r\nexport const uniforms = ( values, nodeType ) => { // @deprecated, r168\r\n\r\n\tconsole.warn( 'TSL.UniformArrayNode: uniforms() has been renamed to uniformArray().' );\r\n\treturn nodeObject( new UniformArrayNode( values, nodeType ) );\r\n\r\n};\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { texture } from './TextureNode.js';\r\nimport { cubeTexture } from './CubeTextureNode.js';\r\nimport { buffer } from './BufferNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { uniformArray } from './UniformArrayNode.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\n\r\nclass ReferenceElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceElementNode';\r\n\r\n\t}\r\n\r\n\tconstructor( referenceNode, indexNode ) {\r\n\r\n\t\tsuper( referenceNode, indexNode );\r\n\r\n\t\tthis.referenceNode = referenceNode;\r\n\r\n\t\tthis.isReferenceElementNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.referenceNode.uniformType;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst arrayType = this.referenceNode.getNodeType();\r\n\t\tconst elementType = this.getNodeType();\r\n\r\n\t\treturn builder.format( snippet, arrayType, elementType );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// TODO: Extends this from ReferenceBaseNode\r\nclass ReferenceNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceNode';\r\n\r\n\t}\r\n\r\n\tconstructor( property, uniformType, object = null, count = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.property = property;\r\n\t\tthis.uniformType = uniformType;\r\n\t\tthis.object = object;\r\n\t\tthis.count = count;\r\n\r\n\t\tthis.properties = property.split( '.' );\r\n\t\tthis.reference = object;\r\n\t\tthis.node = null;\r\n\t\tthis.group = null;\r\n\t\tthis.name = null;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n\tsetGroup( group ) {\r\n\r\n\t\tthis.group = group;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlabel( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetNodeType( uniformType ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( this.count !== null ) {\r\n\r\n\t\t\tnode = buffer( null, uniformType, this.count );\r\n\r\n\t\t} else if ( Array.isArray( this.getValueFromReference() ) ) {\r\n\r\n\t\t\tnode = uniformArray( null, uniformType );\r\n\r\n\t\t} else if ( uniformType === 'texture' ) {\r\n\r\n\t\t\tnode = texture( null );\r\n\r\n\t\t} else if ( uniformType === 'cubeTexture' ) {\r\n\r\n\t\t\tnode = cubeTexture( null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnode = uniform( null, uniformType );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.group !== null ) {\r\n\r\n\t\t\tnode.setGroup( this.group );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.name !== null ) node.label( this.name );\r\n\r\n\t\tthis.node = node.getSelf();\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.node === null ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\t\t\tthis.updateValue();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgetValueFromReference( object = this.reference ) {\r\n\r\n\t\tconst { properties } = this;\r\n\r\n\t\tlet value = object[ properties[ 0 ] ];\r\n\r\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\r\n\r\n\t\t\tvalue = value[ properties[ i ] ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.object !== null ? this.object : state.object;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t}\r\n\r\n\tupdateValue() {\r\n\r\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\r\n\r\n\t\tconst value = this.getValueFromReference();\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tthis.node.array = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.node.value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ReferenceNode;\r\n\r\nexport const reference = ( name, type, object ) => nodeObject( new ReferenceNode( name, type, object ) );\r\nexport const referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceNode( name, type, object, count ) );\r\n", "import ReferenceNode from './ReferenceNode.js';\r\n//import { renderGroup } from '../core/UniformGroupNode.js';\r\n//import { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\nclass MaterialReferenceNode extends ReferenceNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MaterialReferenceNode';\r\n\r\n\t}\r\n\r\n\tconstructor( property, inputType, material = null ) {\r\n\r\n\t\tsuper( property, inputType, material );\r\n\r\n\t\tthis.material = material;\r\n\r\n\t\t//this.updateType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis.isMaterialReferenceNode = true;\r\n\r\n\t}\r\n\r\n\t/*setNodeType( node ) {\r\n\r\n\t\tsuper.setNodeType( node );\r\n\r\n\t\tthis.node.groupNode = renderGroup;\r\n\r\n\t}*/\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.material !== null ? this.material : state.material;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MaterialReferenceNode;\r\n\r\nexport const materialReference = ( name, type, material ) => nodeObject( new MaterialReferenceNode( name, type, material ) );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\nimport { Fn, vec4 } from '../tsl/TSLBase.js';\r\n\r\nexport const tangentGeometry = /*@__PURE__*/ Fn( ( builder ) => {\r\n\r\n\tif ( builder.geometry.hasAttribute( 'tangent' ) === false ) {\r\n\r\n\t\tbuilder.geometry.computeTangents();\r\n\r\n\t}\r\n\r\n\treturn attribute( 'tangent', 'vec4' );\r\n\r\n} )();\r\n\r\nexport const tangentLocal = /*@__PURE__*/ tangentGeometry.xyz.toVar( 'tangentLocal' );\r\nexport const tangentView = /*@__PURE__*/ modelViewMatrix.mul( vec4( tangentLocal, 0 ) ).xyz.varying( 'v_tangentView' ).normalize().toVar( 'tangentView' );\r\nexport const tangentWorld = /*@__PURE__*/ tangentView.transformDirection( cameraViewMatrix ).varying( 'v_tangentWorld' ).normalize().toVar( 'tangentWorld' );\r\nexport const transformedTangentView = /*@__PURE__*/ tangentView.toVar( 'transformedTangentView' );\r\nexport const transformedTangentWorld = /*@__PURE__*/ transformedTangentView.transformDirection( cameraViewMatrix ).normalize().toVar( 'transformedTangentWorld' );\r\n", "import { varying } from '../core/VaryingNode.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\nimport { normalGeometry, normalLocal, normalView, normalWorld, transformedNormalView } from './Normal.js';\r\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld, transformedTangentView } from './Tangent.js';\r\n\r\nconst getBitangent = ( crossNormalTangent ) => crossNormalTangent.mul( tangentGeometry.w ).xyz;\r\n\r\nexport const bitangentGeometry = /*@__PURE__*/ varying( getBitangent( normalGeometry.cross( tangentGeometry ) ), 'v_bitangentGeometry' ).normalize().toVar( 'bitangentGeometry' );\r\nexport const bitangentLocal = /*@__PURE__*/ varying( getBitangent( normalLocal.cross( tangentLocal ) ), 'v_bitangentLocal' ).normalize().toVar( 'bitangentLocal' );\r\nexport const bitangentView = /*@__PURE__*/ varying( getBitangent( normalView.cross( tangentView ) ), 'v_bitangentView' ).normalize().toVar( 'bitangentView' );\r\nexport const bitangentWorld = /*@__PURE__*/ varying( getBitangent( normalWorld.cross( tangentWorld ) ), 'v_bitangentWorld' ).normalize().toVar( 'bitangentWorld' );\r\nexport const transformedBitangentView = /*@__PURE__*/ getBitangent( transformedNormalView.cross( transformedTangentView ) ).normalize().toVar( 'transformedBitangentView' );\r\nexport const transformedBitangentWorld = /*@__PURE__*/ transformedBitangentView.transformDirection( cameraViewMatrix ).normalize().toVar( 'transformedBitangentWorld' );\r\n", "import { bitangentView } from './Bitangent.js';\r\nimport { normalView, transformedNormalView } from './Normal.js';\r\nimport { tangentView } from './Tangent.js';\r\nimport { mat3 } from '../tsl/TSLBase.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { anisotropy, anisotropyB, roughness } from '../core/PropertyNode.js';\r\nimport { positionViewDirection } from './Position.js';\r\n\r\nexport const TBNViewMatrix = /*@__PURE__*/ mat3( tangentView, bitangentView, normalView );\r\n\r\nexport const parallaxDirection = /*@__PURE__*/ positionViewDirection.mul( TBNViewMatrix )/*.normalize()*/;\r\nexport const parallaxUV = ( uv, scale ) => uv.sub( parallaxDirection.mul( scale ) );\r\n\r\nexport const transformedBentNormalView = /*@__PURE__*/ ( () => {\r\n\r\n\t// https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\r\n\r\n\tlet bentNormal = anisotropyB.cross( positionViewDirection );\r\n\tbentNormal = bentNormal.cross( anisotropyB ).normalize();\r\n\tbentNormal = mix( bentNormal, transformedNormalView, anisotropy.mul( roughness.oneMinus() ).oneMinus().pow2().pow2() ).normalize();\r\n\r\n\treturn bentNormal;\r\n\r\n\r\n} )();\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\n\r\nimport { normalView, transformNormalToView } from '../accessors/Normal.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { TBNViewMatrix } from '../accessors/AccessorsUtils.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { faceDirection } from './FrontFacingNode.js';\r\nimport { Fn, nodeProxy, vec3 } from '../tsl/TSLBase.js';\r\n\r\nimport { TangentSpaceNormalMap, ObjectSpaceNormalMap } from '../../constants.js';\r\n\r\n// Normal Mapping Without Precomputed Tangents\r\n// http://www.thetenthplanet.de/archives/1180\r\n\r\nconst perturbNormal2Arb = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\tconst { eye_pos, surf_norm, mapN, uv } = inputs;\r\n\r\n\tconst q0 = eye_pos.dFdx();\r\n\tconst q1 = eye_pos.dFdy();\r\n\tconst st0 = uv.dFdx();\r\n\tconst st1 = uv.dFdy();\r\n\r\n\tconst N = surf_norm; // normalized\r\n\r\n\tconst q1perp = q1.cross( N );\r\n\tconst q0perp = N.cross( q0 );\r\n\r\n\tconst T = q1perp.mul( st0.x ).add( q0perp.mul( st1.x ) );\r\n\tconst B = q1perp.mul( st0.y ).add( q0perp.mul( st1.y ) );\r\n\r\n\tconst det = T.dot( T ).max( B.dot( B ) );\r\n\tconst scale = faceDirection.mul( det.inverseSqrt() );\r\n\r\n\treturn add( T.mul( mapN.x, scale ), B.mul( mapN.y, scale ), N.mul( mapN.z ) ).normalize();\r\n\r\n} );\r\n\r\nclass NormalMapNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'NormalMapNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, scaleNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { normalMapType, scaleNode } = this;\r\n\r\n\t\tlet normalMap = this.node.mul( 2.0 ).sub( 1.0 );\r\n\r\n\t\tif ( scaleNode !== null ) {\r\n\r\n\t\t\tnormalMap = vec3( normalMap.xy.mul( scaleNode ), normalMap.z );\r\n\r\n\t\t}\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( normalMapType === ObjectSpaceNormalMap ) {\r\n\r\n\t\t\toutputNode = transformNormalToView( normalMap );\r\n\r\n\t\t} else if ( normalMapType === TangentSpaceNormalMap ) {\r\n\r\n\t\t\tconst tangent = builder.hasGeometryAttribute( 'tangent' );\r\n\r\n\t\t\tif ( tangent === true ) {\r\n\r\n\t\t\t\toutputNode = TBNViewMatrix.mul( normalMap ).normalize();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toutputNode = perturbNormal2Arb( {\r\n\t\t\t\t\teye_pos: positionView,\r\n\t\t\t\t\tsurf_norm: normalView,\r\n\t\t\t\t\tmapN: normalMap,\r\n\t\t\t\t\tuv: uv()\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NormalMapNode;\r\n\r\nexport const normalMap = /*@__PURE__*/ nodeProxy( NormalMapNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { normalView } from '../accessors/Normal.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { faceDirection } from './FrontFacingNode.js';\r\nimport { Fn, nodeProxy, float, vec2 } from '../tsl/TSLBase.js';\r\n\r\n// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\r\n// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\r\n\r\nconst dHdxy_fwd = Fn( ( { textureNode, bumpScale } ) => {\r\n\r\n\t// It's used to preserve the same TextureNode instance\r\n\tconst sampleTexture = ( callback ) => textureNode.cache().context( { getUV: ( texNode ) => callback( texNode.uvNode || uv() ), forceUVContext: true } );\r\n\r\n\tconst Hll = float( sampleTexture( ( uvNode ) => uvNode ) );\r\n\r\n\treturn vec2(\r\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdx() ) ) ).sub( Hll ),\r\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdy() ) ) ).sub( Hll )\r\n\t).mul( bumpScale );\r\n\r\n} );\r\n\r\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\nconst perturbNormalArb = Fn( ( inputs ) => {\r\n\r\n\tconst { surf_pos, surf_norm, dHdxy } = inputs;\r\n\r\n\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\r\n\tconst vSigmaX = surf_pos.dFdx().normalize();\r\n\tconst vSigmaY = surf_pos.dFdy().normalize();\r\n\tconst vN = surf_norm; // normalized\r\n\r\n\tconst R1 = vSigmaY.cross( vN );\r\n\tconst R2 = vN.cross( vSigmaX );\r\n\r\n\tconst fDet = vSigmaX.dot( R1 ).mul( faceDirection );\r\n\r\n\tconst vGrad = fDet.sign().mul( dHdxy.x.mul( R1 ).add( dHdxy.y.mul( R2 ) ) );\r\n\r\n\treturn fDet.abs().mul( surf_norm ).sub( vGrad ).normalize();\r\n\r\n} );\r\n\r\nclass BumpMapNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BumpMapNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, scaleNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\r\n\t\tconst dHdxy = dHdxy_fwd( { textureNode: this.textureNode, bumpScale } );\r\n\r\n\t\treturn perturbNormalArb( {\r\n\t\t\tsurf_pos: positionView,\r\n\t\t\tsurf_norm: normalView,\r\n\t\t\tdHdxy\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BumpMapNode;\r\n\r\nexport const bumpMap = /*@__PURE__*/ nodeProxy( BumpMapNode );\r\n", "import Node from '../core/Node.js';\r\nimport { reference } from './ReferenceNode.js';\r\nimport { materialReference } from './MaterialReferenceNode.js';\r\nimport { normalView } from './Normal.js';\r\nimport { nodeImmutable, float, vec2, vec3, mat2 } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { normalMap } from '../display/NormalMapNode.js';\r\nimport { bumpMap } from '../display/BumpMapNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nconst _propertyCache = new Map();\r\n\r\nclass MaterialNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MaterialNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tgetCache( property, type ) {\r\n\r\n\t\tlet node = _propertyCache.get( property );\r\n\r\n\t\tif ( node === undefined ) {\r\n\r\n\t\t\tnode = materialReference( property, type );\r\n\r\n\t\t\t_propertyCache.set( property, node );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tgetFloat( property ) {\r\n\r\n\t\treturn this.getCache( property, 'float' );\r\n\r\n\t}\r\n\r\n\tgetColor( property ) {\r\n\r\n\t\treturn this.getCache( property, 'color' );\r\n\r\n\t}\r\n\r\n\tgetTexture( property ) {\r\n\r\n\t\treturn this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst material = builder.context.material;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( scope === MaterialNode.COLOR ) {\r\n\r\n\t\t\tconst colorNode = material.color !== undefined ? this.getColor( scope ) : vec3();\r\n\r\n\t\t\tif ( material.map && material.map.isTexture === true ) {\r\n\r\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = colorNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\r\n\r\n\t\t\tconst opacityNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alpha' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = opacityNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\r\n\r\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = this.getTexture( 'specular' ).r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = float( 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_INTENSITY ) {\r\n\r\n\t\t\tconst specularIntensity = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.specularMap ) {\r\n\r\n\t\t\t\tnode = specularIntensity.mul( this.getTexture( scope ).a );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = specularIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\r\n\r\n\t\t\tconst specularColorNode = this.getColor( scope );\r\n\r\n\t\t\tif ( material.specularColorMap && material.specularColorMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = specularColorNode.mul( this.getTexture( scope ).rgb );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = specularColorNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches\r\n\r\n\t\t\tconst roughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( scope ).g );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = roughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\r\n\r\n\t\t\tconst metalnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( scope ).b );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = metalnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\r\n\r\n\t\t\tconst emissiveIntensityNode = this.getFloat( 'emissiveIntensity' );\r\n\t\t\tconst emissiveNode = this.getColor( scope ).mul( emissiveIntensityNode );\r\n\r\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( scope ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = emissiveNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.NORMAL ) {\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tnode = normalMap( this.getTexture( 'normal' ), this.getCache( 'normalScale', 'vec2' ) );\r\n\t\t\t\tnode.normalMapType = material.normalMapType;\r\n\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\t\tnode = bumpMap( this.getTexture( 'bump' ).r, this.getFloat( 'bumpScale' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = normalView;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\r\n\r\n\t\t\tconst clearcoatNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = clearcoatNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\r\n\r\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = clearcoatRoughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tnode = normalMap( this.getTexture( scope ), this.getCache( scope + 'Scale', 'vec2' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = normalView;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\r\n\r\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\r\n\r\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = sheenNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\r\n\r\n\t\t\tconst sheenRoughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( scope ).a );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = sheenRoughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnode = node.clamp( 0.07, 1.0 );\r\n\r\n\t\t} else if ( scope === MaterialNode.ANISOTROPY ) {\r\n\r\n\t\t\tif ( material.anisotropyMap && material.anisotropyMap.isTexture === true ) {\r\n\r\n\t\t\t\tconst anisotropyPolar = this.getTexture( scope );\r\n\t\t\t\tconst anisotropyMat = mat2( materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x );\r\n\r\n\t\t\t\tnode = anisotropyMat.mul( anisotropyPolar.rg.mul( 2.0 ).sub( vec2( 1.0 ) ).normalize().mul( anisotropyPolar.b ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = materialAnisotropyVector;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\r\n\r\n\t\t\tconst iridescenceThicknessMaximum = reference( '1', 'float', material.iridescenceThicknessRange );\r\n\r\n\t\t\tif ( material.iridescenceThicknessMap ) {\r\n\r\n\t\t\t\tconst iridescenceThicknessMinimum = reference( '0', 'float', material.iridescenceThicknessRange );\r\n\r\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = iridescenceThicknessMaximum;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.TRANSMISSION ) {\r\n\r\n\t\t\tconst transmissionNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.transmissionMap ) {\r\n\r\n\t\t\t\tnode = transmissionNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = transmissionNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.THICKNESS ) {\r\n\r\n\t\t\tconst thicknessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.thicknessMap ) {\r\n\r\n\t\t\t\tnode = thicknessNode.mul( this.getTexture( scope ).g );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = thicknessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.IOR ) {\r\n\r\n\t\t\tnode = this.getFloat( scope );\r\n\r\n\t\t} else if ( scope === MaterialNode.LIGHT_MAP ) {\r\n\r\n\t\t\tnode = this.getTexture( scope ).rgb.mul( this.getFloat( 'lightMapIntensity' ) );\r\n\r\n\t\t} else if ( scope === MaterialNode.AO_MAP ) {\r\n\r\n\t\t\tnode = this.getTexture( scope ).r.sub( 1.0 ).mul( this.getFloat( 'aoMapIntensity' ) ).add( 1.0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst outputType = this.getNodeType( builder );\r\n\r\n\t\t\tnode = this.getCache( scope, outputType );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMaterialNode.ALPHA_TEST = 'alphaTest';\r\nMaterialNode.COLOR = 'color';\r\nMaterialNode.OPACITY = 'opacity';\r\nMaterialNode.SHININESS = 'shininess';\r\nMaterialNode.SPECULAR = 'specular';\r\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\r\nMaterialNode.SPECULAR_INTENSITY = 'specularIntensity';\r\nMaterialNode.SPECULAR_COLOR = 'specularColor';\r\nMaterialNode.REFLECTIVITY = 'reflectivity';\r\nMaterialNode.ROUGHNESS = 'roughness';\r\nMaterialNode.METALNESS = 'metalness';\r\nMaterialNode.NORMAL = 'normal';\r\nMaterialNode.CLEARCOAT = 'clearcoat';\r\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\r\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\r\nMaterialNode.EMISSIVE = 'emissive';\r\nMaterialNode.ROTATION = 'rotation';\r\nMaterialNode.SHEEN = 'sheen';\r\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\r\nMaterialNode.ANISOTROPY = 'anisotropy';\r\nMaterialNode.IRIDESCENCE = 'iridescence';\r\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\r\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\r\nMaterialNode.IOR = 'ior';\r\nMaterialNode.TRANSMISSION = 'transmission';\r\nMaterialNode.THICKNESS = 'thickness';\r\nMaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';\r\nMaterialNode.ATTENUATION_COLOR = 'attenuationColor';\r\nMaterialNode.LINE_SCALE = 'scale';\r\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\r\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\r\nMaterialNode.LINE_WIDTH = 'linewidth';\r\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\r\nMaterialNode.POINT_WIDTH = 'pointWidth';\r\nMaterialNode.DISPERSION = 'dispersion';\r\nMaterialNode.LIGHT_MAP = 'light';\r\nMaterialNode.AO_MAP = 'ao';\r\n\r\nexport default MaterialNode;\r\n\r\nexport const materialAlphaTest = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\r\nexport const materialColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.COLOR );\r\nexport const materialShininess = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHININESS );\r\nexport const materialEmissive = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\r\nexport const materialOpacity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.OPACITY );\r\nexport const materialSpecular = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\r\n\r\nexport const materialSpecularIntensity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_INTENSITY );\r\nexport const materialSpecularColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\r\n\r\nexport const materialSpecularStrength = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\r\nexport const materialReflectivity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\r\nexport const materialRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\r\nexport const materialMetalness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.METALNESS );\r\nexport const materialNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.NORMAL ).context( { getUV: null } );\r\nexport const materialClearcoat = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\r\nexport const materialClearcoatRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\r\nexport const materialClearcoatNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL ).context( { getUV: null } );\r\nexport const materialRotation = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROTATION );\r\nexport const materialSheen = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN );\r\nexport const materialSheenRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\r\nexport const materialAnisotropy = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ANISOTROPY );\r\nexport const materialIridescence = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\r\nexport const materialIridescenceIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\r\nexport const materialIridescenceThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\r\nexport const materialTransmission = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.TRANSMISSION );\r\nexport const materialThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.THICKNESS );\r\nexport const materialIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IOR );\r\nexport const materialAttenuationDistance = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_DISTANCE );\r\nexport const materialAttenuationColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_COLOR );\r\nexport const materialLineScale = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );\r\nexport const materialLineDashSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );\r\nexport const materialLineGapSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );\r\nexport const materialLineWidth = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );\r\nexport const materialLineDashOffset = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );\r\nexport const materialPointWidth = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.POINT_WIDTH );\r\nexport const materialDispersion = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.DISPERSION );\r\nexport const materialLightMap = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LIGHT_MAP );\r\nexport const materialAOMap = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.AO_MAP );\r\nexport const materialAnisotropyVector = /*@__PURE__*/ uniform( new Vector2() ).onReference( function ( frame ) {\r\n\r\n\treturn frame.material;\r\n\r\n} ).onRenderUpdate( function ( { material } ) {\r\n\r\n\tthis.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\r\n\r\n} );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { cameraProjectionMatrix } from './Camera.js';\r\nimport { positionLocal } from './Position.js';\r\nimport { nodeProxy, varying } from '../tsl/TSLBase.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\n\r\nclass ModelViewProjectionNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ModelViewProjectionNode';\r\n\r\n\t}\r\n\r\n\tconstructor( positionNode = null ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.positionNode = positionNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.shaderStage === 'fragment' ) {\r\n\r\n\t\t\treturn varying( builder.context.mvp );\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.positionNode || positionLocal;\r\n\t\tconst viewMatrix = builder.renderer.nodes.modelViewMatrix || modelViewMatrix;\r\n\r\n\t\treturn cameraProjectionMatrix.mul( viewMatrix ).mul( position );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ModelViewProjectionNode;\r\n\r\nexport const modelViewProjection = /*@__PURE__*/ nodeProxy( ModelViewProjectionNode );\r\n", "import Node from './Node.js';\r\nimport { nodeImmutable, varying } from '../tsl/TSLBase.js';\r\n\r\nclass IndexNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'IndexNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper( 'uint' );\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t\tthis.isInstanceIndexNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet propertyName;\r\n\r\n\t\tif ( scope === IndexNode.VERTEX ) {\r\n\r\n\t\t\t// The index of a vertex within a mesh.\r\n\t\t\tpropertyName = builder.getVertexIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.INSTANCE ) {\r\n\r\n\t\t\t// The index of either a mesh instance or an invocation of a compute shader.\r\n\t\t\tpropertyName = builder.getInstanceIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.DRAW ) {\r\n\r\n\t\t\t// The index of a draw call.\r\n\t\t\tpropertyName = builder.getDrawIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.INVOCATION_LOCAL ) {\r\n\r\n\t\t\t// The index of a compute invocation within the scope of a workgroup load.\r\n\t\t\tpropertyName = builder.getInvocationLocalIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.INVOCATION_SUBGROUP ) {\r\n\r\n\t\t\t// The index of a compute invocation within the scope of a subgroup.\r\n\t\t\tpropertyName = builder.getInvocationSubgroupIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.SUBGROUP ) {\r\n\r\n\t\t\t// The index of the subgroup the current compute invocation belongs to.\r\n\t\t\tpropertyName = builder.getSubgroupIndex();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.IndexNode: Unknown scope: ' + scope );\r\n\r\n\t\t}\r\n\r\n\t\tlet output;\r\n\r\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\toutput = propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\toutput = nodeVarying.build( builder, nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nIndexNode.VERTEX = 'vertex';\r\nIndexNode.INSTANCE = 'instance';\r\nIndexNode.SUBGROUP = 'subgroup';\r\nIndexNode.INVOCATION_LOCAL = 'invocationLocal';\r\nIndexNode.INVOCATION_SUBGROUP = 'invocationSubgroup';\r\nIndexNode.DRAW = 'draw';\r\n\r\nexport default IndexNode;\r\n\r\nexport const vertexIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.VERTEX );\r\nexport const instanceIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INSTANCE );\r\nexport const subgroupIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.SUBGROUP );\r\nexport const invocationSubgroupIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_SUBGROUP );\r\nexport const invocationLocalIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_LOCAL );\r\nexport const drawIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.DRAW );\r\n", "import Node from '../core/Node.js';\r\nimport { varyingProperty } from '../core/PropertyNode.js';\r\nimport { instancedBufferAttribute, instancedDynamicBufferAttribute } from './BufferAttributeNode.js';\r\nimport { normalLocal, transformNormal } from './Normal.js';\r\nimport { positionLocal } from './Position.js';\r\nimport { nodeProxy, vec3, mat4 } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { buffer } from '../accessors/BufferNode.js';\r\nimport { instanceIndex } from '../core/IndexNode.js';\r\n\r\nimport { InstancedInterleavedBuffer } from '../../core/InstancedInterleavedBuffer.js';\r\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\r\nimport { DynamicDrawUsage } from '../../constants.js';\r\n\r\nclass InstanceNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'InstanceNode';\r\n\r\n\t}\r\n\r\n\tconstructor( instanceMesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.instanceMesh = instanceMesh;\r\n\r\n\t\tthis.instanceMatrixNode = null;\r\n\r\n\t\tthis.instanceColorNode = null;\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t\tthis.buffer = null;\r\n\t\tthis.bufferColor = null;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tlet instanceMatrixNode = this.instanceMatrixNode;\r\n\t\tlet instanceColorNode = this.instanceColorNode;\r\n\r\n\t\tconst instanceMesh = this.instanceMesh;\r\n\r\n\t\tif ( instanceMatrixNode === null ) {\r\n\r\n\t\t\tconst instanceAttribute = instanceMesh.instanceMatrix;\r\n\r\n\t\t\t// Both WebGPU and WebGL backends have UBO max limited to 64kb. Matrix count number bigger than 1000 ( 16 * 4 * 1000 = 64kb ) will fallback to attribute.\r\n\r\n\t\t\tif ( instanceMesh.count <= 1000 ) {\r\n\r\n\t\t\t\tinstanceMatrixNode = buffer( instanceAttribute.array, 'mat4', Math.max( instanceMesh.count, 1 ) ).element( instanceIndex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst buffer = new InstancedInterleavedBuffer( instanceAttribute.array, 16, 1 );\r\n\r\n\t\t\t\tthis.buffer = buffer;\r\n\r\n\t\t\t\tconst bufferFn = instanceAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\r\n\r\n\t\t\t\tconst instanceBuffers = [\r\n\t\t\t\t\t// F.Signature -> bufferAttribute( array, type, stride, offset )\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 0 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 4 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 8 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 12 )\r\n\t\t\t\t];\r\n\r\n\t\t\t\tinstanceMatrixNode = mat4( ...instanceBuffers );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.instanceMatrixNode = instanceMatrixNode;\r\n\r\n\t\t}\r\n\r\n\t\tconst instanceColorAttribute = instanceMesh.instanceColor;\r\n\r\n\t\tif ( instanceColorAttribute && instanceColorNode === null ) {\r\n\r\n\t\t\tconst buffer = new InstancedBufferAttribute( instanceColorAttribute.array, 3 );\r\n\r\n\t\t\tconst bufferFn = instanceColorAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\r\n\r\n\t\t\tthis.bufferColor = buffer;\r\n\r\n\t\t\tinstanceColorNode = vec3( bufferFn( buffer, 'vec3', 3, 0 ) );\r\n\r\n\t\t\tthis.instanceColorNode = instanceColorNode;\r\n\r\n\t\t}\r\n\r\n\t\t// POSITION\r\n\r\n\t\tconst instancePosition = instanceMatrixNode.mul( positionLocal ).xyz;\r\n\t\tpositionLocal.assign( instancePosition );\r\n\r\n\t\t// NORMAL\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'normal' ) ) {\r\n\r\n\t\t\tconst instanceNormal = transformNormal( normalLocal, instanceMatrixNode );\r\n\r\n\t\t\t// ASSIGNS\r\n\r\n\t\t\tnormalLocal.assign( instanceNormal );\r\n\r\n\t\t}\r\n\r\n\t\t// COLOR\r\n\r\n\t\tif ( this.instanceColorNode !== null ) {\r\n\r\n\t\t\tvaryingProperty( 'vec3', 'vInstanceColor' ).assign( this.instanceColorNode );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tif ( this.instanceMesh.instanceMatrix.usage !== DynamicDrawUsage && this.buffer != null && this.instanceMesh.instanceMatrix.version !== this.buffer.version ) {\r\n\r\n\t\t\tthis.buffer.version = this.instanceMesh.instanceMatrix.version;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.instanceMesh.instanceColor && this.instanceMesh.instanceColor.usage !== DynamicDrawUsage && this.bufferColor != null && this.instanceMesh.instanceColor.version !== this.bufferColor.version ) {\r\n\r\n\t\t\tthis.bufferColor.version = this.instanceMesh.instanceColor.version;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InstanceNode;\r\n\r\nexport const instance = /*@__PURE__*/ nodeProxy( InstanceNode );\r\n", "import Node from '../core/Node.js';\r\nimport { normalLocal } from './Normal.js';\r\nimport { positionLocal } from './Position.js';\r\nimport { nodeProxy, vec3, mat3, mat4, int, ivec2, float, Fn } from '../tsl/TSLBase.js';\r\nimport { textureLoad } from './TextureNode.js';\r\nimport { textureSize } from './TextureSizeNode.js';\r\nimport { tangentLocal } from './Tangent.js';\r\nimport { instanceIndex, drawIndex } from '../core/IndexNode.js';\r\nimport { varyingProperty } from '../core/PropertyNode.js';\r\n\r\nclass BatchNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BatchNode';\r\n\r\n\t}\r\n\r\n\tconstructor( batchMesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.batchMesh = batchMesh;\r\n\r\n\r\n\t\tthis.batchingIdNode = null;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// POSITION\r\n\r\n\t\tif ( this.batchingIdNode === null ) {\r\n\r\n\t\t\tif ( builder.getDrawIndex() === null ) {\r\n\r\n\t\t\t\tthis.batchingIdNode = instanceIndex;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.batchingIdNode = drawIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst getIndirectIndex = Fn( ( [ id ] ) => {\r\n\r\n\t\t\tconst size = textureSize( textureLoad( this.batchMesh._indirectTexture ), 0 );\r\n\t\t\tconst x = int( id ).modInt( int( size ) );\r\n\t\t\tconst y = int( id ).div( int( size ) );\r\n\t\t\treturn textureLoad( this.batchMesh._indirectTexture, ivec2( x, y ) ).x;\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'getIndirectIndex',\r\n\t\t\ttype: 'uint',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'id', type: 'int' }\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tconst indirectId = getIndirectIndex( int( this.batchingIdNode ) );\r\n\r\n\t\tconst matricesTexture = this.batchMesh._matricesTexture;\r\n\r\n\t\tconst size = textureSize( textureLoad( matricesTexture ), 0 );\r\n\t\tconst j = float( indirectId ).mul( 4 ).toInt().toVar();\r\n\r\n\t\tconst x = j.modInt( size );\r\n\t\tconst y = j.div( int( size ) );\r\n\t\tconst batchingMatrix = mat4(\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x, y ) ),\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 1 ), y ) ),\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 2 ), y ) ),\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 3 ), y ) )\r\n\t\t);\r\n\r\n\r\n\t\tconst colorsTexture = this.batchMesh._colorsTexture;\r\n\r\n\t\tif ( colorsTexture !== null ) {\r\n\r\n\t\t\tconst getBatchingColor = Fn( ( [ id ] ) => {\r\n\r\n\t\t\t\tconst size = textureSize( textureLoad( colorsTexture ), 0 ).x;\r\n\t\t\t\tconst j = id;\r\n\t\t\t\tconst x = j.modInt( size );\r\n\t\t\t\tconst y = j.div( size );\r\n\t\t\t\treturn textureLoad( colorsTexture, ivec2( x, y ) ).rgb;\r\n\r\n\t\t\t} ).setLayout( {\r\n\t\t\t\tname: 'getBatchingColor',\r\n\t\t\t\ttype: 'vec3',\r\n\t\t\t\tinputs: [\r\n\t\t\t\t\t{ name: 'id', type: 'int' }\r\n\t\t\t\t]\r\n\t\t\t} );\r\n\r\n\t\t\tconst color = getBatchingColor( indirectId );\r\n\r\n\t\t\tvaryingProperty( 'vec3', 'vBatchColor' ).assign( color );\r\n\r\n\t\t}\r\n\r\n\t\tconst bm = mat3( batchingMatrix );\r\n\r\n\t\tpositionLocal.assign( batchingMatrix.mul( positionLocal ) );\r\n\r\n\t\tconst transformedNormal = normalLocal.div( vec3( bm[ 0 ].dot( bm[ 0 ] ), bm[ 1 ].dot( bm[ 1 ] ), bm[ 2 ].dot( bm[ 2 ] ) ) );\r\n\r\n\t\tconst batchingNormal = bm.mul( transformedNormal ).xyz;\r\n\r\n\t\tnormalLocal.assign( batchingNormal );\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\r\n\r\n\t\t\ttangentLocal.mulAssign( bm );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BatchNode;\r\n\r\nexport const batch = /*@__PURE__*/ nodeProxy( BatchNode );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { reference, referenceBuffer } from './ReferenceNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { normalLocal } from './Normal.js';\r\nimport { positionLocal, positionPrevious } from './Position.js';\r\nimport { tangentLocal } from './Tangent.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { buffer } from './BufferNode.js';\r\n\r\nconst _frameId = new WeakMap();\r\n\r\nclass SkinningNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SkinningNode';\r\n\r\n\t}\r\n\r\n\tconstructor( skinnedMesh, useReference = false ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.skinnedMesh = skinnedMesh;\r\n\t\tthis.useReference = useReference;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\t//\r\n\r\n\t\tthis.skinIndexNode = attribute( 'skinIndex', 'uvec4' );\r\n\t\tthis.skinWeightNode = attribute( 'skinWeight', 'vec4' );\r\n\r\n\t\tlet bindMatrixNode, bindMatrixInverseNode, boneMatricesNode;\r\n\r\n\t\tif ( useReference ) {\r\n\r\n\t\t\tbindMatrixNode = reference( 'bindMatrix', 'mat4' );\r\n\t\t\tbindMatrixInverseNode = reference( 'bindMatrixInverse', 'mat4' );\r\n\t\t\tboneMatricesNode = referenceBuffer( 'skeleton.boneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbindMatrixNode = uniform( skinnedMesh.bindMatrix, 'mat4' );\r\n\t\t\tbindMatrixInverseNode = uniform( skinnedMesh.bindMatrixInverse, 'mat4' );\r\n\t\t\tboneMatricesNode = buffer( skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length );\r\n\r\n\t\t}\r\n\r\n\t\tthis.bindMatrixNode = bindMatrixNode;\r\n\t\tthis.bindMatrixInverseNode = bindMatrixInverseNode;\r\n\t\tthis.boneMatricesNode = boneMatricesNode;\r\n\t\tthis.previousBoneMatricesNode = null;\r\n\r\n\t}\r\n\r\n\tgetSkinnedPosition( boneMatrices = this.boneMatricesNode, position = positionLocal ) {\r\n\r\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;\r\n\r\n\t\tconst boneMatX = boneMatrices.element( skinIndexNode.x );\r\n\t\tconst boneMatY = boneMatrices.element( skinIndexNode.y );\r\n\t\tconst boneMatZ = boneMatrices.element( skinIndexNode.z );\r\n\t\tconst boneMatW = boneMatrices.element( skinIndexNode.w );\r\n\r\n\t\t// POSITION\r\n\r\n\t\tconst skinVertex = bindMatrixNode.mul( position );\r\n\r\n\t\tconst skinned = add(\r\n\t\t\tboneMatX.mul( skinWeightNode.x ).mul( skinVertex ),\r\n\t\t\tboneMatY.mul( skinWeightNode.y ).mul( skinVertex ),\r\n\t\t\tboneMatZ.mul( skinWeightNode.z ).mul( skinVertex ),\r\n\t\t\tboneMatW.mul( skinWeightNode.w ).mul( skinVertex )\r\n\t\t);\r\n\r\n\t\treturn bindMatrixInverseNode.mul( skinned ).xyz;\r\n\r\n\t}\r\n\r\n\tgetSkinnedNormal( boneMatrices = this.boneMatricesNode, normal = normalLocal ) {\r\n\r\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;\r\n\r\n\t\tconst boneMatX = boneMatrices.element( skinIndexNode.x );\r\n\t\tconst boneMatY = boneMatrices.element( skinIndexNode.y );\r\n\t\tconst boneMatZ = boneMatrices.element( skinIndexNode.z );\r\n\t\tconst boneMatW = boneMatrices.element( skinIndexNode.w );\r\n\r\n\t\t// NORMAL\r\n\r\n\t\tlet skinMatrix = add(\r\n\t\t\tskinWeightNode.x.mul( boneMatX ),\r\n\t\t\tskinWeightNode.y.mul( boneMatY ),\r\n\t\t\tskinWeightNode.z.mul( boneMatZ ),\r\n\t\t\tskinWeightNode.w.mul( boneMatW )\r\n\t\t);\r\n\r\n\t\tskinMatrix = bindMatrixInverseNode.mul( skinMatrix ).mul( bindMatrixNode );\r\n\r\n\t\treturn skinMatrix.transformDirection( normal ).xyz;\r\n\r\n\t}\r\n\r\n\tgetPreviousSkinnedPosition( builder ) {\r\n\r\n\t\tconst skinnedMesh = builder.object;\r\n\r\n\t\tif ( this.previousBoneMatricesNode === null ) {\r\n\r\n\t\t\tskinnedMesh.skeleton.previousBoneMatrices = new Float32Array( skinnedMesh.skeleton.boneMatrices );\r\n\r\n\t\t\tthis.previousBoneMatricesNode = referenceBuffer( 'skeleton.previousBoneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.getSkinnedPosition( this.previousBoneMatricesNode, positionPrevious );\r\n\r\n\t}\r\n\r\n\tneedsPreviousBoneMatrices( builder ) {\r\n\r\n\t\tconst mrt = builder.renderer.getMRT();\r\n\r\n\t\treturn mrt && mrt.has( 'velocity' );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this.needsPreviousBoneMatrices( builder ) ) {\r\n\r\n\t\t\tpositionPrevious.assign( this.getPreviousSkinnedPosition( builder ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst skinPosition = this.getSkinnedPosition();\r\n\r\n\r\n\t\tpositionLocal.assign( skinPosition );\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'normal' ) ) {\r\n\r\n\t\t\tconst skinNormal = this.getSkinnedNormal();\r\n\r\n\t\t\tnormalLocal.assign( skinNormal );\r\n\r\n\t\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\r\n\r\n\t\t\t\ttangentLocal.assign( skinNormal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\treturn positionLocal.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst object = this.useReference ? frame.object : this.skinnedMesh;\r\n\t\tconst skeleton = object.skeleton;\r\n\r\n\t\tif ( _frameId.get( skeleton ) === frame.frameId ) return;\r\n\r\n\t\t_frameId.set( skeleton, frame.frameId );\r\n\r\n\t\tif ( this.previousBoneMatricesNode !== null ) skeleton.previousBoneMatrices.set( skeleton.boneMatrices );\r\n\r\n\t\tskeleton.update();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SkinningNode;\r\n\r\nexport const skinning = ( skinnedMesh ) => nodeObject( new SkinningNode( skinnedMesh ) );\r\nexport const skinningReference = ( skinnedMesh ) => nodeObject( new SkinningNode( skinnedMesh, true ) );\r\n", "import Node from '../core/Node.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { nodeObject, nodeArray } from '../tsl/TSLBase.js';\r\n\r\nclass LoopNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LoopNode';\r\n\r\n\t}\r\n\r\n\tconstructor( params = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.params = params;\r\n\r\n\t}\r\n\r\n\tgetVarName( index ) {\r\n\r\n\t\treturn String.fromCharCode( 'i'.charCodeAt() + index );\r\n\r\n\t}\r\n\r\n\tgetProperties( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.stackNode !== undefined ) return properties;\r\n\r\n\t\t//\r\n\r\n\t\tconst inputs = {};\r\n\r\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tconst param = this.params[ i ];\r\n\r\n\t\t\tconst name = ( param.isNode !== true && param.name ) || this.getVarName( i );\r\n\t\t\tconst type = ( param.isNode !== true && param.type ) || 'int';\r\n\r\n\t\t\tinputs[ name ] = expression( name, type );\r\n\r\n\t\t}\r\n\r\n\t\tconst stack = builder.addStack(); // TODO: cache() it\r\n\r\n\t\tproperties.returnsNode = this.params[ this.params.length - 1 ]( inputs, stack, builder );\r\n\t\tproperties.stackNode = stack;\r\n\r\n\t\tbuilder.removeStack();\r\n\r\n\t\treturn properties;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst { returnsNode } = this.getProperties( builder );\r\n\r\n\t\treturn returnsNode ? returnsNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// setup properties\r\n\r\n\t\tthis.getProperties( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst properties = this.getProperties( builder );\r\n\r\n\t\tconst params = this.params;\r\n\t\tconst stackNode = properties.stackNode;\r\n\r\n\t\tfor ( let i = 0, l = params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tconst param = params[ i ];\r\n\r\n\t\t\tlet start = null, end = null, name = null, type = null, condition = null, update = null;\r\n\r\n\t\t\tif ( param.isNode ) {\r\n\r\n\t\t\t\ttype = 'int';\r\n\t\t\t\tname = this.getVarName( i );\r\n\t\t\t\tstart = '0';\r\n\t\t\t\tend = param.build( builder, type );\r\n\t\t\t\tcondition = '<';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = param.type || 'int';\r\n\t\t\t\tname = param.name || this.getVarName( i );\r\n\t\t\t\tstart = param.start;\r\n\t\t\t\tend = param.end;\r\n\t\t\t\tcondition = param.condition;\r\n\t\t\t\tupdate = param.update;\r\n\r\n\t\t\t\tif ( typeof start === 'number' ) start = start.toString();\r\n\t\t\t\telse if ( start && start.isNode ) start = start.build( builder, type );\r\n\r\n\t\t\t\tif ( typeof end === 'number' ) end = end.toString();\r\n\t\t\t\telse if ( end && end.isNode ) end = end.build( builder, type );\r\n\r\n\t\t\t\tif ( start !== undefined && end === undefined ) {\r\n\r\n\t\t\t\t\tstart = start + ' - 1';\r\n\t\t\t\t\tend = '0';\r\n\t\t\t\t\tcondition = '>=';\r\n\r\n\t\t\t\t} else if ( end !== undefined && start === undefined ) {\r\n\r\n\t\t\t\t\tstart = '0';\r\n\t\t\t\t\tcondition = '<';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( condition === undefined ) {\r\n\r\n\t\t\t\t\tif ( Number( start ) > Number( end ) ) {\r\n\r\n\t\t\t\t\t\tcondition = '>=';\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcondition = '<';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst internalParam = { start, end, condition };\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst startSnippet = internalParam.start;\r\n\t\t\tconst endSnippet = internalParam.end;\r\n\r\n\t\t\tlet declarationSnippet = '';\r\n\t\t\tlet conditionalSnippet = '';\r\n\t\t\tlet updateSnippet = '';\r\n\r\n\t\t\tif ( ! update ) {\r\n\r\n\t\t\t\tif ( type === 'int' || type === 'uint' ) {\r\n\r\n\t\t\t\t\tif ( condition.includes( '<' ) ) update = '++';\r\n\t\t\t\t\telse update = '--';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( condition.includes( '<' ) ) update = '+= 1.';\r\n\t\t\t\t\telse update = '-= 1.';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdeclarationSnippet += builder.getVar( type, name ) + ' = ' + startSnippet;\r\n\r\n\t\t\tconditionalSnippet += name + ' ' + condition + ' ' + endSnippet;\r\n\t\t\tupdateSnippet += name + ' ' + update;\r\n\r\n\t\t\tconst forSnippet = `for ( ${ declarationSnippet }; ${ conditionalSnippet }; ${ updateSnippet } )`;\r\n\r\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '\\n' : '' ) + builder.tab + forSnippet + ' {\\n\\n' ).addFlowTab();\r\n\r\n\t\t}\r\n\r\n\t\tconst stackSnippet = stackNode.build( builder, 'void' );\r\n\r\n\t\tconst returnsSnippet = properties.returnsNode ? properties.returnsNode.build( builder ) : '';\r\n\r\n\t\tbuilder.removeFlowTab().addFlowCode( '\\n' + builder.tab + stackSnippet );\r\n\r\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '' : builder.tab ) + '}\\n\\n' ).removeFlowTab();\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addFlowTab();\r\n\r\n\t\treturn returnsSnippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LoopNode;\r\n\r\nexport const Loop = ( ...params ) => nodeObject( new LoopNode( nodeArray( params, 'int' ) ) ).append();\r\nexport const Continue = () => expression( 'continue' ).append();\r\nexport const Break = () => expression( 'break' ).append();\r\n\r\n//\r\n\r\nexport const loop = ( ...params ) => { // @deprecated, r168\r\n\r\n\tconsole.warn( 'TSL.LoopNode: loop() has been renamed to Loop().' );\r\n\treturn Loop( ...params );\r\n\r\n};\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { float, nodeProxy, Fn } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { reference } from './ReferenceNode.js';\r\nimport { positionLocal } from './Position.js';\r\nimport { normalLocal } from './Normal.js';\r\nimport { textureLoad } from './TextureNode.js';\r\nimport { instanceIndex, vertexIndex } from '../core/IndexNode.js';\r\nimport { ivec2, int } from '../tsl/TSLBase.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\n\r\nimport { DataArrayTexture } from '../../textures/DataArrayTexture.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { FloatType } from '../../constants.js';\r\n\r\nconst _morphTextures = /*@__PURE__*/ new WeakMap();\r\nconst _morphVec4 = /*@__PURE__*/ new Vector4();\r\n\r\nconst getMorph = /*@__PURE__*/ Fn( ( { bufferMap, influence, stride, width, depth, offset } ) => {\r\n\r\n\tconst texelIndex = int( vertexIndex ).mul( stride ).add( offset );\r\n\r\n\tconst y = texelIndex.div( width );\r\n\tconst x = texelIndex.sub( y.mul( width ) );\r\n\r\n\tconst bufferAttrib = textureLoad( bufferMap, ivec2( x, y ) ).depth( depth );\r\n\r\n\treturn bufferAttrib.mul( influence );\r\n\r\n} );\r\n\r\nfunction getEntry( geometry ) {\r\n\r\n\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\r\n\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\r\n\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\r\n\r\n\t// instead of using attributes, the WebGL 2 code path encodes morph targets\r\n\t// into an array of data textures. Each layer represents a single morph target.\r\n\r\n\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\tlet entry = _morphTextures.get( geometry );\r\n\r\n\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\r\n\r\n\t\tif ( entry !== undefined ) entry.texture.dispose();\r\n\r\n\t\tconst morphTargets = geometry.morphAttributes.position || [];\r\n\t\tconst morphNormals = geometry.morphAttributes.normal || [];\r\n\t\tconst morphColors = geometry.morphAttributes.color || [];\r\n\r\n\t\tlet vertexDataCount = 0;\r\n\r\n\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\r\n\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\r\n\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\r\n\r\n\t\tlet width = geometry.attributes.position.count * vertexDataCount;\r\n\t\tlet height = 1;\r\n\r\n\t\tconst maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'\r\n\r\n\t\tif ( width > maxTextureSize ) {\r\n\r\n\t\t\theight = Math.ceil( width / maxTextureSize );\r\n\t\t\twidth = maxTextureSize;\r\n\r\n\t\t}\r\n\r\n\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\r\n\r\n\t\tconst bufferTexture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\r\n\t\tbufferTexture.type = FloatType;\r\n\t\tbufferTexture.needsUpdate = true;\r\n\r\n\t\t// fill buffer\r\n\r\n\t\tconst vertexDataStride = vertexDataCount * 4;\r\n\r\n\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\r\n\r\n\t\t\tconst morphTarget = morphTargets[ i ];\r\n\t\t\tconst morphNormal = morphNormals[ i ];\r\n\t\t\tconst morphColor = morphColors[ i ];\r\n\r\n\t\t\tconst offset = width * height * 4 * i;\r\n\r\n\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\r\n\r\n\t\t\t\tconst stride = j * vertexDataStride;\r\n\r\n\t\t\t\tif ( hasMorphPosition === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphTarget, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 0 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 1 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 2 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasMorphNormals === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphNormal, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 4 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 5 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 6 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasMorphColors === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphColor, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 8 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 9 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 10 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? _morphVec4.w : 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tentry = {\r\n\t\t\tcount: morphTargetsCount,\r\n\t\t\ttexture: bufferTexture,\r\n\t\t\tstride: vertexDataCount,\r\n\t\t\tsize: new Vector2( width, height )\r\n\t\t};\r\n\r\n\t\t_morphTextures.set( geometry, entry );\r\n\r\n\t\tfunction disposeTexture() {\r\n\r\n\t\t\tbufferTexture.dispose();\r\n\r\n\t\t\t_morphTextures.delete( geometry );\r\n\r\n\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addEventListener( 'dispose', disposeTexture );\r\n\r\n\t}\r\n\r\n\treturn entry;\r\n\r\n}\r\n\r\n\r\nclass MorphNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MorphNode';\r\n\r\n\t}\r\n\r\n\tconstructor( mesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.mesh = mesh;\r\n\t\tthis.morphBaseInfluence = uniform( 1 );\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { geometry } = builder;\r\n\r\n\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\r\n\t\tconst hasMorphNormals = geometry.hasAttribute( 'normal' ) && geometry.morphAttributes.normal !== undefined;\r\n\r\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\t\t// nodes\r\n\r\n\t\tconst { texture: bufferMap, stride, size } = getEntry( geometry );\r\n\r\n\t\tif ( hasMorphPosition === true ) positionLocal.mulAssign( this.morphBaseInfluence );\r\n\t\tif ( hasMorphNormals === true ) normalLocal.mulAssign( this.morphBaseInfluence );\r\n\r\n\t\tconst width = int( size.width );\r\n\r\n\t\tLoop( morphTargetsCount, ( { i } ) => {\r\n\r\n\t\t\tconst influence = float( 0 ).toVar();\r\n\r\n\t\t\tif ( this.mesh.count > 1 && ( this.mesh.morphTexture !== null && this.mesh.morphTexture !== undefined ) ) {\r\n\r\n\t\t\t\tinfluence.assign( textureLoad( this.mesh.morphTexture, ivec2( int( i ).add( 1 ), int( instanceIndex ) ) ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinfluence.assign( reference( 'morphTargetInfluences', 'float' ).element( i ).toVar() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMorphPosition === true ) {\r\n\r\n\t\t\t\tpositionLocal.addAssign( getMorph( {\r\n\t\t\t\t\tbufferMap,\r\n\t\t\t\t\tinfluence,\r\n\t\t\t\t\tstride,\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\tdepth: i,\r\n\t\t\t\t\toffset: int( 0 )\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMorphNormals === true ) {\r\n\r\n\t\t\t\tnormalLocal.addAssign( getMorph( {\r\n\t\t\t\t\tbufferMap,\r\n\t\t\t\t\tinfluence,\r\n\t\t\t\t\tstride,\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\tdepth: i,\r\n\t\t\t\t\toffset: int( 1 )\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst morphBaseInfluence = this.morphBaseInfluence;\r\n\r\n\t\tif ( this.mesh.geometry.morphTargetsRelative ) {\r\n\r\n\t\t\tmorphBaseInfluence.value = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmorphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce( ( a, b ) => a + b, 0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MorphNode;\r\n\r\nexport const morphReference = /*@__PURE__*/ nodeProxy( MorphNode );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeObject, nodeProxy, vec3 } from '../tsl/TSLBase.js';\r\n\r\nconst sortLights = ( lights ) => {\r\n\r\n\treturn lights.sort( ( a, b ) => a.id - b.id );\r\n\r\n};\r\n\r\nconst getLightNodeById = ( id, lightNodes ) => {\r\n\r\n\tfor ( const lightNode of lightNodes ) {\r\n\r\n\t\tif ( lightNode.isAnalyticLightNode && lightNode.light.id === id ) {\r\n\r\n\t\t\treturn lightNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\nconst _lightsNodeRef = /*@__PURE__*/ new WeakMap();\r\n\r\nclass LightsNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LightsNode';\r\n\r\n\t}\r\n\r\n\tconstructor( lights = [] ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.totalDiffuseNode = vec3().toVar( 'totalDiffuse' );\r\n\t\tthis.totalSpecularNode = vec3().toVar( 'totalSpecular' );\r\n\r\n\t\tthis.outgoingLightNode = vec3().toVar( 'outgoingLight' );\r\n\r\n\t\tthis._lights = lights;\r\n\r\n\t\tthis._lightNodes = null;\r\n\t\tthis._lightNodesHash = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\tif ( this._lightNodesHash === null ) {\r\n\r\n\t\t\tif ( this._lightNodes === null ) this.setupLightsNode( builder );\r\n\r\n\t\t\tconst hash = [];\r\n\r\n\t\t\tfor ( const lightNode of this._lightNodes ) {\r\n\r\n\t\t\t\thash.push( lightNode.getHash() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._lightNodesHash = 'lights-' + hash.join( ',' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this._lightNodesHash;\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tconst properties = builder.getDataFromNode( this );\r\n\r\n\t\tfor ( const node of properties.nodes ) {\r\n\r\n\t\t\tnode.build( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupLightsNode( builder ) {\r\n\r\n\t\tconst lightNodes = [];\r\n\r\n\t\tconst previousLightNodes = this._lightNodes;\r\n\r\n\t\tconst lights = sortLights( this._lights );\r\n\t\tconst nodeLibrary = builder.renderer.nodes.library;\r\n\r\n\t\tfor ( const light of lights ) {\r\n\r\n\t\t\tif ( light.isNode ) {\r\n\r\n\t\t\t\tlightNodes.push( nodeObject( light ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet lightNode = null;\r\n\r\n\t\t\t\tif ( previousLightNodes !== null ) {\r\n\r\n\t\t\t\t\tlightNode = getLightNodeById( light.id, previousLightNodes ); // resuse existing light node\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( lightNode === null ) {\r\n\r\n\t\t\t\t\tconst lightNodeClass = nodeLibrary.getLightNodeClass( light.constructor );\r\n\r\n\t\t\t\t\tif ( lightNodeClass === null ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( `LightsNode.setupNodeLights: Light node not found for ${ light.constructor.name }` );\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet lightNode = null;\r\n\r\n\t\t\t\t\tif ( ! _lightsNodeRef.has( light ) ) {\r\n\r\n\t\t\t\t\t\tlightNode = new lightNodeClass( light );\r\n\t\t\t\t\t\t_lightsNodeRef.set( light, lightNode );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tlightNode = _lightsNodeRef.get( light );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlightNodes.push( lightNode );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._lightNodes = lightNodes;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this._lightNodes === null ) this.setupLightsNode( builder );\r\n\r\n\t\tconst context = builder.context;\r\n\t\tconst lightingModel = context.lightingModel;\r\n\r\n\t\tlet outgoingLightNode = this.outgoingLightNode;\r\n\r\n\t\tif ( lightingModel ) {\r\n\r\n\t\t\tconst { _lightNodes, totalDiffuseNode, totalSpecularNode } = this;\r\n\r\n\t\t\tcontext.outgoingLight = outgoingLightNode;\r\n\r\n\t\t\tconst stack = builder.addStack();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst properties = builder.getDataFromNode( this );\r\n\t\t\tproperties.nodes = stack.nodes;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlightingModel.start( context, stack, builder );\r\n\r\n\t\t\t// lights\r\n\r\n\t\t\tfor ( const lightNode of _lightNodes ) {\r\n\r\n\t\t\t\tlightNode.build( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlightingModel.indirect( context, stack, builder );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst { backdrop, backdropAlpha } = context;\r\n\t\t\tconst { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context.reflectedLight;\r\n\r\n\t\t\tlet totalDiffuse = directDiffuse.add( indirectDiffuse );\r\n\r\n\t\t\tif ( backdrop !== null ) {\r\n\r\n\t\t\t\tif ( backdropAlpha !== null ) {\r\n\r\n\t\t\t\t\ttotalDiffuse = vec3( backdropAlpha.mix( totalDiffuse, backdrop ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttotalDiffuse = vec3( backdrop );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontext.material.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttotalDiffuseNode.assign( totalDiffuse );\r\n\t\t\ttotalSpecularNode.assign( directSpecular.add( indirectSpecular ) );\r\n\r\n\t\t\toutgoingLightNode.assign( totalDiffuseNode.add( totalSpecularNode ) );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlightingModel.finish( context, stack, builder );\r\n\r\n\t\t\t//\r\n\r\n\t\t\toutgoingLightNode = outgoingLightNode.bypass( builder.removeStack() );\r\n\r\n\t\t}\r\n\r\n\t\treturn outgoingLightNode;\r\n\r\n\t}\r\n\r\n\tsetLights( lights ) {\r\n\r\n\t\tthis._lights = lights;\r\n\r\n\t\tthis._lightNodes = null;\r\n\t\tthis._lightNodesHash = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetLights() {\r\n\r\n\t\treturn this._lights;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightsNode;\r\n\r\nexport const lights = /*@__PURE__*/ nodeProxy( LightsNode );\r\n", "import Node from '../core/Node.js';\r\n\r\nclass LightingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LightingNode';\r\n\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.isLightingNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightingNode;\r\n", "import LightingNode from './LightingNode.js';\r\n\r\nclass AONode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AONode';\r\n\r\n\t}\r\n\r\n\tconstructor( aoNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.aoNode = aoNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.ambientOcclusion.mulAssign( this.aoNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AONode;\r\n", "import ContextNode from '../core/ContextNode.js';\r\nimport { nodeProxy, float, vec3 } from '../tsl/TSLBase.js';\r\n\r\nclass LightingContextNode extends ContextNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LightingContextNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, lightingModel = null, backdropNode = null, backdropAlphaNode = null ) {\r\n\r\n\t\tsuper( node );\r\n\r\n\t\tthis.lightingModel = lightingModel;\r\n\t\tthis.backdropNode = backdropNode;\r\n\t\tthis.backdropAlphaNode = backdropAlphaNode;\r\n\r\n\t\tthis._value = null;\r\n\r\n\t}\r\n\r\n\tgetContext() {\r\n\r\n\t\tconst { backdropNode, backdropAlphaNode } = this;\r\n\r\n\t\tconst directDiffuse = vec3().toVar( 'directDiffuse' ),\r\n\t\t\tdirectSpecular = vec3().toVar( 'directSpecular' ),\r\n\t\t\tindirectDiffuse = vec3().toVar( 'indirectDiffuse' ),\r\n\t\t\tindirectSpecular = vec3().toVar( 'indirectSpecular' );\r\n\r\n\t\tconst reflectedLight = {\r\n\t\t\tdirectDiffuse,\r\n\t\t\tdirectSpecular,\r\n\t\t\tindirectDiffuse,\r\n\t\t\tindirectSpecular\r\n\t\t};\r\n\r\n\t\tconst context = {\r\n\t\t\tradiance: vec3().toVar( 'radiance' ),\r\n\t\t\tirradiance: vec3().toVar( 'irradiance' ),\r\n\t\t\tiblIrradiance: vec3().toVar( 'iblIrradiance' ),\r\n\t\t\tambientOcclusion: float( 1 ).toVar( 'ambientOcclusion' ),\r\n\t\t\treflectedLight,\r\n\t\t\tbackdrop: backdropNode,\r\n\t\t\tbackdropAlpha: backdropAlphaNode\r\n\t\t};\r\n\r\n\t\treturn context;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.value = this._value || ( this._value = this.getContext() );\r\n\t\tthis.value.lightingModel = this.lightingModel || builder.context.lightingModel;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightingContextNode;\r\n\r\nexport const lightingContext = /*@__PURE__*/ nodeProxy( LightingContextNode );\r\n", "import LightingNode from './LightingNode.js';\r\n\r\nclass IrradianceNode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'IrradianceNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.irradiance.addAssign( this.node );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default IrradianceNode;\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { Fn, nodeImmutable, vec2 } from '../tsl/TSLBase.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nlet screenSizeVec, viewportVec;\r\n\r\nclass ScreenNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ScreenNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t\tthis.isViewportNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) return 'vec4';\r\n\t\telse return 'vec2';\r\n\r\n\t}\r\n\r\n\tgetUpdateType() {\r\n\r\n\t\tlet updateType = NodeUpdateType.NONE;\r\n\r\n\t\tif ( this.scope === ScreenNode.SIZE || this.scope === ScreenNode.VIEWPORT ) {\r\n\r\n\t\t\tupdateType = NodeUpdateType.RENDER;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateType = updateType;\r\n\r\n\t\treturn updateType;\r\n\r\n\t}\r\n\r\n\tupdate( { renderer } ) {\r\n\r\n\t\tconst renderTarget = renderer.getRenderTarget();\r\n\r\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) {\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tviewportVec.copy( renderTarget.viewport );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.getViewport( viewportVec );\r\n\r\n\t\t\t\tviewportVec.multiplyScalar( renderer.getPixelRatio() );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tscreenSizeVec.width = renderTarget.width;\r\n\t\t\t\tscreenSizeVec.height = renderTarget.height;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.getDrawingBufferSize( screenSizeVec );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( /*builder*/ ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( scope === ScreenNode.SIZE ) {\r\n\r\n\t\t\toutput = uniform( screenSizeVec || ( screenSizeVec = new Vector2() ) );\r\n\r\n\t\t} else if ( scope === ScreenNode.VIEWPORT ) {\r\n\r\n\t\t\toutput = uniform( viewportVec || ( viewportVec = new Vector4() ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutput = vec2( screenCoordinate.div( screenSize ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tif ( this.scope === ScreenNode.COORDINATE ) {\r\n\r\n\t\t\tlet coord = builder.getFragCoord();\r\n\r\n\t\t\tif ( builder.isFlipY() ) {\r\n\r\n\t\t\t\t// follow webgpu standards\r\n\r\n\t\t\t\tconst size = builder.getNodeProperties( screenSize ).outputNode.build( builder );\r\n\r\n\t\t\t\tcoord = `${ builder.getType( 'vec2' ) }( ${ coord }.x, ${ size }.y - ${ coord }.y )`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn coord;\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nScreenNode.COORDINATE = 'coordinate';\r\nScreenNode.VIEWPORT = 'viewport';\r\nScreenNode.SIZE = 'size';\r\nScreenNode.UV = 'uv';\r\n\r\nexport default ScreenNode;\r\n\r\n// Screen\r\n\r\nexport const screenUV = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.UV );\r\nexport const screenSize = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.SIZE );\r\nexport const screenCoordinate = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.COORDINATE );\r\n\r\n// Viewport\r\n\r\nexport const viewport = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.VIEWPORT );\r\nexport const viewportSize = viewport.zw;\r\nexport const viewportCoordinate = /*@__PURE__*/ screenCoordinate.sub( viewport.xy );\r\nexport const viewportUV = /*@__PURE__*/ viewportCoordinate.div( viewportSize );\r\n\r\n// Deprecated\r\n\r\nexport const viewportResolution = /*@__PURE__*/ ( Fn( () => { // @deprecated, r169\r\n\r\n\tconsole.warn( 'TSL.ViewportNode: \"viewportResolution\" is deprecated. Use \"screenSize\" instead.' );\r\n\r\n\treturn screenSize;\r\n\r\n}, 'vec2' ).once() )();\r\n\r\nexport const viewportTopLeft = /*@__PURE__*/ ( Fn( () => { // @deprecated, r168\r\n\r\n\tconsole.warn( 'TSL.ViewportNode: \"viewportTopLeft\" is deprecated. Use \"screenUV\" instead.' );\r\n\r\n\treturn screenUV;\r\n\r\n}, 'vec2' ).once() )();\r\n\r\nexport const viewportBottomLeft = /*@__PURE__*/ ( Fn( () => { // @deprecated, r168\r\n\r\n\tconsole.warn( 'TSL.ViewportNode: \"viewportBottomLeft\" is deprecated. Use \"screenUV.flipY()\" instead.' );\r\n\r\n\treturn screenUV.flipY();\r\n\r\n}, 'vec2' ).once() )();\r\n", "import TextureNode from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { screenUV } from './ScreenNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { FramebufferTexture } from '../../textures/FramebufferTexture.js';\r\nimport { LinearMipmapLinearFilter } from '../../constants.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass ViewportTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportTextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( uvNode = screenUV, levelNode = null, framebufferTexture = null ) {\r\n\r\n\t\tif ( framebufferTexture === null ) {\r\n\r\n\t\t\tframebufferTexture = new FramebufferTexture();\r\n\t\t\tframebufferTexture.minFilter = LinearMipmapLinearFilter;\r\n\r\n\t\t}\r\n\r\n\t\tsuper( framebufferTexture, uvNode, levelNode );\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tthis.isOutputTextureNode = true;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst renderer = frame.renderer;\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\t//\r\n\r\n\t\tconst framebufferTexture = this.value;\r\n\r\n\t\tif ( framebufferTexture.image.width !== _size.width || framebufferTexture.image.height !== _size.height ) {\r\n\r\n\t\t\tframebufferTexture.image.width = _size.width;\r\n\t\t\tframebufferTexture.image.height = _size.height;\r\n\t\t\tframebufferTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst currentGenerateMipmaps = framebufferTexture.generateMipmaps;\r\n\t\tframebufferTexture.generateMipmaps = this.generateMipmaps;\r\n\r\n\t\trenderer.copyFramebufferToTexture( framebufferTexture );\r\n\r\n\t\tframebufferTexture.generateMipmaps = currentGenerateMipmaps;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst viewportTextureNode = new this.constructor( this.uvNode, this.levelNode, this.value );\r\n\t\tviewportTextureNode.generateMipmaps = this.generateMipmaps;\r\n\r\n\t\treturn viewportTextureNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportTextureNode;\r\n\r\nexport const viewportTexture = /*@__PURE__*/ nodeProxy( ViewportTextureNode );\r\nexport const viewportMipTexture = /*@__PURE__*/ nodeProxy( ViewportTextureNode, null, null, { generateMipmaps: true } );\r\n", "import ViewportTextureNode from './ViewportTextureNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { screenUV } from './ScreenNode.js';\r\n\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\n\r\nlet sharedDepthbuffer = null;\r\n\r\nclass ViewportDepthTextureNode extends ViewportTextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportDepthTextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( uvNode = screenUV, levelNode = null ) {\r\n\r\n\t\tif ( sharedDepthbuffer === null ) {\r\n\r\n\t\t\tsharedDepthbuffer = new DepthTexture();\r\n\r\n\t\t}\r\n\r\n\t\tsuper( uvNode, levelNode, sharedDepthbuffer );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportDepthTextureNode;\r\n\r\nexport const viewportDepthTexture = /*@__PURE__*/ nodeProxy( ViewportDepthTextureNode );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeImmutable, nodeProxy } from '../tsl/TSLBase.js';\r\nimport { cameraNear, cameraFar } from '../accessors/Camera.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { viewportDepthTexture } from './ViewportDepthTextureNode.js';\r\n\r\nclass ViewportDepthNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportDepthNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope, valueNode = null ) {\r\n\r\n\t\tsuper( 'float' );\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.valueNode = valueNode;\r\n\r\n\t\tthis.isViewportDepthNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { scope } = this;\r\n\r\n\t\tif ( scope === ViewportDepthNode.DEPTH_BASE ) {\r\n\r\n\t\t\treturn builder.getFragDepth();\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder );\r\n\r\n\t}\r\n\r\n\tsetup( { camera } ) {\r\n\r\n\t\tconst { scope } = this;\r\n\t\tconst value = this.valueNode;\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( scope === ViewportDepthNode.DEPTH_BASE ) {\r\n\r\n\t\t\tif ( value !== null ) {\r\n\r\n \t\t\t\tnode = depthBase().assign( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === ViewportDepthNode.DEPTH ) {\r\n\r\n\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\tnode = viewZToPerspectiveDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === ViewportDepthNode.LINEAR_DEPTH ) {\r\n\r\n\t\t\tif ( value !== null ) {\r\n\r\n\t\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\t\tconst viewZ = perspectiveDepthToViewZ( value, cameraNear, cameraFar );\r\n\r\n\t\t\t\t\tnode = viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnode = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n}\r\n\r\nViewportDepthNode.DEPTH_BASE = 'depthBase';\r\nViewportDepthNode.DEPTH = 'depth';\r\nViewportDepthNode.LINEAR_DEPTH = 'linearDepth';\r\n\r\nexport default ViewportDepthNode;\r\n\r\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\r\n\r\n// -near maps to 0; -far maps to 1\r\nexport const viewZToOrthographicDepth = ( viewZ, near, far ) => viewZ.add( near ).div( near.sub( far ) );\r\n\r\n// maps orthographic depth in [ 0, 1 ] to viewZ\r\nexport const orthographicDepthToViewZ = ( depth, near, far ) => near.sub( far ).mul( depth ).sub( near );\r\n\r\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\r\n\r\n// -near maps to 0; -far maps to 1\r\nexport const viewZToPerspectiveDepth = ( viewZ, near, far ) => near.add( viewZ ).mul( far ).div( far.sub( near ).mul( viewZ ) );\r\n\r\n// maps perspective depth in [ 0, 1 ] to viewZ\r\nexport const perspectiveDepthToViewZ = ( depth, near, far ) => near.mul( far ).div( far.sub( near ).mul( depth ).sub( far ) );\r\n\r\nconst depthBase = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.DEPTH_BASE );\r\n\r\nexport const depth = /*@__PURE__*/ nodeImmutable( ViewportDepthNode, ViewportDepthNode.DEPTH );\r\nexport const linearDepth = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH );\r\nexport const viewportLinearDepth = /*@__PURE__*/ linearDepth( viewportDepthTexture() );\r\n\r\ndepth.assign = ( value ) => depthBase( value );\r\n", "\r\nimport Node from '../core/Node.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { positionView } from './Position.js';\r\nimport { diffuseColor, property } from '../core/PropertyNode.js';\r\nimport { Fn } from '../tsl/TSLBase.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { uniformArray } from './UniformArrayNode.js';\r\n\r\nclass ClippingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ClippingNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope = ClippingNode.DEFAULT ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst clippingContext = builder.clippingContext;\r\n\t\tconst { localClipIntersection, localClippingCount, globalClippingCount } = clippingContext;\r\n\r\n\t\tconst numClippingPlanes = globalClippingCount + localClippingCount;\r\n\t\tconst numUnionClippingPlanes = localClipIntersection ? numClippingPlanes - localClippingCount : numClippingPlanes;\r\n\r\n\t\tif ( this.scope === ClippingNode.ALPHA_TO_COVERAGE ) {\r\n\r\n\t\t\treturn this.setupAlphaToCoverage( clippingContext.planes, numClippingPlanes, numUnionClippingPlanes );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn this.setupDefault( clippingContext.planes, numClippingPlanes, numUnionClippingPlanes );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupAlphaToCoverage( planes, numClippingPlanes, numUnionClippingPlanes ) {\r\n\r\n\t\treturn Fn( () => {\r\n\r\n\t\t\tconst clippingPlanes = uniformArray( planes );\r\n\r\n\t\t\tconst distanceToPlane = property( 'float', 'distanceToPlane' );\r\n\t\t\tconst distanceGradient = property( 'float', 'distanceToGradient' );\r\n\r\n\t\t\tconst clipOpacity = property( 'float', 'clipOpacity' );\r\n\r\n\t\t\tclipOpacity.assign( 1 );\r\n\r\n\t\t\tlet plane;\r\n\r\n\t\t\tLoop( numUnionClippingPlanes, ( { i } ) => {\r\n\r\n\t\t\t\tplane = clippingPlanes.element( i );\r\n\r\n\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\r\n\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\r\n\r\n\t\t\t\tclipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ) );\r\n\r\n\t\t\t\tclipOpacity.equal( 0.0 ).discard();\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tif ( numUnionClippingPlanes < numClippingPlanes ) {\r\n\r\n\t\t\t\tconst unionClipOpacity = property( 'float', 'unionclipOpacity' );\r\n\r\n\t\t\t\tunionClipOpacity.assign( 1 );\r\n\r\n\t\t\t\tLoop( { start: numUnionClippingPlanes, end: numClippingPlanes }, ( { i } ) => {\r\n\r\n\t\t\t\t\tplane = clippingPlanes.element( i );\r\n\r\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\r\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\r\n\r\n\t\t\t\t\tunionClipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ).oneMinus() );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tclipOpacity.mulAssign( unionClipOpacity.oneMinus() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiffuseColor.a.mulAssign( clipOpacity );\r\n\r\n\t\t\tdiffuseColor.a.equal( 0.0 ).discard();\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\tsetupDefault( planes, numClippingPlanes, numUnionClippingPlanes ) {\r\n\r\n\t\treturn Fn( () => {\r\n\r\n\t\t\tconst clippingPlanes = uniformArray( planes );\r\n\r\n\t\t\tlet plane;\r\n\r\n\t\t\tLoop( numUnionClippingPlanes, ( { i } ) => {\r\n\r\n\t\t\t\tplane = clippingPlanes.element( i );\r\n\t\t\t\tpositionView.dot( plane.xyz ).greaterThan( plane.w ).discard();\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tif ( numUnionClippingPlanes < numClippingPlanes ) {\r\n\r\n\t\t\t\tconst clipped = property( 'bool', 'clipped' );\r\n\r\n\t\t\t\tclipped.assign( true );\r\n\r\n\t\t\t\tLoop( { start: numUnionClippingPlanes, end: numClippingPlanes }, ( { i } ) => {\r\n\r\n\t\t\t\t\tplane = clippingPlanes.element( i );\r\n\t\t\t\t\tclipped.assign( positionView.dot( plane.xyz ).greaterThan( plane.w ).and( clipped ) );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tclipped.discard();\r\n\r\n\t\t\t}\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n}\r\n\r\nClippingNode.ALPHA_TO_COVERAGE = 'alphaToCoverage';\r\nClippingNode.DEFAULT = 'default';\r\n\r\nexport default ClippingNode;\r\n\r\nexport const clipping = () => nodeObject( new ClippingNode() );\r\n\r\nexport const clippingAlpha = () => nodeObject( new ClippingNode( ClippingNode.ALPHA_TO_COVERAGE ) );\r\n", "import { Material } from '../Material.js';\r\nimport { NormalBlending } from '../../constants.js';\r\n\r\nimport { getNodeChildren, getCacheKey } from '../../nodes/core/NodeUtils.js';\r\nimport { attribute } from '../../nodes/core/AttributeNode.js';\r\nimport { output, diffuseColor, emissive, varyingProperty } from '../../nodes/core/PropertyNode.js';\r\nimport { materialAlphaTest, materialColor, materialOpacity, materialEmissive, materialNormal, materialLightMap, materialAOMap } from '../../nodes/accessors/MaterialNode.js';\r\nimport { modelViewProjection } from '../../nodes/accessors/ModelViewProjectionNode.js';\r\nimport { normalLocal } from '../../nodes/accessors/Normal.js';\r\nimport { instance } from '../../nodes/accessors/InstanceNode.js';\r\nimport { batch } from '../../nodes/accessors/BatchNode.js';\r\nimport { materialReference } from '../../nodes/accessors/MaterialReferenceNode.js';\r\nimport { positionLocal } from '../../nodes/accessors/Position.js';\r\nimport { skinningReference } from '../../nodes/accessors/SkinningNode.js';\r\nimport { morphReference } from '../../nodes/accessors/MorphNode.js';\r\nimport { lights } from '../../nodes/lighting/LightsNode.js';\r\nimport { mix } from '../../nodes/math/MathNode.js';\r\nimport { float, vec3, vec4 } from '../../nodes/tsl/TSLBase.js';\r\nimport AONode from '../../nodes/lighting/AONode.js';\r\nimport { lightingContext } from '../../nodes/lighting/LightingContextNode.js';\r\nimport IrradianceNode from '../../nodes/lighting/IrradianceNode.js';\r\nimport { depth } from '../../nodes/display/ViewportDepthNode.js';\r\nimport { cameraLogDepth } from '../../nodes/accessors/Camera.js';\r\nimport { clipping, clippingAlpha } from '../../nodes/accessors/ClippingNode.js';\r\nimport NodeMaterialObserver from './manager/NodeMaterialObserver.js';\r\n\r\nclass NodeMaterial extends Material {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'NodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isNodeMaterial = true;\r\n\r\n\t\tthis.type = this.constructor.type;\r\n\r\n\t\tthis.forceSinglePass = false;\r\n\r\n\t\tthis.fog = true;\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.lightsNode = null;\r\n\t\tthis.envNode = null;\r\n\t\tthis.aoNode = null;\r\n\r\n\t\tthis.colorNode = null;\r\n\t\tthis.normalNode = null;\r\n\t\tthis.opacityNode = null;\r\n\t\tthis.backdropNode = null;\r\n\t\tthis.backdropAlphaNode = null;\r\n\t\tthis.alphaTestNode = null;\r\n\r\n\t\tthis.positionNode = null;\r\n\r\n\t\tthis.depthNode = null;\r\n\t\tthis.shadowNode = null;\r\n\t\tthis.shadowPositionNode = null;\r\n\r\n\t\tthis.outputNode = null;\r\n\t\tthis.mrtNode = null;\r\n\r\n\t\tthis.fragmentNode = null;\r\n\t\tthis.vertexNode = null;\r\n\r\n\t}\r\n\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.type + getCacheKey( this );\r\n\r\n\t}\r\n\r\n\tbuild( builder ) {\r\n\r\n\t\tthis.setup( builder );\r\n\r\n\t}\r\n\r\n\tsetupObserver( builder ) {\r\n\r\n\t\treturn new NodeMaterialObserver( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.setupNormal = () => this.setupNormal( builder );\r\n\r\n\t\t// < VERTEX STAGE >\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tbuilder.stack.outputNode = this.vertexNode || this.setupPosition( builder );\r\n\r\n\t\tbuilder.addFlow( 'vertex', builder.removeStack() );\r\n\r\n\t\t// < FRAGMENT STAGE >\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tlet resultNode;\r\n\r\n\t\tconst clippingNode = this.setupClipping( builder );\r\n\r\n\t\tif ( this.depthWrite === true ) this.setupDepth( builder );\r\n\r\n\t\tif ( this.fragmentNode === null ) {\r\n\r\n\t\t\tthis.setupDiffuseColor( builder );\r\n\t\t\tthis.setupVariants( builder );\r\n\r\n\t\t\tconst outgoingLightNode = this.setupLighting( builder );\r\n\r\n\t\t\tif ( clippingNode !== null ) builder.stack.add( clippingNode );\r\n\r\n\t\t\t// force unsigned floats - useful for RenderTargets\r\n\r\n\t\t\tconst basicOutput = vec4( outgoingLightNode, diffuseColor.a ).max( 0 );\r\n\r\n\t\t\tresultNode = this.setupOutput( builder, basicOutput );\r\n\r\n\t\t\t// OUTPUT NODE\r\n\r\n\t\t\toutput.assign( resultNode );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.outputNode !== null ) resultNode = this.outputNode;\r\n\r\n\t\t\t// MRT\r\n\r\n\t\t\tconst renderTarget = builder.renderer.getRenderTarget();\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tconst mrt = builder.renderer.getMRT();\r\n\t\t\t\tconst materialMRT = this.mrtNode;\r\n\r\n\t\t\t\tif ( mrt !== null ) {\r\n\r\n\t\t\t\t\tresultNode = mrt;\r\n\r\n\t\t\t\t\tif ( materialMRT !== null ) {\r\n\r\n\t\t\t\t\t\tresultNode = mrt.merge( materialMRT );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialMRT !== null ) {\r\n\r\n\t\t\t\t\tresultNode = materialMRT;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet fragmentNode = this.fragmentNode;\r\n\r\n\t\t\tif ( fragmentNode.isOutputStructNode !== true ) {\r\n\r\n\t\t\t\tfragmentNode = vec4( fragmentNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresultNode = this.setupOutput( builder, fragmentNode );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.stack.outputNode = resultNode;\r\n\r\n\t\tbuilder.addFlow( 'fragment', builder.removeStack() );\r\n\r\n\t\t// < MONITOR >\r\n\r\n\t\tbuilder.monitor = this.setupObserver( builder );\r\n\r\n\t}\r\n\r\n\tsetupClipping( builder ) {\r\n\r\n\t\tif ( builder.clippingContext === null ) return null;\r\n\r\n\t\tconst { globalClippingCount, localClippingCount } = builder.clippingContext;\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tif ( globalClippingCount || localClippingCount ) {\r\n\r\n\t\t\tconst samples = builder.renderer.samples;\r\n\r\n\t\t\tif ( this.alphaToCoverage && samples > 1 ) {\r\n\r\n\t\t\t\t// to be added to flow when the color/alpha value has been determined\r\n\t\t\t\tresult = clippingAlpha();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbuilder.stack.add( clipping() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tsetupDepth( builder ) {\r\n\r\n\t\tconst { renderer } = builder;\r\n\r\n\t\t// Depth\r\n\r\n\t\tlet depthNode = this.depthNode;\r\n\r\n\t\tif ( depthNode === null ) {\r\n\r\n\t\t\tconst mrt = 'getMRT' in renderer && renderer.getMRT();\r\n\r\n\t\t\tif ( mrt && mrt.has( 'depth' ) ) {\r\n\r\n\t\t\t\tdepthNode = mrt.get( 'depth' );\r\n\r\n\t\t\t} else if ( renderer.logarithmicDepthBuffer === true ) {\r\n\r\n\t\t\t\tconst fragDepth = modelViewProjection().w.add( 1 );\r\n\r\n\t\t\t\tdepthNode = fragDepth.log2().mul( cameraLogDepth ).mul( 0.5 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( depthNode !== null ) {\r\n\r\n\t\t\tdepth.assign( depthNode ).append();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupPosition( builder ) {\r\n\r\n\t\tconst { object } = builder;\r\n\t\tconst geometry = object.geometry;\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\t// Vertex\r\n\r\n\t\tif ( geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color ) {\r\n\r\n\t\t\tmorphReference( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isSkinnedMesh === true ) {\r\n\r\n\t\t\tskinningReference( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.displacementMap ) {\r\n\r\n\t\t\tconst displacementMap = materialReference( 'displacementMap', 'texture' );\r\n\t\t\tconst displacementScale = materialReference( 'displacementScale', 'float' );\r\n\t\t\tconst displacementBias = materialReference( 'displacementBias', 'float' );\r\n\r\n\t\t\tpositionLocal.addAssign( normalLocal.normalize().mul( ( displacementMap.x.mul( displacementScale ).add( displacementBias ) ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isBatchedMesh ) {\r\n\r\n\t\t\tbatch( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true ) ) {\r\n\r\n\t\t\tinstance( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.positionNode !== null ) {\r\n\r\n\t\t\tpositionLocal.assign( this.positionNode );\r\n\r\n\t\t}\r\n\r\n\t\tconst mvp = modelViewProjection();\r\n\r\n\t\tbuilder.context.vertex = builder.removeStack();\r\n\t\tbuilder.context.mvp = mvp;\r\n\r\n\t\treturn mvp;\r\n\r\n\t}\r\n\r\n\tsetupDiffuseColor( { object, geometry } ) {\r\n\r\n\t\tlet colorNode = this.colorNode ? vec4( this.colorNode ) : materialColor;\r\n\r\n\t\t// VERTEX COLORS\r\n\r\n\t\tif ( this.vertexColors === true && geometry.hasAttribute( 'color' ) ) {\r\n\r\n\t\t\tcolorNode = vec4( colorNode.xyz.mul( attribute( 'color', 'vec3' ) ), colorNode.a );\r\n\r\n\t\t}\r\n\r\n\t\t// Instanced colors\r\n\r\n\t\tif ( object.instanceColor ) {\r\n\r\n\t\t\tconst instanceColor = varyingProperty( 'vec3', 'vInstanceColor' );\r\n\r\n\t\t\tcolorNode = instanceColor.mul( colorNode );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isBatchedMesh && object._colorsTexture ) {\r\n\r\n\t\t\tconst batchColor = varyingProperty( 'vec3', 'vBatchColor' );\r\n\r\n\t\t\tcolorNode = batchColor.mul( colorNode );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// COLOR\r\n\r\n\t\tdiffuseColor.assign( colorNode );\r\n\r\n\t\t// OPACITY\r\n\r\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\r\n\t\tdiffuseColor.a.assign( diffuseColor.a.mul( opacityNode ) );\r\n\r\n\t\t// ALPHA TEST\r\n\r\n\t\tif ( this.alphaTestNode !== null || this.alphaTest > 0 ) {\r\n\r\n\t\t\tconst alphaTestNode = this.alphaTestNode !== null ? float( this.alphaTestNode ) : materialAlphaTest;\r\n\r\n\t\t\tdiffuseColor.a.lessThanEqual( alphaTestNode ).discard();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transparent === false && this.blending === NormalBlending && this.alphaToCoverage === false ) {\r\n\r\n\t\t\tdiffuseColor.a.assign( 1.0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupVariants( /*builder*/ ) {\r\n\r\n\t\t// Interface function.\r\n\r\n\t}\r\n\r\n\tsetupOutgoingLight() {\r\n\r\n\t\treturn ( this.lights === true ) ? vec3( 0 ) : diffuseColor.rgb;\r\n\r\n\t}\r\n\r\n\tsetupNormal() {\r\n\r\n\t\treturn this.normalNode ? vec3( this.normalNode ) : materialNormal;\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( /*builder*/ ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( this.envNode ) {\r\n\r\n\t\t\tnode = this.envNode;\r\n\r\n\t\t} else if ( this.envMap ) {\r\n\r\n\t\t\tnode = this.envMap.isCubeTexture ? materialReference( 'envMap', 'cubeTexture' ) : materialReference( 'envMap', 'texture' );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetupLightMap( builder ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( builder.material.lightMap ) {\r\n\r\n\t\t\tnode = new IrradianceNode( materialLightMap );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetupLights( builder ) {\r\n\r\n\t\tconst materialLightsNode = [];\r\n\r\n\t\t//\r\n\r\n\t\tconst envNode = this.setupEnvironment( builder );\r\n\r\n\t\tif ( envNode && envNode.isLightingNode ) {\r\n\r\n\t\t\tmaterialLightsNode.push( envNode );\r\n\r\n\t\t}\r\n\r\n\t\tconst lightMapNode = this.setupLightMap( builder );\r\n\r\n\t\tif ( lightMapNode && lightMapNode.isLightingNode ) {\r\n\r\n\t\t\tmaterialLightsNode.push( lightMapNode );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aoNode !== null || builder.material.aoMap ) {\r\n\r\n\t\t\tconst aoNode = this.aoNode !== null ? this.aoNode : materialAOMap;\r\n\r\n\t\t\tmaterialLightsNode.push( new AONode( aoNode ) );\r\n\r\n\t\t}\r\n\r\n\t\tlet lightsN = this.lightsNode || builder.lightsNode;\r\n\r\n\t\tif ( materialLightsNode.length > 0 ) {\r\n\r\n\t\t\tlightsN = lights( [ ...lightsN.getLights(), ...materialLightsNode ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn lightsN;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\t// Interface function.\r\n\r\n\t}\r\n\r\n\tsetupLighting( builder ) {\r\n\r\n\t\tconst { material } = builder;\r\n\t\tconst { backdropNode, backdropAlphaNode, emissiveNode } = this;\r\n\r\n\t\t// OUTGOING LIGHT\r\n\r\n\t\tconst lights = this.lights === true || this.lightsNode !== null;\r\n\r\n\t\tconst lightsNode = lights ? this.setupLights( builder ) : null;\r\n\r\n\t\tlet outgoingLightNode = this.setupOutgoingLight( builder );\r\n\r\n\t\tif ( lightsNode && lightsNode.getScope().getLights().length > 0 ) {\r\n\r\n\t\t\tconst lightingModel = this.setupLightingModel( builder );\r\n\r\n\t\t\toutgoingLightNode = lightingContext( lightsNode, lightingModel, backdropNode, backdropAlphaNode );\r\n\r\n\t\t} else if ( backdropNode !== null ) {\r\n\r\n\t\t\toutgoingLightNode = vec3( backdropAlphaNode !== null ? mix( outgoingLightNode, backdropNode, backdropAlphaNode ) : backdropNode );\r\n\r\n\t\t}\r\n\r\n\t\t// EMISSIVE\r\n\r\n\t\tif ( ( emissiveNode && emissiveNode.isNode === true ) || ( material.emissive && material.emissive.isColor === true ) ) {\r\n\r\n\t\t\temissive.assign( vec3( emissiveNode ? emissiveNode : materialEmissive ) );\r\n\r\n\t\t\toutgoingLightNode = outgoingLightNode.add( emissive );\r\n\r\n\t\t}\r\n\r\n\t\treturn outgoingLightNode;\r\n\r\n\t}\r\n\r\n\tsetupOutput( builder, outputNode ) {\r\n\r\n\t\t// FOG\r\n\r\n\t\tif ( this.fog === true ) {\r\n\r\n\t\t\tconst fogNode = builder.fogNode;\r\n\r\n\t\t\tif ( fogNode ) outputNode = vec4( fogNode.mix( outputNode.rgb, fogNode.colorNode ), outputNode.a );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n\tsetDefaultValues( material ) {\r\n\r\n\t\t// This approach is to reuse the native refreshUniforms*\r\n\t\t// and turn available the use of features like transmission and environment in core\r\n\r\n\t\tfor ( const property in material ) {\r\n\r\n\t\t\tconst value = material[ property ];\r\n\r\n\t\t\tif ( this[ property ] === undefined ) {\r\n\r\n\t\t\t\tthis[ property ] = value;\r\n\r\n\t\t\t\tif ( value && value.clone ) this[ property ] = value.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst descriptors = Object.getOwnPropertyDescriptors( material.constructor.prototype );\r\n\r\n\t\tfor ( const key in descriptors ) {\r\n\r\n\t\t\tif ( Object.getOwnPropertyDescriptor( this.constructor.prototype, key ) === undefined &&\r\n\t\t\t     descriptors[ key ].get !== undefined ) {\r\n\r\n\t\t\t\tObject.defineProperty( this.constructor.prototype, key, descriptors[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst data = Material.prototype.toJSON.call( this, meta );\r\n\t\tconst nodeChildren = getNodeChildren( this );\r\n\r\n\t\tdata.inputNodes = {};\r\n\r\n\t\tfor ( const { property, childNode } of nodeChildren ) {\r\n\r\n\t\t\tdata.inputNodes[ property ] = childNode.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.lightsNode = source.lightsNode;\r\n\t\tthis.envNode = source.envNode;\r\n\r\n\t\tthis.colorNode = source.colorNode;\r\n\t\tthis.normalNode = source.normalNode;\r\n\t\tthis.opacityNode = source.opacityNode;\r\n\t\tthis.backdropNode = source.backdropNode;\r\n\t\tthis.backdropAlphaNode = source.backdropAlphaNode;\r\n\t\tthis.alphaTestNode = source.alphaTestNode;\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\r\n\t\tthis.depthNode = source.depthNode;\r\n\t\tthis.shadowNode = source.shadowNode;\r\n\t\tthis.shadowPositionNode = source.shadowPositionNode;\r\n\r\n\t\tthis.outputNode = source.outputNode;\r\n\t\tthis.mrtNode = source.mrtNode;\r\n\r\n\t\tthis.fragmentNode = source.fragmentNode;\r\n\t\tthis.vertexNode = source.vertexNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeMaterial;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { attribute } from '../../nodes/core/AttributeNode.js';\r\nimport { cameraProjectionMatrix } from '../../nodes/accessors/Camera.js';\r\nimport { materialColor, materialOpacity, materialPointWidth } from '../../nodes/accessors/MaterialNode.js'; // or should this be a property, instead?\r\nimport { modelViewMatrix } from '../../nodes/accessors/ModelNode.js';\r\nimport { positionGeometry } from '../../nodes/accessors/Position.js';\r\nimport { smoothstep, lengthSq } from '../../nodes/math/MathNode.js';\r\nimport { Fn, vec4, float } from '../../nodes/tsl/TSLBase.js';\r\nimport { uv } from '../../nodes/accessors/UV.js';\r\nimport { viewport } from '../../nodes/display/ScreenNode.js';\r\n\r\nimport { PointsMaterial } from '../PointsMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new PointsMaterial();\r\n\r\nclass InstancedPointsNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'InstancedPointsNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( params = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.useAlphaToCoverage = true;\r\n\r\n\t\tthis.useColor = params.vertexColors;\r\n\r\n\t\tthis.pointWidth = 1;\r\n\r\n\t\tthis.pointColorNode = null;\r\n\r\n\t\tthis.pointWidthNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.setupShaders( builder );\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t}\r\n\r\n\tsetupShaders( { renderer } ) {\r\n\r\n\t\tconst useAlphaToCoverage = this.alphaToCoverage;\r\n\t\tconst useColor = this.useColor;\r\n\r\n\t\tthis.vertexNode = Fn( () => {\r\n\r\n\t\t\tconst instancePosition = attribute( 'instancePosition' ).xyz;\r\n\r\n\t\t\t// camera space\r\n\t\t\tconst mvPos = vec4( modelViewMatrix.mul( vec4( instancePosition, 1.0 ) ) );\r\n\r\n\t\t\tconst aspect = viewport.z.div( viewport.w );\r\n\r\n\t\t\t// clip space\r\n\t\t\tconst clipPos = cameraProjectionMatrix.mul( mvPos );\r\n\r\n\t\t\t// offset in ndc space\r\n\t\t\tconst offset = positionGeometry.xy.toVar();\r\n\r\n\t\t\toffset.mulAssign( this.pointWidthNode ? this.pointWidthNode : materialPointWidth );\r\n\r\n\t\t\toffset.assign( offset.div( viewport.z ) );\r\n\t\t\toffset.y.assign( offset.y.mul( aspect ) );\r\n\r\n\t\t\t// back to clip space\r\n\t\t\toffset.assign( offset.mul( clipPos.w ) );\r\n\r\n\t\t\t//clipPos.xy += offset;\r\n\t\t\tclipPos.addAssign( vec4( offset, 0, 0 ) );\r\n\r\n\t\t\treturn clipPos;\r\n\r\n\t\t} )();\r\n\r\n\t\tthis.fragmentNode = Fn( () => {\r\n\r\n\t\t\tconst alpha = float( 1 ).toVar();\r\n\r\n\t\t\tconst len2 = lengthSq( uv().mul( 2 ).sub( 1 ) );\r\n\r\n\t\t\tif ( useAlphaToCoverage && renderer.samples > 1 ) {\r\n\r\n\t\t\t\tconst dlen = float( len2.fwidth() ).toVar();\r\n\r\n\t\t\t\talpha.assign( smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlen2.greaterThan( 1.0 ).discard();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet pointColorNode;\r\n\r\n\t\t\tif ( this.pointColorNode ) {\r\n\r\n\t\t\t\tpointColorNode = this.pointColorNode;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( useColor ) {\r\n\r\n\t\t\t\t\tconst instanceColor = attribute( 'instanceColor' );\r\n\r\n\t\t\t\t\tpointColorNode = instanceColor.mul( materialColor );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tpointColorNode = materialColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\talpha.mulAssign( materialOpacity );\r\n\r\n\t\t\treturn vec4( pointColorNode, alpha );\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\tget alphaToCoverage() {\r\n\r\n\t\treturn this.useAlphaToCoverage;\r\n\r\n\t}\r\n\r\n\tset alphaToCoverage( value ) {\r\n\r\n\t\tif ( this.useAlphaToCoverage !== value ) {\r\n\r\n\t\t\tthis.useAlphaToCoverage = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InstancedPointsNodeMaterial;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\n\r\nimport { LineBasicMaterial } from '../LineBasicMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new LineBasicMaterial();\r\n\r\nclass LineBasicNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LineBasicNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineBasicNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LineBasicNodeMaterial;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { attribute } from '../../nodes/core/AttributeNode.js';\r\nimport { materialLineDashSize, materialLineGapSize, materialLineScale } from '../../nodes/accessors/MaterialNode.js';\r\nimport { dashSize, gapSize } from '../../nodes/core/PropertyNode.js';\r\nimport { varying, float } from '../../nodes/tsl/TSLBase.js';\r\n\r\nimport { LineDashedMaterial } from '../LineDashedMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new LineDashedMaterial();\r\n\r\nclass LineDashedNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LineDashedNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineDashedNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.offsetNode = null;\r\n\t\tthis.dashScaleNode = null;\r\n\t\tthis.dashSizeNode = null;\r\n\t\tthis.gapSizeNode = null;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupVariants() {\r\n\r\n\t\tconst offsetNode = this.offsetNode;\r\n\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\r\n\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\r\n\t\tconst gapSizeNode = this.dashSizeNode ? float( this.dashGapNode ) : materialLineGapSize;\r\n\r\n\t\tdashSize.assign( dashSizeNode );\r\n\t\tgapSize.assign( gapSizeNode );\r\n\r\n\t\tconst vLineDistance = varying( attribute( 'lineDistance' ).mul( dashScaleNode ) );\r\n\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\r\n\r\n\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LineDashedNodeMaterial;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { varyingProperty } from '../../nodes/core/PropertyNode.js';\r\nimport { attribute } from '../../nodes/core/AttributeNode.js';\r\nimport { cameraProjectionMatrix } from '../../nodes/accessors/Camera.js';\r\nimport { materialColor, materialLineScale, materialLineDashSize, materialLineGapSize, materialLineDashOffset, materialLineWidth } from '../../nodes/accessors/MaterialNode.js';\r\nimport { modelViewMatrix } from '../../nodes/accessors/ModelNode.js';\r\nimport { positionGeometry } from '../../nodes/accessors/Position.js';\r\nimport { mix, smoothstep } from '../../nodes/math/MathNode.js';\r\nimport { Fn, varying, float, vec2, vec3, vec4, If } from '../../nodes/tsl/TSLBase.js';\r\nimport { uv } from '../../nodes/accessors/UV.js';\r\nimport { viewport } from '../../nodes/display/ScreenNode.js';\r\nimport { dashSize, gapSize } from '../../nodes/core/PropertyNode.js';\r\n\r\nimport { LineDashedMaterial } from '../LineDashedMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new LineDashedMaterial();\r\n\r\nclass Line2NodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Line2NodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( params = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.useAlphaToCoverage = true;\r\n\t\tthis.useColor = params.vertexColors;\r\n\t\tthis.useDash = params.dashed;\r\n\t\tthis.useWorldUnits = false;\r\n\r\n\t\tthis.dashOffset = 0;\r\n\t\tthis.lineWidth = 1;\r\n\r\n\t\tthis.lineColorNode = null;\r\n\r\n\t\tthis.offsetNode = null;\r\n\t\tthis.dashScaleNode = null;\r\n\t\tthis.dashSizeNode = null;\r\n\t\tthis.gapSizeNode = null;\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.setupShaders( builder );\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t}\r\n\r\n\tsetupShaders( { renderer } ) {\r\n\r\n\t\tconst useAlphaToCoverage = this.alphaToCoverage;\r\n\t\tconst useColor = this.useColor;\r\n\t\tconst useDash = this.dashed;\r\n\t\tconst useWorldUnits = this.worldUnits;\r\n\r\n\t\tconst trimSegment = Fn( ( { start, end } ) => {\r\n\r\n\t\t\tconst a = cameraProjectionMatrix.element( 2 ).element( 2 ); // 3nd entry in 3th column\r\n\t\t\tconst b = cameraProjectionMatrix.element( 3 ).element( 2 ); // 3nd entry in 4th column\r\n\t\t\tconst nearEstimate = b.mul( - 0.5 ).div( a );\r\n\r\n\t\t\tconst alpha = nearEstimate.sub( start.z ).div( end.z.sub( start.z ) );\r\n\r\n\t\t\treturn vec4( mix( start.xyz, end.xyz, alpha ), end.w );\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'trimSegment',\r\n\t\t\ttype: 'vec4',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'start', type: 'vec4' },\r\n\t\t\t\t{ name: 'end', type: 'vec4' }\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tthis.vertexNode = Fn( () => {\r\n\r\n\t\t\tconst instanceStart = attribute( 'instanceStart' );\r\n\t\t\tconst instanceEnd = attribute( 'instanceEnd' );\r\n\r\n\t\t\t// camera space\r\n\r\n\t\t\tconst start = vec4( modelViewMatrix.mul( vec4( instanceStart, 1.0 ) ) ).toVar( 'start' );\r\n\t\t\tconst end = vec4( modelViewMatrix.mul( vec4( instanceEnd, 1.0 ) ) ).toVar( 'end' );\r\n\r\n\t\t\tif ( useWorldUnits ) {\r\n\r\n\t\t\t\tvaryingProperty( 'vec3', 'worldStart' ).assign( start.xyz );\r\n\t\t\t\tvaryingProperty( 'vec3', 'worldEnd' ).assign( end.xyz );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst aspect = viewport.z.div( viewport.w );\r\n\r\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\r\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\r\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\r\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\r\n\r\n\t\t\tconst perspective = cameraProjectionMatrix.element( 2 ).element( 3 ).equal( - 1.0 ); // 4th entry in the 3rd column\r\n\r\n\t\t\tIf( perspective, () => {\r\n\r\n\t\t\t\tIf( start.z.lessThan( 0.0 ).and( end.z.greaterThan( 0.0 ) ), () => {\r\n\r\n\t\t\t\t\tend.assign( trimSegment( { start: start, end: end } ) );\r\n\r\n\t\t\t\t} ).ElseIf( end.z.lessThan( 0.0 ).and( start.z.greaterThanEqual( 0.0 ) ), () => {\r\n\r\n\t\t\t\t\tstart.assign( trimSegment( { start: end, end: start } ) );\r\n\r\n\t\t\t \t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t// clip space\r\n\t\t\tconst clipStart = cameraProjectionMatrix.mul( start );\r\n\t\t\tconst clipEnd = cameraProjectionMatrix.mul( end );\r\n\r\n\t\t\t// ndc space\r\n\t\t\tconst ndcStart = clipStart.xyz.div( clipStart.w );\r\n\t\t\tconst ndcEnd = clipEnd.xyz.div( clipEnd.w );\r\n\r\n\t\t\t// direction\r\n\t\t\tconst dir = ndcEnd.xy.sub( ndcStart.xy ).toVar();\r\n\r\n\t\t\t// account for clip-space aspect ratio\r\n\t\t\tdir.x.assign( dir.x.mul( aspect ) );\r\n\t\t\tdir.assign( dir.normalize() );\r\n\r\n\t\t\tconst clip = vec4().toVar();\r\n\r\n\t\t\tif ( useWorldUnits ) {\r\n\r\n\t\t\t\t// get the offset direction as perpendicular to the view vector\r\n\r\n\t\t\t\tconst worldDir = end.xyz.sub( start.xyz ).normalize();\r\n\t\t\t\tconst tmpFwd = mix( start.xyz, end.xyz, 0.5 ).normalize();\r\n\t\t\t\tconst worldUp = worldDir.cross( tmpFwd ).normalize();\r\n\t\t\t\tconst worldFwd = worldDir.cross( worldUp );\r\n\r\n\t\t\t\tconst worldPos = varyingProperty( 'vec4', 'worldPos' );\r\n\r\n\t\t\t\tworldPos.assign( positionGeometry.y.lessThan( 0.5 ).select( start, end ) );\r\n\r\n\t\t\t\t// height offset\r\n\t\t\t\tconst hw = materialLineWidth.mul( 0.5 );\r\n\t\t\t\tworldPos.addAssign( vec4( positionGeometry.x.lessThan( 0.0 ).select( worldUp.mul( hw ), worldUp.mul( hw ).negate() ), 0 ) );\r\n\r\n\t\t\t\t// don't extend the line if we're rendering dashes because we\r\n\t\t\t\t// won't be rendering the endcaps\r\n\t\t\t\tif ( ! useDash ) {\r\n\r\n\t\t\t\t\t// cap extension\r\n\t\t\t\t\tworldPos.addAssign( vec4( positionGeometry.y.lessThan( 0.5 ).select( worldDir.mul( hw ).negate(), worldDir.mul( hw ) ), 0 ) );\r\n\r\n\t\t\t\t\t// add width to the box\r\n\t\t\t\t\tworldPos.addAssign( vec4( worldFwd.mul( hw ), 0 ) );\r\n\r\n\t\t\t\t\t// endcaps\r\n\t\t\t\t\tIf( positionGeometry.y.greaterThan( 1.0 ).or( positionGeometry.y.lessThan( 0.0 ) ), () => {\r\n\r\n\t\t\t\t\t\tworldPos.subAssign( vec4( worldFwd.mul( 2.0 ).mul( hw ), 0 ) );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// project the worldpos\r\n\t\t\t\tclip.assign( cameraProjectionMatrix.mul( worldPos ) );\r\n\r\n\t\t\t\t// shift the depth of the projected points so the line\r\n\t\t\t\t// segments overlap neatly\r\n\t\t\t\tconst clipPose = vec3().toVar();\r\n\r\n\t\t\t\tclipPose.assign( positionGeometry.y.lessThan( 0.5 ).select( ndcStart, ndcEnd ) );\r\n\t\t\t\tclip.z.assign( clipPose.z.mul( clip.w ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst offset = vec2( dir.y, dir.x.negate() ).toVar( 'offset' );\r\n\r\n\t\t\t\t// undo aspect ratio adjustment\r\n\t\t\t\tdir.x.assign( dir.x.div( aspect ) );\r\n\t\t\t\toffset.x.assign( offset.x.div( aspect ) );\r\n\r\n\t\t\t\t// sign flip\r\n\t\t\t\toffset.assign( positionGeometry.x.lessThan( 0.0 ).select( offset.negate(), offset ) );\r\n\r\n\t\t\t\t// endcaps\r\n\t\t\t\tIf( positionGeometry.y.lessThan( 0.0 ), () => {\r\n\r\n\t\t\t\t\toffset.assign( offset.sub( dir ) );\r\n\r\n\t\t\t\t} ).ElseIf( positionGeometry.y.greaterThan( 1.0 ), () => {\r\n\r\n\t\t\t\t\toffset.assign( offset.add( dir ) );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// adjust for linewidth\r\n\t\t\t\toffset.assign( offset.mul( materialLineWidth ) );\r\n\r\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\r\n\t\t\t\toffset.assign( offset.div( viewport.w ) );\r\n\r\n\t\t\t\t// select end\r\n\t\t\t\tclip.assign( positionGeometry.y.lessThan( 0.5 ).select( clipStart, clipEnd ) );\r\n\r\n\t\t\t\t// back to clip space\r\n\t\t\t\toffset.assign( offset.mul( clip.w ) );\r\n\r\n\t\t\t\tclip.assign( clip.add( vec4( offset, 0, 0 ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t} )();\r\n\r\n\t\tconst closestLineToLine = Fn( ( { p1, p2, p3, p4 } ) => {\r\n\r\n\t\t\tconst p13 = p1.sub( p3 );\r\n\t\t\tconst p43 = p4.sub( p3 );\r\n\r\n\t\t\tconst p21 = p2.sub( p1 );\r\n\r\n\t\t\tconst d1343 = p13.dot( p43 );\r\n\t\t\tconst d4321 = p43.dot( p21 );\r\n\t\t\tconst d1321 = p13.dot( p21 );\r\n\t\t\tconst d4343 = p43.dot( p43 );\r\n\t\t\tconst d2121 = p21.dot( p21 );\r\n\r\n\t\t\tconst denom = d2121.mul( d4343 ).sub( d4321.mul( d4321 ) );\r\n\t\t\tconst numer = d1343.mul( d4321 ).sub( d1321.mul( d4343 ) );\r\n\r\n\t\t\tconst mua = numer.div( denom ).clamp();\r\n\t\t\tconst mub = d1343.add( d4321.mul( mua ) ).div( d4343 ).clamp();\r\n\r\n\t\t\treturn vec2( mua, mub );\r\n\r\n\t\t} );\r\n\r\n\t\tthis.fragmentNode = Fn( () => {\r\n\r\n\t\t\tconst vUv = uv();\r\n\r\n\t\t\tif ( useDash ) {\r\n\r\n\t\t\t\tconst offsetNode = this.offsetNode ? float( this.offsetNodeNode ) : materialLineDashOffset;\r\n\t\t\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\r\n\t\t\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\r\n\t\t\t\tconst gapSizeNode = this.dashSizeNode ? float( this.dashGapNode ) : materialLineGapSize;\r\n\r\n\t\t\t\tdashSize.assign( dashSizeNode );\r\n\t\t\t\tgapSize.assign( gapSizeNode );\r\n\r\n\t\t\t\tconst instanceDistanceStart = attribute( 'instanceDistanceStart' );\r\n\t\t\t\tconst instanceDistanceEnd = attribute( 'instanceDistanceEnd' );\r\n\r\n\t\t\t\tconst lineDistance = positionGeometry.y.lessThan( 0.5 ).select( dashScaleNode.mul( instanceDistanceStart ), materialLineScale.mul( instanceDistanceEnd ) );\r\n\r\n\t\t\t\tconst vLineDistance = varying( lineDistance.add( materialLineDashOffset ) );\r\n\t\t\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\r\n\r\n\t\t\t\tvUv.y.lessThan( - 1.0 ).or( vUv.y.greaterThan( 1.0 ) ).discard(); // discard endcaps\r\n\t\t\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard(); // todo - FIX\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst alpha = float( 1 ).toVar( 'alpha' );\r\n\r\n\t\t\tif ( useWorldUnits ) {\r\n\r\n\t\t\t\tconst worldStart = varyingProperty( 'vec3', 'worldStart' );\r\n\t\t\t\tconst worldEnd = varyingProperty( 'vec3', 'worldEnd' );\r\n\r\n\t\t\t\t// Find the closest points on the view ray and the line segment\r\n\t\t\t\tconst rayEnd = varyingProperty( 'vec4', 'worldPos' ).xyz.normalize().mul( 1e5 );\r\n\t\t\t\tconst lineDir = worldEnd.sub( worldStart );\r\n\t\t\t\tconst params = closestLineToLine( { p1: worldStart, p2: worldEnd, p3: vec3( 0.0, 0.0, 0.0 ), p4: rayEnd } );\r\n\r\n\t\t\t\tconst p1 = worldStart.add( lineDir.mul( params.x ) );\r\n\t\t\t\tconst p2 = rayEnd.mul( params.y );\r\n\t\t\t\tconst delta = p1.sub( p2 );\r\n\t\t\t\tconst len = delta.length();\r\n\t\t\t\tconst norm = len.div( materialLineWidth );\r\n\r\n\t\t\t\tif ( ! useDash ) {\r\n\r\n\t\t\t\t\tif ( useAlphaToCoverage && renderer.samples > 1 ) {\r\n\r\n\t\t\t\t\t\tconst dnorm = norm.fwidth();\r\n\t\t\t\t\t\talpha.assign( smoothstep( dnorm.negate().add( 0.5 ), dnorm.add( 0.5 ), norm ).oneMinus() );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tnorm.greaterThan( 0.5 ).discard();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// round endcaps\r\n\r\n\t\t\t\tif ( useAlphaToCoverage && renderer.samples > 1 ) {\r\n\r\n\t\t\t\t\tconst a = vUv.x;\r\n\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).select( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\r\n\r\n\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\r\n\r\n\t\t\t\t\tconst dlen = float( len2.fwidth() ).toVar( 'dlen' );\r\n\r\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\r\n\r\n\t\t\t\t\t\talpha.assign( smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus() );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\r\n\r\n\t\t\t\t\t\tconst a = vUv.x;\r\n\t\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).select( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\r\n\t\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\r\n\r\n\t\t\t\t\t\tlen2.greaterThan( 1.0 ).discard();\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet lineColorNode;\r\n\r\n\t\t\tif ( this.lineColorNode ) {\r\n\r\n\t\t\t\tlineColorNode = this.lineColorNode;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( useColor ) {\r\n\r\n\t\t\t\t\tconst instanceColorStart = attribute( 'instanceColorStart' );\r\n\t\t\t\t\tconst instanceColorEnd = attribute( 'instanceColorEnd' );\r\n\r\n\t\t\t\t\tconst instanceColor = positionGeometry.y.lessThan( 0.5 ).select( instanceColorStart, instanceColorEnd );\r\n\r\n\t\t\t\t\tlineColorNode = instanceColor.mul( materialColor );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlineColorNode = materialColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn vec4( lineColorNode, alpha );\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\r\n\tget worldUnits() {\r\n\r\n\t\treturn this.useWorldUnits;\r\n\r\n\t}\r\n\r\n\tset worldUnits( value ) {\r\n\r\n\t\tif ( this.useWorldUnits !== value ) {\r\n\r\n\t\t\tthis.useWorldUnits = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tget dashed() {\r\n\r\n\t\treturn this.useDash;\r\n\r\n\t}\r\n\r\n\tset dashed( value ) {\r\n\r\n\t\tif ( this.useDash !== value ) {\r\n\r\n\t\t\tthis.useDash = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tget alphaToCoverage() {\r\n\r\n\t\treturn this.useAlphaToCoverage;\r\n\r\n\t}\r\n\r\n\tset alphaToCoverage( value ) {\r\n\r\n\t\tif ( this.useAlphaToCoverage !== value ) {\r\n\r\n\t\t\tthis.useAlphaToCoverage = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Line2NodeMaterial;\r\n", "import { nodeObject } from '../tsl/TSLBase.js';\r\n\r\nexport const directionToColor = ( node ) => nodeObject( node ).mul( 0.5 ).add( 0.5 );\r\nexport const colorToDirection = ( node ) => nodeObject( node ).mul( 2.0 ).sub( 1 );\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\r\nimport { directionToColor } from '../../nodes/utils/Packing.js';\r\nimport { materialOpacity } from '../../nodes/accessors/MaterialNode.js';\r\nimport { transformedNormalView } from '../../nodes/accessors/Normal.js';\r\nimport { float, vec4 } from '../../nodes/tsl/TSLBase.js';\r\n\r\nimport { MeshNormalMaterial } from '../MeshNormalMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshNormalMaterial();\r\n\r\nclass MeshNormalNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshNormalNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.isMeshNormalNodeMaterial = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupDiffuseColor() {\r\n\r\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\r\n\r\n\t\tdiffuseColor.assign( vec4( directionToColor( transformedNormalView ), opacityNode ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshNormalNodeMaterial;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { positionWorldDirection } from '../accessors/Position.js';\r\nimport { nodeProxy, vec2 } from '../tsl/TSLBase.js';\r\n\r\nclass EquirectUVNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'EquirectUVNode';\r\n\r\n\t}\r\n\r\n\tconstructor( dirNode = positionWorldDirection ) {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.dirNode = dirNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst dir = this.dirNode;\r\n\r\n\t\tconst u = dir.z.atan2( dir.x ).mul( 1 / ( Math.PI * 2 ) ).add( 0.5 );\r\n\t\tconst v = dir.y.clamp( - 1.0, 1.0 ).asin().mul( 1 / Math.PI ).add( 0.5 );\r\n\r\n\t\treturn vec2( u, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default EquirectUVNode;\r\n\r\nexport const equirectUV = /*@__PURE__*/ nodeProxy( EquirectUVNode );\r\n", "import { equirectUV } from '../../nodes/utils/EquirectUVNode.js';\r\nimport { texture as TSL_Texture } from '../../nodes/accessors/TextureNode.js';\r\nimport { positionWorldDirection } from '../../nodes/accessors/Position.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nimport { WebGLCubeRenderTarget } from '../../renderers/WebGLCubeRenderTarget.js';\r\nimport { Scene } from '../../scenes/Scene.js';\r\nimport { CubeCamera } from '../../cameras/CubeCamera.js';\r\nimport { BoxGeometry } from '../../geometries/BoxGeometry.js';\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { BackSide, NoBlending, LinearFilter, LinearMipmapLinearFilter } from '../../constants.js';\r\n\r\n// @TODO: Consider rename WebGLCubeRenderTarget to just CubeRenderTarget\r\n\r\nclass CubeRenderTarget extends WebGLCubeRenderTarget {\r\n\r\n\tconstructor( size = 1, options = {} ) {\r\n\r\n\t\tsuper( size, options );\r\n\r\n\t\tthis.isCubeRenderTarget = true;\r\n\r\n\t}\r\n\r\n\tfromEquirectangularTexture( renderer, texture ) {\r\n\r\n\t\tconst currentMinFilter = texture.minFilter;\r\n\t\tconst currentGenerateMipmaps = texture.generateMipmaps;\r\n\r\n\t\ttexture.generateMipmaps = true;\r\n\r\n\t\tthis.texture.type = texture.type;\r\n\t\tthis.texture.colorSpace = texture.colorSpace;\r\n\r\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\r\n\t\tthis.texture.minFilter = texture.minFilter;\r\n\t\tthis.texture.magFilter = texture.magFilter;\r\n\r\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\r\n\r\n\t\tconst uvNode = equirectUV( positionWorldDirection );\r\n\r\n\t\tconst material = new NodeMaterial();\r\n\t\tmaterial.colorNode = TSL_Texture( texture, uvNode, 0 );\r\n\t\tmaterial.side = BackSide;\r\n\t\tmaterial.blending = NoBlending;\r\n\r\n\t\tconst mesh = new Mesh( geometry, material );\r\n\r\n\t\tconst scene = new Scene();\r\n\t\tscene.add( mesh );\r\n\r\n\t\t// Avoid blurred poles\r\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\r\n\r\n\t\tconst camera = new CubeCamera( 1, 10, this );\r\n\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\trenderer.setMRT( null );\r\n\r\n\t\tcamera.update( renderer, scene );\r\n\r\n\t\trenderer.setMRT( currentMRT );\r\n\r\n\t\ttexture.minFilter = currentMinFilter;\r\n\t\ttexture.currentGenerateMipmaps = currentGenerateMipmaps;\r\n\r\n\t\tmesh.geometry.dispose();\r\n\t\tmesh.material.dispose();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CubeRenderTarget;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { CubeTexture } from '../../textures/CubeTexture.js';\r\nimport { cubeTexture } from '../accessors/CubeTextureNode.js';\r\nimport CubeRenderTarget from '../../renderers/common/CubeRenderTarget.js';\r\nimport { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from '../../constants.js';\r\n\r\nconst _cache = new WeakMap();\r\n\r\nclass CubeMapNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'CubeMapNode';\r\n\r\n\t}\r\n\r\n\tconstructor( envNode ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.envNode = envNode;\r\n\r\n\t\tthis._cubeTexture = null;\r\n\t\tthis._cubeTextureNode = cubeTexture();\r\n\r\n\t\tconst defaultTexture = new CubeTexture();\r\n\t\tdefaultTexture.isRenderTargetTexture = true;\r\n\r\n\t\tthis._defaultTexture = defaultTexture;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer, material } = frame;\r\n\r\n\t\tconst envNode = this.envNode;\r\n\r\n\t\tif ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {\r\n\r\n\t\t\tconst texture = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];\r\n\r\n\t\t\tif ( texture && texture.isTexture ) {\r\n\r\n\t\t\t\tconst mapping = texture.mapping;\r\n\r\n\t\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\r\n\r\n\t\t\t\t\t// check for converted cubemap map\r\n\r\n\t\t\t\t\tif ( _cache.has( texture ) ) {\r\n\r\n\t\t\t\t\t\tconst cubeMap = _cache.get( texture );\r\n\r\n\t\t\t\t\t\tmapTextureMapping( cubeMap, texture.mapping );\r\n\t\t\t\t\t\tthis._cubeTexture = cubeMap;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// create cube map from equirectangular map\r\n\r\n\t\t\t\t\t\tconst image = texture.image;\r\n\r\n\t\t\t\t\t\tif ( isEquirectangularMapReady( image ) ) {\r\n\r\n\t\t\t\t\t\t\tconst renderTarget = new CubeRenderTarget( image.height );\r\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\r\n\r\n\t\t\t\t\t\t\tmapTextureMapping( renderTarget.texture, texture.mapping );\r\n\t\t\t\t\t\t\tthis._cubeTexture = renderTarget.texture;\r\n\r\n\t\t\t\t\t\t\t_cache.set( texture, renderTarget.texture );\r\n\r\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// default cube texture as fallback when equirectangular texture is not yet loaded\r\n\r\n\t\t\t\t\t\t\tthis._cubeTexture = this._defaultTexture;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\tthis._cubeTextureNode.value = this._cubeTexture;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// envNode already refers to a cube map\r\n\r\n\t\t\t\t\tthis._cubeTextureNode = this.envNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.updateBefore( builder );\r\n\r\n\t\treturn this._cubeTextureNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CubeMapNode;\r\n\r\nfunction isEquirectangularMapReady( image ) {\r\n\r\n\tif ( image === null || image === undefined ) return false;\r\n\r\n\treturn image.height > 0;\r\n\r\n}\r\n\r\nfunction onTextureDispose( event ) {\r\n\r\n\tconst texture = event.target;\r\n\r\n\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\tconst renderTarget = _cache.get( texture );\r\n\r\n\tif ( renderTarget !== undefined ) {\r\n\r\n\t\t_cache.delete( texture );\r\n\r\n\t\trenderTarget.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction mapTextureMapping( texture, mapping ) {\r\n\r\n\tif ( mapping === EquirectangularReflectionMapping ) {\r\n\r\n\t\ttexture.mapping = CubeReflectionMapping;\r\n\r\n\t} else if ( mapping === EquirectangularRefractionMapping ) {\r\n\r\n\t\ttexture.mapping = CubeRefractionMapping;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const cubeMapNode = /*@__PURE__*/ nodeProxy( CubeMapNode );\r\n", "import LightingNode from './LightingNode.js';\r\nimport { cubeMapNode } from '../utils/CubeMapNode.js';\r\n\r\nclass BasicEnvironmentNode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BasicEnvironmentNode';\r\n\r\n\t}\r\n\r\n\tconstructor( envNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.envNode = envNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// environment property is used in the finish() method of BasicLightingModel\r\n\r\n\t\tbuilder.context.environment = cubeMapNode( this.envNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BasicEnvironmentNode;\r\n", "import LightingNode from './LightingNode.js';\r\nimport { float } from '../tsl/TSLBase.js';\r\n\r\nclass BasicLightMapNode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BasicLightMapNode';\r\n\r\n\t}\r\n\r\n\tconstructor( lightMapNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lightMapNode = lightMapNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// irradianceLightMap property is used in the indirectDiffuse() method of BasicLightingModel\r\n\r\n\t\tconst RECIPROCAL_PI = float( 1 / Math.PI );\r\n\r\n\t\tbuilder.context.irradianceLightMap = this.lightMapNode.mul( RECIPROCAL_PI );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BasicLightMapNode;\r\n", "class LightingModel {\r\n\r\n\tstart( /*input, stack, builder*/ ) { }\r\n\r\n\tfinish( /*input, stack, builder*/ ) { }\r\n\r\n\tdirect( /*input, stack, builder*/ ) { }\r\n\r\n\tdirectRectArea( /*input, stack, builder*/ ) {}\r\n\r\n\tindirect( /*input, stack, builder*/ ) { }\r\n\r\n\tambientOcclusion( /*input, stack, builder*/ ) { }\r\n\r\n}\r\n\r\nexport default LightingModel;\r\n", "import LightingModel from '../core/LightingModel.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { MultiplyOperation, MixOperation, AddOperation } from '../../constants.js';\r\nimport { materialSpecularStrength, materialReflectivity } from '../accessors/MaterialNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { vec4 } from '../tsl/TSLBase.js';\r\n\r\nclass BasicLightingModel extends LightingModel {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\tindirect( context, stack, builder ) {\r\n\r\n\t\tconst ambientOcclusion = context.ambientOcclusion;\r\n\t\tconst reflectedLight = context.reflectedLight;\r\n\t\tconst irradianceLightMap = builder.context.irradianceLightMap;\r\n\r\n\t\treflectedLight.indirectDiffuse.assign( vec4( 0.0 ) );\r\n\r\n\t\t// accumulation (baked indirect lighting only)\r\n\r\n\t\tif ( irradianceLightMap ) {\r\n\r\n\t\t\treflectedLight.indirectDiffuse.addAssign( irradianceLightMap );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treflectedLight.indirectDiffuse.addAssign( vec4( 1.0, 1.0, 1.0, 0.0 ) );\r\n\r\n\t\t}\r\n\r\n\t\t// modulation\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( diffuseColor.rgb );\r\n\r\n\t}\r\n\r\n\tfinish( context, stack, builder ) {\r\n\r\n\t\tconst material = builder.material;\r\n\t\tconst outgoingLight = context.outgoingLight;\r\n\t\tconst envNode = builder.context.environment;\r\n\r\n\t\tif ( envNode ) {\r\n\r\n\t\t\tswitch ( material.combine ) {\r\n\r\n\t\t\t\tcase MultiplyOperation:\r\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, outgoingLight.rgb.mul( envNode.rgb ), materialSpecularStrength.mul( materialReflectivity ) ) );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MixOperation:\r\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul( materialReflectivity ) ) );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AddOperation:\r\n\t\t\t\t\toutgoingLight.rgb.addAssign( envNode.rgb.mul( materialSpecularStrength.mul( materialReflectivity ) ) );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn( 'THREE.BasicLightingModel: Unsupported .combine value:', material.combine );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BasicLightingModel;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { materialLightMap } from '../../nodes/accessors/MaterialNode.js';\r\nimport BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';\r\nimport BasicLightMapNode from '../../nodes/lighting/BasicLightMapNode.js';\r\nimport BasicLightingModel from '../../nodes/functions/BasicLightingModel.js';\r\nimport { normalView } from '../../nodes/accessors/Normal.js';\r\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\r\n\r\nimport { MeshBasicMaterial } from '../MeshBasicMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshBasicMaterial();\r\n\r\nclass MeshBasicNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshBasicNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshBasicNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupNormal() {\r\n\r\n\t\treturn normalView; // see #28839\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tconst envNode = super.setupEnvironment( builder );\r\n\r\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\r\n\tsetupLightMap( builder ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( builder.material.lightMap ) {\r\n\r\n\t\t\tnode = new BasicLightMapNode( materialLightMap );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetupOutgoingLight() {\r\n\r\n\t\treturn diffuseColor.rgb;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel() {\r\n\r\n\t\treturn new BasicLightingModel();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshBasicNodeMaterial;\r\n", "import { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst F_Schlick = /*@__PURE__*/ Fn( ( { f0, f90, dotVH } ) => {\r\n\r\n\t// Original approximation by Christophe Schlick '94\r\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\r\n\r\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\r\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\r\n\tconst fresnel = dotVH.mul( - 5.55473 ).sub( 6.98316 ).mul( dotVH ).exp2();\r\n\r\n\treturn f0.mul( fresnel.oneMinus() ).add( f90.mul( fresnel ) );\r\n\r\n} ); // validated\r\n\r\nexport default F_Schlick;\r\n", "import { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst BRDF_Lambert = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\treturn inputs.diffuseColor.mul( 1 / Math.PI ); // punctual light\r\n\r\n} ); // validated\r\n\r\nexport default BRDF_Lambert;\r\n", "import BasicLightingModel from './BasicLightingModel.js';\r\nimport F_Schlick from './BSDF/F_Schlick.js';\r\nimport BRDF_Lambert from './BSDF/BRDF_Lambert.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { transformedNormalView } from '../accessors/Normal.js';\r\nimport { materialSpecularStrength } from '../accessors/MaterialNode.js';\r\nimport { shininess, specularColor } from '../core/PropertyNode.js';\r\nimport { positionViewDirection } from '../accessors/Position.js';\r\nimport { Fn, float } from '../tsl/TSLBase.js';\r\n\r\nconst G_BlinnPhong_Implicit = () => float( 0.25 );\r\n\r\nconst D_BlinnPhong = /*@__PURE__*/ Fn( ( { dotNH } ) => {\r\n\r\n\treturn shininess.mul( float( 0.5 ) ).add( 1.0 ).mul( float( 1 / Math.PI ) ).mul( dotNH.pow( shininess ) );\r\n\r\n} );\r\n\r\nconst BRDF_BlinnPhong = /*@__PURE__*/ Fn( ( { lightDirection } ) => {\r\n\r\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\r\n\r\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\r\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\r\n\r\n\tconst F = F_Schlick( { f0: specularColor, f90: 1.0, dotVH } );\r\n\tconst G = G_BlinnPhong_Implicit();\r\n\tconst D = D_BlinnPhong( { dotNH } );\r\n\r\n\treturn F.mul( G ).mul( D );\r\n\r\n} );\r\n\r\nclass PhongLightingModel extends BasicLightingModel {\r\n\r\n\tconstructor( specular = true ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.specular = specular;\r\n\r\n\t}\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\r\n\r\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\r\n\t\tconst irradiance = dotNL.mul( lightColor );\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\r\n\r\n\t\tif ( this.specular === true ) {\r\n\r\n\t\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_BlinnPhong( { lightDirection } ) ).mul( materialSpecularStrength ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tindirect( { ambientOcclusion, irradiance, reflectedLight } ) {\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PhongLightingModel;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';\r\nimport PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';\r\n\r\nimport { MeshLambertMaterial } from '../MeshLambertMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshLambertMaterial();\r\n\r\nclass MeshLambertNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshLambertNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshLambertNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tconst envNode = super.setupEnvironment( builder );\r\n\r\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhongLightingModel( false ); // ( specular ) -> force lambert\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshLambertNodeMaterial;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { shininess, specularColor } from '../../nodes/core/PropertyNode.js';\r\nimport { materialShininess, materialSpecular } from '../../nodes/accessors/MaterialNode.js';\r\nimport { float } from '../../nodes/tsl/TSLBase.js';\r\nimport BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';\r\nimport PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';\r\n\r\nimport { MeshPhongMaterial } from '../MeshPhongMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshPhongMaterial();\r\n\r\nclass MeshPhongNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshPhongNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhongNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.shininessNode = null;\r\n\t\tthis.specularNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tconst envNode = super.setupEnvironment( builder );\r\n\r\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhongLightingModel();\r\n\r\n\t}\r\n\r\n\tsetupVariants() {\r\n\r\n\t\t// SHININESS\r\n\r\n\t\tconst shininessNode = ( this.shininessNode ? float( this.shininessNode ) : materialShininess ).max( 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tshininess.assign( shininessNode );\r\n\r\n\t\t// SPECULAR COLOR\r\n\r\n\t\tconst specularNode = this.specularNode || materialSpecular;\r\n\r\n\t\tspecularColor.assign( specularNode );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.shininessNode = source.shininessNode;\r\n\t\tthis.specularNode = source.specularNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshPhongNodeMaterial;\r\n", "import { normalView } from '../../accessors/Normal.js';\r\nimport { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst getGeometryRoughness = /*@__PURE__*/ Fn( () => {\r\n\r\n\tconst dxy = normalView.dFdx().abs().max( normalView.dFdy().abs() );\r\n\tconst geometryRoughness = dxy.x.max( dxy.y ).max( dxy.z );\r\n\r\n\treturn geometryRoughness;\r\n\r\n} );\r\n\r\nexport default getGeometryRoughness;\r\n", "import getGeometryRoughness from './getGeometryRoughness.js';\r\nimport { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst getRoughness = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\tconst { roughness } = inputs;\r\n\r\n\tconst geometryRoughness = getGeometryRoughness();\r\n\r\n\tlet roughnessFactor = roughness.max( 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.\r\n\troughnessFactor = roughnessFactor.add( geometryRoughness );\r\n\troughnessFactor = roughnessFactor.min( 1.0 );\r\n\r\n\treturn roughnessFactor;\r\n\r\n} );\r\n\r\nexport default getRoughness;\r\n", "import { div } from '../../math/OperatorNode.js';\r\nimport { EPSILON } from '../../math/MathNode.js';\r\nimport { Fn } from '../../tsl/TSLBase.js';\r\n\r\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\r\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\nconst V_GGX_SmithCorrelated = /*@__PURE__*/ Fn( ( { alpha, dotNL, dotNV } ) => {\r\n\r\n\tconst a2 = alpha.pow2();\r\n\r\n\tconst gv = dotNL.mul( a2.add( a2.oneMinus().mul( dotNV.pow2() ) ).sqrt() );\r\n\tconst gl = dotNV.mul( a2.add( a2.oneMinus().mul( dotNL.pow2() ) ).sqrt() );\r\n\r\n\treturn div( 0.5, gv.add( gl ).max( EPSILON ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'V_GGX_SmithCorrelated',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alpha', type: 'float' },\r\n\t\t{ name: 'dotNL', type: 'float' },\r\n\t\t{ name: 'dotNV', type: 'float' }\r\n\t]\r\n} ); // validated\r\n\r\nexport default V_GGX_SmithCorrelated;\r\n", "import { div } from '../../math/OperatorNode.js';\r\nimport { Fn, vec3 } from '../../tsl/TSLBase.js';\r\n\r\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\r\n\r\nconst V_GGX_SmithCorrelated_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } ) => {\r\n\r\n\tconst gv = dotNL.mul( vec3( alphaT.mul( dotTV ), alphaB.mul( dotBV ), dotNV ).length() );\r\n\tconst gl = dotNV.mul( vec3( alphaT.mul( dotTL ), alphaB.mul( dotBL ), dotNL ).length() );\r\n\tconst v = div( 0.5, gv.add( gl ) );\r\n\r\n\treturn v.saturate();\r\n\r\n} ).setLayout( {\r\n\tname: 'V_GGX_SmithCorrelated_Anisotropic',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTL', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBL', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNL', type: 'float', qualifier: 'in' }\r\n\t]\r\n} );\r\n\r\nexport default V_GGX_SmithCorrelated_Anisotropic;\r\n", "import { Fn } from '../../tsl/TSLBase.js';\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is \"roughness squared\" in Disney’s reparameterization\r\nconst D_GGX = /*@__PURE__*/ Fn( ( { alpha, dotNH } ) => {\r\n\r\n\tconst a2 = alpha.pow2();\r\n\r\n\tconst denom = dotNH.pow2().mul( a2.oneMinus() ).oneMinus(); // avoid alpha = 0 with dotNH = 1\r\n\r\n\treturn a2.div( denom.pow2() ).mul( 1 / Math.PI );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_GGX',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alpha', type: 'float' },\r\n\t\t{ name: 'dotNH', type: 'float' }\r\n\t]\r\n} ); // validated\r\n\r\nexport default D_GGX;\r\n", "import { Fn, float, vec3 } from '../../tsl/TSLBase.js';\r\n\r\nconst RECIPROCAL_PI = /*@__PURE__*/ float( 1 / Math.PI );\r\n\r\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\r\n\r\nconst D_GGX_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotNH, dotTH, dotBH } ) => {\r\n\r\n\tconst a2 = alphaT.mul( alphaB );\r\n\tconst v = vec3( alphaB.mul( dotTH ), alphaT.mul( dotBH ), a2.mul( dotNH ) );\r\n\tconst v2 = v.dot( v );\r\n\tconst w2 = a2.div( v2 );\r\n\r\n\treturn RECIPROCAL_PI.mul( a2.mul( w2.pow2() ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_GGX_Anisotropic',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNH', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTH', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBH', type: 'float', qualifier: 'in' }\r\n\t]\r\n} );\r\n\r\nexport default D_GGX_Anisotropic;\r\n", "import F_Schlick from './F_Schlick.js';\r\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\r\nimport V_GGX_SmithCorrelated_Anisotropic from './V_GGX_SmithCorrelated_Anisotropic.js';\r\nimport D_GGX from './D_GGX.js';\r\nimport D_GGX_Anisotropic from './D_GGX_Anisotropic.js';\r\nimport { transformedNormalView } from '../../accessors/Normal.js';\r\nimport { positionViewDirection } from '../../accessors/Position.js';\r\nimport { iridescence, alphaT, anisotropyT, anisotropyB } from '../../core/PropertyNode.js';\r\nimport { Fn, defined } from '../../tsl/TSLBase.js';\r\n\r\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\r\nconst BRDF_GGX = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\tconst { lightDirection, f0, f90, roughness, f, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;\r\n\r\n\tconst normalView = inputs.normalView || transformedNormalView;\r\n\r\n\tconst alpha = roughness.pow2(); // UE4's roughness\r\n\r\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\r\n\r\n\tconst dotNL = normalView.dot( lightDirection ).clamp();\r\n\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\r\n\tconst dotNH = normalView.dot( halfDir ).clamp();\r\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\r\n\r\n\tlet F = F_Schlick( { f0, f90, dotVH } );\r\n\tlet V, D;\r\n\r\n\tif ( defined( USE_IRIDESCENCE ) ) {\r\n\r\n\t\tF = iridescence.mix( F, f );\r\n\r\n\t}\r\n\r\n\tif ( defined( USE_ANISOTROPY ) ) {\r\n\r\n\t\tconst dotTL = anisotropyT.dot( lightDirection );\r\n\t\tconst dotTV = anisotropyT.dot( positionViewDirection );\r\n\t\tconst dotTH = anisotropyT.dot( halfDir );\r\n\t\tconst dotBL = anisotropyB.dot( lightDirection );\r\n\t\tconst dotBV = anisotropyB.dot( positionViewDirection );\r\n\t\tconst dotBH = anisotropyB.dot( halfDir );\r\n\r\n\t\tV = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );\r\n\t\tD = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );\r\n\r\n\t} else {\r\n\r\n\t\tV = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );\r\n\t\tD = D_GGX( { alpha, dotNH } );\r\n\r\n\t}\r\n\r\n\treturn F.mul( V ).mul( D );\r\n\r\n} ); // validated\r\n\r\nexport default BRDF_GGX;\r\n", "import { Fn, vec2, vec4 } from '../../tsl/TSLBase.js';\r\n\r\n// Analytical approximation of the DFG LUT, one half of the\r\n// split-sum approximation used in indirect specular lighting.\r\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\r\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\r\nconst DFGApprox = /*@__PURE__*/ Fn( ( { roughness, dotNV } ) => {\r\n\r\n\tconst c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\r\n\tconst c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n\tconst r = roughness.mul( c0 ).add( c1 );\r\n\r\n\tconst a004 = r.x.mul( r.x ).min( dotNV.mul( - 9.28 ).exp2() ).mul( r.x ).add( r.y );\r\n\r\n\tconst fab = vec2( - 1.04, 1.04 ).mul( a004 ).add( r.zw );\r\n\r\n\treturn fab;\r\n\r\n} ).setLayout( {\r\n\tname: 'DFGApprox',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' },\r\n\t\t{ name: 'dotNV', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport default DFGApprox;\r\n", "import DFGApprox from './DFGApprox.js';\r\nimport { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst EnvironmentBRDF = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\tconst { dotNV, specularColor, specularF90, roughness } = inputs;\r\n\r\n\tconst fab = DFGApprox( { dotNV, roughness } );\r\n\treturn specularColor.mul( fab.x ).add( specularF90.mul( fab.y ) );\r\n\r\n} );\r\n\r\nexport default EnvironmentBRDF;\r\n", "import { Fn, vec3 } from '../../tsl/TSLBase.js';\r\n\r\nconst Schlick_to_F0 = /*@__PURE__*/ Fn( ( { f, f90, dotVH } ) => {\r\n\r\n\tconst x = dotVH.oneMinus().saturate();\r\n\tconst x2 = x.mul( x );\r\n\tconst x5 = x.mul( x2, x2 ).clamp( 0, .9999 );\r\n\r\n\treturn f.sub( vec3( f90 ).mul( x5 ) ).div( x5.oneMinus() );\r\n\r\n} ).setLayout( {\r\n\tname: 'Schlick_to_F0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'f', type: 'vec3' },\r\n\t\t{ name: 'f90', type: 'float' },\r\n\t\t{ name: 'dotVH', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport default Schlick_to_F0;\r\n", "import { transformedNormalView } from '../../accessors/Normal.js';\r\nimport { positionViewDirection } from '../../accessors/Position.js';\r\nimport { sheen, sheenRoughness } from '../../core/PropertyNode.js';\r\nimport { Fn, float } from '../../tsl/TSLBase.js';\r\n\r\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\r\nconst D_Charlie = /*@__PURE__*/ Fn( ( { roughness, dotNH } ) => {\r\n\r\n\tconst alpha = roughness.pow2();\r\n\r\n\t// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\r\n\tconst invAlpha = float( 1.0 ).div( alpha );\r\n\tconst cos2h = dotNH.pow2();\r\n\tconst sin2h = cos2h.oneMinus().max( 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\r\n\r\n\treturn float( 2.0 ).add( invAlpha ).mul( sin2h.pow( invAlpha.mul( 0.5 ) ) ).div( 2.0 * Math.PI );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_Charlie',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' },\r\n\t\t{ name: 'dotNH', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\r\nconst V_Neubelt = /*@__PURE__*/ Fn( ( { dotNV, dotNL } ) => {\r\n\r\n\t// Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\r\n\treturn float( 1.0 ).div( float( 4.0 ).mul( dotNL.add( dotNV ).sub( dotNL.mul( dotNV ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'V_Neubelt',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'dotNV', type: 'float' },\r\n\t\t{ name: 'dotNL', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst BRDF_Sheen = /*@__PURE__*/ Fn( ( { lightDirection } ) => {\r\n\r\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\r\n\r\n\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\r\n\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp();\r\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\r\n\r\n\tconst D = D_Charlie( { roughness: sheenRoughness, dotNH } );\r\n\tconst V = V_Neubelt( { dotNV, dotNL } );\r\n\r\n\treturn sheen.mul( D ).mul( V );\r\n\r\n} );\r\n\r\nexport default BRDF_Sheen;\r\n", "import { Fn, If, mat3, vec2, vec3 } from '../../tsl/TSLBase.js';\r\nimport { max } from '../../math/MathNode.js';\r\n\r\n// Rect Area Light\r\n\r\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\r\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\r\n// code: https://github.com/selfshadow/ltc_code/\r\n\r\nconst LTC_Uv = /*@__PURE__*/ Fn( ( { N, V, roughness } ) => {\r\n\r\n\tconst LUT_SIZE = 64.0;\r\n\tconst LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\r\n\tconst LUT_BIAS = 0.5 / LUT_SIZE;\r\n\r\n\tconst dotNV = N.dot( V ).saturate();\r\n\r\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\r\n\tconst uv = vec2( roughness, dotNV.oneMinus().sqrt() );\r\n\r\n\tuv.assign( uv.mul( LUT_SCALE ).add( LUT_BIAS ) );\r\n\r\n\treturn uv;\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_Uv',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'N', type: 'vec3' },\r\n\t\t{ name: 'V', type: 'vec3' },\r\n\t\t{ name: 'roughness', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst LTC_ClippedSphereFormFactor = /*@__PURE__*/ Fn( ( { f } ) => {\r\n\r\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\r\n\t// An approximation of the form factor of a horizon-clipped rectangle.\r\n\r\n\tconst l = f.length();\r\n\r\n\treturn max( l.mul( l ).add( f.z ).div( l.add( 1.0 ) ), 0 );\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_ClippedSphereFormFactor',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'f', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nconst LTC_EdgeVectorFormFactor = /*@__PURE__*/ Fn( ( { v1, v2 } ) => {\r\n\r\n\tconst x = v1.dot( v2 );\r\n\tconst y = x.abs().toVar();\r\n\r\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\r\n\tconst a = y.mul( 0.0145206 ).add( 0.4965155 ).mul( y ).add( 0.8543985 ).toVar();\r\n\tconst b = y.add( 4.1616724 ).mul( y ).add( 3.4175940 ).toVar();\r\n\tconst v = a.div( b );\r\n\r\n\tconst theta_sintheta = x.greaterThan( 0.0 ).select( v, max( x.mul( x ).oneMinus(), 1e-7 ).inverseSqrt().mul( 0.5 ).sub( v ) );\r\n\r\n\treturn v1.cross( v2 ).mul( theta_sintheta );\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_EdgeVectorFormFactor',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nconst LTC_Evaluate = /*@__PURE__*/ Fn( ( { N, V, P, mInv, p0, p1, p2, p3 } ) => {\r\n\r\n\t// bail if point is on back side of plane of light\r\n\t// assumes ccw winding order of light vertices\r\n\tconst v1 = p1.sub( p0 ).toVar();\r\n\tconst v2 = p3.sub( p0 ).toVar();\r\n\r\n\tconst lightNormal = v1.cross( v2 );\r\n\tconst result = vec3().toVar();\r\n\r\n\tIf( lightNormal.dot( P.sub( p0 ) ).greaterThanEqual( 0.0 ), () => {\r\n\r\n\t\t// construct orthonormal basis around N\r\n\t\tconst T1 = V.sub( N.mul( V.dot( N ) ) ).normalize();\r\n\t\tconst T2 = N.cross( T1 ).negate(); // negated from paper; possibly due to a different handedness of world coordinate system\r\n\r\n\t\t// compute transform\r\n\t\tconst mat = mInv.mul( mat3( T1, T2, N ).transpose() ).toVar();\r\n\r\n\t\t// transform rect\r\n\t\t// & project rect onto sphere\r\n\t\tconst coords0 = mat.mul( p0.sub( P ) ).normalize().toVar();\r\n\t\tconst coords1 = mat.mul( p1.sub( P ) ).normalize().toVar();\r\n\t\tconst coords2 = mat.mul( p2.sub( P ) ).normalize().toVar();\r\n\t\tconst coords3 = mat.mul( p3.sub( P ) ).normalize().toVar();\r\n\r\n\t\t// calculate vector form factor\r\n\t\tconst vectorFormFactor = vec3( 0 ).toVar();\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords0, v2: coords1 } ) );\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords1, v2: coords2 } ) );\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords2, v2: coords3 } ) );\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords3, v2: coords0 } ) );\r\n\r\n\t\t// adjust for horizon clipping\r\n\t\tresult.assign( vec3( LTC_ClippedSphereFormFactor( { f: vectorFormFactor } ) ) );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_Evaluate',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'N', type: 'vec3' },\r\n\t\t{ name: 'V', type: 'vec3' },\r\n\t\t{ name: 'P', type: 'vec3' },\r\n\t\t{ name: 'mInv', type: 'mat3' },\r\n\t\t{ name: 'p0', type: 'vec3' },\r\n\t\t{ name: 'p1', type: 'vec3' },\r\n\t\t{ name: 'p2', type: 'vec3' },\r\n\t\t{ name: 'p3', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n\r\nexport { LTC_Evaluate, LTC_Uv };\r\n", "import { add, mul, div } from '../math/OperatorNode.js';\r\nimport { floor, ceil, fract, pow } from '../math/MathNode.js';\r\nimport { Fn, float, vec2, vec4, int } from '../tsl/TSLBase.js';\r\n\r\n// Mipped Bicubic Texture Filtering by N8\r\n// https://www.shadertoy.com/view/Dl2SDW\r\n\r\nconst bC = 1.0 / 6.0;\r\n\r\nconst w0 = ( a ) => mul( bC, mul( a, mul( a, a.negate().add( 3.0 ) ).sub( 3.0 ) ).add( 1.0 ) );\r\n\r\nconst w1 = ( a ) => mul( bC, mul( a, mul( a, mul( 3.0, a ).sub( 6.0 ) ) ).add( 4.0 ) );\r\n\r\nconst w2 = ( a ) => mul( bC, mul( a, mul( a, mul( - 3.0, a ).add( 3.0 ) ).add( 3.0 ) ).add( 1.0 ) );\r\n\r\nconst w3 = ( a ) => mul( bC, pow( a, 3 ) );\r\n\r\nconst g0 = ( a ) => w0( a ).add( w1( a ) );\r\n\r\nconst g1 = ( a ) => w2( a ).add( w3( a ) );\r\n\r\n// h0 and h1 are the two offset functions\r\nconst h0 = ( a ) => add( - 1.0, w1( a ).div( w0( a ).add( w1( a ) ) ) );\r\n\r\nconst h1 = ( a ) => add( 1.0, w3( a ).div( w2( a ).add( w3( a ) ) ) );\r\n\r\nconst bicubic = ( textureNode, texelSize, lod ) => {\r\n\r\n\tconst uv = textureNode.uvNode;\r\n\tconst uvScaled = mul( uv, texelSize.zw ).add( 0.5 );\r\n\r\n\tconst iuv = floor( uvScaled );\r\n\tconst fuv = fract( uvScaled );\r\n\r\n\tconst g0x = g0( fuv.x );\r\n\tconst g1x = g1( fuv.x );\r\n\tconst h0x = h0( fuv.x );\r\n\tconst h1x = h1( fuv.x );\r\n\tconst h0y = h0( fuv.y );\r\n\tconst h1y = h1( fuv.y );\r\n\r\n\tconst p0 = vec2( iuv.x.add( h0x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p1 = vec2( iuv.x.add( h1x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p2 = vec2( iuv.x.add( h0x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p3 = vec2( iuv.x.add( h1x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\r\n\tconst a = g0( fuv.y ).mul( add( g0x.mul( textureNode.uv( p0 ).level( lod ) ), g1x.mul( textureNode.uv( p1 ).level( lod ) ) ) );\r\n\tconst b = g1( fuv.y ).mul( add( g0x.mul( textureNode.uv( p2 ).level( lod ) ), g1x.mul( textureNode.uv( p3 ).level( lod ) ) ) );\r\n\r\n\treturn a.add( b );\r\n\r\n};\r\n\r\nexport const textureBicubic = /*@__PURE__*/ Fn( ( [ textureNode, lodNode = float( 3 ) ] ) => {\r\n\r\n\tconst fLodSize = vec2( textureNode.size( int( lodNode ) ) );\r\n\tconst cLodSize = vec2( textureNode.size( int( lodNode.add( 1.0 ) ) ) );\r\n\tconst fLodSizeInv = div( 1.0, fLodSize );\r\n\tconst cLodSizeInv = div( 1.0, cLodSize );\r\n\tconst fSample = bicubic( textureNode, vec4( fLodSizeInv, fLodSize ), floor( lodNode ) );\r\n\tconst cSample = bicubic( textureNode, vec4( cLodSizeInv, cLodSize ), ceil( lodNode ) );\r\n\r\n\treturn fract( lodNode ).mix( fSample, cSample );\r\n\r\n} );\r\n", "import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\r\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\r\nimport DFGApprox from './BSDF/DFGApprox.js';\r\nimport EnvironmentBRDF from './BSDF/EnvironmentBRDF.js';\r\nimport F_Schlick from './BSDF/F_Schlick.js';\r\nimport Schlick_to_F0 from './BSDF/Schlick_to_F0.js';\r\nimport BRDF_Sheen from './BSDF/BRDF_Sheen.js';\r\nimport { LTC_Evaluate, LTC_Uv } from './BSDF/LTC.js';\r\nimport LightingModel from '../core/LightingModel.js';\r\nimport { diffuseColor, specularColor, specularF90, roughness, clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, ior, thickness, transmission, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\r\nimport { transformedNormalView, transformedClearcoatNormalView, transformedNormalWorld } from '../accessors/Normal.js';\r\nimport { positionViewDirection, positionView, positionWorld } from '../accessors/Position.js';\r\nimport { Fn, float, vec2, vec3, vec4, mat3, If } from '../tsl/TSLBase.js';\r\nimport { select } from '../math/ConditionalNode.js';\r\nimport { mix, normalize, refract, length, clamp, log2, log, exp, smoothstep } from '../math/MathNode.js';\r\nimport { div } from '../math/OperatorNode.js';\r\nimport { cameraPosition, cameraProjectionMatrix, cameraViewMatrix } from '../accessors/Camera.js';\r\nimport { modelWorldMatrix } from '../accessors/ModelNode.js';\r\nimport { screenSize } from '../display/ScreenNode.js';\r\nimport { viewportMipTexture } from '../display/ViewportTextureNode.js';\r\nimport { textureBicubic } from '../accessors/TextureBicubic.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\n\r\n//\r\n// Transmission\r\n//\r\n\r\nconst getVolumeTransmissionRay = /*@__PURE__*/ Fn( ( [ n, v, thickness, ior, modelMatrix ] ) => {\r\n\r\n\t// Direction of refracted light.\r\n\tconst refractionVector = vec3( refract( v.negate(), normalize( n ), div( 1.0, ior ) ) );\r\n\r\n\t// Compute rotation-independant scaling of the model matrix.\r\n\tconst modelScale = vec3(\r\n\t\tlength( modelMatrix[ 0 ].xyz ),\r\n\t\tlength( modelMatrix[ 1 ].xyz ),\r\n\t\tlength( modelMatrix[ 2 ].xyz )\r\n\t);\r\n\r\n\t// The thickness is specified in local space.\r\n\treturn normalize( refractionVector ).mul( thickness.mul( modelScale ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'getVolumeTransmissionRay',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'n', type: 'vec3' },\r\n\t\t{ name: 'v', type: 'vec3' },\r\n\t\t{ name: 'thickness', type: 'float' },\r\n\t\t{ name: 'ior', type: 'float' },\r\n\t\t{ name: 'modelMatrix', type: 'mat4' }\r\n\t]\r\n} );\r\n\r\nconst applyIorToRoughness = /*@__PURE__*/ Fn( ( [ roughness, ior ] ) => {\r\n\r\n\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\r\n\t// an IOR of 1.5 results in the default amount of microfacet refraction.\r\n\treturn roughness.mul( clamp( ior.mul( 2.0 ).sub( 2.0 ), 0.0, 1.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'applyIorToRoughness',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' },\r\n\t\t{ name: 'ior', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst singleViewportMipTexture = /*@__PURE__*/ viewportMipTexture();\r\n\r\nconst getTransmissionSample = /*@__PURE__*/ Fn( ( [ fragCoord, roughness, ior ] ) => {\r\n\r\n\tconst transmissionSample = singleViewportMipTexture.uv( fragCoord );\r\n\t//const transmissionSample = viewportMipTexture( fragCoord );\r\n\r\n\tconst lod = log2( float( screenSize.x ) ).mul( applyIorToRoughness( roughness, ior ) );\r\n\r\n\treturn textureBicubic( transmissionSample, lod );\r\n\r\n} );\r\n\r\nconst volumeAttenuation = /*@__PURE__*/ Fn( ( [ transmissionDistance, attenuationColor, attenuationDistance ] ) => {\r\n\r\n\tIf( attenuationDistance.notEqual( 0 ), () => {\r\n\r\n\t\t// Compute light attenuation using Beer's law.\r\n\t\tconst attenuationCoefficient = log( attenuationColor ).negate().div( attenuationDistance );\r\n\t\tconst transmittance = exp( attenuationCoefficient.negate().mul( transmissionDistance ) );\r\n\r\n\t\treturn transmittance;\r\n\r\n\t} );\r\n\r\n\t// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\r\n\treturn vec3( 1.0 );\r\n\r\n} ).setLayout( {\r\n\tname: 'volumeAttenuation',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'transmissionDistance', type: 'float' },\r\n\t\t{ name: 'attenuationColor', type: 'vec3' },\r\n\t\t{ name: 'attenuationDistance', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst getIBLVolumeRefraction = /*@__PURE__*/ Fn( ( [ n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion ] ) => {\r\n\r\n\tlet transmittedLight, transmittance;\r\n\r\n\tif ( dispersion ) {\r\n\r\n\t\ttransmittedLight = vec4().toVar();\r\n\t\ttransmittance = vec3().toVar();\r\n\r\n\t\tconst halfSpread = ior.sub( 1.0 ).mul( dispersion.mul( 0.025 ) );\r\n\t\tconst iors = vec3( ior.sub( halfSpread ), ior, ior.add( halfSpread ) );\r\n\r\n\t\tLoop( { start: 0, end: 3 }, ( { i } ) => {\r\n\r\n\t\t\tconst ior = iors.element( i );\r\n\r\n\t\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\r\n\t\t\tconst refractedRayExit = position.add( transmissionRay );\r\n\r\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\r\n\t\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\r\n\t\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\r\n\t\t\trefractionCoords.addAssign( 1.0 );\r\n\t\t\trefractionCoords.divAssign( 2.0 );\r\n\t\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\r\n\r\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\r\n\t\t\tconst transmissionSample = getTransmissionSample( refractionCoords, roughness, ior );\r\n\r\n\t\t\ttransmittedLight.element( i ).assign( transmissionSample.element( i ) );\r\n\t\t\ttransmittedLight.a.addAssign( transmissionSample.a );\r\n\r\n\t\t\ttransmittance.element( i ).assign( diffuseColor.element( i ).mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ).element( i ) ) );\r\n\r\n\t\t} );\r\n\r\n\t\ttransmittedLight.a.divAssign( 3.0 );\r\n\r\n\t} else {\r\n\r\n\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\r\n\t\tconst refractedRayExit = position.add( transmissionRay );\r\n\r\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\r\n\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\r\n\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\r\n\t\trefractionCoords.addAssign( 1.0 );\r\n\t\trefractionCoords.divAssign( 2.0 );\r\n\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\r\n\r\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\r\n\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\r\n\t\ttransmittance = diffuseColor.mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ) );\r\n\r\n\t}\r\n\r\n\tconst attenuatedColor = transmittance.rgb.mul( transmittedLight.rgb );\r\n\tconst dotNV = n.dot( v ).clamp();\r\n\r\n\t// Get the specular component.\r\n\tconst F = vec3( EnvironmentBRDF( { // n, v, specularColor, specularF90, roughness\r\n\t\tdotNV,\r\n\t\tspecularColor,\r\n\t\tspecularF90,\r\n\t\troughness\r\n\t} ) );\r\n\r\n\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\r\n\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\r\n\tconst transmittanceFactor = transmittance.r.add( transmittance.g, transmittance.b ).div( 3.0 );\r\n\r\n\treturn vec4( F.oneMinus().mul( attenuatedColor ), transmittedLight.a.oneMinus().mul( transmittanceFactor ).oneMinus() );\r\n\r\n} );\r\n\r\n//\r\n// Iridescence\r\n//\r\n\r\n// XYZ to linear-sRGB color space\r\nconst XYZ_TO_REC709 = /*@__PURE__*/ mat3(\r\n\t3.2404542, - 0.9692660, 0.0556434,\r\n\t- 1.5371385, 1.8760108, - 0.2040259,\r\n\t- 0.4985314, 0.0415560, 1.0572252\r\n);\r\n\r\n// Assume air interface for top\r\n// Note: We don't handle the case fresnel0 == 1\r\nconst Fresnel0ToIor = ( fresnel0 ) => {\r\n\r\n\tconst sqrtF0 = fresnel0.sqrt();\r\n\treturn vec3( 1.0 ).add( sqrtF0 ).div( vec3( 1.0 ).sub( sqrtF0 ) );\r\n\r\n};\r\n\r\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\r\nconst IorToFresnel0 = ( transmittedIor, incidentIor ) => {\r\n\r\n\treturn transmittedIor.sub( incidentIor ).div( transmittedIor.add( incidentIor ) ).pow2();\r\n\r\n};\r\n\r\n// Fresnel equations for dielectric/dielectric interfaces.\r\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\r\n// Evaluation XYZ sensitivity curves in Fourier space\r\nconst evalSensitivity = ( OPD, shift ) => {\r\n\r\n\tconst phase = OPD.mul( 2.0 * Math.PI * 1.0e-9 );\r\n\tconst val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\r\n\tconst pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\r\n\tconst VAR = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\r\n\r\n\tconst x = float( 9.7470e-14 * Math.sqrt( 2.0 * Math.PI * 4.5282e+09 ) ).mul( phase.mul( 2.2399e+06 ).add( shift.x ).cos() ).mul( phase.pow2().mul( - 4.5282e+09 ).exp() );\r\n\r\n\tlet xyz = val.mul( VAR.mul( 2.0 * Math.PI ).sqrt() ).mul( pos.mul( phase ).add( shift ).cos() ).mul( phase.pow2().negate().mul( VAR ).exp() );\r\n\txyz = vec3( xyz.x.add( x ), xyz.y, xyz.z ).div( 1.0685e-7 );\r\n\r\n\tconst rgb = XYZ_TO_REC709.mul( xyz );\r\n\r\n\treturn rgb;\r\n\r\n};\r\n\r\nconst evalIridescence = /*@__PURE__*/ Fn( ( { outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 } ) => {\r\n\r\n\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\r\n\tconst iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\r\n\t// Evaluate the cosTheta on the base layer (Snell law)\r\n\tconst sinTheta2Sq = outsideIOR.div( iridescenceIOR ).pow2().mul( float( 1 ).sub( cosTheta1.pow2() ) );\r\n\r\n\t// Handle TIR:\r\n\tconst cosTheta2Sq = float( 1 ).sub( sinTheta2Sq );\r\n\t/*if ( cosTheta2Sq < 0.0 ) {\r\n\r\n\t\t\treturn vec3( 1.0 );\r\n\r\n\t}*/\r\n\r\n\tconst cosTheta2 = cosTheta2Sq.sqrt();\r\n\r\n\t// First interface\r\n\tconst R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\r\n\tconst R12 = F_Schlick( { f0: R0, f90: 1.0, dotVH: cosTheta1 } );\r\n\t//const R21 = R12;\r\n\tconst T121 = R12.oneMinus();\r\n\tconst phi12 = iridescenceIOR.lessThan( outsideIOR ).select( Math.PI, 0.0 );\r\n\tconst phi21 = float( Math.PI ).sub( phi12 );\r\n\r\n\t// Second interface\r\n\tconst baseIOR = Fresnel0ToIor( baseF0.clamp( 0.0, 0.9999 ) ); // guard against 1.0\r\n\tconst R1 = IorToFresnel0( baseIOR, iridescenceIOR.toVec3() );\r\n\tconst R23 = F_Schlick( { f0: R1, f90: 1.0, dotVH: cosTheta2 } );\r\n\tconst phi23 = vec3(\r\n\t\tbaseIOR.x.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\r\n\t\tbaseIOR.y.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\r\n\t\tbaseIOR.z.lessThan( iridescenceIOR ).select( Math.PI, 0.0 )\r\n\t);\r\n\r\n\t// Phase shift\r\n\tconst OPD = iridescenceIOR.mul( thinFilmThickness, cosTheta2, 2.0 );\r\n\tconst phi = vec3( phi21 ).add( phi23 );\r\n\r\n\t// Compound terms\r\n\tconst R123 = R12.mul( R23 ).clamp( 1e-5, 0.9999 );\r\n\tconst r123 = R123.sqrt();\r\n\tconst Rs = T121.pow2().mul( R23 ).div( vec3( 1.0 ).sub( R123 ) );\r\n\r\n\t// Reflectance term for m = 0 (DC term amplitude)\r\n\tconst C0 = R12.add( Rs );\r\n\tlet I = C0;\r\n\r\n\t// Reflectance term for m > 0 (pairs of diracs)\r\n\tlet Cm = Rs.sub( T121 );\r\n\tfor ( let m = 1; m <= 2; ++ m ) {\r\n\r\n\t\tCm = Cm.mul( r123 );\r\n\t\tconst Sm = evalSensitivity( float( m ).mul( OPD ), float( m ).mul( phi ) ).mul( 2.0 );\r\n\t\tI = I.add( Cm.mul( Sm ) );\r\n\r\n\t}\r\n\r\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\r\n\treturn I.max( vec3( 0.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'evalIridescence',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'outsideIOR', type: 'float' },\r\n\t\t{ name: 'eta2', type: 'float' },\r\n\t\t{ name: 'cosTheta1', type: 'float' },\r\n\t\t{ name: 'thinFilmThickness', type: 'float' },\r\n\t\t{ name: 'baseF0', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n//\r\n//\tSheen\r\n//\r\n\r\n// This is a curve-fit approxmation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\r\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\r\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\r\nconst IBLSheenBRDF = /*@__PURE__*/ Fn( ( { normal, viewDir, roughness } ) => {\r\n\r\n\tconst dotNV = normal.dot( viewDir ).saturate();\r\n\r\n\tconst r2 = roughness.pow2();\r\n\r\n\tconst a = select(\r\n\t\troughness.lessThan( 0.25 ),\r\n\t\tfloat( - 339.2 ).mul( r2 ).add( float( 161.4 ).mul( roughness ) ).sub( 25.9 ),\r\n\t\tfloat( - 8.48 ).mul( r2 ).add( float( 14.3 ).mul( roughness ) ).sub( 9.95 )\r\n\t);\r\n\r\n\tconst b = select(\r\n\t\troughness.lessThan( 0.25 ),\r\n\t\tfloat( 44.0 ).mul( r2 ).sub( float( 23.7 ).mul( roughness ) ).add( 3.26 ),\r\n\t\tfloat( 1.97 ).mul( r2 ).sub( float( 3.27 ).mul( roughness ) ).add( 0.72 )\r\n\t);\r\n\r\n\tconst DG = select( roughness.lessThan( 0.25 ), 0.0, float( 0.1 ).mul( roughness ).sub( 0.025 ) ).add( a.mul( dotNV ).add( b ).exp() );\r\n\r\n\treturn DG.mul( 1.0 / Math.PI ).saturate();\r\n\r\n} );\r\n\r\nconst clearcoatF0 = vec3( 0.04 );\r\nconst clearcoatF90 = float( 1 );\r\n\r\n//\r\n\r\nclass PhysicalLightingModel extends LightingModel {\r\n\r\n\tconstructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.clearcoat = clearcoat;\r\n\t\tthis.sheen = sheen;\r\n\t\tthis.iridescence = iridescence;\r\n\t\tthis.anisotropy = anisotropy;\r\n\t\tthis.transmission = transmission;\r\n\t\tthis.dispersion = dispersion;\r\n\r\n\t\tthis.clearcoatRadiance = null;\r\n\t\tthis.clearcoatSpecularDirect = null;\r\n\t\tthis.clearcoatSpecularIndirect = null;\r\n\t\tthis.sheenSpecularDirect = null;\r\n\t\tthis.sheenSpecularIndirect = null;\r\n\t\tthis.iridescenceFresnel = null;\r\n\t\tthis.iridescenceF0 = null;\r\n\r\n\t}\r\n\r\n\tstart( context ) {\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tthis.clearcoatRadiance = vec3().toVar( 'clearcoatRadiance' );\r\n\t\t\tthis.clearcoatSpecularDirect = vec3().toVar( 'clearcoatSpecularDirect' );\r\n\t\t\tthis.clearcoatSpecularIndirect = vec3().toVar( 'clearcoatSpecularIndirect' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularDirect = vec3().toVar( 'sheenSpecularDirect' );\r\n\t\t\tthis.sheenSpecularIndirect = vec3().toVar( 'sheenSpecularIndirect' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.iridescence === true ) {\r\n\r\n\t\t\tconst dotNVi = transformedNormalView.dot( positionViewDirection ).clamp();\r\n\r\n\t\t\tthis.iridescenceFresnel = evalIridescence( {\r\n\t\t\t\toutsideIOR: float( 1.0 ),\r\n\t\t\t\teta2: iridescenceIOR,\r\n\t\t\t\tcosTheta1: dotNVi,\r\n\t\t\t\tthinFilmThickness: iridescenceThickness,\r\n\t\t\t\tbaseF0: specularColor\r\n\t\t\t} );\r\n\r\n\t\t\tthis.iridescenceF0 = Schlick_to_F0( { f: this.iridescenceFresnel, f90: 1.0, dotVH: dotNVi } );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transmission === true ) {\r\n\r\n\t\t\tconst position = positionWorld;\r\n\t\t\tconst v = cameraPosition.sub( positionWorld ).normalize(); // TODO: Create Node for this, same issue in MaterialX\r\n\t\t\tconst n = transformedNormalWorld;\r\n\r\n\t\t\tcontext.backdrop = getIBLVolumeRefraction(\r\n\t\t\t\tn,\r\n\t\t\t\tv,\r\n\t\t\t\troughness,\r\n\t\t\t\tdiffuseColor,\r\n\t\t\t\tspecularColor,\r\n\t\t\t\tspecularF90, // specularF90\r\n\t\t\t\tposition, // positionWorld\r\n\t\t\t\tmodelWorldMatrix, // modelMatrix\r\n\t\t\t\tcameraViewMatrix, // viewMatrix\r\n\t\t\t\tcameraProjectionMatrix, // projMatrix\r\n\t\t\t\tior,\r\n\t\t\t\tthickness,\r\n\t\t\t\tattenuationColor,\r\n\t\t\t\tattenuationDistance,\r\n\t\t\t\tthis.dispersion ? dispersion : null\r\n\t\t\t);\r\n\r\n\t\t\tcontext.backdropAlpha = transmission;\r\n\r\n\t\t\tdiffuseColor.a.mulAssign( mix( 1, context.backdrop.a, transmission ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\r\n\t// Approximates multiscattering in order to preserve energy.\r\n\t// http://www.jcgt.org/published/0008/01/03/\r\n\r\n\tcomputeMultiscattering( singleScatter, multiScatter, specularF90 ) {\r\n\r\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\r\n\r\n\t\tconst fab = DFGApprox( { roughness, dotNV } );\r\n\r\n\t\tconst Fr = this.iridescenceF0 ? iridescence.mix( specularColor, this.iridescenceF0 ) : specularColor;\r\n\r\n\t\tconst FssEss = Fr.mul( fab.x ).add( specularF90.mul( fab.y ) );\r\n\r\n\t\tconst Ess = fab.x.add( fab.y );\r\n\t\tconst Ems = Ess.oneMinus();\r\n\r\n\t\tconst Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21\r\n\t\tconst Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );\r\n\r\n\t\tsingleScatter.addAssign( FssEss );\r\n\t\tmultiScatter.addAssign( Fms.mul( Ems ) );\r\n\r\n\t}\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\r\n\r\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\r\n\t\tconst irradiance = dotNL.mul( lightColor );\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularDirect.addAssign( irradiance.mul( BRDF_Sheen( { lightDirection } ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tconst dotNLcc = transformedClearcoatNormalView.dot( lightDirection ).clamp();\r\n\t\t\tconst ccIrradiance = dotNLcc.mul( lightColor );\r\n\r\n\t\t\tthis.clearcoatSpecularDirect.addAssign( ccIrradiance.mul( BRDF_GGX( { lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView } ) ) );\r\n\r\n\t\t}\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\r\n\r\n\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX( { lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy } ) ) );\r\n\r\n\t}\r\n\r\n\tdirectRectArea( { lightColor, lightPosition, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 } ) {\r\n\r\n\t\tconst p0 = lightPosition.add( halfWidth ).sub( halfHeight ); // counterclockwise; light shines in local neg z direction\r\n\t\tconst p1 = lightPosition.sub( halfWidth ).sub( halfHeight );\r\n\t\tconst p2 = lightPosition.sub( halfWidth ).add( halfHeight );\r\n\t\tconst p3 = lightPosition.add( halfWidth ).add( halfHeight );\r\n\r\n\t\tconst N = transformedNormalView;\r\n\t\tconst V = positionViewDirection;\r\n\t\tconst P = positionView.toVar();\r\n\r\n\t\tconst uv = LTC_Uv( { N, V, roughness } );\r\n\r\n\t\tconst t1 = ltc_1.uv( uv ).toVar();\r\n\t\tconst t2 = ltc_2.uv( uv ).toVar();\r\n\r\n\t\tconst mInv = mat3(\r\n\t\t\tvec3( t1.x, 0, t1.y ),\r\n\t\t\tvec3( 0, 1, 0 ),\r\n\t\t\tvec3( t1.z, 0, t1.w )\r\n\t\t).toVar();\r\n\r\n\t\t// LTC Fresnel Approximation by Stephen Hill\r\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\r\n\t\tconst fresnel = specularColor.mul( t2.x ).add( specularColor.oneMinus().mul( t2.y ) ).toVar();\r\n\r\n\t\treflectedLight.directSpecular.addAssign( lightColor.mul( fresnel ).mul( LTC_Evaluate( { N, V, P, mInv, p0, p1, p2, p3 } ) ) );\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( lightColor.mul( diffuseColor ).mul( LTC_Evaluate( { N, V, P, mInv: mat3( 1, 0, 0, 0, 1, 0, 0, 0, 1 ), p0, p1, p2, p3 } ) ) );\r\n\r\n\t}\r\n\r\n\tindirect( context, stack, builder ) {\r\n\r\n\t\tthis.indirectDiffuse( context, stack, builder );\r\n\t\tthis.indirectSpecular( context, stack, builder );\r\n\t\tthis.ambientOcclusion( context, stack, builder );\r\n\r\n\t}\r\n\r\n\tindirectDiffuse( { irradiance, reflectedLight } ) {\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\r\n\r\n\t}\r\n\r\n\tindirectSpecular( { radiance, iblIrradiance, reflectedLight } ) {\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularIndirect.addAssign( iblIrradiance.mul(\r\n\t\t\t\tsheen,\r\n\t\t\t\tIBLSheenBRDF( {\r\n\t\t\t\t\tnormal: transformedNormalView,\r\n\t\t\t\t\tviewDir: positionViewDirection,\r\n\t\t\t\t\troughness: sheenRoughness\r\n\t\t\t\t} )\r\n\t\t\t) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\r\n\r\n\t\t\tconst clearcoatEnv = EnvironmentBRDF( {\r\n\t\t\t\tdotNV: dotNVcc,\r\n\t\t\t\tspecularColor: clearcoatF0,\r\n\t\t\t\tspecularF90: clearcoatF90,\r\n\t\t\t\troughness: clearcoatRoughness\r\n\t\t\t} );\r\n\r\n\t\t\tthis.clearcoatSpecularIndirect.addAssign( this.clearcoatRadiance.mul( clearcoatEnv ) );\r\n\r\n\t\t}\r\n\r\n\t\t// Both indirect specular and indirect diffuse light accumulate here\r\n\r\n\t\tconst singleScattering = vec3().toVar( 'singleScattering' );\r\n\t\tconst multiScattering = vec3().toVar( 'multiScattering' );\r\n\t\tconst cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );\r\n\r\n\t\tthis.computeMultiscattering( singleScattering, multiScattering, specularF90 );\r\n\r\n\t\tconst totalScattering = singleScattering.add( multiScattering );\r\n\r\n\t\tconst diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );\r\n\r\n\t\treflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );\r\n\t\treflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );\r\n\r\n\t}\r\n\r\n\tambientOcclusion( { ambientOcclusion, reflectedLight } ) {\r\n\r\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\r\n\r\n\t\tconst aoNV = dotNV.add( ambientOcclusion );\r\n\t\tconst aoExp = roughness.mul( - 16.0 ).oneMinus().negate().exp2();\r\n\r\n\t\tconst aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tthis.clearcoatSpecularIndirect.mulAssign( ambientOcclusion );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularIndirect.mulAssign( ambientOcclusion );\r\n\r\n\t\t}\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\t\treflectedLight.indirectSpecular.mulAssign( aoNode );\r\n\r\n\t}\r\n\r\n\tfinish( context ) {\r\n\r\n\t\tconst { outgoingLight } = context;\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\r\n\r\n\t\t\tconst Fcc = F_Schlick( {\r\n\t\t\t\tdotVH: dotNVcc,\r\n\t\t\t\tf0: clearcoatF0,\r\n\t\t\t\tf90: clearcoatF90\r\n\t\t\t} );\r\n\r\n\t\t\tconst clearcoatLight = outgoingLight.mul( clearcoat.mul( Fcc ).oneMinus() ).add( this.clearcoatSpecularDirect.add( this.clearcoatSpecularIndirect ).mul( clearcoat ) );\r\n\r\n\t\t\toutgoingLight.assign( clearcoatLight );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tconst sheenEnergyComp = sheen.r.max( sheen.g ).max( sheen.b ).mul( 0.157 ).oneMinus();\r\n\t\t\tconst sheenLight = outgoingLight.mul( sheenEnergyComp ).add( this.sheenSpecularDirect, this.sheenSpecularIndirect );\r\n\r\n\t\t\toutgoingLight.assign( sheenLight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PhysicalLightingModel;\r\n", "import { Fn, int, float, vec2, vec3, vec4, If } from '../tsl/TSLBase.js';\r\nimport { cos, sin, abs, max, exp2, log2, clamp, fract, mix, floor, normalize, cross, all } from '../math/MathNode.js';\r\nimport { mul } from '../math/OperatorNode.js';\r\nimport { select } from '../math/ConditionalNode.js';\r\nimport { Loop, Break } from '../utils/LoopNode.js';\r\n\r\n// These defines must match with PMREMGenerator\r\n\r\nconst cubeUV_r0 = /*@__PURE__*/ float( 1.0 );\r\nconst cubeUV_m0 = /*@__PURE__*/ float( - 2.0 );\r\nconst cubeUV_r1 = /*@__PURE__*/ float( 0.8 );\r\nconst cubeUV_m1 = /*@__PURE__*/ float( - 1.0 );\r\nconst cubeUV_r4 = /*@__PURE__*/ float( 0.4 );\r\nconst cubeUV_m4 = /*@__PURE__*/ float( 2.0 );\r\nconst cubeUV_r5 = /*@__PURE__*/ float( 0.305 );\r\nconst cubeUV_m5 = /*@__PURE__*/ float( 3.0 );\r\nconst cubeUV_r6 = /*@__PURE__*/ float( 0.21 );\r\nconst cubeUV_m6 = /*@__PURE__*/ float( 4.0 );\r\n\r\nconst cubeUV_minMipLevel = /*@__PURE__*/ float( 4.0 );\r\nconst cubeUV_minTileSize = /*@__PURE__*/ float( 16.0 );\r\n\r\n// These shader functions convert between the UV coordinates of a single face of\r\n// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\r\n// sampling a textureCube (not generally normalized ).\r\n\r\nconst getFace = /*@__PURE__*/ Fn( ( [ direction ] ) => {\r\n\r\n\tconst absDirection = vec3( abs( direction ) ).toVar();\r\n\tconst face = float( - 1.0 ).toVar();\r\n\r\n\tIf( absDirection.x.greaterThan( absDirection.z ), () => {\r\n\r\n\t\tIf( absDirection.x.greaterThan( absDirection.y ), () => {\r\n\r\n\t\t\tface.assign( select( direction.x.greaterThan( 0.0 ), 0.0, 3.0 ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\r\n\r\n\t\t} );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tIf( absDirection.z.greaterThan( absDirection.y ), () => {\r\n\r\n\t\t\tface.assign( select( direction.z.greaterThan( 0.0 ), 2.0, 5.0 ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn face;\r\n\r\n} ).setLayout( {\r\n\tname: 'getFace',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'direction', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n// RH coordinate system; PMREM face-indexing convention\r\nconst getUV = /*@__PURE__*/ Fn( ( [ direction, face ] ) => {\r\n\r\n\tconst uv = vec2().toVar();\r\n\r\n\tIf( face.equal( 0.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.z, direction.y ).div( abs( direction.x ) ) ); // pos x\r\n\r\n\t} ).ElseIf( face.equal( 1.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.z.negate() ).div( abs( direction.y ) ) ); // pos y\r\n\r\n\t} ).ElseIf( face.equal( 2.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.y ).div( abs( direction.z ) ) ); // pos z\r\n\r\n\t} ).ElseIf( face.equal( 3.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.z.negate(), direction.y ).div( abs( direction.x ) ) ); // neg x\r\n\r\n\t} ).ElseIf( face.equal( 4.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.z ).div( abs( direction.y ) ) ); // neg y\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tuv.assign( vec2( direction.x, direction.y ).div( abs( direction.z ) ) ); // neg z\r\n\r\n\t} );\r\n\r\n\treturn mul( 0.5, uv.add( 1.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'getUV',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'direction', type: 'vec3' },\r\n\t\t{ name: 'face', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst roughnessToMip = /*@__PURE__*/ Fn( ( [ roughness ] ) => {\r\n\r\n\tconst mip = float( 0.0 ).toVar();\r\n\r\n\tIf( roughness.greaterThanEqual( cubeUV_r1 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r0.sub( roughness ).mul( cubeUV_m1.sub( cubeUV_m0 ) ).div( cubeUV_r0.sub( cubeUV_r1 ) ).add( cubeUV_m0 ) );\r\n\r\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r4 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r1.sub( roughness ).mul( cubeUV_m4.sub( cubeUV_m1 ) ).div( cubeUV_r1.sub( cubeUV_r4 ) ).add( cubeUV_m1 ) );\r\n\r\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r5 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r4.sub( roughness ).mul( cubeUV_m5.sub( cubeUV_m4 ) ).div( cubeUV_r4.sub( cubeUV_r5 ) ).add( cubeUV_m4 ) );\r\n\r\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r6 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r5.sub( roughness ).mul( cubeUV_m6.sub( cubeUV_m5 ) ).div( cubeUV_r5.sub( cubeUV_r6 ) ).add( cubeUV_m5 ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tmip.assign( float( - 2.0 ).mul( log2( mul( 1.16, roughness ) ) ) ); // 1.16 = 1.79^0.25\r\n\r\n\t} );\r\n\r\n\treturn mip;\r\n\r\n} ).setLayout( {\r\n\tname: 'roughnessToMip',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// RH coordinate system; PMREM face-indexing convention\r\nexport const getDirection = /*@__PURE__*/ Fn( ( [ uv_immutable, face ] ) => {\r\n\r\n\tconst uv = uv_immutable.toVar();\r\n\tuv.assign( mul( 2.0, uv ).sub( 1.0 ) );\r\n\tconst direction = vec3( uv, 1.0 ).toVar();\r\n\r\n\tIf( face.equal( 0.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.zyx ); // ( 1, v, u ) pos x\r\n\r\n\t} ).ElseIf( face.equal( 1.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.xzy );\r\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -u, 1, -v ) pos y\r\n\r\n\t} ).ElseIf( face.equal( 2.0 ), () => {\r\n\r\n\t\tdirection.x.mulAssign( - 1.0 ); // ( -u, v, 1 ) pos z\r\n\r\n\t} ).ElseIf( face.equal( 3.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.zyx );\r\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -1, v, -u ) neg x\r\n\r\n\t} ).ElseIf( face.equal( 4.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.xzy );\r\n\t\tdirection.xy.mulAssign( - 1.0 ); // ( -u, -1, v ) neg y\r\n\r\n\t} ).ElseIf( face.equal( 5.0 ), () => {\r\n\r\n\t\tdirection.z.mulAssign( - 1.0 ); // ( u, v, -1 ) neg zS\r\n\r\n\t} );\r\n\r\n\treturn direction;\r\n\r\n} ).setLayout( {\r\n\tname: 'getDirection',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'uv', type: 'vec2' },\r\n\t\t{ name: 'face', type: 'float' }\r\n\t]\r\n} );\r\n\r\n//\r\n\r\nexport const textureCubeUV = /*@__PURE__*/ Fn( ( [ envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\r\n\r\n\tconst roughness = float( roughness_immutable );\r\n\tconst sampleDir = vec3( sampleDir_immutable );\r\n\r\n\tconst mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\r\n\tconst mipF = fract( mip );\r\n\tconst mipInt = floor( mip );\r\n\tconst color0 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\r\n\r\n\tIf( mipF.notEqual( 0.0 ), () => {\r\n\r\n\t\tconst color1 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt.add( 1.0 ), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\r\n\r\n\t\tcolor0.assign( mix( color0, color1, mipF ) );\r\n\r\n\t} );\r\n\r\n\treturn color0;\r\n\r\n} );\r\n\r\nconst bilinearCubeUV = /*@__PURE__*/ Fn( ( [ envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\r\n\r\n\tconst mipInt = float( mipInt_immutable ).toVar();\r\n\tconst direction = vec3( direction_immutable );\r\n\tconst face = float( getFace( direction ) ).toVar();\r\n\tconst filterInt = float( max( cubeUV_minMipLevel.sub( mipInt ), 0.0 ) ).toVar();\r\n\tmipInt.assign( max( mipInt, cubeUV_minMipLevel ) );\r\n\tconst faceSize = float( exp2( mipInt ) ).toVar();\r\n\tconst uv = vec2( getUV( direction, face ).mul( faceSize.sub( 2.0 ) ).add( 1.0 ) ).toVar();\r\n\r\n\tIf( face.greaterThan( 2.0 ), () => {\r\n\r\n\t\tuv.y.addAssign( faceSize );\r\n\t\tface.subAssign( 3.0 );\r\n\r\n\t} );\r\n\r\n\tuv.x.addAssign( face.mul( faceSize ) );\r\n\tuv.x.addAssign( filterInt.mul( mul( 3.0, cubeUV_minTileSize ) ) );\r\n\tuv.y.addAssign( mul( 4.0, exp2( CUBEUV_MAX_MIP ).sub( faceSize ) ) );\r\n\tuv.x.mulAssign( CUBEUV_TEXEL_WIDTH );\r\n\tuv.y.mulAssign( CUBEUV_TEXEL_HEIGHT );\r\n\r\n\treturn envMap.uv( uv ).grad( vec2(), vec2() ); // disable anisotropic filtering\r\n\r\n} );\r\n\r\nconst getSample = /*@__PURE__*/ Fn( ( { envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\r\n\r\n\tconst cosTheta = cos( theta );\r\n\r\n\t// Rodrigues' axis-angle rotation\r\n\tconst sampleDirection = outputDirection.mul( cosTheta )\r\n\t\t.add( axis.cross( outputDirection ).mul( sin( theta ) ) )\r\n\t\t.add( axis.mul( axis.dot( outputDirection ).mul( cosTheta.oneMinus() ) ) );\r\n\r\n\treturn bilinearCubeUV( envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP );\r\n\r\n} );\r\n\r\nexport const blur = /*@__PURE__*/ Fn( ( { n, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\r\n\r\n\tconst axis = vec3( select( latitudinal, poleAxis, cross( poleAxis, outputDirection ) ) ).toVar();\r\n\r\n\tIf( all( axis.equals( vec3( 0.0 ) ) ), () => {\r\n\r\n\t\taxis.assign( vec3( outputDirection.z, 0.0, outputDirection.x.negate() ) );\r\n\r\n\t} );\r\n\r\n\taxis.assign( normalize( axis ) );\r\n\r\n\tconst gl_FragColor = vec3().toVar();\r\n\tgl_FragColor.addAssign( weights.element( int( 0 ) ).mul( getSample( { theta: 0.0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\r\n\tLoop( { start: int( 1 ), end: n }, ( { i } ) => {\r\n\r\n\t\tIf( i.greaterThanEqual( samples ), () => {\r\n\r\n\t\t\tBreak();\r\n\r\n\t\t} );\r\n\r\n\t\tconst theta = float( dTheta.mul( float( i ) ) ).toVar();\r\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta: theta.mul( - 1.0 ), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\r\n\t} );\r\n\r\n\treturn vec4( gl_FragColor, 1 );\r\n\r\n} );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { textureCubeUV } from './PMREMUtils.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy, vec3 } from '../tsl/TSLBase.js';\r\n\r\nimport { WebGLCoordinateSystem } from '../../constants.js';\r\nimport { Texture } from '../../textures/Texture.js';\r\n\r\nlet _generator = null;\r\n\r\nconst _cache = new WeakMap();\r\n\r\nfunction _generateCubeUVSize( imageHeight ) {\r\n\r\n\tconst maxMip = Math.log2( imageHeight ) - 2;\r\n\r\n\tconst texelHeight = 1.0 / imageHeight;\r\n\r\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\r\n\r\n\treturn { texelWidth, texelHeight, maxMip };\r\n\r\n}\r\n\r\nfunction _getPMREMFromTexture( texture ) {\r\n\r\n\tlet cacheTexture = _cache.get( texture );\r\n\r\n\tconst pmremVersion = cacheTexture !== undefined ? cacheTexture.pmremVersion : - 1;\r\n\r\n\tif ( pmremVersion !== texture.pmremVersion ) {\r\n\r\n\t\tconst image = texture.image;\r\n\r\n\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\tif ( isCubeMapReady( image ) ) {\r\n\r\n\t\t\t\tcacheTexture = _generator.fromCubemap( texture, cacheTexture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( isEquirectangularMapReady( image ) ) {\r\n\r\n\t\t\t\tcacheTexture = _generator.fromEquirectangular( texture, cacheTexture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcacheTexture.pmremVersion = texture.pmremVersion;\r\n\r\n\t\t_cache.set( texture, cacheTexture );\r\n\r\n\t}\r\n\r\n\treturn cacheTexture.texture;\r\n\r\n}\r\n\r\nclass PMREMNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PMREMNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._pmrem = null;\r\n\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t\tthis._generator = null;\r\n\r\n\t\tconst defaultTexture = new Texture();\r\n\t\tdefaultTexture.isRenderTargetTexture = true;\r\n\r\n\t\tthis._texture = texture( defaultTexture );\r\n\r\n\t\tthis._width = uniform( 0 );\r\n\t\tthis._height = uniform( 0 );\r\n\t\tthis._maxMip = uniform( 0 );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tset value( value ) {\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._pmrem = null;\r\n\r\n\t}\r\n\r\n\tget value() {\r\n\r\n\t\treturn this._value;\r\n\r\n\t}\r\n\r\n\tupdateFromTexture( texture ) {\r\n\r\n\t\tconst cubeUVSize = _generateCubeUVSize( texture.image.height );\r\n\r\n\t\tthis._texture.value = texture;\r\n\t\tthis._width.value = cubeUVSize.texelWidth;\r\n\t\tthis._height.value = cubeUVSize.texelHeight;\r\n\t\tthis._maxMip.value = cubeUVSize.maxMip;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tlet pmrem = this._pmrem;\r\n\r\n\t\tconst pmremVersion = pmrem ? pmrem.pmremVersion : - 1;\r\n\t\tconst texture = this._value;\r\n\r\n\t\tif ( pmremVersion !== texture.pmremVersion ) {\r\n\r\n\t\t\tif ( texture.isPMREMTexture === true ) {\r\n\r\n\t\t\t\tpmrem = texture;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tpmrem = _getPMREMFromTexture( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pmrem !== null ) {\r\n\r\n\t\t\t\tthis._pmrem = pmrem;\r\n\r\n\t\t\t\tthis.updateFromTexture( pmrem );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( _generator === null ) {\r\n\r\n\t\t\t_generator = builder.createPMREMGenerator();\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.updateBefore( builder );\r\n\r\n\t\t//\r\n\r\n\t\tlet uvNode = this.uvNode;\r\n\r\n\t\tif ( uvNode === null && builder.context.getUV ) {\r\n\r\n\t\t\tuvNode = builder.context.getUV( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.renderer.coordinateSystem === WebGLCoordinateSystem && texture.isPMREMTexture !== true && texture.isRenderTargetTexture === true ) {\r\n\r\n\t\t\tuvNode = vec3( uvNode.x.negate(), uvNode.yz );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tlet levelNode = this.levelNode;\r\n\r\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\r\n\r\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\treturn textureCubeUV( this._texture, uvNode, levelNode, this._width, this._height, this._maxMip );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PMREMNode;\r\n\r\nfunction isCubeMapReady( image ) {\r\n\r\n\tif ( image === null || image === undefined ) return false;\r\n\r\n\tlet count = 0;\r\n\tconst length = 6;\r\n\r\n\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\tif ( image[ i ] !== undefined ) count ++;\r\n\r\n\t}\r\n\r\n\treturn count === length;\r\n\r\n\r\n}\r\n\r\nfunction isEquirectangularMapReady( image ) {\r\n\r\n\tif ( image === null || image === undefined ) return false;\r\n\r\n\treturn image.height > 0;\r\n\r\n}\r\n\r\nexport const pmremTexture = /*@__PURE__*/ nodeProxy( PMREMNode );\r\n", "import LightingNode from './LightingNode.js';\r\nimport { cache } from '../core/CacheNode.js';\r\nimport { roughness, clearcoatRoughness } from '../core/PropertyNode.js';\r\nimport { cameraViewMatrix } from '../accessors/Camera.js';\r\nimport { transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld } from '../accessors/Normal.js';\r\nimport { positionViewDirection } from '../accessors/Position.js';\r\nimport { float } from '../tsl/TSLBase.js';\r\nimport { reference } from '../accessors/ReferenceNode.js';\r\nimport { transformedBentNormalView } from '../accessors/AccessorsUtils.js';\r\nimport { pmremTexture } from '../pmrem/PMREMNode.js';\r\n\r\nconst _envNodeCache = new WeakMap();\r\n\r\nclass EnvironmentNode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'EnvironmentNode';\r\n\r\n\t}\r\n\r\n\tconstructor( envNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.envNode = envNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { material } = builder;\r\n\r\n\t\tlet envNode = this.envNode;\r\n\r\n\t\tif ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {\r\n\r\n\t\t\tconst value = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];\r\n\r\n\t\t\tlet cacheEnvNode = _envNodeCache.get( value );\r\n\r\n\t\t\tif ( cacheEnvNode === undefined ) {\r\n\r\n\t\t\t\tcacheEnvNode = pmremTexture( value );\r\n\r\n\t\t\t\t_envNodeCache.set( value, cacheEnvNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tenvNode\t= cacheEnvNode;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst envMap = material.envMap;\r\n\t\tconst intensity = envMap ? reference( 'envMapIntensity', 'float', builder.material ) : reference( 'environmentIntensity', 'float', builder.scene ); // @TODO: Add materialEnvIntensity in MaterialNode\r\n\r\n\t\tconst useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;\r\n\t\tconst radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;\r\n\r\n\t\tconst radiance = envNode.context( createRadianceContext( roughness, radianceNormalView ) ).mul( intensity );\r\n\t\tconst irradiance = envNode.context( createIrradianceContext( transformedNormalWorld ) ).mul( Math.PI ).mul( intensity );\r\n\r\n\t\tconst isolateRadiance = cache( radiance );\r\n\t\tconst isolateIrradiance = cache( irradiance );\r\n\r\n\t\t//\r\n\r\n\t\tbuilder.context.radiance.addAssign( isolateRadiance );\r\n\r\n\t\tbuilder.context.iblIrradiance.addAssign( isolateIrradiance );\r\n\r\n\t\t//\r\n\r\n\t\tconst clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\r\n\r\n\t\tif ( clearcoatRadiance ) {\r\n\r\n\t\t\tconst clearcoatRadianceContext = envNode.context( createRadianceContext( clearcoatRoughness, transformedClearcoatNormalView ) ).mul( intensity );\r\n\t\t\tconst isolateClearcoatRadiance = cache( clearcoatRadianceContext );\r\n\r\n\t\t\tclearcoatRadiance.addAssign( isolateClearcoatRadiance );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default EnvironmentNode;\r\n\r\nconst createRadianceContext = ( roughnessNode, normalViewNode ) => {\r\n\r\n\tlet reflectVec = null;\r\n\r\n\treturn {\r\n\t\tgetUV: () => {\r\n\r\n\t\t\tif ( reflectVec === null ) {\r\n\r\n\t\t\t\treflectVec = positionViewDirection.negate().reflect( normalViewNode );\r\n\r\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\r\n\t\t\t\treflectVec = roughnessNode.mul( roughnessNode ).mix( reflectVec, normalViewNode ).normalize();\r\n\r\n\t\t\t\treflectVec = reflectVec.transformDirection( cameraViewMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn reflectVec;\r\n\r\n\t\t},\r\n\t\tgetTextureLevel: () => {\r\n\r\n\t\t\treturn roughnessNode;\r\n\r\n\t\t}\r\n\t};\r\n\r\n};\r\n\r\nconst createIrradianceContext = ( normalWorldNode ) => {\r\n\r\n\treturn {\r\n\t\tgetUV: () => {\r\n\r\n\t\t\treturn normalWorldNode;\r\n\r\n\t\t},\r\n\t\tgetTextureLevel: () => {\r\n\r\n\t\t\treturn float( 1.0 );\r\n\r\n\t\t}\r\n\t};\r\n\r\n};\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { diffuseColor, metalness, roughness, specularColor, specularF90 } from '../../nodes/core/PropertyNode.js';\r\nimport { mix } from '../../nodes/math/MathNode.js';\r\nimport { materialRoughness, materialMetalness } from '../../nodes/accessors/MaterialNode.js';\r\nimport getRoughness from '../../nodes/functions/material/getRoughness.js';\r\nimport PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';\r\nimport EnvironmentNode from '../../nodes/lighting/EnvironmentNode.js';\r\nimport { float, vec3, vec4 } from '../../nodes/tsl/TSLBase.js';\r\n\r\nimport { MeshStandardMaterial } from '../MeshStandardMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshStandardMaterial();\r\n\r\nclass MeshStandardNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshStandardNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshStandardNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.emissiveNode = null;\r\n\r\n\t\tthis.metalnessNode = null;\r\n\t\tthis.roughnessNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tlet envNode = super.setupEnvironment( builder );\r\n\r\n\t\tif ( envNode === null && builder.environmentNode ) {\r\n\r\n\t\t\tenvNode = builder.environmentNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn envNode ? new EnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhysicalLightingModel();\r\n\r\n\t}\r\n\r\n\tsetupSpecular() {\r\n\r\n\t\tconst specularColorNode = mix( vec3( 0.04 ), diffuseColor.rgb, metalness );\r\n\r\n\t\tspecularColor.assign( specularColorNode );\r\n\t\tspecularF90.assign( 1.0 );\r\n\r\n\t}\r\n\r\n\tsetupVariants() {\r\n\r\n\t\t// METALNESS\r\n\r\n\t\tconst metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\r\n\r\n\t\tmetalness.assign( metalnessNode );\r\n\r\n\t\t// ROUGHNESS\r\n\r\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\r\n\t\troughnessNode = getRoughness( { roughness: roughnessNode } );\r\n\r\n\t\troughness.assign( roughnessNode );\r\n\r\n\t\t// SPECULAR COLOR\r\n\r\n\t\tthis.setupSpecular();\r\n\r\n\t\t// DIFFUSE COLOR\r\n\r\n\t\tdiffuseColor.assign( vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.emissiveNode = source.emissiveNode;\r\n\r\n\t\tthis.metalnessNode = source.metalnessNode;\r\n\t\tthis.roughnessNode = source.roughnessNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshStandardNodeMaterial;\r\n", "import { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, specularColor, specularF90, diffuseColor, metalness, roughness, anisotropy, alphaT, anisotropyT, anisotropyB, ior, transmission, thickness, attenuationDistance, attenuationColor, dispersion } from '../../nodes/core/PropertyNode.js';\r\nimport { materialClearcoat, materialClearcoatRoughness, materialClearcoatNormal, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness, materialSpecularIntensity, materialSpecularColor, materialAnisotropy, materialIOR, materialTransmission, materialThickness, materialAttenuationDistance, materialAttenuationColor, materialDispersion } from '../../nodes/accessors/MaterialNode.js';\r\nimport { float, vec2, vec3, If } from '../../nodes/tsl/TSLBase.js';\r\nimport getRoughness from '../../nodes/functions/material/getRoughness.js';\r\nimport { TBNViewMatrix } from '../../nodes/accessors/AccessorsUtils.js';\r\nimport PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';\r\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\r\nimport { mix, pow2, min } from '../../nodes/math/MathNode.js';\r\n\r\nimport { MeshPhysicalMaterial } from '../MeshPhysicalMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshPhysicalMaterial();\r\n\r\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshPhysicalNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhysicalNodeMaterial = true;\r\n\r\n\t\tthis.clearcoatNode = null;\r\n\t\tthis.clearcoatRoughnessNode = null;\r\n\t\tthis.clearcoatNormalNode = null;\r\n\r\n\t\tthis.sheenNode = null;\r\n\t\tthis.sheenRoughnessNode = null;\r\n\r\n\t\tthis.iridescenceNode = null;\r\n\t\tthis.iridescenceIORNode = null;\r\n\t\tthis.iridescenceThicknessNode = null;\r\n\r\n\t\tthis.specularIntensityNode = null;\r\n\t\tthis.specularColorNode = null;\r\n\r\n\t\tthis.iorNode = null;\r\n\t\tthis.transmissionNode = null;\r\n\t\tthis.thicknessNode = null;\r\n\t\tthis.attenuationDistanceNode = null;\r\n\t\tthis.attenuationColorNode = null;\r\n\t\tthis.dispersionNode = null;\r\n\r\n\t\tthis.anisotropyNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tget useClearcoat() {\r\n\r\n\t\treturn this.clearcoat > 0 || this.clearcoatNode !== null;\r\n\r\n\t}\r\n\r\n\tget useIridescence() {\r\n\r\n\t\treturn this.iridescence > 0 || this.iridescenceNode !== null;\r\n\r\n\t}\r\n\r\n\tget useSheen() {\r\n\r\n\t\treturn this.sheen > 0 || this.sheenNode !== null;\r\n\r\n\t}\r\n\r\n\tget useAnisotropy() {\r\n\r\n\t\treturn this.anisotropy > 0 || this.anisotropyNode !== null;\r\n\r\n\t}\r\n\r\n\tget useTransmission() {\r\n\r\n\t\treturn this.transmission > 0 || this.transmissionNode !== null;\r\n\r\n\t}\r\n\r\n\tget useDispersion() {\r\n\r\n\t\treturn this.dispersion > 0 || this.dispersionNode !== null;\r\n\r\n\t}\r\n\r\n\tsetupSpecular() {\r\n\r\n\t\tconst iorNode = this.iorNode ? float( this.iorNode ) : materialIOR;\r\n\r\n\t\tior.assign( iorNode );\r\n\t\tspecularColor.assign( mix( min( pow2( ior.sub( 1.0 ).div( ior.add( 1.0 ) ) ).mul( materialSpecularColor ), vec3( 1.0 ) ).mul( materialSpecularIntensity ), diffuseColor.rgb, metalness ) );\r\n\t\tspecularF90.assign( mix( materialSpecularIntensity, 1.0, metalness ) );\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhysicalLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion );\r\n\r\n\t}\r\n\r\n\tsetupVariants( builder ) {\r\n\r\n\t\tsuper.setupVariants( builder );\r\n\r\n\t\t// CLEARCOAT\r\n\r\n\t\tif ( this.useClearcoat ) {\r\n\r\n\t\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\r\n\t\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\r\n\r\n\t\t\tclearcoat.assign( clearcoatNode );\r\n\t\t\tclearcoatRoughness.assign( getRoughness( { roughness: clearcoatRoughnessNode } ) );\r\n\r\n\t\t}\r\n\r\n\t\t// SHEEN\r\n\r\n\t\tif ( this.useSheen ) {\r\n\r\n\t\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\r\n\t\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\r\n\r\n\t\t\tsheen.assign( sheenNode );\r\n\t\t\tsheenRoughness.assign( sheenRoughnessNode );\r\n\r\n\t\t}\r\n\r\n\t\t// IRIDESCENCE\r\n\r\n\t\tif ( this.useIridescence ) {\r\n\r\n\t\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\r\n\t\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\r\n\t\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\r\n\r\n\t\t\tiridescence.assign( iridescenceNode );\r\n\t\t\tiridescenceIOR.assign( iridescenceIORNode );\r\n\t\t\tiridescenceThickness.assign( iridescenceThicknessNode );\r\n\r\n\t\t}\r\n\r\n\t\t// ANISOTROPY\r\n\r\n\t\tif ( this.useAnisotropy ) {\r\n\r\n\t\t\tconst anisotropyV = ( this.anisotropyNode ? vec2( this.anisotropyNode ) : materialAnisotropy ).toVar();\r\n\r\n\t\t\tanisotropy.assign( anisotropyV.length() );\r\n\r\n\t\t\tIf( anisotropy.equal( 0.0 ), () => {\r\n\r\n\t\t\t\tanisotropyV.assign( vec2( 1.0, 0.0 ) );\r\n\r\n\t\t\t} ).Else( () => {\r\n\r\n\t\t\t\tanisotropyV.divAssign( vec2( anisotropy ) );\r\n\t\t\t\tanisotropy.assign( anisotropy.saturate() );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\r\n\t\t\talphaT.assign( anisotropy.pow2().mix( roughness.pow2(), 1.0 ) );\r\n\r\n\t\t\tanisotropyT.assign( TBNViewMatrix[ 0 ].mul( anisotropyV.x ).add( TBNViewMatrix[ 1 ].mul( anisotropyV.y ) ) );\r\n\t\t\tanisotropyB.assign( TBNViewMatrix[ 1 ].mul( anisotropyV.x ).sub( TBNViewMatrix[ 0 ].mul( anisotropyV.y ) ) );\r\n\r\n\t\t}\r\n\r\n\t\t// TRANSMISSION\r\n\r\n\t\tif ( this.useTransmission ) {\r\n\r\n\t\t\tconst transmissionNode = this.transmissionNode ? float( this.transmissionNode ) : materialTransmission;\r\n\t\t\tconst thicknessNode = this.thicknessNode ? float( this.thicknessNode ) : materialThickness;\r\n\t\t\tconst attenuationDistanceNode = this.attenuationDistanceNode ? float( this.attenuationDistanceNode ) : materialAttenuationDistance;\r\n\t\t\tconst attenuationColorNode = this.attenuationColorNode ? vec3( this.attenuationColorNode ) : materialAttenuationColor;\r\n\r\n\t\t\ttransmission.assign( transmissionNode );\r\n\t\t\tthickness.assign( thicknessNode );\r\n\t\t\tattenuationDistance.assign( attenuationDistanceNode );\r\n\t\t\tattenuationColor.assign( attenuationColorNode );\r\n\r\n\t\t\tif ( this.useDispersion ) {\r\n\r\n\t\t\t\tconst dispersionNode = this.dispersionNode ? float( this.dispersionNode ) : materialDispersion;\r\n\r\n\t\t\t\tdispersion.assign( dispersionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupClearcoatNormal() {\r\n\r\n\t\treturn this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.setupClearcoatNormal = () => this.setupClearcoatNormal( builder );\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.clearcoatNode = source.clearcoatNode;\r\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\r\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\r\n\r\n\t\tthis.sheenNode = source.sheenNode;\r\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\r\n\r\n\t\tthis.iridescenceNode = source.iridescenceNode;\r\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\r\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\r\n\r\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\r\n\t\tthis.specularColorNode = source.specularColorNode;\r\n\r\n\t\tthis.transmissionNode = source.transmissionNode;\r\n\t\tthis.thicknessNode = source.thicknessNode;\r\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\r\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\r\n\t\tthis.dispersionNode = source.dispersionNode;\r\n\r\n\t\tthis.anisotropyNode = source.anisotropyNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshPhysicalNodeMaterial;\r\n", "import MeshPhysicalNodeMaterial from './MeshPhysicalNodeMaterial.js';\r\nimport PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';\r\nimport { transformedNormalView } from '../../nodes/accessors/Normal.js';\r\nimport { positionViewDirection } from '../../nodes/accessors/Position.js';\r\nimport { float, vec3 } from '../../nodes/tsl/TSLBase.js';\r\n\r\nclass SSSLightingModel extends PhysicalLightingModel {\r\n\r\n\tconstructor( useClearcoat, useSheen, useIridescence, useSSS ) {\r\n\r\n\t\tsuper( useClearcoat, useSheen, useIridescence );\r\n\r\n\t\tthis.useSSS = useSSS;\r\n\r\n\t}\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight }, stack, builder ) {\r\n\r\n\t\tif ( this.useSSS === true ) {\r\n\r\n\t\t\tconst material = builder.material;\r\n\r\n\t\t\tconst { thicknessColorNode, thicknessDistortionNode, thicknessAmbientNode, thicknessAttenuationNode, thicknessPowerNode, thicknessScaleNode } = material;\r\n\r\n\t\t\tconst scatteringHalf = lightDirection.add( transformedNormalView.mul( thicknessDistortionNode ) ).normalize();\r\n\t\t\tconst scatteringDot = float( positionViewDirection.dot( scatteringHalf.negate() ).saturate().pow( thicknessPowerNode ).mul( thicknessScaleNode ) );\r\n\t\t\tconst scatteringIllu = vec3( scatteringDot.add( thicknessAmbientNode ).mul( thicknessColorNode ) );\r\n\r\n\t\t\treflectedLight.directDiffuse.addAssign( scatteringIllu.mul( thicknessAttenuationNode.mul( lightColor ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tsuper.direct( { lightDirection, lightColor, reflectedLight }, stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass MeshSSSNodeMaterial extends MeshPhysicalNodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshSSSNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper( parameters );\r\n\r\n\t\tthis.thicknessColorNode = null;\r\n\t\tthis.thicknessDistortionNode = float( 0.1 );\r\n\t\tthis.thicknessAmbientNode = float( 0.0 );\r\n\t\tthis.thicknessAttenuationNode = float( .1 );\r\n\t\tthis.thicknessPowerNode = float( 2.0 );\r\n\t\tthis.thicknessScaleNode = float( 10.0 );\r\n\r\n\t}\r\n\r\n\tget useSSS() {\r\n\r\n\t\treturn this.thicknessColorNode !== null;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new SSSLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useSSS );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.thicknessColorNode = source.thicknessColorNode;\r\n\t\tthis.thicknessDistortionNode = source.thicknessDistortionNode;\r\n\t\tthis.thicknessAmbientNode = source.thicknessAmbientNode;\r\n\t\tthis.thicknessAttenuationNode = source.thicknessAttenuationNode;\r\n\t\tthis.thicknessPowerNode = source.thicknessPowerNode;\r\n\t\tthis.thicknessScaleNode = source.thicknessScaleNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshSSSNodeMaterial;\r\n", "import LightingModel from '../core/LightingModel.js';\r\nimport BRDF_Lambert from './BSDF/BRDF_Lambert.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { normalGeometry } from '../accessors/Normal.js';\r\nimport { Fn, float, vec2, vec3 } from '../tsl/TSLBase.js';\r\nimport { mix, smoothstep } from '../math/MathNode.js';\r\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\r\n\r\nconst getGradientIrradiance = /*@__PURE__*/ Fn( ( { normal, lightDirection, builder } ) => {\r\n\r\n\t// dotNL will be from -1.0 to 1.0\r\n\tconst dotNL = normal.dot( lightDirection );\r\n\tconst coord = vec2( dotNL.mul( 0.5 ).add( 0.5 ), 0.0 );\r\n\r\n\tif ( builder.material.gradientMap ) {\r\n\r\n\t\tconst gradientMap = materialReference( 'gradientMap', 'texture' ).context( { getUV: () => coord } );\r\n\r\n\t\treturn vec3( gradientMap.r );\r\n\r\n\t} else {\r\n\r\n\t\tconst fw = coord.fwidth().mul( 0.5 );\r\n\r\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( float( 0.7 ).sub( fw.x ), float( 0.7 ).add( fw.x ), coord.x ) );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nclass ToonLightingModel extends LightingModel {\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight }, stack, builder ) {\r\n\r\n\t\tconst irradiance = getGradientIrradiance( { normal: normalGeometry, lightDirection, builder } ).mul( lightColor );\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\r\n\r\n\t}\r\n\r\n\tindirect( { ambientOcclusion, irradiance, reflectedLight } ) {\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ToonLightingModel;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport ToonLightingModel from '../../nodes/functions/ToonLightingModel.js';\r\n\r\nimport { MeshToonMaterial } from '../MeshToonMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshToonMaterial();\r\n\r\nclass MeshToonNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshToonNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshToonNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new ToonLightingModel();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshToonNodeMaterial;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { transformedNormalView } from '../accessors/Normal.js';\r\nimport { positionViewDirection } from '../accessors/Position.js';\r\nimport { nodeImmutable, vec2, vec3 } from '../tsl/TSLBase.js';\r\n\r\nclass MatcapUVNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MatcapUVNode';\r\n\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst x = vec3( positionViewDirection.z, 0, positionViewDirection.x.negate() ).normalize();\r\n\t\tconst y = positionViewDirection.cross( x );\r\n\r\n\t\treturn vec2( x.dot( transformedNormalView ), y.dot( transformedNormalView ) ).mul( 0.495 ).add( 0.5 ); // 0.495 to remove artifacts caused by undersized matcap disks\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MatcapUVNode;\r\n\r\nexport const matcapUV = /*@__PURE__*/ nodeImmutable( MatcapUVNode );\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { materialReference } from '../../nodes/accessors/MaterialReferenceNode.js';\r\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\r\nimport { vec3 } from '../../nodes/tsl/TSLBase.js';\r\nimport { mix } from '../../nodes/math/MathNode.js';\r\nimport { matcapUV } from '../../nodes/utils/MatcapUVNode.js';\r\n\r\nimport { MeshMatcapMaterial } from '../MeshMatcapMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshMatcapMaterial();\r\n\r\nclass MeshMatcapNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MeshMatcapNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.isMeshMatcapNodeMaterial = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupVariants( builder ) {\r\n\r\n\t\tconst uv = matcapUV;\r\n\r\n\t\tlet matcapColor;\r\n\r\n\t\tif ( builder.material.matcap ) {\r\n\r\n\t\t\tmatcapColor = materialReference( 'matcap', 'texture' ).context( { getUV: () => uv } );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmatcapColor = vec3( mix( 0.2, 0.8, uv.y ) ); // default if matcap is missing\r\n\r\n\t\t}\r\n\r\n\t\tdiffuseColor.rgb.mulAssign( matcapColor.rgb );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default MeshMatcapNodeMaterial;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\n\r\nimport { PointsMaterial } from '../PointsMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new PointsMaterial();\r\n\r\nclass PointsNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PointsNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPointsNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.sizeNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.sizeNode = source.sizeNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointsNodeMaterial;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeProxy, vec4, mat2, mat4 } from '../tsl/TSLBase.js';\r\nimport { cos, sin } from '../math/MathNode.js';\r\n\r\nclass RotateNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RotateNode';\r\n\r\n\t}\r\n\r\n\tconstructor( positionNode, rotationNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.positionNode = positionNode;\r\n\t\tthis.rotationNode = rotationNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.positionNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { rotationNode, positionNode } = this;\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tif ( nodeType === 'vec2' ) {\r\n\r\n\t\t\tconst cosAngle = rotationNode.cos();\r\n\t\t\tconst sinAngle = rotationNode.sin();\r\n\r\n\t\t\tconst rotationMatrix = mat2(\r\n\t\t\t\tcosAngle, sinAngle,\r\n\t\t\t\tsinAngle.negate(), cosAngle\r\n\t\t\t);\r\n\r\n\t\t\treturn rotationMatrix.mul( positionNode );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst rotation = rotationNode;\r\n\t\t\tconst rotationXMatrix = mat4( vec4( 1.0, 0.0, 0.0, 0.0 ), vec4( 0.0, cos( rotation.x ), sin( rotation.x ).negate(), 0.0 ), vec4( 0.0, sin( rotation.x ), cos( rotation.x ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\t\t\tconst rotationYMatrix = mat4( vec4( cos( rotation.y ), 0.0, sin( rotation.y ), 0.0 ), vec4( 0.0, 1.0, 0.0, 0.0 ), vec4( sin( rotation.y ).negate(), 0.0, cos( rotation.y ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\t\t\tconst rotationZMatrix = mat4( vec4( cos( rotation.z ), sin( rotation.z ).negate(), 0.0, 0.0 ), vec4( sin( rotation.z ), cos( rotation.z ), 0.0, 0.0 ), vec4( 0.0, 0.0, 1.0, 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\r\n\t\t\treturn rotationXMatrix.mul( rotationYMatrix ).mul( rotationZMatrix ).mul( vec4( positionNode, 1.0 ) ).xyz;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RotateNode;\r\n\r\nexport const rotate = /*@__PURE__*/ nodeProxy( RotateNode );\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { cameraProjectionMatrix } from '../../nodes/accessors/Camera.js';\r\nimport { materialRotation } from '../../nodes/accessors/MaterialNode.js';\r\nimport { modelViewMatrix, modelWorldMatrix } from '../../nodes/accessors/ModelNode.js';\r\nimport { positionLocal } from '../../nodes/accessors/Position.js';\r\nimport { rotate } from '../../nodes/utils/RotateNode.js';\r\nimport { float, vec2, vec3, vec4 } from '../../nodes/tsl/TSLBase.js';\r\n\r\nimport { SpriteMaterial } from '../SpriteMaterial.js';\r\nimport { reference } from '../../nodes/accessors/ReferenceBaseNode.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new SpriteMaterial();\r\n\r\nclass SpriteNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SpriteNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSpriteNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis._useSizeAttenuation = true;\r\n\r\n\t\tthis.positionNode = null;\r\n\t\tthis.rotationNode = null;\r\n\t\tthis.scaleNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupPosition( { object, camera, context } ) {\r\n\r\n\t\tconst sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\t// < VERTEX STAGE >\r\n\r\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\r\n\r\n\t\tconst vertex = positionLocal;\r\n\r\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\r\n\r\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\r\n\r\n\t\tif ( scaleNode !== null ) {\r\n\r\n\t\t\tscale = scale.mul( scaleNode );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tif ( ! sizeAttenuation && camera.isPerspectiveCamera ) {\r\n\r\n\t\t\tscale = scale.mul( mvPosition.z.negate() );\r\n\r\n\t\t}\r\n\r\n\t\tlet alignedPosition = vertex.xy;\r\n\r\n\t\tif ( object.center && object.center.isVector2 === true ) {\r\n\r\n\t\t\tconst center = reference( 'center', 'vec2' );\r\n\r\n\t\t\talignedPosition = alignedPosition.sub( center.sub( 0.5 ) );\r\n\r\n\t\t}\r\n\r\n\t\talignedPosition = alignedPosition.mul( scale );\r\n\r\n\t\tconst rotation = float( rotationNode || materialRotation );\r\n\r\n\t\tconst rotatedPosition = rotate( alignedPosition, rotation );\r\n\r\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\r\n\r\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\r\n\r\n\t\tcontext.vertex = vertex;\r\n\r\n\t\treturn modelViewProjection;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\t\tthis.rotationNode = source.rotationNode;\r\n\t\tthis.scaleNode = source.scaleNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n\tget sizeAttenuation() {\r\n\r\n\t\treturn this._useSizeAttenuation;\r\n\r\n\t}\r\n\r\n\tset sizeAttenuation( value ) {\r\n\r\n\t\tif ( this._useSizeAttenuation !== value ) {\r\n\r\n\t\t\tthis._useSizeAttenuation = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpriteNodeMaterial;\r\n", "import LightingModel from '../core/LightingModel.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { float } from '../tsl/TSLBase.js';\r\n\r\nclass ShadowMaskModel extends LightingModel {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.shadowNode = float( 1 ).toVar( 'shadowMask' );\r\n\r\n\t}\r\n\r\n\tdirect( { shadowMask } ) {\r\n\r\n\t\tthis.shadowNode.mulAssign( shadowMask );\r\n\r\n\t}\r\n\r\n\tfinish( context ) {\r\n\r\n\t\tdiffuseColor.a.mulAssign( this.shadowNode.oneMinus() );\r\n\r\n\t\tcontext.outgoingLight.rgb.assign( diffuseColor.rgb ); // TODO: Optimize LightsNode to avoid this assignment\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ShadowMaskModel;\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport ShadowMaskModel from '../../nodes/functions/ShadowMaskModel.js';\r\n\r\nimport { ShadowMaterial } from '../ShadowMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new ShadowMaterial();\r\n\r\nclass ShadowNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ShadowNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isShadowNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new ShadowMaskModel();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ShadowNodeMaterial;\r\n", "import TextureNode from './TextureNode.js';\r\nimport { nodeProxy, vec3, Fn, If } from '../tsl/TSLBase.js';\r\n\r\nconst normal = Fn( ( { texture, uv } ) => {\r\n\r\n\tconst epsilon = 0.0001;\r\n\r\n\tconst ret = vec3().toVar();\r\n\r\n\tIf( uv.x.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 1, 0, 0 ) );\r\n\r\n\t} ).ElseIf( uv.y.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 1, 0 ) );\r\n\r\n\t} ).ElseIf( uv.z.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 0, 1 ) );\r\n\r\n\t} ).ElseIf( uv.x.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( - 1, 0, 0 ) );\r\n\r\n\t} ).ElseIf( uv.y.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, - 1, 0 ) );\r\n\r\n\t} ).ElseIf( uv.z.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 0, - 1 ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tconst step = 0.01;\r\n\r\n\t\tconst x = texture.uv( uv.add( vec3( - step, 0.0, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );\r\n\t\tconst y = texture.uv( uv.add( vec3( 0.0, - step, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );\r\n\t\tconst z = texture.uv( uv.add( vec3( 0.0, 0.0, - step ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, 0.0, step ) ) ).r );\r\n\r\n\t\tret.assign( vec3( x, y, z ) );\r\n\r\n\t} );\r\n\r\n\treturn ret.normalize();\r\n\r\n} );\r\n\r\n\r\nclass Texture3DNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Texture3DNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( value, uvNode, levelNode );\r\n\r\n\t\tthis.isTexture3DNode = true;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'texture3D';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn vec3( 0.5, 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for 3d TextureNode\r\n\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode;\r\n\r\n\t}\r\n\r\n\tgenerateUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode.build( builder, 'vec3' );\r\n\r\n\t}\r\n\r\n\tnormal( uvNode ) {\r\n\r\n\t\treturn normal( { texture: this, uv: uvNode } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Texture3DNode;\r\n\r\nexport const texture3D = /*@__PURE__*/ nodeProxy( Texture3DNode );\r\n", "import NodeMaterial from './NodeMaterial.js';\r\nimport { property } from '../../nodes/core/PropertyNode.js';\r\nimport { materialReference } from '../../nodes/accessors/MaterialReferenceNode.js';\r\nimport { modelWorldMatrixInverse } from '../../nodes/accessors/ModelNode.js';\r\nimport { cameraPosition } from '../../nodes/accessors/Camera.js';\r\nimport { positionGeometry } from '../../nodes/accessors/Position.js';\r\nimport { Fn, varying, float, vec2, vec3, vec4 } from '../../nodes/tsl/TSLBase.js';\r\nimport { min, max } from '../../nodes/math/MathNode.js';\r\nimport { Loop, Break } from '../../nodes/utils/LoopNode.js';\r\nimport { texture3D } from '../../nodes/accessors/Texture3DNode.js';\r\n\r\nclass VolumeNodeMaterial extends NodeMaterial {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VolumeNodeMaterial';\r\n\r\n\t}\r\n\r\n\tconstructor( params = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.isVolumeNodeMaterial = true;\r\n\t\tthis.testNode = null;\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst map = texture3D( this.map, null, 0 );\r\n\r\n\t\tconst hitBox = Fn( ( { orig, dir } ) => {\r\n\r\n\t\t\tconst box_min = vec3( - 0.5 );\r\n\t\t\tconst box_max = vec3( 0.5 );\r\n\r\n\t\t\tconst inv_dir = dir.reciprocal();\r\n\r\n\t\t\tconst tmin_tmp = box_min.sub( orig ).mul( inv_dir );\r\n\t\t\tconst tmax_tmp = box_max.sub( orig ).mul( inv_dir );\r\n\r\n\t\t\tconst tmin = min( tmin_tmp, tmax_tmp );\r\n\t\t\tconst tmax = max( tmin_tmp, tmax_tmp );\r\n\r\n\t\t\tconst t0 = max( tmin.x, max( tmin.y, tmin.z ) );\r\n\t\t\tconst t1 = min( tmax.x, min( tmax.y, tmax.z ) );\r\n\r\n\t\t\treturn vec2( t0, t1 );\r\n\r\n\t\t} );\r\n\r\n\t\tthis.fragmentNode = Fn( () => {\r\n\r\n\t\t\tconst vOrigin = varying( vec3( modelWorldMatrixInverse.mul( vec4( cameraPosition, 1.0 ) ) ) );\r\n\t\t\tconst vDirection = varying( positionGeometry.sub( vOrigin ) );\r\n\r\n\t\t\tconst rayDir = vDirection.normalize();\r\n\t\t\tconst bounds = vec2( hitBox( { orig: vOrigin, dir: rayDir } ) ).toVar();\r\n\r\n\t\t\tbounds.x.greaterThan( bounds.y ).discard();\r\n\r\n\t\t\tbounds.assign( vec2( max( bounds.x, 0.0 ), bounds.y ) );\r\n\r\n\t\t\tconst p = vec3( vOrigin.add( bounds.x.mul( rayDir ) ) ).toVar();\r\n\t\t\tconst inc = vec3( rayDir.abs().reciprocal() ).toVar();\r\n\t\t\tconst delta = float( min( inc.x, min( inc.y, inc.z ) ) ).toVar( 'delta' ); // used 'delta' name in loop\r\n\r\n\t\t\tdelta.divAssign( materialReference( 'steps', 'float' ) );\r\n\r\n\t\t\tconst ac = vec4( materialReference( 'base', 'color' ), 0.0 ).toVar();\r\n\r\n\t\t\tLoop( { type: 'float', start: bounds.x, end: bounds.y, update: '+= delta' }, () => {\r\n\r\n\t\t\t\tconst d = property( 'float', 'd' ).assign( map.uv( p.add( 0.5 ) ).r );\r\n\r\n\t\t\t\tif ( this.testNode !== null ) {\r\n\r\n\t\t\t\t\tthis.testNode( { map: map, mapValue: d, probe: p, finalColor: ac } ).append();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// default to show surface of mesh\r\n\t\t\t\t\tac.a.assign( 1 );\r\n\t\t\t\t\tBreak();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp.addAssign( rayDir.mul( delta ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tac.a.equal( 0 ).discard();\r\n\r\n\t\t\treturn vec4( ac );\r\n\r\n\t\t} )();\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VolumeNodeMaterial;\r\n", "import { nodeObject, float } from '../../nodes/tsl/TSLBase.js';\r\n\r\nimport { Loader } from '../Loader.js';\r\nimport { FileLoader } from '../../loaders/FileLoader.js';\r\n\r\nclass NodeLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.textures = {};\r\n\t\tthis.nodes = {};\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, ( text ) => {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( this.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparseNodes( json ) {\r\n\r\n\t\tconst nodes = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( const nodeJSON of json ) {\r\n\r\n\t\t\t\tconst { uuid, type } = nodeJSON;\r\n\r\n\t\t\t\tnodes[ uuid ] = this.createNodeFromType( type );\r\n\t\t\t\tnodes[ uuid ].uuid = uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst meta = { nodes, textures: this.textures };\r\n\r\n\t\t\tfor ( const nodeJSON of json ) {\r\n\r\n\t\t\t\tnodeJSON.meta = meta;\r\n\r\n\t\t\t\tconst node = nodes[ nodeJSON.uuid ];\r\n\t\t\t\tnode.deserialize( nodeJSON );\r\n\r\n\t\t\t\tdelete nodeJSON.meta;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn nodes;\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\tconst node = this.createNodeFromType( json.type );\r\n\t\tnode.uuid = json.uuid;\r\n\r\n\t\tconst nodes = this.parseNodes( json.nodes );\r\n\t\tconst meta = { nodes, textures: this.textures };\r\n\r\n\t\tjson.meta = meta;\r\n\r\n\t\tnode.deserialize( json );\r\n\r\n\t\tdelete json.meta;\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetTextures( value ) {\r\n\r\n\t\tthis.textures = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetNodes( value ) {\r\n\r\n\t\tthis.nodes = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcreateNodeFromType( type ) {\r\n\r\n\t\tif ( this.nodes[ type ] === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.NodeLoader: Node type not found:', type );\r\n\t\t\treturn float();\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeObject( new this.nodes[ type ]() );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeLoader;\r\n", "import { MaterialLoader } from '../../loaders/MaterialLoader.js';\r\n\r\nclass NodeMaterialLoader extends MaterialLoader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.nodes = {};\r\n\t\tthis.nodeMaterials = {};\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\tconst material = super.parse( json );\r\n\r\n\t\tconst nodes = this.nodes;\r\n\t\tconst inputNodes = json.inputNodes;\r\n\r\n\t\tfor ( const property in inputNodes ) {\r\n\r\n\t\t\tconst uuid = inputNodes[ property ];\r\n\r\n\t\t\tmaterial[ property ] = nodes[ uuid ];\r\n\r\n\t\t}\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\tsetNodes( value ) {\r\n\r\n\t\tthis.nodes = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetNodeMaterials( value ) {\r\n\r\n\t\tthis.nodeMaterials = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcreateMaterialFromType( type ) {\r\n\r\n\t\tconst materialClass = this.nodeMaterials[ type ];\r\n\r\n\t\tif ( materialClass !== undefined ) {\r\n\r\n\t\t\treturn new materialClass();\r\n\r\n\t\t}\r\n\r\n\t\treturn super.createMaterialFromType( type );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeMaterialLoader;\r\n", "import NodeLoader from './NodeLoader.js';\r\nimport NodeMaterialLoader from './NodeMaterialLoader.js';\r\n\r\nimport { ObjectLoader } from '../../loaders/ObjectLoader.js';\r\n\r\nclass NodeObjectLoader extends ObjectLoader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.nodes = {};\r\n\t\tthis.nodeMaterials = {};\r\n\r\n\t\tthis._nodesJSON = null;\r\n\r\n\t}\r\n\r\n\tsetNodes( value ) {\r\n\r\n\t\tthis.nodes = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetNodeMaterials( value ) {\r\n\r\n\t\tthis.nodeMaterials = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tparse( json, onLoad ) {\r\n\r\n\t\tthis._nodesJSON = json.nodes;\r\n\r\n\t\tconst data = super.parse( json, onLoad );\r\n\r\n\t\tthis._nodesJSON = null; // dispose\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tparseNodes( json, textures ) {\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tconst loader = new NodeLoader();\r\n\t\t\tloader.setNodes( this.nodes );\r\n\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\treturn loader.parseNodes( json );\r\n\r\n\t\t}\r\n\r\n\t\treturn {};\r\n\r\n\t}\r\n\r\n\tparseMaterials( json, textures ) {\r\n\r\n\t\tconst materials = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tconst nodes = this.parseNodes( this._nodesJSON, textures );\r\n\r\n\t\t\tconst loader = new NodeMaterialLoader();\r\n\t\t\tloader.setTextures( textures );\r\n\t\t\tloader.setNodes( nodes );\r\n\t\t\tloader.setNodeMaterials( this.nodeMaterials );\r\n\r\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst data = json[ i ];\r\n\r\n\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeObjectLoader;\r\n", "class NodeAttribute {\r\n\r\n\tconstructor( name, type, node = null ) {\r\n\r\n\t\tthis.isNodeAttribute = true;\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeAttribute;\r\n", "class NodeUniform {\r\n\r\n\tconstructor( name, type, node ) {\r\n\r\n\t\tthis.isNodeUniform = true;\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.node = node.getSelf();\r\n\r\n\t}\r\n\r\n\tget value() {\r\n\r\n\t\treturn this.node.value;\r\n\r\n\t}\r\n\r\n\tset value( val ) {\r\n\r\n\t\tthis.node.value = val;\r\n\r\n\t}\r\n\r\n\tget id() {\r\n\r\n\t\treturn this.node.id;\r\n\r\n\t}\r\n\r\n\tget groupNode() {\r\n\r\n\t\treturn this.node.groupNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeUniform;\r\n", "class NodeVar {\r\n\r\n\tconstructor( name, type ) {\r\n\r\n\t\tthis.isNodeVar = true;\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeVar;\r\n", "import NodeVar from './NodeVar.js';\r\n\r\nclass NodeVarying extends NodeVar {\r\n\r\n\tconstructor( name, type ) {\r\n\r\n\t\tsuper( name, type );\r\n\r\n\t\tthis.needsInterpolation = false;\r\n\r\n\t\tthis.isNodeVarying = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeVarying;\r\n", "class NodeCode {\r\n\r\n\tconstructor( name, type, code = '' ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.code = code;\r\n\r\n\t\tObject.defineProperty( this, 'isNodeCode', { value: true } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeCode;\r\n", "let id = 0;\r\n\r\nclass NodeCache {\r\n\r\n\tconstructor( parent = null ) {\r\n\r\n\t\tthis.id = id ++;\r\n\t\tthis.nodesData = new WeakMap();\r\n\r\n\t\tthis.parent = parent;\r\n\r\n\t}\r\n\r\n\tgetData( node ) {\r\n\r\n\t\tlet data = this.nodesData.get( node );\r\n\r\n\t\tif ( data === undefined && this.parent !== null ) {\r\n\r\n\t\t\tdata = this.parent.getData( node );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tsetData( node, data ) {\r\n\r\n\t\tthis.nodesData.set( node, data );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeCache;\r\n", "import { nodeObject } from '../tsl/TSLBase.js';\r\nimport PropertyNode from './PropertyNode.js';\r\n\r\nclass ParameterNode extends PropertyNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ParameterNode';\r\n\r\n\t}\r\n\r\n\tconstructor( nodeType, name = null ) {\r\n\r\n\t\tsuper( nodeType, name );\r\n\r\n\t\tthis.isParameterNode = true;\r\n\r\n\t}\r\n\r\n\tgetHash() {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgenerate() {\r\n\r\n\t\treturn this.name;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ParameterNode;\r\n\r\nexport const parameter = ( type, name ) => nodeObject( new ParameterNode( type, name ) );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass CodeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'CodeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( code = '', includes = [], language = '' ) {\r\n\r\n\t\tsuper( 'code' );\r\n\r\n\t\tthis.isCodeNode = true;\r\n\r\n\t\tthis.code = code;\r\n\t\tthis.language = language;\r\n\r\n\t\tthis.includes = includes;\r\n\r\n\t}\r\n\r\n\tisGlobal() {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tsetIncludes( includes ) {\r\n\r\n\t\tthis.includes = includes;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetIncludes( /*builder*/ ) {\r\n\r\n\t\treturn this.includes;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst includes = this.getIncludes( builder );\r\n\r\n\t\tfor ( const include of includes ) {\r\n\r\n\t\t\tinclude.build( builder );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );\r\n\t\tnodeCode.code = this.code;\r\n\r\n\t\treturn nodeCode.code;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.code = this.code;\r\n\t\tdata.language = this.language;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.code = data.code;\r\n\t\tthis.language = data.language;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CodeNode;\r\n\r\nexport const code = /*@__PURE__*/ nodeProxy( CodeNode );\r\n\r\nexport const js = ( src, includes ) => code( src, includes, 'js' );\r\nexport const wgsl = ( src, includes ) => code( src, includes, 'wgsl' );\r\nexport const glsl = ( src, includes ) => code( src, includes, 'glsl' );\r\n", "import CodeNode from './CodeNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\nclass FunctionNode extends CodeNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FunctionNode';\r\n\r\n\t}\r\n\r\n\tconstructor( code = '', includes = [], language = '' ) {\r\n\r\n\t\tsuper( code, includes, language );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getNodeFunction( builder ).type;\r\n\r\n\t}\r\n\r\n\tgetInputs( builder ) {\r\n\r\n\t\treturn this.getNodeFunction( builder ).inputs;\r\n\r\n\t}\r\n\r\n\tgetNodeFunction( builder ) {\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\tlet nodeFunction = nodeData.nodeFunction;\r\n\r\n\t\tif ( nodeFunction === undefined ) {\r\n\r\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\r\n\r\n\t\t\tnodeData.nodeFunction = nodeFunction;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeFunction;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tsuper.generate( builder );\r\n\r\n\t\tconst nodeFunction = this.getNodeFunction( builder );\r\n\r\n\t\tconst name = nodeFunction.name;\r\n\t\tconst type = nodeFunction.type;\r\n\r\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\r\n\r\n\t\tif ( name !== '' ) {\r\n\r\n\t\t\t// use a custom property name\r\n\r\n\t\t\tnodeCode.name = name;\r\n\r\n\t\t}\r\n\r\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\r\n\r\n\t\tconst code = this.getNodeFunction( builder ).getCode( propertyName );\r\n\r\n\t\tnodeCode.code = code + '\\n';\r\n\r\n\t\tif ( output === 'property' ) {\r\n\r\n\t\t\treturn propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionNode;\r\n\r\nconst nativeFn = ( code, includes = [], language = '' ) => {\r\n\r\n\tfor ( let i = 0; i < includes.length; i ++ ) {\r\n\r\n\t\tconst include = includes[ i ];\r\n\r\n\t\t// TSL Function: glslFn, wgslFn\r\n\r\n\t\tif ( typeof include === 'function' ) {\r\n\r\n\t\t\tincludes[ i ] = include.functionNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst functionNode = nodeObject( new FunctionNode( code, includes, language ) );\r\n\r\n\tconst fn = ( ...params ) => functionNode.call( ...params );\r\n\tfn.functionNode = functionNode;\r\n\r\n\treturn fn;\r\n\r\n};\r\n\r\nexport const glslFn = ( code, includes ) => nativeFn( code, includes, 'glsl' );\r\nexport const wgslFn = ( code, includes ) => nativeFn( code, includes, 'wgsl' );\r\n", "import { Color } from '../../math/Color.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nclass Uniform {\r\n\r\n\tconstructor( name, value ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.value = value;\r\n\r\n\t\tthis.boundary = 0; // used to build the uniform buffer according to the STD140 layout\r\n\t\tthis.itemSize = 0;\r\n\r\n\t\tthis.offset = 0; // this property is set by WebGPUUniformsGroup and marks the start position in the uniform buffer\r\n\r\n\t}\r\n\r\n\tsetValue( value ) {\r\n\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass NumberUniform extends Uniform {\r\n\r\n\tconstructor( name, value = 0 ) {\r\n\r\n\t\tsuper( name, value );\r\n\r\n\t\tthis.isNumberUniform = true;\r\n\r\n\t\tthis.boundary = 4;\r\n\t\tthis.itemSize = 1;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Vector2Uniform extends Uniform {\r\n\r\n\tconstructor( name, value = new Vector2() ) {\r\n\r\n\t\tsuper( name, value );\r\n\r\n\t\tthis.isVector2Uniform = true;\r\n\r\n\t\tthis.boundary = 8;\r\n\t\tthis.itemSize = 2;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Vector3Uniform extends Uniform {\r\n\r\n\tconstructor( name, value = new Vector3() ) {\r\n\r\n\t\tsuper( name, value );\r\n\r\n\t\tthis.isVector3Uniform = true;\r\n\r\n\t\tthis.boundary = 16;\r\n\t\tthis.itemSize = 3;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Vector4Uniform extends Uniform {\r\n\r\n\tconstructor( name, value = new Vector4() ) {\r\n\r\n\t\tsuper( name, value );\r\n\r\n\t\tthis.isVector4Uniform = true;\r\n\r\n\t\tthis.boundary = 16;\r\n\t\tthis.itemSize = 4;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ColorUniform extends Uniform {\r\n\r\n\tconstructor( name, value = new Color() ) {\r\n\r\n\t\tsuper( name, value );\r\n\r\n\t\tthis.isColorUniform = true;\r\n\r\n\t\tthis.boundary = 16;\r\n\t\tthis.itemSize = 3;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Matrix3Uniform extends Uniform {\r\n\r\n\tconstructor( name, value = new Matrix3() ) {\r\n\r\n\t\tsuper( name, value );\r\n\r\n\t\tthis.isMatrix3Uniform = true;\r\n\r\n\t\tthis.boundary = 48;\r\n\t\tthis.itemSize = 12;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Matrix4Uniform extends Uniform {\r\n\r\n\tconstructor( name, value = new Matrix4() ) {\r\n\r\n\t\tsuper( name, value );\r\n\r\n\t\tthis.isMatrix4Uniform = true;\r\n\r\n\t\tthis.boundary = 64;\r\n\t\tthis.itemSize = 16;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport {\r\n\tNumberUniform,\r\n\tVector2Uniform, Vector3Uniform, Vector4Uniform, ColorUniform,\r\n\tMatrix3Uniform, Matrix4Uniform\r\n};\r\n", "import {\r\n\tNumberUniform, Vector2Uniform, Vector3Uniform, Vector4Uniform,\r\n\tColorUniform, Matrix3Uniform, Matrix4Uniform\r\n} from '../Uniform.js';\r\n\r\nclass NumberNodeUniform extends NumberUniform {\r\n\r\n\tconstructor( nodeUniform ) {\r\n\r\n\t\tsuper( nodeUniform.name, nodeUniform.value );\r\n\r\n\t\tthis.nodeUniform = nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.nodeUniform.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Vector2NodeUniform extends Vector2Uniform {\r\n\r\n\tconstructor( nodeUniform ) {\r\n\r\n\t\tsuper( nodeUniform.name, nodeUniform.value );\r\n\r\n\t\tthis.nodeUniform = nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.nodeUniform.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Vector3NodeUniform extends Vector3Uniform {\r\n\r\n\tconstructor( nodeUniform ) {\r\n\r\n\t\tsuper( nodeUniform.name, nodeUniform.value );\r\n\r\n\t\tthis.nodeUniform = nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.nodeUniform.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Vector4NodeUniform extends Vector4Uniform {\r\n\r\n\tconstructor( nodeUniform ) {\r\n\r\n\t\tsuper( nodeUniform.name, nodeUniform.value );\r\n\r\n\t\tthis.nodeUniform = nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.nodeUniform.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ColorNodeUniform extends ColorUniform {\r\n\r\n\tconstructor( nodeUniform ) {\r\n\r\n\t\tsuper( nodeUniform.name, nodeUniform.value );\r\n\r\n\t\tthis.nodeUniform = nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.nodeUniform.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Matrix3NodeUniform extends Matrix3Uniform {\r\n\r\n\tconstructor( nodeUniform ) {\r\n\r\n\t\tsuper( nodeUniform.name, nodeUniform.value );\r\n\r\n\t\tthis.nodeUniform = nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.nodeUniform.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Matrix4NodeUniform extends Matrix4Uniform {\r\n\r\n\tconstructor( nodeUniform ) {\r\n\r\n\t\tsuper( nodeUniform.name, nodeUniform.value );\r\n\r\n\t\tthis.nodeUniform = nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.nodeUniform.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport {\r\n\tNumberNodeUniform, Vector2NodeUniform, Vector3NodeUniform, Vector4NodeUniform,\r\n\tColorNodeUniform, Matrix3NodeUniform, Matrix4NodeUniform\r\n};\r\n", "import Node from './Node.js';\r\nimport { select } from '../math/ConditionalNode.js';\r\nimport { ShaderNode, nodeProxy, getCurrentStack, setCurrentStack } from '../tsl/TSLBase.js';\r\n\r\nclass StackNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StackNode';\r\n\r\n\t}\r\n\r\n\tconstructor( parent = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.nodes = [];\r\n\t\tthis.outputNode = null;\r\n\r\n\t\tthis.parent = parent;\r\n\r\n\t\tthis._currentCond = null;\r\n\r\n\t\tthis.isStackNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.outputNode ? this.outputNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tadd( node ) {\r\n\r\n\t\tthis.nodes.push( node );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tIf( boolNode, method ) {\r\n\r\n\t\tconst methodNode = new ShaderNode( method );\r\n\t\tthis._currentCond = select( boolNode, methodNode );\r\n\r\n\t\treturn this.add( this._currentCond );\r\n\r\n\t}\r\n\r\n\tElseIf( boolNode, method ) {\r\n\r\n\t\tconst methodNode = new ShaderNode( method );\r\n\t\tconst ifNode = select( boolNode, methodNode );\r\n\r\n\t\tthis._currentCond.elseNode = ifNode;\r\n\t\tthis._currentCond = ifNode;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tElse( method ) {\r\n\r\n\t\tthis._currentCond.elseNode = new ShaderNode( method );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tbuild( builder, ...params ) {\r\n\r\n\t\tconst previousStack = getCurrentStack();\r\n\r\n\t\tsetCurrentStack( this );\r\n\r\n\t\tfor ( const node of this.nodes ) {\r\n\r\n\t\t\tnode.build( builder, 'void' );\r\n\r\n\t\t}\r\n\r\n\t\tsetCurrentStack( previousStack );\r\n\r\n\t\treturn this.outputNode ? this.outputNode.build( builder, ...params ) : super.build( builder, ...params );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\telse( ...params ) { // @deprecated, r168\r\n\r\n\t\tconsole.warn( 'TSL.StackNode: .else() has been renamed to .Else().' );\r\n\t\treturn this.Else( ...params );\r\n\r\n\t}\r\n\r\n\telseif( ...params ) { // @deprecated, r168\r\n\r\n\t\tconsole.warn( 'TSL.StackNode: .elseif() has been renamed to .ElseIf().' );\r\n\t\treturn this.ElseIf( ...params );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StackNode;\r\n\r\nexport const stack = /*@__PURE__*/ nodeProxy( StackNode );\r\n", "export default class ChainMap {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.weakMap = new WeakMap();\r\n\r\n\t}\r\n\r\n\tget( keys ) {\r\n\r\n\t\tlet map = this.weakMap;\r\n\r\n\t\tfor ( let i = 0; i < keys.length; i ++ ) {\r\n\r\n\t\t\tmap = map.get( keys[ i ] );\r\n\r\n\t\t\tif ( map === undefined ) return undefined;\r\n\r\n\t\t}\r\n\r\n\t\treturn map.get( keys[ keys.length - 1 ] );\r\n\r\n\t}\r\n\r\n\tset( keys, value ) {\r\n\r\n\t\tlet map = this.weakMap;\r\n\r\n\t\tfor ( let i = 0; i < keys.length; i ++ ) {\r\n\r\n\t\t\tconst key = keys[ i ];\r\n\r\n\t\t\tif ( map.has( key ) === false ) map.set( key, new WeakMap() );\r\n\r\n\t\t\tmap = map.get( key );\r\n\r\n\t\t}\r\n\r\n\t\treturn map.set( keys[ keys.length - 1 ], value );\r\n\r\n\t}\r\n\r\n\tdelete( keys ) {\r\n\r\n\t\tlet map = this.weakMap;\r\n\r\n\t\tfor ( let i = 0; i < keys.length; i ++ ) {\r\n\r\n\t\t\tmap = map.get( keys[ i ] );\r\n\r\n\t\t\tif ( map === undefined ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn map.delete( keys[ keys.length - 1 ] );\r\n\r\n\t}\r\n\r\n}\r\n", "import NodeMaterial from '../../../materials/nodes/NodeMaterial.js';\r\nimport { getDirection, blur } from '../../../nodes/pmrem/PMREMUtils.js';\r\nimport { equirectUV } from '../../../nodes/utils/EquirectUVNode.js';\r\nimport { uniform } from '../../../nodes/core/UniformNode.js';\r\nimport { uniformArray } from '../../../nodes/accessors/UniformArrayNode.js';\r\nimport { texture } from '../../../nodes/accessors/TextureNode.js';\r\nimport { cubeTexture } from '../../../nodes/accessors/CubeTextureNode.js';\r\nimport { float, vec3 } from '../../../nodes/tsl/TSLBase.js';\r\nimport { uv } from '../../../nodes/accessors/UV.js';\r\nimport { attribute } from '../../../nodes/core/AttributeNode.js';\r\n\r\nimport { OrthographicCamera } from '../../../cameras/OrthographicCamera.js';\r\nimport { Color } from '../../../math/Color.js';\r\nimport { Vector3 } from '../../../math/Vector3.js';\r\nimport { BufferGeometry } from '../../../core/BufferGeometry.js';\r\nimport { BufferAttribute } from '../../../core/BufferAttribute.js';\r\nimport { RenderTarget } from '../../../core/RenderTarget.js';\r\nimport { Mesh } from '../../../objects/Mesh.js';\r\nimport { PerspectiveCamera } from '../../../cameras/PerspectiveCamera.js';\r\nimport { MeshBasicMaterial } from '../../../materials/MeshBasicMaterial.js';\r\nimport { BoxGeometry } from '../../../geometries/BoxGeometry.js';\r\nimport {\r\n\tCubeReflectionMapping,\r\n\tCubeRefractionMapping,\r\n\tCubeUVReflectionMapping,\r\n\tLinearFilter,\r\n\tNoBlending,\r\n\tRGBAFormat,\r\n\tHalfFloatType,\r\n\tBackSide,\r\n\tLinearSRGBColorSpace\r\n} from '../../../constants.js';\r\n\r\nconst LOD_MIN = 4;\r\n\r\n// The standard deviations (radians) associated with the extra mips. These are\r\n// chosen to approximate a Trowbridge-Reitz distribution function times the\r\n// geometric shadowing function. These sigma values squared must match the\r\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\r\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\r\n\r\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\r\n// samples and exit early, but not recompile the shader.\r\nconst MAX_SAMPLES = 20;\r\n\r\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\nconst _cubeCamera = /*@__PURE__*/ new PerspectiveCamera( 90, 1 );\r\nconst _clearColor = /*@__PURE__*/ new Color();\r\nlet _oldTarget = null;\r\nlet _oldActiveCubeFace = 0;\r\nlet _oldActiveMipmapLevel = 0;\r\n\r\n// Golden Ratio\r\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\r\nconst INV_PHI = 1 / PHI;\r\n\r\n// Vertices of a dodecahedron (except the opposites, which represent the\r\n// same axis), used as axis directions evenly spread on a sphere.\r\nconst _axisDirections = [\r\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 )\r\n];\r\n\r\n//\r\n\r\n// WebGPU Face indices\r\nconst _faceLib = [\r\n\t3, 1, 5,\r\n\t0, 4, 2\r\n];\r\n\r\nconst direction = getDirection( uv(), attribute( 'faceIndex' ) ).normalize();\r\nconst outputDirection = vec3( direction.x, direction.y.negate(), direction.z );\r\n\r\n/**\r\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\r\n * (PMREM) from a cubeMap environment texture. This allows different levels of\r\n * blur to be quickly accessed based on material roughness. It is packed into a\r\n * special CubeUV format that allows us to perform custom interpolation so that\r\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\r\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\r\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\r\n * higher roughness levels. In this way we maintain resolution to smoothly\r\n * interpolate diffuse lighting while limiting sampling computation.\r\n *\r\n * Paper: Fast, Accurate Image-Based Lighting\r\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\r\n*/\r\n\r\nclass PMREMGenerator {\r\n\r\n\tconstructor( renderer ) {\r\n\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._pingPongRenderTarget = null;\r\n\r\n\t\tthis._lodMax = 0;\r\n\t\tthis._cubeSize = 0;\r\n\t\tthis._lodPlanes = [];\r\n\t\tthis._sizeLods = [];\r\n\t\tthis._sigmas = [];\r\n\t\tthis._lodMeshes = [];\r\n\r\n\t\tthis._blurMaterial = null;\r\n\t\tthis._cubemapMaterial = null;\r\n\t\tthis._equirectMaterial = null;\r\n\t\tthis._backgroundBox = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\r\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\r\n\t * in radians to be applied to the scene before PMREM generation. Optional near\r\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\r\n\t * is placed at the origin).\r\n\t */\r\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\r\n\t\tthis._setSize( 256 );\r\n\r\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\r\n\t\tcubeUVRenderTarget.depthBuffer = true;\r\n\r\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\r\n\r\n\t\tif ( sigma > 0 ) {\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\r\n\r\n\t\t}\r\n\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\r\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t */\r\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\r\n\r\n\t\treturn this._fromTexture( equirectangular, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\r\n\t * or HDR. The ideal input cube size is 256 x 256,\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t */\r\n\tfromCubemap( cubemap, renderTarget = null ) {\r\n\r\n\t\treturn this._fromTexture( cubemap, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t */\r\n\tasync compileCubemapShader() {\r\n\r\n\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\r\n\t\t\tawait this._compileMaterial( this._cubemapMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t */\r\n\tasync compileEquirectangularShader() {\r\n\r\n\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\r\n\t\t\tawait this._compileMaterial( this._equirectMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\r\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\r\n\t * one of them will cause any others to also become unusable.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis._dispose();\r\n\r\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\r\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\r\n\t\tif ( this._backgroundBox !== null ) {\r\n\r\n\t\t\tthis._backgroundBox.geometry.dispose();\r\n\t\t\tthis._backgroundBox.material.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// private interface\r\n\r\n\t_setSize( cubeSize ) {\r\n\r\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\r\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\r\n\r\n\t}\r\n\r\n\t_dispose() {\r\n\r\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\r\n\r\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\r\n\r\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\r\n\r\n\t\t\tthis._lodPlanes[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_cleanup( outputTarget ) {\r\n\r\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\r\n\t\toutputTarget.scissorTest = false;\r\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\r\n\r\n\t}\r\n\r\n\t_fromTexture( texture, renderTarget ) {\r\n\r\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\r\n\r\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\r\n\r\n\t\t} else { // Equirectangular\r\n\r\n\t\t\tthis._setSize( texture.image.width / 4 );\r\n\r\n\t\t}\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\r\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\r\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t_allocateTargets() {\r\n\r\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\r\n\t\tconst height = 4 * this._cubeSize;\r\n\r\n\t\tconst params = {\r\n\t\t\tmagFilter: LinearFilter,\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\ttype: HalfFloatType,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\tcolorSpace: LinearSRGBColorSpace,\r\n\t\t\t//depthBuffer: false\r\n\t\t};\r\n\r\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\r\n\r\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\r\n\r\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\r\n\r\n\t\t\t\tthis._dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\r\n\r\n\t\t\tconst { _lodMax } = this;\r\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes( _lodMax ) );\r\n\r\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\r\n\r\n\t\t}\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\tasync _compileMaterial( material ) {\r\n\r\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\r\n\t\tawait this._renderer.compile( tmpMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\r\n\r\n\t\tconst cubeCamera = _cubeCamera;\r\n\t\tcubeCamera.near = near;\r\n\t\tcubeCamera.far = far;\r\n\r\n\t\t// px, py, pz, nx, ny, nz\r\n\t\tconst upSign = [ - 1, 1, - 1, - 1, - 1, - 1 ];\r\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\r\n\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.getClearColor( _clearColor );\r\n\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tlet backgroundBox = this._backgroundBox;\r\n\r\n\t\tif ( backgroundBox === null ) {\r\n\r\n\t\t\tconst backgroundMaterial = new MeshBasicMaterial( {\r\n\t\t\t\tname: 'PMREM.Background',\r\n\t\t\t\tside: BackSide,\r\n\t\t\t\tdepthWrite: false,\r\n\t\t\t\tdepthTest: false\r\n\t\t\t} );\r\n\r\n\t\t\tbackgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\r\n\r\n\t\t}\r\n\r\n\t\tlet useSolidColor = false;\r\n\t\tconst background = scene.background;\r\n\r\n\t\tif ( background ) {\r\n\r\n\t\t\tif ( background.isColor ) {\r\n\r\n\t\t\t\tbackgroundBox.material.color.copy( background );\r\n\t\t\t\tscene.background = null;\r\n\t\t\t\tuseSolidColor = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbackgroundBox.material.color.copy( _clearColor );\r\n\t\t\tuseSolidColor = true;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\r\n\t\trenderer.clear();\r\n\r\n\t\tif ( useSolidColor ) {\r\n\r\n\t\t\trenderer.render( backgroundBox, cubeCamera );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst col = i % 3;\r\n\r\n\t\t\tif ( col === 0 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\r\n\r\n\t\t\t} else if ( col === 1 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\r\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst size = this._cubeSize;\r\n\r\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\r\n\r\n\t\t\trenderer.render( scene, cubeCamera );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\tscene.background = background;\r\n\r\n\t}\r\n\r\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\r\n\r\n\t\tif ( isCubeTexture ) {\r\n\r\n\t\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\r\n\t\tmaterial.fragmentNode.value = texture;\r\n\r\n\t\tconst mesh = this._lodMeshes[ 0 ];\r\n\t\tmesh.material = material;\r\n\r\n\t\tconst size = this._cubeSize;\r\n\r\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\r\n\r\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\t\trenderer.render( mesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_applyPMREM( cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst autoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\t\tconst n = this._lodPlanes.length;\r\n\r\n\t\tfor ( let i = 1; i < n; i ++ ) {\r\n\r\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\r\n\r\n\t\t\tconst poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = autoClear;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\r\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\r\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\r\n\t * the poles) to approximate the orthogonally-separable blur. It is least\r\n\t * accurate at the poles, but still does a decent job.\r\n\t */\r\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\r\n\r\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tlodIn,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'latitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tlodOut,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'longitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t}\r\n\r\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst blurMaterial = this._blurMaterial;\r\n\r\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\r\n\r\n\t\t\tconsole.error( 'blur direction must be either latitudinal or longitudinal!' );\r\n\r\n\t\t}\r\n\r\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\r\n\t\tconst STANDARD_DEVIATIONS = 3;\r\n\r\n\t\tconst blurMesh = this._lodMeshes[ lodOut ];\r\n\t\tblurMesh.material = blurMaterial;\r\n\r\n\t\tconst blurUniforms = blurMaterial.uniforms;\r\n\r\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\r\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\r\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\r\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\r\n\r\n\t\tif ( samples > MAX_SAMPLES ) {\r\n\r\n\t\t\tconsole.warn( `sigmaRadians, ${\r\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\r\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\r\n\r\n\t\t}\r\n\r\n\t\tconst weights = [];\r\n\t\tlet sum = 0;\r\n\r\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\r\n\r\n\t\t\tconst x = i / sigmaPixels;\r\n\t\t\tconst weight = Math.exp( - x * x / 2 );\r\n\t\t\tweights.push( weight );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tsum += weight;\r\n\r\n\t\t\t} else if ( i < samples ) {\r\n\r\n\t\t\t\tsum += 2 * weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\r\n\r\n\t\t\tweights[ i ] = weights[ i ] / sum;\r\n\r\n\t\t}\r\n\r\n\t\ttargetIn.texture.frame = ( targetIn.texture.frame || 0 ) + 1;\r\n\r\n\t\tblurUniforms.envMap.value = targetIn.texture;\r\n\t\tblurUniforms.samples.value = samples;\r\n\t\tblurUniforms.weights.array = weights;\r\n\t\tblurUniforms.latitudinal.value = direction === 'latitudinal' ? 1 : 0;\r\n\r\n\t\tif ( poleAxis ) {\r\n\r\n\t\t\tblurUniforms.poleAxis.value = poleAxis;\r\n\r\n\t\t}\r\n\r\n\t\tconst { _lodMax } = this;\r\n\t\tblurUniforms.dTheta.value = radiansPerPixel;\r\n\t\tblurUniforms.mipInt.value = _lodMax - lodIn;\r\n\r\n\t\tconst outputSize = this._sizeLods[ lodOut ];\r\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\r\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\r\n\r\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\r\n\t\trenderer.setRenderTarget( targetOut );\r\n\t\trenderer.render( blurMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction _createPlanes( lodMax ) {\r\n\r\n\tconst lodPlanes = [];\r\n\tconst sizeLods = [];\r\n\tconst sigmas = [];\r\n\tconst lodMeshes = [];\r\n\r\n\tlet lod = lodMax;\r\n\r\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\r\n\r\n\tfor ( let i = 0; i < totalLods; i ++ ) {\r\n\r\n\t\tconst sizeLod = Math.pow( 2, lod );\r\n\t\tsizeLods.push( sizeLod );\r\n\t\tlet sigma = 1.0 / sizeLod;\r\n\r\n\t\tif ( i > lodMax - LOD_MIN ) {\r\n\r\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\r\n\r\n\t\t} else if ( i === 0 ) {\r\n\r\n\t\t\tsigma = 0;\r\n\r\n\t\t}\r\n\r\n\t\tsigmas.push( sigma );\r\n\r\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\r\n\t\tconst min = - texelSize;\r\n\t\tconst max = 1 + texelSize;\r\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\r\n\r\n\t\tconst cubeFaces = 6;\r\n\t\tconst vertices = 6;\r\n\t\tconst positionSize = 3;\r\n\t\tconst uvSize = 2;\r\n\t\tconst faceIndexSize = 1;\r\n\r\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\r\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\r\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\r\n\r\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\r\n\r\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\r\n\t\t\tconst y = face > 2 ? 0 : - 1;\r\n\t\t\tconst coordinates = [\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y + 1, 0\r\n\t\t\t];\r\n\r\n\t\t\tconst faceIdx = _faceLib[ face ];\r\n\t\t\tposition.set( coordinates, positionSize * vertices * faceIdx );\r\n\t\t\tuv.set( uv1, uvSize * vertices * faceIdx );\r\n\t\t\tconst fill = [ faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx ];\r\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * faceIdx );\r\n\r\n\t\t}\r\n\r\n\t\tconst planes = new BufferGeometry();\r\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\r\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\r\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\r\n\t\tlodPlanes.push( planes );\r\n\t\tlodMeshes.push( new Mesh( planes, null ) );\r\n\r\n\t\tif ( lod > LOD_MIN ) {\r\n\r\n\t\t\tlod --;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn { lodPlanes, sizeLods, sigmas, lodMeshes };\r\n\r\n}\r\n\r\nfunction _createRenderTarget( width, height, params ) {\r\n\r\n\tconst cubeUVRenderTarget = new RenderTarget( width, height, params );\r\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\r\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\r\n\tcubeUVRenderTarget.texture.isPMREMTexture = true;\r\n\tcubeUVRenderTarget.scissorTest = true;\r\n\treturn cubeUVRenderTarget;\r\n\r\n}\r\n\r\nfunction _setViewport( target, x, y, width, height ) {\r\n\r\n\ttarget.viewport.set( x, y, width, height );\r\n\ttarget.scissor.set( x, y, width, height );\r\n\r\n}\r\n\r\nfunction _getMaterial( type ) {\r\n\r\n\tconst material = new NodeMaterial();\r\n\tmaterial.depthTest = false;\r\n\tmaterial.depthWrite = false;\r\n\tmaterial.blending = NoBlending;\r\n\tmaterial.name = `PMREM_${ type }`;\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getBlurShader( lodMax, width, height ) {\r\n\r\n\tconst weights = uniformArray( new Array( MAX_SAMPLES ).fill( 0 ) );\r\n\tconst poleAxis = uniform( new Vector3( 0, 1, 0 ) );\r\n\tconst dTheta = uniform( 0 );\r\n\tconst n = float( MAX_SAMPLES );\r\n\tconst latitudinal = uniform( 0 ); // false, bool\r\n\tconst samples = uniform( 1 ); // int\r\n\tconst envMap = texture( null );\r\n\tconst mipInt = uniform( 0 ); // int\r\n\tconst CUBEUV_TEXEL_WIDTH = float( 1 / width );\r\n\tconst CUBEUV_TEXEL_HEIGHT = float( 1 / height );\r\n\tconst CUBEUV_MAX_MIP = float( lodMax );\r\n\r\n\tconst materialUniforms = {\r\n\t\tn,\r\n\t\tlatitudinal,\r\n\t\tweights,\r\n\t\tpoleAxis,\r\n\t\toutputDirection,\r\n\t\tdTheta,\r\n\t\tsamples,\r\n\t\tenvMap,\r\n\t\tmipInt,\r\n\t\tCUBEUV_TEXEL_WIDTH,\r\n\t\tCUBEUV_TEXEL_HEIGHT,\r\n\t\tCUBEUV_MAX_MIP\r\n\t};\r\n\r\n\tconst material = _getMaterial( 'blur' );\r\n\tmaterial.uniforms = materialUniforms; // TODO: Move to outside of the material\r\n\tmaterial.fragmentNode = blur( { ...materialUniforms, latitudinal: latitudinal.equal( 1 ) } );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getCubemapMaterial( envTexture ) {\r\n\r\n\tconst material = _getMaterial( 'cubemap' );\r\n\tmaterial.fragmentNode = cubeTexture( envTexture, outputDirection );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getEquirectMaterial( envTexture ) {\r\n\r\n\tconst material = _getMaterial( 'equirect' );\r\n\tmaterial.fragmentNode = texture( envTexture, equirectUV( outputDirection ), 0 );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nexport default PMREMGenerator;\r\n", "let _id = 0;\r\n\r\nclass BindGroup {\r\n\r\n\tconstructor( name = '', bindings = [], index = 0, bindingsReference = [] ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.bindings = bindings;\r\n\t\tthis.index = index;\r\n\t\tthis.bindingsReference = bindingsReference;\r\n\r\n\t\tthis.id = _id ++;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BindGroup;\r\n", "import NodeUniform from './NodeUniform.js';\r\nimport NodeAttribute from './NodeAttribute.js';\r\nimport NodeVarying from './NodeVarying.js';\r\nimport NodeVar from './NodeVar.js';\r\nimport NodeCode from './NodeCode.js';\r\nimport NodeCache from './NodeCache.js';\r\nimport ParameterNode from './ParameterNode.js';\r\nimport FunctionNode from '../code/FunctionNode.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\nimport { NodeUpdateType, defaultBuildStages, shaderStages } from './constants.js';\r\n\r\nimport {\r\n\tNumberNodeUniform, Vector2NodeUniform, Vector3NodeUniform, Vector4NodeUniform,\r\n\tColorNodeUniform, Matrix3NodeUniform, Matrix4NodeUniform\r\n} from '../../renderers/common/nodes/NodeUniform.js';\r\n\r\nimport { stack } from './StackNode.js';\r\nimport { getCurrentStack, setCurrentStack } from '../tsl/TSLBase.js';\r\n\r\nimport CubeRenderTarget from '../../renderers/common/CubeRenderTarget.js';\r\nimport ChainMap from '../../renderers/common/ChainMap.js';\r\n\r\nimport PMREMGenerator from '../../renderers/common/extras/PMREMGenerator.js';\r\n\r\nimport BindGroup from '../../renderers/common/BindGroup.js';\r\n\r\nimport { REVISION } from '../../constants.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { Float16BufferAttribute } from '../../core/BufferAttribute.js';\r\nimport { IntType, UnsignedIntType, LinearFilter, LinearMipmapNearestFilter, NearestMipmapLinearFilter, LinearMipmapLinearFilter } from '../../constants.js';\r\n\r\nconst rendererCache = new WeakMap();\r\n\r\nconst typeFromLength = new Map( [\r\n\t[ 2, 'vec2' ],\r\n\t[ 3, 'vec3' ],\r\n\t[ 4, 'vec4' ],\r\n\t[ 9, 'mat3' ],\r\n\t[ 16, 'mat4' ]\r\n] );\r\n\r\nconst typeFromArray = new Map( [\r\n\t[ Int8Array, 'int' ],\r\n\t[ Int16Array, 'int' ],\r\n\t[ Int32Array, 'int' ],\r\n\t[ Uint8Array, 'uint' ],\r\n\t[ Uint16Array, 'uint' ],\r\n\t[ Uint32Array, 'uint' ],\r\n\t[ Float32Array, 'float' ]\r\n] );\r\n\r\nconst toFloat = ( value ) => {\r\n\r\n\tvalue = Number( value );\r\n\r\n\treturn value + ( value % 1 ? '' : '.0' );\r\n\r\n};\r\n\r\nclass NodeBuilder {\r\n\r\n\tconstructor( object, renderer, parser ) {\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.material = ( object && object.material ) || null;\r\n\t\tthis.geometry = ( object && object.geometry ) || null;\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.parser = parser;\r\n\t\tthis.scene = null;\r\n\t\tthis.camera = null;\r\n\r\n\t\tthis.nodes = [];\r\n\t\tthis.updateNodes = [];\r\n\t\tthis.updateBeforeNodes = [];\r\n\t\tthis.updateAfterNodes = [];\r\n\t\tthis.hashNodes = {};\r\n\r\n\t\tthis.monitor = null;\r\n\r\n\t\tthis.lightsNode = null;\r\n\t\tthis.environmentNode = null;\r\n\t\tthis.fogNode = null;\r\n\r\n\t\tthis.clippingContext = null;\r\n\r\n\t\tthis.vertexShader = null;\r\n\t\tthis.fragmentShader = null;\r\n\t\tthis.computeShader = null;\r\n\r\n\t\tthis.flowNodes = { vertex: [], fragment: [], compute: [] };\r\n\t\tthis.flowCode = { vertex: '', fragment: '', compute: '' };\r\n\t\tthis.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };\r\n\t\tthis.structs = { vertex: [], fragment: [], compute: [], index: 0 };\r\n\t\tthis.bindings = { vertex: {}, fragment: {}, compute: {} };\r\n\t\tthis.bindingsIndexes = {};\r\n\t\tthis.bindGroups = null;\r\n\t\tthis.attributes = [];\r\n\t\tthis.bufferAttributes = [];\r\n\t\tthis.varyings = [];\r\n\t\tthis.codes = {};\r\n\t\tthis.vars = {};\r\n\t\tthis.flow = { code: '' };\r\n\t\tthis.chaining = [];\r\n\t\tthis.stack = stack();\r\n\t\tthis.stacks = [];\r\n\t\tthis.tab = '\\t';\r\n\r\n\t\tthis.currentFunctionNode = null;\r\n\r\n\t\tthis.context = {\r\n\t\t\tmaterial: this.material\r\n\t\t};\r\n\r\n\t\tthis.cache = new NodeCache();\r\n\t\tthis.globalCache = this.cache;\r\n\r\n\t\tthis.flowsData = new WeakMap();\r\n\r\n\t\tthis.shaderStage = null;\r\n\t\tthis.buildStage = null;\r\n\r\n\t\tthis.useComparisonMethod = false;\r\n\r\n\t}\r\n\r\n\tgetBindGroupsCache() {\r\n\r\n\t\tlet bindGroupsCache = rendererCache.get( this.renderer );\r\n\r\n\t\tif ( bindGroupsCache === undefined ) {\r\n\r\n\t\t\tbindGroupsCache = new ChainMap();\r\n\r\n\t\t\trendererCache.set( this.renderer, bindGroupsCache );\r\n\r\n\t\t}\r\n\r\n\t\treturn bindGroupsCache;\r\n\r\n\t}\r\n\r\n\tcreateRenderTarget( width, height, options ) {\r\n\r\n\t\treturn new RenderTarget( width, height, options );\r\n\r\n\t}\r\n\r\n\tcreateCubeRenderTarget( size, options ) {\r\n\r\n\t\treturn new CubeRenderTarget( size, options );\r\n\r\n\t}\r\n\r\n\tcreatePMREMGenerator() {\r\n\r\n\t\t// TODO: Move Materials.js to outside of the Nodes.js in order to remove this function and improve tree-shaking support\r\n\r\n\t\treturn new PMREMGenerator( this.renderer );\r\n\r\n\t}\r\n\r\n\tincludes( node ) {\r\n\r\n\t\treturn this.nodes.includes( node );\r\n\r\n\t}\r\n\r\n\t_getBindGroup( groupName, bindings ) {\r\n\r\n\t\tconst bindGroupsCache = this.getBindGroupsCache();\r\n\r\n\t\t//\r\n\r\n\t\tconst bindingsArray = [];\r\n\r\n\t\tlet sharedGroup = true;\r\n\r\n\t\tfor ( const binding of bindings ) {\r\n\r\n\t\t\tbindingsArray.push( binding );\r\n\r\n\t\t\tsharedGroup = sharedGroup && binding.groupNode.shared !== true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tlet bindGroup;\r\n\r\n\t\tif ( sharedGroup ) {\r\n\r\n\t\t\tbindGroup = bindGroupsCache.get( bindingsArray );\r\n\r\n\t\t\tif ( bindGroup === undefined ) {\r\n\r\n\t\t\t\tbindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );\r\n\r\n\t\t\t\tbindGroupsCache.set( bindingsArray, bindGroup );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );\r\n\r\n\t\t}\r\n\r\n\t\treturn bindGroup;\r\n\r\n\t}\r\n\r\n\tgetBindGroupArray( groupName, shaderStage ) {\r\n\r\n\t\tconst bindings = this.bindings[ shaderStage ];\r\n\r\n\t\tlet bindGroup = bindings[ groupName ];\r\n\r\n\t\tif ( bindGroup === undefined ) {\r\n\r\n\t\t\tif ( this.bindingsIndexes[ groupName ] === undefined ) {\r\n\r\n\t\t\t\tthis.bindingsIndexes[ groupName ] = { binding: 0, group: Object.keys( this.bindingsIndexes ).length };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindings[ groupName ] = bindGroup = [];\r\n\r\n\t\t}\r\n\r\n\t\treturn bindGroup;\r\n\r\n\t}\r\n\r\n\tgetBindings() {\r\n\r\n\t\tlet bindingsGroups = this.bindGroups;\r\n\r\n\t\tif ( bindingsGroups === null ) {\r\n\r\n\t\t\tconst groups = {};\r\n\t\t\tconst bindings = this.bindings;\r\n\r\n\t\t\tfor ( const shaderStage of shaderStages ) {\r\n\r\n\t\t\t\tfor ( const groupName in bindings[ shaderStage ] ) {\r\n\r\n\t\t\t\t\tconst uniforms = bindings[ shaderStage ][ groupName ];\r\n\r\n\t\t\t\t\tconst groupUniforms = groups[ groupName ] || ( groups[ groupName ] = [] );\r\n\t\t\t\t\tgroupUniforms.push( ...uniforms );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingsGroups = [];\r\n\r\n\t\t\tfor ( const groupName in groups ) {\r\n\r\n\t\t\t\tconst group = groups[ groupName ];\r\n\r\n\t\t\t\tconst bindingsGroup = this._getBindGroup( groupName, group );\r\n\r\n\t\t\t\tbindingsGroups.push( bindingsGroup );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.bindGroups = bindingsGroups;\r\n\r\n\t\t}\r\n\r\n\t\treturn bindingsGroups;\r\n\r\n\t}\r\n\r\n\tsortBindingGroups() {\r\n\r\n\t\tconst bindingsGroups = this.getBindings();\r\n\r\n\t\tbindingsGroups.sort( ( a, b ) => ( a.bindings[ 0 ].groupNode.order - b.bindings[ 0 ].groupNode.order ) );\r\n\r\n\t\tfor ( let i = 0; i < bindingsGroups.length; i ++ ) {\r\n\r\n\t\t\tconst bindingGroup = bindingsGroups[ i ];\r\n\t\t\tthis.bindingsIndexes[ bindingGroup.name ].group = i;\r\n\r\n\t\t\tbindingGroup.index = i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetHashNode( node, hash ) {\r\n\r\n\t\tthis.hashNodes[ hash ] = node;\r\n\r\n\t}\r\n\r\n\taddNode( node ) {\r\n\r\n\t\tif ( this.nodes.includes( node ) === false ) {\r\n\r\n\t\t\tthis.nodes.push( node );\r\n\r\n\t\t\tthis.setHashNode( node, node.getHash( this ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbuildUpdateNodes() {\r\n\r\n\t\tfor ( const node of this.nodes ) {\r\n\r\n\t\t\tconst updateType = node.getUpdateType();\r\n\t\t\tconst updateBeforeType = node.getUpdateBeforeType();\r\n\t\t\tconst updateAfterType = node.getUpdateAfterType();\r\n\r\n\t\t\tif ( updateType !== NodeUpdateType.NONE ) {\r\n\r\n\t\t\t\tthis.updateNodes.push( node.getSelf() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( updateBeforeType !== NodeUpdateType.NONE ) {\r\n\r\n\t\t\t\tthis.updateBeforeNodes.push( node.getSelf() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( updateAfterType !== NodeUpdateType.NONE ) {\r\n\r\n\t\t\t\tthis.updateAfterNodes.push( node.getSelf() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tget currentNode() {\r\n\r\n\t\treturn this.chaining[ this.chaining.length - 1 ];\r\n\r\n\t}\r\n\r\n\tisFilteredTexture( texture ) {\r\n\r\n\t\treturn ( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||\r\n\t\t\ttexture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter );\r\n\r\n\t}\r\n\r\n\taddChain( node ) {\r\n\r\n\t\t/*\r\n\t\tif ( this.chaining.indexOf( node ) !== - 1 ) {\r\n\r\n\t\t\tconsole.warn( 'Recursive node: ', node );\r\n\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tthis.chaining.push( node );\r\n\r\n\t}\r\n\r\n\tremoveChain( node ) {\r\n\r\n\t\tconst lastChain = this.chaining.pop();\r\n\r\n\t\tif ( lastChain !== node ) {\r\n\r\n\t\t\tthrow new Error( 'NodeBuilder: Invalid node chaining!' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetMethod( method ) {\r\n\r\n\t\treturn method;\r\n\r\n\t}\r\n\r\n\tgetNodeFromHash( hash ) {\r\n\r\n\t\treturn this.hashNodes[ hash ];\r\n\r\n\t}\r\n\r\n\taddFlow( shaderStage, node ) {\r\n\r\n\t\tthis.flowNodes[ shaderStage ].push( node );\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetContext( context ) {\r\n\r\n\t\tthis.context = context;\r\n\r\n\t}\r\n\r\n\tgetContext() {\r\n\r\n\t\treturn this.context;\r\n\r\n\t}\r\n\r\n\tgetSharedContext() {\r\n\r\n\t\tconst context = { ...this.context };\r\n\r\n\t\tdelete context.material;\r\n\r\n\t\treturn this.context;\r\n\r\n\t}\r\n\r\n\tsetCache( cache ) {\r\n\r\n\t\tthis.cache = cache;\r\n\r\n\t}\r\n\r\n\tgetCache() {\r\n\r\n\t\treturn this.cache;\r\n\r\n\t}\r\n\r\n\tgetCacheFromNode( node, parent = true ) {\r\n\r\n\t\tconst data = this.getDataFromNode( node );\r\n\t\tif ( data.cache === undefined ) data.cache = new NodeCache( parent ? this.getCache() : null );\r\n\r\n\t\treturn data.cache;\r\n\r\n\t}\r\n\r\n\tisAvailable( /*name*/ ) {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetVertexIndex() {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgetInstanceIndex() {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgetDrawIndex() {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgetFrontFacing() {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgetFragCoord() {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tisFlipY() {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tincreaseUsage( node ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node );\r\n\t\tnodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;\r\n\r\n\t\treturn nodeData.usageCount;\r\n\r\n\t}\r\n\r\n\tgenerateTexture( /* texture, textureProperty, uvSnippet */ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgenerateTextureLod( /* texture, textureProperty, uvSnippet, levelSnippet */ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgenerateConst( type, value = null ) {\r\n\r\n\t\tif ( value === null ) {\r\n\r\n\t\t\tif ( type === 'float' || type === 'int' || type === 'uint' ) value = 0;\r\n\t\t\telse if ( type === 'bool' ) value = false;\r\n\t\t\telse if ( type === 'color' ) value = new Color();\r\n\t\t\telse if ( type === 'vec2' ) value = new Vector2();\r\n\t\t\telse if ( type === 'vec3' ) value = new Vector3();\r\n\t\t\telse if ( type === 'vec4' ) value = new Vector4();\r\n\r\n\t\t}\r\n\r\n\t\tif ( type === 'float' ) return toFloat( value );\r\n\t\tif ( type === 'int' ) return `${ Math.round( value ) }`;\r\n\t\tif ( type === 'uint' ) return value >= 0 ? `${ Math.round( value ) }u` : '0u';\r\n\t\tif ( type === 'bool' ) return value ? 'true' : 'false';\r\n\t\tif ( type === 'color' ) return `${ this.getType( 'vec3' ) }( ${ toFloat( value.r ) }, ${ toFloat( value.g ) }, ${ toFloat( value.b ) } )`;\r\n\r\n\t\tconst typeLength = this.getTypeLength( type );\r\n\r\n\t\tconst componentType = this.getComponentType( type );\r\n\r\n\t\tconst generateConst = value => this.generateConst( componentType, value );\r\n\r\n\t\tif ( typeLength === 2 ) {\r\n\r\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) } )`;\r\n\r\n\t\t} else if ( typeLength === 3 ) {\r\n\r\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) } )`;\r\n\r\n\t\t} else if ( typeLength === 4 ) {\r\n\r\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) }, ${ generateConst( value.w ) } )`;\r\n\r\n\t\t} else if ( typeLength > 4 && value && ( value.isMatrix3 || value.isMatrix4 ) ) {\r\n\r\n\t\t\treturn `${ this.getType( type ) }( ${ value.elements.map( generateConst ).join( ', ' ) } )`;\r\n\r\n\t\t} else if ( typeLength > 4 ) {\r\n\r\n\t\t\treturn `${ this.getType( type ) }()`;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( `NodeBuilder: Type '${type}' not found in generate constant attempt.` );\r\n\r\n\t}\r\n\r\n\tgetType( type ) {\r\n\r\n\t\tif ( type === 'color' ) return 'vec3';\r\n\r\n\t\treturn type;\r\n\r\n\t}\r\n\r\n\thasGeometryAttribute( name ) {\r\n\r\n\t\treturn this.geometry && this.geometry.getAttribute( name ) !== undefined;\r\n\r\n\t}\r\n\r\n\tgetAttribute( name, type ) {\r\n\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\t// find attribute\r\n\r\n\t\tfor ( const attribute of attributes ) {\r\n\r\n\t\t\tif ( attribute.name === name ) {\r\n\r\n\t\t\t\treturn attribute;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// create a new if no exist\r\n\r\n\t\tconst attribute = new NodeAttribute( name, type );\r\n\r\n\t\tattributes.push( attribute );\r\n\r\n\t\treturn attribute;\r\n\r\n\t}\r\n\r\n\tgetPropertyName( node/*, shaderStage*/ ) {\r\n\r\n\t\treturn node.name;\r\n\r\n\t}\r\n\r\n\tisVector( type ) {\r\n\r\n\t\treturn /vec\\d/.test( type );\r\n\r\n\t}\r\n\r\n\tisMatrix( type ) {\r\n\r\n\t\treturn /mat\\d/.test( type );\r\n\r\n\t}\r\n\r\n\tisReference( type ) {\r\n\r\n\t\treturn type === 'void' || type === 'property' || type === 'sampler' || type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'depthTexture' || type === 'texture3D';\r\n\r\n\t}\r\n\r\n\tneedsToWorkingColorSpace( /*texture*/ ) {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetComponentTypeFromTexture( texture ) {\r\n\r\n\t\tconst type = texture.type;\r\n\r\n\t\tif ( texture.isDataTexture ) {\r\n\r\n\t\t\tif ( type === IntType ) return 'int';\r\n\t\t\tif ( type === UnsignedIntType ) return 'uint';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'float';\r\n\r\n\t}\r\n\r\n\tgetElementType( type ) {\r\n\r\n\t\tif ( type === 'mat2' ) return 'vec2';\r\n\t\tif ( type === 'mat3' ) return 'vec3';\r\n\t\tif ( type === 'mat4' ) return 'vec4';\r\n\r\n\t\treturn this.getComponentType( type );\r\n\r\n\t}\r\n\r\n\tgetComponentType( type ) {\r\n\r\n\t\ttype = this.getVectorType( type );\r\n\r\n\t\tif ( type === 'float' || type === 'bool' || type === 'int' || type === 'uint' ) return type;\r\n\r\n\t\tconst componentType = /(b|i|u|)(vec|mat)([2-4])/.exec( type );\r\n\r\n\t\tif ( componentType === null ) return null;\r\n\r\n\t\tif ( componentType[ 1 ] === 'b' ) return 'bool';\r\n\t\tif ( componentType[ 1 ] === 'i' ) return 'int';\r\n\t\tif ( componentType[ 1 ] === 'u' ) return 'uint';\r\n\r\n\t\treturn 'float';\r\n\r\n\t}\r\n\r\n\tgetVectorType( type ) {\r\n\r\n\t\tif ( type === 'color' ) return 'vec3';\r\n\t\tif ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) return 'vec4';\r\n\r\n\t\treturn type;\r\n\r\n\t}\r\n\r\n\tgetTypeFromLength( length, componentType = 'float' ) {\r\n\r\n\t\tif ( length === 1 ) return componentType;\r\n\r\n\t\tconst baseType = typeFromLength.get( length );\r\n\t\tconst prefix = componentType === 'float' ? '' : componentType[ 0 ];\r\n\r\n\t\treturn prefix + baseType;\r\n\r\n\t}\r\n\r\n\tgetTypeFromArray( array ) {\r\n\r\n\t\treturn typeFromArray.get( array.constructor );\r\n\r\n\t}\r\n\r\n\tgetTypeFromAttribute( attribute ) {\r\n\r\n\t\tlet dataAttribute = attribute;\r\n\r\n\t\tif ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;\r\n\r\n\t\tconst array = dataAttribute.array;\r\n\t\tconst itemSize = attribute.itemSize;\r\n\t\tconst normalized = attribute.normalized;\r\n\r\n\t\tlet arrayType;\r\n\r\n\t\tif ( ! ( attribute instanceof Float16BufferAttribute ) && normalized !== true ) {\r\n\r\n\t\t\tarrayType = this.getTypeFromArray( array );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.getTypeFromLength( itemSize, arrayType );\r\n\r\n\t}\r\n\r\n\tgetTypeLength( type ) {\r\n\r\n\t\tconst vecType = this.getVectorType( type );\r\n\t\tconst vecNum = /vec([2-4])/.exec( vecType );\r\n\r\n\t\tif ( vecNum !== null ) return Number( vecNum[ 1 ] );\r\n\t\tif ( vecType === 'float' || vecType === 'bool' || vecType === 'int' || vecType === 'uint' ) return 1;\r\n\t\tif ( /mat2/.test( type ) === true ) return 4;\r\n\t\tif ( /mat3/.test( type ) === true ) return 9;\r\n\t\tif ( /mat4/.test( type ) === true ) return 16;\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n\tgetVectorFromMatrix( type ) {\r\n\r\n\t\treturn type.replace( 'mat', 'vec' );\r\n\r\n\t}\r\n\r\n\tchangeComponentType( type, newComponentType ) {\r\n\r\n\t\treturn this.getTypeFromLength( this.getTypeLength( type ), newComponentType );\r\n\r\n\t}\r\n\r\n\tgetIntegerType( type ) {\r\n\r\n\t\tconst componentType = this.getComponentType( type );\r\n\r\n\t\tif ( componentType === 'int' || componentType === 'uint' ) return type;\r\n\r\n\t\treturn this.changeComponentType( type, 'int' );\r\n\r\n\t}\r\n\r\n\taddStack() {\r\n\r\n\t\tthis.stack = stack( this.stack );\r\n\r\n\t\tthis.stacks.push( getCurrentStack() || this.stack );\r\n\t\tsetCurrentStack( this.stack );\r\n\r\n\t\treturn this.stack;\r\n\r\n\t}\r\n\r\n\tremoveStack() {\r\n\r\n\t\tconst lastStack = this.stack;\r\n\t\tthis.stack = lastStack.parent;\r\n\r\n\t\tsetCurrentStack( this.stacks.pop() );\r\n\r\n\t\treturn lastStack;\r\n\r\n\t}\r\n\r\n\tgetDataFromNode( node, shaderStage = this.shaderStage, cache = null ) {\r\n\r\n\t\tcache = cache === null ? ( node.isGlobal( this ) ? this.globalCache : this.cache ) : cache;\r\n\r\n\t\tlet nodeData = cache.getData( node );\r\n\r\n\t\tif ( nodeData === undefined ) {\r\n\r\n\t\t\tnodeData = {};\r\n\r\n\t\t\tcache.setData( node, nodeData );\r\n\r\n\t\t}\r\n\r\n\t\tif ( nodeData[ shaderStage ] === undefined ) nodeData[ shaderStage ] = {};\r\n\r\n\t\treturn nodeData[ shaderStage ];\r\n\r\n\t}\r\n\r\n\tgetNodeProperties( node, shaderStage = 'any' ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\r\n\r\n\t\treturn nodeData.properties || ( nodeData.properties = { outputNode: null } );\r\n\r\n\t}\r\n\r\n\tgetBufferAttributeFromNode( node, type ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node );\r\n\r\n\t\tlet bufferAttribute = nodeData.bufferAttribute;\r\n\r\n\t\tif ( bufferAttribute === undefined ) {\r\n\r\n\t\t\tconst index = this.uniforms.index ++;\r\n\r\n\t\t\tbufferAttribute = new NodeAttribute( 'nodeAttribute' + index, type, node );\r\n\r\n\t\t\tthis.bufferAttributes.push( bufferAttribute );\r\n\r\n\t\t\tnodeData.bufferAttribute = bufferAttribute;\r\n\r\n\t\t}\r\n\r\n\t\treturn bufferAttribute;\r\n\r\n\t}\r\n\r\n\tgetStructTypeFromNode( node, shaderStage = this.shaderStage ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\r\n\r\n\t\tif ( nodeData.structType === undefined ) {\r\n\r\n\t\t\tconst index = this.structs.index ++;\r\n\r\n\t\t\tnode.name = `StructType${ index }`;\r\n\t\t\tthis.structs[ shaderStage ].push( node );\r\n\r\n\t\t\tnodeData.structType = node;\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tgetUniformFromNode( node, type, shaderStage = this.shaderStage, name = null ) {\r\n\r\n\t\tif ( name === 'in' ) {\r\n\r\n\t\t\tconsole.warn( 'NodeBuilder: \"in\" is a reserved word, using \"inValue\" instead.', node, name \t);\r\n\t\t\tnode.name = 'inValue';\r\n\t\t\tname = node.name;\r\n\r\n\t\t}\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\r\n\r\n\t\tlet nodeUniform = nodeData.uniform;\r\n\r\n\t\tif ( nodeUniform === undefined ) {\r\n\r\n\t\t\tconst index = this.uniforms.index ++;\r\n\r\n\t\t\tnodeUniform = new NodeUniform( name || ( 'nodeUniform' + index ), type, node );\r\n\r\n\t\t\tthis.uniforms[ shaderStage ].push( nodeUniform );\r\n\r\n\t\t\tnodeData.uniform = nodeUniform;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeUniform;\r\n\r\n\t}\r\n\r\n\tgetVarFromNode( node, name = null, type = node.getNodeType( this ), shaderStage = this.shaderStage ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\r\n\r\n\t\tlet nodeVar = nodeData.variable;\r\n\r\n\t\tif ( nodeVar === undefined ) {\r\n\r\n\t\t\tconst vars = this.vars[ shaderStage ] || ( this.vars[ shaderStage ] = [] );\r\n\r\n\t\t\tif ( name === null ) name = 'nodeVar' + vars.length;\r\n\r\n\t\t\tnodeVar = new NodeVar( name, type );\r\n\r\n\t\t\tvars.push( nodeVar );\r\n\r\n\t\t\tnodeData.variable = nodeVar;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeVar;\r\n\r\n\t}\r\n\r\n\tgetVaryingFromNode( node, name = null, type = node.getNodeType( this ) ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node, 'any' );\r\n\r\n\t\tlet nodeVarying = nodeData.varying;\r\n\r\n\t\tif ( nodeVarying === undefined ) {\r\n\r\n\t\t\tconst varyings = this.varyings;\r\n\t\t\tconst index = varyings.length;\r\n\r\n\t\t\tif ( name === null ) name = 'nodeVarying' + index;\r\n\r\n\t\t\tnodeVarying = new NodeVarying( name, type );\r\n\r\n\t\t\tvaryings.push( nodeVarying );\r\n\r\n\t\t\tnodeData.varying = nodeVarying;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeVarying;\r\n\r\n\t}\r\n\r\n\tgetCodeFromNode( node, type, shaderStage = this.shaderStage ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node );\r\n\r\n\t\tlet nodeCode = nodeData.code;\r\n\r\n\t\tif ( nodeCode === undefined ) {\r\n\r\n\t\t\tconst codes = this.codes[ shaderStage ] || ( this.codes[ shaderStage ] = [] );\r\n\t\t\tconst index = codes.length;\r\n\r\n\t\t\tnodeCode = new NodeCode( 'nodeCode' + index, type );\r\n\r\n\t\t\tcodes.push( nodeCode );\r\n\r\n\t\t\tnodeData.code = nodeCode;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeCode;\r\n\r\n\t}\r\n\r\n\taddFlowCodeHierarchy( node, nodeBlock ) {\r\n\r\n\t\tconst { flowCodes, flowCodeBlock } = this.getDataFromNode( node );\r\n\r\n\t\tlet needsFlowCode = true;\r\n\t\tlet nodeBlockHierarchy = nodeBlock;\r\n\r\n\t\twhile ( nodeBlockHierarchy ) {\r\n\r\n\t\t\tif ( flowCodeBlock.get( nodeBlockHierarchy ) === true ) {\r\n\r\n\t\t\t\tneedsFlowCode = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnodeBlockHierarchy = this.getDataFromNode( nodeBlockHierarchy ).parentNodeBlock;\r\n\r\n\t\t}\r\n\r\n\t\tif ( needsFlowCode ) {\r\n\r\n\t\t\tfor ( const flowCode of flowCodes ) {\r\n\r\n\t\t\t\tthis.addLineFlowCode( flowCode );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\taddLineFlowCodeBlock( node, code, nodeBlock ) {\r\n\r\n\t\tconst nodeData = this.getDataFromNode( node );\r\n\t\tconst flowCodes = nodeData.flowCodes || ( nodeData.flowCodes = [] );\r\n\t\tconst codeBlock = nodeData.flowCodeBlock || ( nodeData.flowCodeBlock = new WeakMap() );\r\n\r\n\t\tflowCodes.push( code );\r\n\t\tcodeBlock.set( nodeBlock, true );\r\n\r\n\t}\r\n\r\n\taddLineFlowCode( code, node = null ) {\r\n\r\n\t\tif ( code === '' ) return this;\r\n\r\n\t\tif ( node !== null && this.context.nodeBlock ) {\r\n\r\n\t\t\tthis.addLineFlowCodeBlock( node, code, this.context.nodeBlock );\r\n\r\n\t\t}\r\n\r\n\t\tcode = this.tab + code;\r\n\r\n\t\tif ( ! /;\\s*$/.test( code ) ) {\r\n\r\n\t\t\tcode = code + ';\\n';\r\n\r\n\t\t}\r\n\r\n\t\tthis.flow.code += code;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddFlowCode( code ) {\r\n\r\n\t\tthis.flow.code += code;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddFlowTab() {\r\n\r\n\t\tthis.tab += '\\t';\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremoveFlowTab() {\r\n\r\n\t\tthis.tab = this.tab.slice( 0, - 1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetFlowData( node/*, shaderStage*/ ) {\r\n\r\n\t\treturn this.flowsData.get( node );\r\n\r\n\t}\r\n\r\n\tflowNode( node ) {\r\n\r\n\t\tconst output = node.getNodeType( this );\r\n\r\n\t\tconst flowData = this.flowChildNode( node, output );\r\n\r\n\t\tthis.flowsData.set( node, flowData );\r\n\r\n\t\treturn flowData;\r\n\r\n\t}\r\n\r\n\tbuildFunctionNode( shaderNode ) {\r\n\r\n\t\tconst fn = new FunctionNode();\r\n\r\n\t\tconst previous = this.currentFunctionNode;\r\n\r\n\t\tthis.currentFunctionNode = fn;\r\n\r\n\t\tfn.code = this.buildFunctionCode( shaderNode );\r\n\r\n\t\tthis.currentFunctionNode = previous;\r\n\r\n\t\treturn fn;\r\n\r\n\t}\r\n\r\n\tflowShaderNode( shaderNode ) {\r\n\r\n\t\tconst layout = shaderNode.layout;\r\n\r\n\t\tconst inputs = {\r\n\t\t\t[ Symbol.iterator ]() {\r\n\r\n\t\t\t\tlet index = 0;\r\n\t\t\t\tconst values = Object.values( this );\r\n\t\t\t\treturn {\r\n\t\t\t\t\tnext: () => ( {\r\n\t\t\t\t\t\tvalue: values[ index ],\r\n\t\t\t\t\t\tdone: index ++ >= values.length\r\n\t\t\t\t\t} )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfor ( const input of layout.inputs ) {\r\n\r\n\t\t\tinputs[ input.name ] = new ParameterNode( input.type, input.name );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tshaderNode.layout = null;\r\n\r\n\t\tconst callNode = shaderNode.call( inputs );\r\n\t\tconst flowData = this.flowStagesNode( callNode, layout.type );\r\n\r\n\t\tshaderNode.layout = layout;\r\n\r\n\t\treturn flowData;\r\n\r\n\t}\r\n\r\n\tflowStagesNode( node, output = null ) {\r\n\r\n\t\tconst previousFlow = this.flow;\r\n\t\tconst previousVars = this.vars;\r\n\t\tconst previousCache = this.cache;\r\n\t\tconst previousBuildStage = this.buildStage;\r\n\t\tconst previousStack = this.stack;\r\n\r\n\t\tconst flow = {\r\n\t\t\tcode: ''\r\n\t\t};\r\n\r\n\t\tthis.flow = flow;\r\n\t\tthis.vars = {};\r\n\t\tthis.cache = new NodeCache();\r\n\t\tthis.stack = stack();\r\n\r\n\t\tfor ( const buildStage of defaultBuildStages ) {\r\n\r\n\t\t\tthis.setBuildStage( buildStage );\r\n\r\n\t\t\tflow.result = node.build( this, output );\r\n\r\n\t\t}\r\n\r\n\t\tflow.vars = this.getVars( this.shaderStage );\r\n\r\n\t\tthis.flow = previousFlow;\r\n\t\tthis.vars = previousVars;\r\n\t\tthis.cache = previousCache;\r\n\t\tthis.stack = previousStack;\r\n\r\n\t\tthis.setBuildStage( previousBuildStage );\r\n\r\n\t\treturn flow;\r\n\r\n\t}\r\n\r\n\tgetFunctionOperator() {\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tflowChildNode( node, output = null ) {\r\n\r\n\t\tconst previousFlow = this.flow;\r\n\r\n\t\tconst flow = {\r\n\t\t\tcode: ''\r\n\t\t};\r\n\r\n\t\tthis.flow = flow;\r\n\r\n\t\tflow.result = node.build( this, output );\r\n\r\n\t\tthis.flow = previousFlow;\r\n\r\n\t\treturn flow;\r\n\r\n\t}\r\n\r\n\tflowNodeFromShaderStage( shaderStage, node, output = null, propertyName = null ) {\r\n\r\n\t\tconst previousShaderStage = this.shaderStage;\r\n\r\n\t\tthis.setShaderStage( shaderStage );\r\n\r\n\t\tconst flowData = this.flowChildNode( node, output );\r\n\r\n\t\tif ( propertyName !== null ) {\r\n\r\n\t\t\tflowData.code += `${ this.tab + propertyName } = ${ flowData.result };\\n`;\r\n\r\n\t\t}\r\n\r\n\t\tthis.flowCode[ shaderStage ] = this.flowCode[ shaderStage ] + flowData.code;\r\n\r\n\t\tthis.setShaderStage( previousShaderStage );\r\n\r\n\t\treturn flowData;\r\n\r\n\t}\r\n\r\n\tgetAttributesArray() {\r\n\r\n\t\treturn this.attributes.concat( this.bufferAttributes );\r\n\r\n\t}\r\n\r\n\tgetAttributes( /*shaderStage*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgetVaryings( /*shaderStage*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgetVar( type, name ) {\r\n\r\n\t\treturn `${ this.getType( type ) } ${ name }`;\r\n\r\n\t}\r\n\r\n\tgetVars( shaderStage ) {\r\n\r\n\t\tlet snippet = '';\r\n\r\n\t\tconst vars = this.vars[ shaderStage ];\r\n\r\n\t\tif ( vars !== undefined ) {\r\n\r\n\t\t\tfor ( const variable of vars ) {\r\n\r\n\t\t\t\tsnippet += `${ this.getVar( variable.type, variable.name ) }; `;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tgetUniforms( /*shaderStage*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tgetCodes( shaderStage ) {\r\n\r\n\t\tconst codes = this.codes[ shaderStage ];\r\n\r\n\t\tlet code = '';\r\n\r\n\t\tif ( codes !== undefined ) {\r\n\r\n\t\t\tfor ( const nodeCode of codes ) {\r\n\r\n\t\t\t\tcode += nodeCode.code + '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\r\n\t}\r\n\r\n\tgetHash() {\r\n\r\n\t\treturn this.vertexShader + this.fragmentShader + this.computeShader;\r\n\r\n\t}\r\n\r\n\tsetShaderStage( shaderStage ) {\r\n\r\n\t\tthis.shaderStage = shaderStage;\r\n\r\n\t}\r\n\r\n\tgetShaderStage() {\r\n\r\n\t\treturn this.shaderStage;\r\n\r\n\t}\r\n\r\n\tsetBuildStage( buildStage ) {\r\n\r\n\t\tthis.buildStage = buildStage;\r\n\r\n\t}\r\n\r\n\tgetBuildStage() {\r\n\r\n\t\treturn this.buildStage;\r\n\r\n\t}\r\n\r\n\tbuildCode() {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tbuild() {\r\n\r\n\t\tconst { object, material, renderer } = this;\r\n\r\n\t\tif ( material !== null ) {\r\n\r\n\t\t\tlet nodeMaterial = renderer.nodes.library.fromMaterial( material );\r\n\r\n\t\t\tif ( nodeMaterial === null ) {\r\n\r\n\t\t\t\tconsole.error( `NodeMaterial: Material \"${ material.type }\" is not compatible.` );\r\n\r\n\t\t\t\tnodeMaterial = new NodeMaterial();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnodeMaterial.build( this );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.addFlow( 'compute', object );\r\n\r\n\t\t}\r\n\r\n\t\t// setup() -> stage 1: create possible new nodes and returns an output reference node\r\n\t\t// analyze()   -> stage 2: analyze nodes to possible optimization and validation\r\n\t\t// generate()  -> stage 3: generate shader\r\n\r\n\t\tfor ( const buildStage of defaultBuildStages ) {\r\n\r\n\t\t\tthis.setBuildStage( buildStage );\r\n\r\n\t\t\tif ( this.context.vertex && this.context.vertex.isNode ) {\r\n\r\n\t\t\t\tthis.flowNodeFromShaderStage( 'vertex', this.context.vertex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( const shaderStage of shaderStages ) {\r\n\r\n\t\t\t\tthis.setShaderStage( shaderStage );\r\n\r\n\t\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\r\n\r\n\t\t\t\tfor ( const node of flowNodes ) {\r\n\r\n\t\t\t\t\tif ( buildStage === 'generate' ) {\r\n\r\n\t\t\t\t\t\tthis.flowNode( node );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tnode.build( this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.setBuildStage( null );\r\n\t\tthis.setShaderStage( null );\r\n\r\n\t\t// stage 4: build code for a specific output\r\n\r\n\t\tthis.buildCode();\r\n\t\tthis.buildUpdateNodes();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetNodeUniform( uniformNode, type ) {\r\n\r\n\t\tif ( type === 'float' || type === 'int' || type === 'uint' ) return new NumberNodeUniform( uniformNode );\r\n\t\tif ( type === 'vec2' || type === 'ivec2' || type === 'uvec2' ) return new Vector2NodeUniform( uniformNode );\r\n\t\tif ( type === 'vec3' || type === 'ivec3' || type === 'uvec3' ) return new Vector3NodeUniform( uniformNode );\r\n\t\tif ( type === 'vec4' || type === 'ivec4' || type === 'uvec4' ) return new Vector4NodeUniform( uniformNode );\r\n\t\tif ( type === 'color' ) return new ColorNodeUniform( uniformNode );\r\n\t\tif ( type === 'mat3' ) return new Matrix3NodeUniform( uniformNode );\r\n\t\tif ( type === 'mat4' ) return new Matrix4NodeUniform( uniformNode );\r\n\r\n\t\tthrow new Error( `Uniform \"${type}\" not declared.` );\r\n\r\n\t}\r\n\r\n\tcreateNodeMaterial( type = 'NodeMaterial' ) { // @deprecated, r168\r\n\r\n\t\tthrow new Error( `THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${ type }() instead.` );\r\n\r\n\t}\r\n\r\n\tformat( snippet, fromType, toType ) {\r\n\r\n\t\tfromType = this.getVectorType( fromType );\r\n\t\ttoType = this.getVectorType( toType );\r\n\r\n\t\tif ( fromType === toType || toType === null || this.isReference( toType ) ) {\r\n\r\n\t\t\treturn snippet;\r\n\r\n\t\t}\r\n\r\n\t\tconst fromTypeLength = this.getTypeLength( fromType );\r\n\t\tconst toTypeLength = this.getTypeLength( toType );\r\n\r\n\t\tif ( fromTypeLength === 16 && toTypeLength === 9 ) {\r\n\r\n\t\t\treturn `${ this.getType( toType ) }(${ snippet }[0].xyz, ${ snippet }[1].xyz, ${ snippet }[2].xyz)`;\r\n\r\n\t\t}\r\n\r\n\t\tif ( fromTypeLength === 9 && toTypeLength === 4 ) {\r\n\r\n\t\t\treturn `${ this.getType( toType ) }(${ snippet }[0].xy, ${ snippet }[1].xy)`;\r\n\r\n\t\t}\r\n\r\n\r\n\t\tif ( fromTypeLength > 4 ) { // fromType is matrix-like\r\n\r\n\t\t\t// @TODO: ignore for now\r\n\r\n\t\t\treturn snippet;\r\n\r\n\t\t}\r\n\r\n\t\tif ( toTypeLength > 4 || toTypeLength === 0 ) { // toType is matrix-like or unknown\r\n\r\n\t\t\t// @TODO: ignore for now\r\n\r\n\t\t\treturn snippet;\r\n\r\n\t\t}\r\n\r\n\t\tif ( fromTypeLength === toTypeLength ) {\r\n\r\n\t\t\treturn `${ this.getType( toType ) }( ${ snippet } )`;\r\n\r\n\t\t}\r\n\r\n\t\tif ( fromTypeLength > toTypeLength ) {\r\n\r\n\t\t\treturn this.format( `${ snippet }.${ 'xyz'.slice( 0, toTypeLength ) }`, this.getTypeFromLength( toTypeLength, this.getComponentType( fromType ) ), toType );\r\n\r\n\t\t}\r\n\r\n\t\tif ( toTypeLength === 4 && fromTypeLength > 1 ) { // toType is vec4-like\r\n\r\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec3' ) }, 1.0 )`;\r\n\r\n\t\t}\r\n\r\n\t\tif ( fromTypeLength === 2 ) { // fromType is vec2-like and toType is vec3-like\r\n\r\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec2' ) }, 0.0 )`;\r\n\r\n\t\t}\r\n\r\n\t\tif ( fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType( toType ) ) { // fromType is float-like\r\n\r\n\t\t\t// convert a number value to vector type, e.g:\r\n\t\t\t// vec3( 1u ) -> vec3( float( 1u ) )\r\n\r\n\t\t\tsnippet = `${ this.getType( this.getComponentType( toType ) ) }( ${ snippet } )`;\r\n\r\n\t\t}\r\n\r\n\t\treturn `${ this.getType( toType ) }( ${ snippet } )`; // fromType is float-like\r\n\r\n\t}\r\n\r\n\tgetSignature() {\r\n\r\n\t\treturn `// Three.js r${ REVISION } - Node System\\n`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeBuilder;\r\n", "import { NodeUpdateType } from './constants.js';\r\n\r\nclass NodeFrame {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.time = 0;\r\n\t\tthis.deltaTime = 0;\r\n\r\n\t\tthis.frameId = 0;\r\n\t\tthis.renderId = 0;\r\n\r\n\t\tthis.startTime = null;\r\n\r\n\t\tthis.updateMap = new WeakMap();\r\n\t\tthis.updateBeforeMap = new WeakMap();\r\n\t\tthis.updateAfterMap = new WeakMap();\r\n\r\n\t\tthis.renderer = null;\r\n\t\tthis.material = null;\r\n\t\tthis.camera = null;\r\n\t\tthis.object = null;\r\n\t\tthis.scene = null;\r\n\r\n\t}\r\n\r\n\t_getMaps( referenceMap, nodeRef ) {\r\n\r\n\t\tlet maps = referenceMap.get( nodeRef );\r\n\r\n\t\tif ( maps === undefined ) {\r\n\r\n\t\t\tmaps = {\r\n\t\t\t\trenderMap: new WeakMap(),\r\n\t\t\t\tframeMap: new WeakMap()\r\n\t\t\t};\r\n\r\n\t\t\treferenceMap.set( nodeRef, maps );\r\n\r\n\t\t}\r\n\r\n\t\treturn maps;\r\n\r\n\t}\r\n\r\n\tupdateBeforeNode( node ) {\r\n\r\n\t\tconst updateType = node.getUpdateBeforeType();\r\n\t\tconst reference = node.updateReference( this );\r\n\r\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\r\n\r\n\t\t\tconst { frameMap } = this._getMaps( this.updateBeforeMap, reference );\r\n\r\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\r\n\r\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\r\n\r\n\t\t\t\t\tframeMap.set( reference, this.frameId );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\r\n\r\n\t\t\tconst { renderMap } = this._getMaps( this.updateBeforeMap, reference );\r\n\r\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\r\n\r\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\r\n\r\n\t\t\t\t\trenderMap.set( reference, this.renderId );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\r\n\r\n\t\t\tnode.updateBefore( this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateAfterNode( node ) {\r\n\r\n\t\tconst updateType = node.getUpdateAfterType();\r\n\t\tconst reference = node.updateReference( this );\r\n\r\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\r\n\r\n\t\t\tconst { frameMap } = this._getMaps( this.updateAfterMap, reference );\r\n\r\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\r\n\r\n\t\t\t\tif ( node.updateAfter( this ) !== false ) {\r\n\r\n\t\t\t\t\tframeMap.set( reference, this.frameId );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\r\n\r\n\t\t\tconst { renderMap } = this._getMaps( this.updateAfterMap, reference );\r\n\r\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\r\n\r\n\t\t\t\tif ( node.updateAfter( this ) !== false ) {\r\n\r\n\t\t\t\t\trenderMap.set( reference, this.renderId );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\r\n\r\n\t\t\tnode.updateAfter( this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateNode( node ) {\r\n\r\n\t\tconst updateType = node.getUpdateType();\r\n\t\tconst reference = node.updateReference( this );\r\n\r\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\r\n\r\n\t\t\tconst { frameMap } = this._getMaps( this.updateMap, reference );\r\n\r\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\r\n\r\n\t\t\t\tif ( node.update( this ) !== false ) {\r\n\r\n\t\t\t\t\tframeMap.set( reference, this.frameId );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\r\n\r\n\t\t\tconst { renderMap } = this._getMaps( this.updateMap, reference );\r\n\r\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\r\n\r\n\t\t\t\tif ( node.update( this ) !== false ) {\r\n\r\n\t\t\t\t\trenderMap.set( reference, this.renderId );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\r\n\r\n\t\t\tnode.update( this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tthis.frameId ++;\r\n\r\n\t\tif ( this.lastTime === undefined ) this.lastTime = performance.now();\r\n\r\n\t\tthis.deltaTime = ( performance.now() - this.lastTime ) / 1000;\r\n\r\n\t\tthis.lastTime = performance.now();\r\n\r\n\t\tthis.time += this.deltaTime;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeFrame;\r\n", "class NodeFunctionInput {\r\n\r\n\tconstructor( type, name, count = null, qualifier = '', isConst = false ) {\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.name = name;\r\n\t\tthis.count = count;\r\n\t\tthis.qualifier = qualifier;\r\n\t\tthis.isConst = isConst;\r\n\r\n\t}\r\n\r\n}\r\n\r\nNodeFunctionInput.isNodeFunctionInput = true;\r\n\r\nexport default NodeFunctionInput;\r\n", "import Node from './Node.js';\r\n\r\nclass StructTypeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StructTypeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( types ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.types = types;\r\n\t\tthis.isStructTypeNode = true;\r\n\r\n\t}\r\n\r\n\tgetMemberTypes() {\r\n\r\n\t\treturn this.types;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StructTypeNode;\r\n", "import Node from './Node.js';\r\nimport StructTypeNode from './StructTypeNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass OutputStructNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'OutputStructNode';\r\n\r\n\t}\r\n\r\n\tconstructor( ...members ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.members = members;\r\n\r\n\t\tthis.isOutputStructNode = true;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst members = this.members;\r\n\t\tconst types = [];\r\n\r\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\r\n\r\n\t\t\ttypes.push( members[ i ].getNodeType( builder ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.nodeType = builder.getStructTypeFromNode( new StructTypeNode( types ) ).name;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst propertyName = builder.getOutputStructName();\r\n\t\tconst members = this.members;\r\n\r\n\t\tconst structPrefix = propertyName !== '' ? propertyName + '.' : '';\r\n\r\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\r\n\r\n\t\t\tconst snippet = members[ i ].build( builder, output );\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${ structPrefix }m${ i } = ${ snippet }`, this );\r\n\r\n\t\t}\r\n\r\n\t\treturn propertyName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default OutputStructNode;\r\n\r\nexport const outputStruct = /*@__PURE__*/ nodeProxy( OutputStructNode );\r\n", "import OutputStructNode from './OutputStructNode.js';\r\nimport { nodeProxy, vec4 } from '../tsl/TSLBase.js';\r\n\r\nexport function getTextureIndex( textures, name ) {\r\n\r\n\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\tif ( textures[ i ].name === name ) {\r\n\r\n\t\t\treturn i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn - 1;\r\n\r\n}\r\n\r\nclass MRTNode extends OutputStructNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MRTNode';\r\n\r\n\t}\r\n\r\n\tconstructor( outputNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.outputNodes = outputNodes;\r\n\r\n\t\tthis.isMRTNode = true;\r\n\r\n\t}\r\n\r\n\thas( name ) {\r\n\r\n\t\treturn this.outputNodes[ name ] !== undefined;\r\n\r\n\t}\r\n\r\n\tget( name ) {\r\n\r\n\t\treturn this.outputNodes[ name ];\r\n\r\n\t}\r\n\r\n\tmerge( mrtNode ) {\r\n\r\n\t\tconst outputs = { ...this.outputNodes, ...mrtNode.outputNodes };\r\n\r\n\t\treturn mrt( outputs );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst outputNodes = this.outputNodes;\r\n\t\tconst mrt = builder.renderer.getRenderTarget();\r\n\r\n\t\tconst members = [];\r\n\r\n\t\tconst textures = mrt.textures;\r\n\r\n\t\tfor ( const name in outputNodes ) {\r\n\r\n\t\t\tconst index = getTextureIndex( textures, name );\r\n\r\n\t\t\tmembers[ index ] = vec4( outputNodes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.members = members;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MRTNode;\r\n\r\nexport const mrt = /*@__PURE__*/ nodeProxy( MRTNode );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass FunctionOverloadingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FunctionOverloadingNode';\r\n\r\n\t}\r\n\r\n\tconstructor( functionNodes = [], ...parametersNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.functionNodes = functionNodes;\r\n\t\tthis.parametersNodes = parametersNodes;\r\n\r\n\t\tthis._candidateFnCall = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.functionNodes[ 0 ].shaderNode.layout.type;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst params = this.parametersNodes;\r\n\r\n\t\tlet candidateFnCall = this._candidateFnCall;\r\n\r\n\t\tif ( candidateFnCall === null ) {\r\n\r\n\t\t\tlet candidateFn = null;\r\n\t\t\tlet candidateScore = - 1;\r\n\r\n\t\t\tfor ( const functionNode of this.functionNodes ) {\r\n\r\n\t\t\t\tconst shaderNode = functionNode.shaderNode;\r\n\t\t\t\tconst layout = shaderNode.layout;\r\n\r\n\t\t\t\tif ( layout === null ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'FunctionOverloadingNode: FunctionNode must be a layout.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst inputs = layout.inputs;\r\n\r\n\t\t\t\tif ( params.length === inputs.length ) {\r\n\r\n\t\t\t\t\tlet score = 0;\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst param = params[ i ];\r\n\t\t\t\t\t\tconst input = inputs[ i ];\r\n\r\n\t\t\t\t\t\tif ( param.getNodeType( builder ) === input.type ) {\r\n\r\n\t\t\t\t\t\t\tscore ++;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tscore = 0;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( score > candidateScore ) {\r\n\r\n\t\t\t\t\t\tcandidateFn = functionNode;\r\n\t\t\t\t\t\tcandidateScore = score;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._candidateFnCall = candidateFnCall = candidateFn( ...params );\r\n\r\n\t\t}\r\n\r\n\t\treturn candidateFnCall;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionOverloadingNode;\r\n\r\nconst overloadingBaseFn = /*@__PURE__*/ nodeProxy( FunctionOverloadingNode );\r\n\r\nexport const overloadingFn = ( functionNodes ) => ( ...params ) => overloadingBaseFn( functionNodes, ...params );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject, nodeImmutable } from '../tsl/TSLBase.js';\r\n\r\nclass TimerNode extends UniformNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TimerNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope = TimerNode.LOCAL, scale = 1, value = 0 ) {\r\n\r\n\t\tsuper( value );\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.scale = scale;\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\t/*\r\n\t@TODO:\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === TimerNode.FRAME ) {\r\n\r\n\t\t\treturn 'uint';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'float';\r\n\r\n\t}\r\n*/\r\n\tupdate( frame ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\t\tconst scale = this.scale;\r\n\r\n\t\tif ( scope === TimerNode.LOCAL ) {\r\n\r\n\t\t\tthis.value += frame.deltaTime * scale;\r\n\r\n\t\t} else if ( scope === TimerNode.DELTA ) {\r\n\r\n\t\t\tthis.value = frame.deltaTime * scale;\r\n\r\n\t\t} else if ( scope === TimerNode.FRAME ) {\r\n\r\n\t\t\tthis.value = frame.frameId;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// global\r\n\r\n\t\t\tthis.value = frame.time * scale;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\t\tdata.scale = this.scale;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\t\tthis.scale = data.scale;\r\n\r\n\t}\r\n\r\n}\r\n\r\nTimerNode.LOCAL = 'local';\r\nTimerNode.GLOBAL = 'global';\r\nTimerNode.DELTA = 'delta';\r\nTimerNode.FRAME = 'frame';\r\n\r\nexport default TimerNode;\r\n\r\n// @TODO: add support to use node in timeScale\r\nexport const timerLocal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.LOCAL, timeScale, value ) );\r\nexport const timerGlobal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.GLOBAL, timeScale, value ) );\r\nexport const timerDelta = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.DELTA, timeScale, value ) );\r\nexport const frameId = /*@__PURE__*/ nodeImmutable( TimerNode, TimerNode.FRAME ).toUint();\r\n", "import Node from '../core/Node.js';\r\nimport { timerLocal } from './TimerNode.js';\r\nimport { nodeObject, nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass OscNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'OscNode';\r\n\r\n\t}\r\n\r\n\tconstructor( method = OscNode.SINE, timeNode = timerLocal() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.method = method;\r\n\t\tthis.timeNode = timeNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.timeNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst method = this.method;\r\n\t\tconst timeNode = nodeObject( this.timeNode );\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( method === OscNode.SINE ) {\r\n\r\n\t\t\toutputNode = timeNode.add( 0.75 ).mul( Math.PI * 2 ).sin().mul( 0.5 ).add( 0.5 );\r\n\r\n\t\t} else if ( method === OscNode.SQUARE ) {\r\n\r\n\t\t\toutputNode = timeNode.fract().round();\r\n\r\n\t\t} else if ( method === OscNode.TRIANGLE ) {\r\n\r\n\t\t\toutputNode = timeNode.add( 0.5 ).fract().mul( 2 ).sub( 1 ).abs();\r\n\r\n\t\t} else if ( method === OscNode.SAWTOOTH ) {\r\n\r\n\t\t\toutputNode = timeNode.fract();\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.method = this.method;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.method = data.method;\r\n\r\n\t}\r\n\r\n}\r\n\r\nOscNode.SINE = 'sine';\r\nOscNode.SQUARE = 'square';\r\nOscNode.TRIANGLE = 'triangle';\r\nOscNode.SAWTOOTH = 'sawtooth';\r\n\r\nexport default OscNode;\r\n\r\nexport const oscSine = /*@__PURE__*/ nodeProxy( OscNode, OscNode.SINE );\r\nexport const oscSquare = /*@__PURE__*/ nodeProxy( OscNode, OscNode.SQUARE );\r\nexport const oscTriangle = /*@__PURE__*/ nodeProxy( OscNode, OscNode.TRIANGLE );\r\nexport const oscSawtooth = /*@__PURE__*/ nodeProxy( OscNode, OscNode.SAWTOOTH );\r\n", "import Node from '../core/Node.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { nodeProxy, float, vec2 } from '../tsl/TSLBase.js';\r\n\r\nclass SpriteSheetUVNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SpriteSheetUVNode';\r\n\r\n\t}\r\n\r\n\tconstructor( countNode, uvNode = uv(), frameNode = float( 0 ) ) {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.countNode = countNode;\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.frameNode = frameNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { frameNode, uvNode, countNode } = this;\r\n\r\n\t\tconst { width, height } = countNode;\r\n\r\n\t\tconst frameNum = frameNode.mod( width.mul( height ) ).floor();\r\n\r\n\t\tconst column = frameNum.mod( width );\r\n\t\tconst row = height.sub( frameNum.add( 1 ).div( width ).ceil() );\r\n\r\n\t\tconst scale = countNode.reciprocal();\r\n\t\tconst uvFrameOffset = vec2( column, row );\r\n\r\n\t\treturn uvNode.add( uvFrameOffset ).mul( scale );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpriteSheetUVNode;\r\n\r\nexport const spritesheetUV = /*@__PURE__*/ nodeProxy( SpriteSheetUVNode );\r\n", "import { nodeProxy } from '../tsl/TSLBase.js';\r\nimport ArrayElementNode from './ArrayElementNode.js';\r\n\r\nclass StorageArrayElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StorageArrayElementNode';\r\n\r\n\t}\r\n\r\n\tconstructor( storageBufferNode, indexNode ) {\r\n\r\n\t\tsuper( storageBufferNode, indexNode );\r\n\r\n\t\tthis.isStorageArrayElementNode = true;\r\n\r\n\t}\r\n\r\n\tset storageBufferNode( value ) {\r\n\r\n\t\tthis.node = value;\r\n\r\n\t}\r\n\r\n\tget storageBufferNode() {\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\r\n\r\n\t\t\tif ( this.node.bufferObject === true ) {\r\n\r\n\t\t\t\tbuilder.setupPBO( this.node );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tconst isAssignContext = builder.context.assign;\r\n\r\n\t\t//\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\r\n\r\n\t\t\tif ( this.node.bufferObject === true && isAssignContext !== true ) {\r\n\r\n\t\t\t\tsnippet = builder.generatePBO( this );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = this.node.build( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = super.generate( builder );\r\n\r\n\t\t}\r\n\r\n\t\tif ( isAssignContext !== true ) {\r\n\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\t\tsnippet = builder.format( snippet, type, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageArrayElementNode;\r\n\r\nexport const storageElement = /*@__PURE__*/ nodeProxy( StorageArrayElementNode );\r\n", "import Node from '../core/Node.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { normalLocal } from '../accessors/Normal.js';\r\nimport { positionLocal } from '../accessors/Position.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { nodeProxy, float, vec3 } from '../tsl/TSLBase.js';\r\n\r\nclass TriplanarTexturesNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TriplanarTexturesNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureXNode, textureYNode = null, textureZNode = null, scaleNode = float( 1 ), positionNode = positionLocal, normalNode = normalLocal ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureXNode = textureXNode;\r\n\t\tthis.textureYNode = textureYNode;\r\n\t\tthis.textureZNode = textureZNode;\r\n\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t\tthis.positionNode = positionNode;\r\n\t\tthis.normalNode = normalNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureXNode, textureYNode, textureZNode, scaleNode, positionNode, normalNode } = this;\r\n\r\n\t\t// Ref: https://github.com/keijiro/StandardTriplanar\r\n\r\n\t\t// Blending factor of triplanar mapping\r\n\t\tlet bf = normalNode.abs().normalize();\r\n\t\tbf = bf.div( bf.dot( vec3( 1.0 ) ) );\r\n\r\n\t\t// Triplanar mapping\r\n\t\tconst tx = positionNode.yz.mul( scaleNode );\r\n\t\tconst ty = positionNode.zx.mul( scaleNode );\r\n\t\tconst tz = positionNode.xy.mul( scaleNode );\r\n\r\n\t\t// Base color\r\n\t\tconst textureX = textureXNode.value;\r\n\t\tconst textureY = textureYNode !== null ? textureYNode.value : textureX;\r\n\t\tconst textureZ = textureZNode !== null ? textureZNode.value : textureX;\r\n\r\n\t\tconst cx = texture( textureX, tx ).mul( bf.x );\r\n\t\tconst cy = texture( textureY, ty ).mul( bf.y );\r\n\t\tconst cz = texture( textureZ, tz ).mul( bf.z );\r\n\r\n\t\treturn add( cx, cy, cz );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TriplanarTexturesNode;\r\n\r\nexport const triplanarTextures = /*@__PURE__*/ nodeProxy( TriplanarTexturesNode );\r\nexport const triplanarTexture = ( ...params ) => triplanarTextures( ...params );\r\n", "import TextureNode from '../accessors/TextureNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { screenUV } from '../display/ScreenNode.js';\r\n\r\nimport { HalfFloatType, LinearMipMapLinearFilter } from '../../constants.js';\r\nimport { Plane } from '../../math/Plane.js';\r\nimport { Object3D } from '../../core/Object3D.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _reflectorPlane = new Plane();\r\nconst _normal = new Vector3();\r\nconst _reflectorWorldPosition = new Vector3();\r\nconst _cameraWorldPosition = new Vector3();\r\nconst _rotationMatrix = new Matrix4();\r\nconst _lookAtPosition = new Vector3( 0, 0, - 1 );\r\nconst clipPlane = new Vector4();\r\n\r\nconst _view = new Vector3();\r\nconst _target = new Vector3();\r\nconst _q = new Vector4();\r\n\r\nconst _size = new Vector2();\r\n\r\nconst _defaultRT = new RenderTarget();\r\nconst _defaultUV = screenUV.flipX();\r\n\r\nlet _inReflector = false;\r\n\r\nclass ReflectorNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReflectorNode';\r\n\r\n\t}\r\n\r\n\tconstructor( parameters = {} ) {\r\n\r\n\t\tsuper( _defaultRT.texture, _defaultUV );\r\n\r\n\t\tconst {\r\n\t\t\ttarget = new Object3D(),\r\n\t\t\tresolution = 1,\r\n\t\t\tgenerateMipmaps = false,\r\n\t\t\tbounces = true\r\n\t\t} = parameters;\r\n\r\n\t\t//\r\n\r\n\t\tthis.target = target;\r\n\t\tthis.resolution = resolution;\r\n\t\tthis.generateMipmaps = generateMipmaps;\r\n\t\tthis.bounces = bounces;\r\n\r\n\t\tthis.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;\r\n\r\n\t\tthis.virtualCameras = new WeakMap();\r\n\t\tthis.renderTargets = new WeakMap();\r\n\r\n\r\n\t}\r\n\r\n\t_updateResolution( renderTarget, renderer ) {\r\n\r\n\t\tconst resolution = this.resolution;\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\trenderTarget.setSize( Math.round( _size.width * resolution ), Math.round( _size.height * resolution ) );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis._updateResolution( _defaultRT, builder.renderer );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this.textureNode;\r\n\r\n\t}\r\n\r\n\tgetVirtualCamera( camera ) {\r\n\r\n\t\tlet virtualCamera = this.virtualCameras.get( camera );\r\n\r\n\t\tif ( virtualCamera === undefined ) {\r\n\r\n\t\t\tvirtualCamera = camera.clone();\r\n\r\n\t\t\tthis.virtualCameras.set( camera, virtualCamera );\r\n\r\n\t\t}\r\n\r\n\t\treturn virtualCamera;\r\n\r\n\t}\r\n\r\n\tgetRenderTarget( camera ) {\r\n\r\n\t\tlet renderTarget = this.renderTargets.get( camera );\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\trenderTarget = new RenderTarget( 0, 0, { type: HalfFloatType } );\r\n\r\n\t\t\tif ( this.generateMipmaps === true ) {\r\n\r\n\t\t\t    renderTarget.texture.minFilter = LinearMipMapLinearFilter;\r\n\t\t\t    renderTarget.texture.generateMipmaps = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.renderTargets.set( camera, renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tif ( this.bounces === false && _inReflector ) return false;\r\n\r\n\t\t_inReflector = true;\r\n\r\n\t\tconst { scene, camera, renderer, material } = frame;\r\n\t\tconst { target } = this;\r\n\r\n\t\tconst virtualCamera = this.getVirtualCamera( camera );\r\n\t\tconst renderTarget = this.getRenderTarget( virtualCamera );\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\tthis._updateResolution( renderTarget, renderer );\r\n\r\n\t\t//\r\n\r\n\t\t_reflectorWorldPosition.setFromMatrixPosition( target.matrixWorld );\r\n\t\t_cameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\r\n\r\n\t\t_rotationMatrix.extractRotation( target.matrixWorld );\r\n\r\n\t\t_normal.set( 0, 0, 1 );\r\n\t\t_normal.applyMatrix4( _rotationMatrix );\r\n\r\n\t\t_view.subVectors( _reflectorWorldPosition, _cameraWorldPosition );\r\n\r\n\t\t// Avoid rendering when reflector is facing away\r\n\r\n\t\tif ( _view.dot( _normal ) > 0 ) return;\r\n\r\n\t\t_view.reflect( _normal ).negate();\r\n\t\t_view.add( _reflectorWorldPosition );\r\n\r\n\t\t_rotationMatrix.extractRotation( camera.matrixWorld );\r\n\r\n\t\t_lookAtPosition.set( 0, 0, - 1 );\r\n\t\t_lookAtPosition.applyMatrix4( _rotationMatrix );\r\n\t\t_lookAtPosition.add( _cameraWorldPosition );\r\n\r\n\t\t_target.subVectors( _reflectorWorldPosition, _lookAtPosition );\r\n\t\t_target.reflect( _normal ).negate();\r\n\t\t_target.add( _reflectorWorldPosition );\r\n\r\n\t\t//\r\n\r\n\t\tvirtualCamera.coordinateSystem = camera.coordinateSystem;\r\n\t\tvirtualCamera.position.copy( _view );\r\n\t\tvirtualCamera.up.set( 0, 1, 0 );\r\n\t\tvirtualCamera.up.applyMatrix4( _rotationMatrix );\r\n\t\tvirtualCamera.up.reflect( _normal );\r\n\t\tvirtualCamera.lookAt( _target );\r\n\r\n\t\tvirtualCamera.near = camera.near;\r\n\t\tvirtualCamera.far = camera.far;\r\n\r\n\t\tvirtualCamera.updateMatrixWorld();\r\n\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n\t\t_reflectorPlane.setFromNormalAndCoplanarPoint( _normal, _reflectorWorldPosition );\r\n\t\t_reflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\r\n\r\n\t\tclipPlane.set( _reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant );\r\n\r\n\t\tconst projectionMatrix = virtualCamera.projectionMatrix;\r\n\r\n\t\t_q.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n\t\t_q.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n\t\t_q.z = - 1.0;\r\n\t\t_q.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n\t\t// Calculate the scaled plane vector\r\n\t\tclipPlane.multiplyScalar( 1.0 / clipPlane.dot( _q ) );\r\n\r\n\t\tconst clipBias = 0;\r\n\r\n\t\t// Replacing the third row of the projection matrix\r\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\r\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\r\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z - clipBias;\r\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\r\n\r\n\t\t//\r\n\r\n\t\tthis.value = renderTarget.texture;\r\n\r\n\t\tmaterial.visible = false;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\r\n\t\trenderer.setMRT( null );\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\trenderer.render( scene, virtualCamera );\r\n\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\tmaterial.visible = true;\r\n\r\n\t\t_inReflector = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const reflector = ( parameters ) => nodeObject( new ReflectorNode( parameters ) );\r\n\r\nexport default ReflectorNode;\r\n", "import { BufferGeometry } from '../../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../../core/BufferAttribute.js';\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { OrthographicCamera } from '../../cameras/OrthographicCamera.js';\r\n\r\n// Helper for passes that need to fill the viewport with a single quad.\r\n\r\nconst _camera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n// https://github.com/mrdoob/three.js/pull/21358\r\n\r\nclass QuadGeometry extends BufferGeometry {\r\n\r\n\tconstructor( flipY = false ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tconst uv = flipY === false ? [ 0, - 1, 0, 1, 2, 1 ] : [ 0, 2, 0, 0, 2, 0 ];\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uv, 2 ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _geometry = /*@__PURE__*/ new QuadGeometry();\r\n\r\nclass QuadMesh extends Mesh {\r\n\r\n\tconstructor( material = null ) {\r\n\r\n\t\tsuper( _geometry, material );\r\n\r\n\t\tthis.camera = _camera;\r\n\r\n\t\tthis.isQuadMesh = true;\r\n\r\n\t}\r\n\r\n\trenderAsync( renderer ) {\r\n\r\n\t\treturn renderer.renderAsync( this, _camera );\r\n\r\n\t}\r\n\r\n\trender( renderer ) {\r\n\r\n\t\trenderer.render( this, _camera );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default QuadMesh;\r\n", "import { nodeObject } from '../tsl/TSLCore.js';\r\nimport TextureNode from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { HalfFloatType } from '../../constants.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass RTTNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RTTNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, width = null, height = null, options = { type: HalfFloatType } ) {\r\n\r\n\t\tconst renderTarget = new RenderTarget( width, height, options );\r\n\r\n\t\tsuper( renderTarget.texture, uv() );\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.renderTarget = renderTarget;\r\n\r\n\t\tthis.textureNeedsUpdate = true;\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t\tthis.updateMap = new WeakMap();\r\n\r\n\t\tthis._rttNode = null;\r\n\t\tthis._quadMesh = new QuadMesh( new NodeMaterial() );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tget autoSize() {\r\n\r\n\t\treturn this.width === null;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis._rttNode = this.node.context( builder.getSharedContext() );\r\n\t\tthis._quadMesh.material.name = 'RTT';\r\n\t\tthis._quadMesh.material.needsUpdate = true;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tconst effectiveWidth = width * this.pixelRatio;\r\n\t\tconst effectiveHeight = height * this.pixelRatio;\r\n\r\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\tthis.textureNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis.pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this.width, this.height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( { renderer } ) {\r\n\r\n\t\tif ( this.textureNeedsUpdate === false && this.autoUpdate === false ) return;\r\n\r\n\t\tthis.textureNeedsUpdate = false;\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.autoSize === true ) {\r\n\r\n\t\t\tthis.pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\t\tconst size = renderer.getSize( _size );\r\n\r\n\t\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis._quadMesh.material.fragmentNode = this._rttNode;\r\n\r\n\t\t//\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\trenderer.setRenderTarget( this.renderTarget );\r\n\r\n\t\tthis._quadMesh.render( renderer );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = new TextureNode( this.value, this.uvNode, this.levelNode );\r\n\t\tnewNode.sampler = this.sampler;\r\n\t\tnewNode.referenceNode = this;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RTTNode;\r\n\r\nexport const rtt = ( node, ...params ) => nodeObject( new RTTNode( nodeObject( node ), ...params ) );\r\nexport const convertToTexture = ( node, ...params ) => node.isTextureNode ? node : rtt( node, ...params );\r\n", "import AttributeNode from '../core/AttributeNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nclass VertexColorNode extends AttributeNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VertexColorNode';\r\n\r\n\t}\r\n\r\n\tconstructor( index = 0 ) {\r\n\r\n\t\tsuper( null, 'vec4' );\r\n\r\n\t\tthis.isVertexColorNode = true;\r\n\r\n\t\tthis.index = index;\r\n\r\n\t}\r\n\r\n\tgetAttributeName( /*builder*/ ) {\r\n\r\n\t\tconst index = this.index;\r\n\r\n\t\treturn 'color' + ( index > 0 ? index : '' );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst attributeName = this.getAttributeName( builder );\r\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\r\n\r\n\t\tlet result;\r\n\r\n\t\tif ( geometryAttribute === true ) {\r\n\r\n\t\t\tresult = super.generate( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Vertex color fallback should be white\r\n\t\t\tresult = builder.generateConst( this.nodeType, new Vector4( 1, 1, 1, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.index = this.index;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.index = data.index;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VertexColorNode;\r\n\r\nexport const vertexColor = ( ...params ) => nodeObject( new VertexColorNode( ...params ) );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeImmutable } from '../tsl/TSLBase.js';\r\n\r\nclass PointUVNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PointUVNode';\r\n\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.isPointUVNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder*/ ) {\r\n\r\n\t\treturn 'vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointUVNode;\r\n\r\nexport const pointUV = /*@__PURE__*/ nodeImmutable( PointUVNode );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeImmutable } from '../tsl/TSLBase.js';\r\nimport { reference } from './ReferenceNode.js';\r\n\r\nclass SceneNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SceneNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope = SceneNode.BACKGROUND_BLURRINESS, scene = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.scene = scene;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\t\tconst scene = this.scene !== null ? this.scene : builder.scene;\r\n\r\n\t\tlet output;\r\n\r\n\t\tif ( scope === SceneNode.BACKGROUND_BLURRINESS ) {\r\n\r\n\t\t\toutput = reference( 'backgroundBlurriness', 'float', scene );\r\n\r\n\t\t} else if ( scope === SceneNode.BACKGROUND_INTENSITY ) {\r\n\r\n\t\t\toutput = reference( 'backgroundIntensity', 'float', scene );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneNode: Unknown scope:', scope );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';\r\nSceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';\r\n\r\nexport default SceneNode;\r\n\r\nexport const backgroundBlurriness = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_BLURRINESS );\r\nexport const backgroundIntensity = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_INTENSITY );\r\n", "export const GPUPrimitiveTopology = {\r\n\tPointList: 'point-list',\r\n\tLineList: 'line-list',\r\n\tLineStrip: 'line-strip',\r\n\tTriangleList: 'triangle-list',\r\n\tTriangleStrip: 'triangle-strip',\r\n};\r\n\r\nexport const GPUCompareFunction = {\r\n\tNever: 'never',\r\n\tLess: 'less',\r\n\tEqual: 'equal',\r\n\tLessEqual: 'less-equal',\r\n\tGreater: 'greater',\r\n\tNotEqual: 'not-equal',\r\n\tGreaterEqual: 'greater-equal',\r\n\tAlways: 'always'\r\n};\r\n\r\nexport const GPUStoreOp = {\r\n\tStore: 'store',\r\n\tDiscard: 'discard'\r\n};\r\n\r\nexport const GPULoadOp = {\r\n\tLoad: 'load',\r\n\tClear: 'clear'\r\n};\r\n\r\nexport const GPUFrontFace = {\r\n\tCCW: 'ccw',\r\n\tCW: 'cw'\r\n};\r\n\r\nexport const GPUCullMode = {\r\n\tNone: 'none',\r\n\tFront: 'front',\r\n\tBack: 'back'\r\n};\r\n\r\nexport const GPUIndexFormat = {\r\n\tUint16: 'uint16',\r\n\tUint32: 'uint32'\r\n};\r\n\r\nexport const GPUVertexFormat = {\r\n\tUint8x2: 'uint8x2',\r\n\tUint8x4: 'uint8x4',\r\n\tSint8x2: 'sint8x2',\r\n\tSint8x4: 'sint8x4',\r\n\tUnorm8x2: 'unorm8x2',\r\n\tUnorm8x4: 'unorm8x4',\r\n\tSnorm8x2: 'snorm8x2',\r\n\tSnorm8x4: 'snorm8x4',\r\n\tUint16x2: 'uint16x2',\r\n\tUint16x4: 'uint16x4',\r\n\tSint16x2: 'sint16x2',\r\n\tSint16x4: 'sint16x4',\r\n\tUnorm16x2: 'unorm16x2',\r\n\tUnorm16x4: 'unorm16x4',\r\n\tSnorm16x2: 'snorm16x2',\r\n\tSnorm16x4: 'snorm16x4',\r\n\tFloat16x2: 'float16x2',\r\n\tFloat16x4: 'float16x4',\r\n\tFloat32: 'float32',\r\n\tFloat32x2: 'float32x2',\r\n\tFloat32x3: 'float32x3',\r\n\tFloat32x4: 'float32x4',\r\n\tUint32: 'uint32',\r\n\tUint32x2: 'uint32x2',\r\n\tUint32x3: 'uint32x3',\r\n\tUint32x4: 'uint32x4',\r\n\tSint32: 'sint32',\r\n\tSint32x2: 'sint32x2',\r\n\tSint32x3: 'sint32x3',\r\n\tSint32x4: 'sint32x4'\r\n};\r\n\r\nexport const GPUTextureFormat = {\r\n\r\n\t// 8-bit formats\r\n\r\n\tR8Unorm: 'r8unorm',\r\n\tR8Snorm: 'r8snorm',\r\n\tR8Uint: 'r8uint',\r\n\tR8Sint: 'r8sint',\r\n\r\n\t// 16-bit formats\r\n\r\n\tR16Uint: 'r16uint',\r\n\tR16Sint: 'r16sint',\r\n\tR16Float: 'r16float',\r\n\tRG8Unorm: 'rg8unorm',\r\n\tRG8Snorm: 'rg8snorm',\r\n\tRG8Uint: 'rg8uint',\r\n\tRG8Sint: 'rg8sint',\r\n\r\n\t// 32-bit formats\r\n\r\n\tR32Uint: 'r32uint',\r\n\tR32Sint: 'r32sint',\r\n\tR32Float: 'r32float',\r\n\tRG16Uint: 'rg16uint',\r\n\tRG16Sint: 'rg16sint',\r\n\tRG16Float: 'rg16float',\r\n\tRGBA8Unorm: 'rgba8unorm',\r\n\tRGBA8UnormSRGB: 'rgba8unorm-srgb',\r\n\tRGBA8Snorm: 'rgba8snorm',\r\n\tRGBA8Uint: 'rgba8uint',\r\n\tRGBA8Sint: 'rgba8sint',\r\n\tBGRA8Unorm: 'bgra8unorm',\r\n\tBGRA8UnormSRGB: 'bgra8unorm-srgb',\r\n\t// Packed 32-bit formats\r\n\tRGB9E5UFloat: 'rgb9e5ufloat',\r\n\tRGB10A2Unorm: 'rgb10a2unorm',\r\n\tRG11B10uFloat: 'rgb10a2unorm',\r\n\r\n\t// 64-bit formats\r\n\r\n\tRG32Uint: 'rg32uint',\r\n\tRG32Sint: 'rg32sint',\r\n\tRG32Float: 'rg32float',\r\n\tRGBA16Uint: 'rgba16uint',\r\n\tRGBA16Sint: 'rgba16sint',\r\n\tRGBA16Float: 'rgba16float',\r\n\r\n\t// 128-bit formats\r\n\r\n\tRGBA32Uint: 'rgba32uint',\r\n\tRGBA32Sint: 'rgba32sint',\r\n\tRGBA32Float: 'rgba32float',\r\n\r\n\t// Depth and stencil formats\r\n\r\n\tStencil8: 'stencil8',\r\n\tDepth16Unorm: 'depth16unorm',\r\n\tDepth24Plus: 'depth24plus',\r\n\tDepth24PlusStencil8: 'depth24plus-stencil8',\r\n\tDepth32Float: 'depth32float',\r\n\r\n\t// 'depth32float-stencil8' extension\r\n\r\n\tDepth32FloatStencil8: 'depth32float-stencil8',\r\n\r\n\t// BC compressed formats usable if 'texture-compression-bc' is both\r\n\t// supported by the device/user agent and enabled in requestDevice.\r\n\r\n\tBC1RGBAUnorm: 'bc1-rgba-unorm',\r\n\tBC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\r\n\tBC2RGBAUnorm: 'bc2-rgba-unorm',\r\n\tBC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\r\n\tBC3RGBAUnorm: 'bc3-rgba-unorm',\r\n\tBC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\r\n\tBC4RUnorm: 'bc4-r-unorm',\r\n\tBC4RSnorm: 'bc4-r-snorm',\r\n\tBC5RGUnorm: 'bc5-rg-unorm',\r\n\tBC5RGSnorm: 'bc5-rg-snorm',\r\n\tBC6HRGBUFloat: 'bc6h-rgb-ufloat',\r\n\tBC6HRGBFloat: 'bc6h-rgb-float',\r\n\tBC7RGBAUnorm: 'bc7-rgba-unorm',\r\n\tBC7RGBAUnormSRGB: 'bc7-rgba-srgb',\r\n\r\n\t// ETC2 compressed formats usable if 'texture-compression-etc2' is both\r\n\t// supported by the device/user agent and enabled in requestDevice.\r\n\r\n\tETC2RGB8Unorm: 'etc2-rgb8unorm',\r\n\tETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',\r\n\tETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',\r\n\tETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',\r\n\tETC2RGBA8Unorm: 'etc2-rgba8unorm',\r\n\tETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',\r\n\tEACR11Unorm: 'eac-r11unorm',\r\n\tEACR11Snorm: 'eac-r11snorm',\r\n\tEACRG11Unorm: 'eac-rg11unorm',\r\n\tEACRG11Snorm: 'eac-rg11snorm',\r\n\r\n\t// ASTC compressed formats usable if 'texture-compression-astc' is both\r\n\t// supported by the device/user agent and enabled in requestDevice.\r\n\r\n\tASTC4x4Unorm: 'astc-4x4-unorm',\r\n\tASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',\r\n\tASTC5x4Unorm: 'astc-5x4-unorm',\r\n\tASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',\r\n\tASTC5x5Unorm: 'astc-5x5-unorm',\r\n\tASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',\r\n\tASTC6x5Unorm: 'astc-6x5-unorm',\r\n\tASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',\r\n\tASTC6x6Unorm: 'astc-6x6-unorm',\r\n\tASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',\r\n\tASTC8x5Unorm: 'astc-8x5-unorm',\r\n\tASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',\r\n\tASTC8x6Unorm: 'astc-8x6-unorm',\r\n\tASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',\r\n\tASTC8x8Unorm: 'astc-8x8-unorm',\r\n\tASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',\r\n\tASTC10x5Unorm: 'astc-10x5-unorm',\r\n\tASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',\r\n\tASTC10x6Unorm: 'astc-10x6-unorm',\r\n\tASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',\r\n\tASTC10x8Unorm: 'astc-10x8-unorm',\r\n\tASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',\r\n\tASTC10x10Unorm: 'astc-10x10-unorm',\r\n\tASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',\r\n\tASTC12x10Unorm: 'astc-12x10-unorm',\r\n\tASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',\r\n\tASTC12x12Unorm: 'astc-12x12-unorm',\r\n\tASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb',\r\n\r\n};\r\n\r\nexport const GPUAddressMode = {\r\n\tClampToEdge: 'clamp-to-edge',\r\n\tRepeat: 'repeat',\r\n\tMirrorRepeat: 'mirror-repeat'\r\n};\r\n\r\nexport const GPUFilterMode = {\r\n\tLinear: 'linear',\r\n\tNearest: 'nearest'\r\n};\r\n\r\nexport const GPUBlendFactor = {\r\n\tZero: 'zero',\r\n\tOne: 'one',\r\n\tSrc: 'src',\r\n\tOneMinusSrc: 'one-minus-src',\r\n\tSrcAlpha: 'src-alpha',\r\n\tOneMinusSrcAlpha: 'one-minus-src-alpha',\r\n\tDst: 'dst',\r\n\tOneMinusDstColor: 'one-minus-dst',\r\n\tDstAlpha: 'dst-alpha',\r\n\tOneMinusDstAlpha: 'one-minus-dst-alpha',\r\n\tSrcAlphaSaturated: 'src-alpha-saturated',\r\n\tConstant: 'constant',\r\n\tOneMinusConstant: 'one-minus-constant'\r\n};\r\n\r\nexport const GPUBlendOperation = {\r\n\tAdd: 'add',\r\n\tSubtract: 'subtract',\r\n\tReverseSubtract: 'reverse-subtract',\r\n\tMin: 'min',\r\n\tMax: 'max'\r\n};\r\n\r\nexport const GPUColorWriteFlags = {\r\n\tNone: 0,\r\n\tRed: 0x1,\r\n\tGreen: 0x2,\r\n\tBlue: 0x4,\r\n\tAlpha: 0x8,\r\n\tAll: 0xF\r\n};\r\n\r\nexport const GPUStencilOperation = {\r\n\tKeep: 'keep',\r\n\tZero: 'zero',\r\n\tReplace: 'replace',\r\n\tInvert: 'invert',\r\n\tIncrementClamp: 'increment-clamp',\r\n\tDecrementClamp: 'decrement-clamp',\r\n\tIncrementWrap: 'increment-wrap',\r\n\tDecrementWrap: 'decrement-wrap'\r\n};\r\n\r\nexport const GPUBufferBindingType = {\r\n\tUniform: 'uniform',\r\n\tStorage: 'storage',\r\n\tReadOnlyStorage: 'read-only-storage'\r\n};\r\n\r\nexport const GPUStorageTextureAccess = {\r\n\tWriteOnly: 'write-only',\r\n\tReadOnly: 'read-only',\r\n\tReadWrite: 'read-write',\r\n};\r\n\r\nexport const GPUSamplerBindingType = {\r\n\tFiltering: 'filtering',\r\n\tNonFiltering: 'non-filtering',\r\n\tComparison: 'comparison'\r\n};\r\n\r\nexport const GPUTextureSampleType = {\r\n\tFloat: 'float',\r\n\tUnfilterableFloat: 'unfilterable-float',\r\n\tDepth: 'depth',\r\n\tSInt: 'sint',\r\n\tUInt: 'uint'\r\n};\r\n\r\nexport const GPUTextureDimension = {\r\n\tOneD: '1d',\r\n\tTwoD: '2d',\r\n\tThreeD: '3d'\r\n};\r\n\r\nexport const GPUTextureViewDimension = {\r\n\tOneD: '1d',\r\n\tTwoD: '2d',\r\n\tTwoDArray: '2d-array',\r\n\tCube: 'cube',\r\n\tCubeArray: 'cube-array',\r\n\tThreeD: '3d'\r\n};\r\n\r\nexport const GPUTextureAspect = {\r\n\tAll: 'all',\r\n\tStencilOnly: 'stencil-only',\r\n\tDepthOnly: 'depth-only'\r\n};\r\n\r\nexport const GPUInputStepMode = {\r\n\tVertex: 'vertex',\r\n\tInstance: 'instance'\r\n};\r\n\r\nexport const GPUFeatureName = {\r\n\tDepthClipControl: 'depth-clip-control',\r\n\tDepth32FloatStencil8: 'depth32float-stencil8',\r\n\tTextureCompressionBC: 'texture-compression-bc',\r\n\tTextureCompressionETC2: 'texture-compression-etc2',\r\n\tTextureCompressionASTC: 'texture-compression-astc',\r\n\tTimestampQuery: 'timestamp-query',\r\n\tIndirectFirstInstance: 'indirect-first-instance',\r\n\tShaderF16: 'shader-f16',\r\n\tRG11B10UFloat: 'rg11b10ufloat-renderable',\r\n\tBGRA8UNormStorage: 'bgra8unorm-storage',\r\n\tFloat32Filterable: 'float32-filterable',\r\n\tClipDistances: 'clip-distances',\r\n\tDualSourceBlending: 'dual-source-blending',\r\n\tSubgroups: 'subgroups'\r\n};\r\n", "import BufferNode from './BufferNode.js';\r\nimport { bufferAttribute } from './BufferAttributeNode.js';\r\nimport { nodeObject, varying } from '../tsl/TSLBase.js';\r\nimport { storageElement } from '../utils/StorageArrayElementNode.js';\r\nimport { GPUBufferBindingType } from '../../renderers/webgpu/utils/WebGPUConstants.js';\r\n\r\nclass StorageBufferNode extends BufferNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StorageBufferNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, bufferType, bufferCount = 0 ) {\r\n\r\n\t\tsuper( value, bufferType, bufferCount );\r\n\r\n\t\tthis.isStorageBufferNode = true;\r\n\r\n\t\tthis.access = GPUBufferBindingType.Storage;\r\n\t\tthis.isAtomic = false;\r\n\r\n\t\tthis.bufferObject = false;\r\n\t\tthis.bufferCount = bufferCount;\r\n\r\n\t\tthis._attribute = null;\r\n\t\tthis._varying = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tif ( value.isStorageBufferAttribute !== true && value.isStorageInstancedBufferAttribute !== true ) {\r\n\r\n\t\t\t// TOOD: Improve it, possibly adding a new property to the BufferAttribute to identify it as a storage buffer read-only attribute in Renderer\r\n\r\n\t\t\tif ( value.isInstancedBufferAttribute ) value.isStorageInstancedBufferAttribute = true;\r\n\t\t\telse value.isStorageBufferAttribute = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\tif ( this.bufferCount === 0 ) {\r\n\r\n\t\t\tlet bufferData = builder.globalCache.getData( this.value );\r\n\r\n\t\t\tif ( bufferData === undefined ) {\r\n\r\n\t\t\t\tbufferData = {\r\n\t\t\t\t\tnode: this\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbuilder.globalCache.setData( this.value, bufferData );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bufferData.node.uuid;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'storageBuffer';\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn storageElement( this, indexNode );\r\n\r\n\t}\r\n\r\n\tsetBufferObject( value ) {\r\n\r\n\t\tthis.bufferObject = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetAccess( value ) {\r\n\r\n\t\tthis.access = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoReadOnly() {\r\n\r\n\t\treturn this.setAccess( GPUBufferBindingType.ReadOnlyStorage );\r\n\r\n\t}\r\n\r\n\tsetAtomic( value ) {\r\n\r\n\t\tthis.isAtomic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoAtomic() {\r\n\r\n\t\treturn this.setAtomic( true );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) ) {\r\n\r\n\t\t\treturn super.generate( builder );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tif ( this._attribute === null ) {\r\n\r\n\t\t\tthis._attribute = bufferAttribute( this.value );\r\n\t\t\tthis._varying = varying( this._attribute );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tconst output = this._varying.build( builder, nodeType );\r\n\r\n\t\tbuilder.registerTransform( output, this._attribute );\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageBufferNode;\r\n\r\n// Read-Write Storage\r\nexport const storage = ( value, type, count ) => nodeObject( new StorageBufferNode( value, type, count ) );\r\nexport const storageObject = ( value, type, count ) => nodeObject( new StorageBufferNode( value, type, count ).setBufferObject( true ) );\r\n", "import TextureNode from './TextureNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { GPUStorageTextureAccess } from '../../renderers/webgpu/utils/WebGPUConstants.js';\r\n\r\nclass StorageTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StorageTextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value, uvNode, storeNode = null ) {\r\n\r\n\t\tsuper( value, uvNode );\r\n\r\n\t\tthis.storeNode = storeNode;\r\n\r\n\t\tthis.isStorageTextureNode = true;\r\n\r\n\t\tthis.access = GPUStorageTextureAccess.WriteOnly;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'storageTexture';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.storeNode = this.storeNode;\r\n\r\n\t}\r\n\r\n\tsetAccess( value ) {\r\n\r\n\t\tthis.access = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( this.storeNode !== null ) {\r\n\r\n\t\t\tsnippet = this.generateStore( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = super.generate( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\ttoReadOnly() {\r\n\r\n\t\treturn this.setAccess( GPUStorageTextureAccess.ReadOnly );\r\n\r\n\t}\r\n\r\n\ttoWriteOnly() {\r\n\r\n\t\treturn this.setAccess( GPUStorageTextureAccess.WriteOnly );\r\n\r\n\t}\r\n\r\n\tgenerateStore( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tconst { uvNode, storeNode } = properties;\r\n\r\n\t\tconst textureProperty = super.generate( builder, 'property' );\r\n\t\tconst uvSnippet = uvNode.build( builder, 'uvec2' );\r\n\t\tconst storeSnippet = storeNode.build( builder, 'vec4' );\r\n\r\n\t\tconst snippet = builder.generateTextureStore( builder, textureProperty, uvSnippet, storeSnippet );\r\n\r\n\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageTextureNode;\r\n\r\nexport const storageTexture = /*@__PURE__*/ nodeProxy( StorageTextureNode );\r\n\r\nexport const textureStore = ( value, uvNode, storeNode ) => {\r\n\r\n\tconst node = storageTexture( value, uvNode, storeNode );\r\n\r\n\tif ( storeNode !== null ) node.append();\r\n\r\n\treturn node;\r\n\r\n};\r\n", "import ReferenceNode from './ReferenceNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\nclass UserDataNode extends ReferenceNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UserDataNode';\r\n\r\n\t}\r\n\r\n\tconstructor( property, inputType, userData = null ) {\r\n\r\n\t\tsuper( property, inputType, userData );\r\n\r\n\t\tthis.userData = userData;\r\n\r\n\t}\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.userData !== null ? this.userData : state.object.userData;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UserDataNode;\r\n\r\nexport const userData = ( name, inputType, userData ) => nodeObject( new UserDataNode( name, inputType, userData ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass PosterizeNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PosterizeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( sourceNode, stepsNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.sourceNode = sourceNode;\r\n\t\tthis.stepsNode = stepsNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { sourceNode, stepsNode } = this;\r\n\r\n\t\treturn sourceNode.mul( stepsNode ).floor().div( stepsNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PosterizeNode;\r\n\r\nexport const posterize = /*@__PURE__*/ nodeProxy( PosterizeNode );\r\n", "import ViewportTextureNode from './ViewportTextureNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { screenUV } from './ScreenNode.js';\r\n\r\nimport { FramebufferTexture } from '../../textures/FramebufferTexture.js';\r\n\r\nlet _sharedFramebuffer = null;\r\n\r\nclass ViewportSharedTextureNode extends ViewportTextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportSharedTextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( uvNode = screenUV, levelNode = null ) {\r\n\r\n\t\tif ( _sharedFramebuffer === null ) {\r\n\r\n\t\t\t_sharedFramebuffer = new FramebufferTexture();\r\n\r\n\t\t}\r\n\r\n\t\tsuper( uvNode, levelNode, _sharedFramebuffer );\r\n\r\n\t}\r\n\r\n\tupdateReference() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportSharedTextureNode;\r\n\r\nexport const viewportSharedTexture = /*@__PURE__*/ nodeProxy( ViewportSharedTextureNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { default as TextureNode/*, texture*/ } from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { viewZToOrthographicDepth, perspectiveDepthToViewZ } from './ViewportDepthNode.js';\r\n\r\nimport { HalfFloatType/*, FloatType*/ } from '../../constants.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass PassTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PassTextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( passNode, texture ) {\r\n\r\n\t\tsuper( texture );\r\n\r\n\t\tthis.passNode = passNode;\r\n\r\n\t\tthis.setUpdateMatrix( false );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.object.isQuadMesh ) this.passNode.build( builder );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.passNode, this.value );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass PassMultipleTextureNode extends PassTextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PassMultipleTextureNode';\r\n\r\n\t}\r\n\r\n\tconstructor( passNode, textureName, previousTexture = false ) {\r\n\r\n\t\tsuper( passNode, null );\r\n\r\n\t\tthis.textureName = textureName;\r\n\t\tthis.previousTexture = previousTexture;\r\n\r\n\t}\r\n\r\n\tupdateTexture() {\r\n\r\n\t\tthis.value = this.previousTexture ? this.passNode.getPreviousTexture( this.textureName ) : this.passNode.getTexture( this.textureName );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.updateTexture();\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.passNode, this.textureName, this.previousTexture );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass PassNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scope, scene, camera, options = {} ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\t\tthis.options = options;\r\n\r\n\t\tthis._pixelRatio = 1;\r\n\t\tthis._width = 1;\r\n\t\tthis._height = 1;\r\n\r\n\t\tconst depthTexture = new DepthTexture();\r\n\t\tdepthTexture.isRenderTargetTexture = true;\r\n\t\t//depthTexture.type = FloatType;\r\n\t\tdepthTexture.name = 'depth';\r\n\r\n\t\tconst renderTarget = new RenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options, } );\r\n\t\trenderTarget.texture.name = 'output';\r\n\t\trenderTarget.depthTexture = depthTexture;\r\n\r\n\t\tthis.renderTarget = renderTarget;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t\tthis._textures = {\r\n\t\t\toutput: renderTarget.texture,\r\n\t\t\tdepth: depthTexture\r\n\t\t};\r\n\r\n\t\tthis._textureNodes = {};\r\n\t\tthis._linearDepthNodes = {};\r\n\t\tthis._viewZNodes = {};\r\n\r\n\t\tthis._previousTextures = {};\r\n\t\tthis._previousTextureNodes = {};\r\n\r\n\t\tthis._cameraNear = uniform( 0 );\r\n\t\tthis._cameraFar = uniform( 0 );\r\n\r\n\t\tthis._mrt = null;\r\n\r\n\t\tthis.isPassNode = true;\r\n\r\n\t}\r\n\r\n\tsetMRT( mrt ) {\r\n\r\n\t\tthis._mrt = mrt;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMRT() {\r\n\r\n\t\treturn this._mrt;\r\n\r\n\t}\r\n\r\n\tisGlobal() {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tgetTexture( name ) {\r\n\r\n\t\tlet texture = this._textures[ name ];\r\n\r\n\t\tif ( texture === undefined ) {\r\n\r\n\t\t\tconst refTexture = this.renderTarget.texture;\r\n\r\n\t\t\ttexture = refTexture.clone();\r\n\t\t\ttexture.isRenderTargetTexture = true;\r\n\t\t\ttexture.name = name;\r\n\r\n\t\t\tthis._textures[ name ] = texture;\r\n\r\n\t\t\tthis.renderTarget.textures.push( texture );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tgetPreviousTexture( name ) {\r\n\r\n\t\tlet texture = this._previousTextures[ name ];\r\n\r\n\t\tif ( texture === undefined ) {\r\n\r\n\t\t\ttexture = this.getTexture( name ).clone();\r\n\t\t\ttexture.isRenderTargetTexture = true;\r\n\r\n\t\t\tthis._previousTextures[ name ] = texture;\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\ttoggleTexture( name ) {\r\n\r\n\t\tconst prevTexture = this._previousTextures[ name ];\r\n\r\n\t\tif ( prevTexture !== undefined ) {\r\n\r\n\t\t\tconst texture = this._textures[ name ];\r\n\r\n\t\t\tconst index = this.renderTarget.textures.indexOf( texture );\r\n\t\t\tthis.renderTarget.textures[ index ] = prevTexture;\r\n\r\n\t\t\tthis._textures[ name ] = prevTexture;\r\n\t\t\tthis._previousTextures[ name ] = texture;\r\n\r\n\t\t\tthis._textureNodes[ name ].updateTexture();\r\n\t\t\tthis._previousTextureNodes[ name ].updateTexture();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetTextureNode( name = 'output' ) {\r\n\r\n\t\tlet textureNode = this._textureNodes[ name ];\r\n\r\n\t\tif ( textureNode === undefined ) {\r\n\r\n\t\t\tthis._textureNodes[ name ] = textureNode = nodeObject( new PassMultipleTextureNode( this, name ) );\r\n\t\t\tthis._textureNodes[ name ].updateTexture();\r\n\r\n\t\t}\r\n\r\n\t\treturn textureNode;\r\n\r\n\t}\r\n\r\n\tgetPreviousTextureNode( name = 'output' ) {\r\n\r\n\t\tlet textureNode = this._previousTextureNodes[ name ];\r\n\r\n\t\tif ( textureNode === undefined ) {\r\n\r\n\t\t\tif ( this._textureNodes[ name ] === undefined ) this.getTextureNode( name );\r\n\r\n\t\t\tthis._previousTextureNodes[ name ] = textureNode = nodeObject( new PassMultipleTextureNode( this, name, true ) );\r\n\t\t\tthis._previousTextureNodes[ name ].updateTexture();\r\n\r\n\t\t}\r\n\r\n\t\treturn textureNode;\r\n\r\n\t}\r\n\r\n\tgetViewZNode( name = 'depth' ) {\r\n\r\n\t\tlet viewZNode = this._viewZNodes[ name ];\r\n\r\n\t\tif ( viewZNode === undefined ) {\r\n\r\n\t\t\tconst cameraNear = this._cameraNear;\r\n\t\t\tconst cameraFar = this._cameraFar;\r\n\r\n\t\t\tthis._viewZNodes[ name ] = viewZNode = perspectiveDepthToViewZ( this.getTextureNode( name ), cameraNear, cameraFar );\r\n\r\n\t\t}\r\n\r\n\t\treturn viewZNode;\r\n\r\n\t}\r\n\r\n\tgetLinearDepthNode( name = 'depth' ) {\r\n\r\n\t\tlet linearDepthNode = this._linearDepthNodes[ name ];\r\n\r\n\t\tif ( linearDepthNode === undefined ) {\r\n\r\n\t\t\tconst cameraNear = this._cameraNear;\r\n\t\t\tconst cameraFar = this._cameraFar;\r\n\t\t\tconst viewZNode = this.getViewZNode( name );\r\n\r\n\t\t\t// TODO: just if ( builder.camera.isPerspectiveCamera )\r\n\r\n\t\t\tthis._linearDepthNodes[ name ] = linearDepthNode = viewZToOrthographicDepth( viewZNode, cameraNear, cameraFar );\r\n\r\n\t\t}\r\n\r\n\t\treturn linearDepthNode;\r\n\r\n\t}\r\n\r\n\tsetup( { renderer } ) {\r\n\r\n\t\tthis.renderTarget.samples = this.options.samples === undefined ? renderer.samples : this.options.samples;\r\n\r\n\t\t// Disable MSAA for WebGL backend for now\r\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\r\n\r\n\t\t\tthis.renderTarget.samples = 0;\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget.depthTexture.isMultisampleRenderTargetTexture = this.renderTarget.samples > 1;\r\n\r\n\t\treturn this.scope === PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\t\tconst { scene, camera } = this;\r\n\r\n\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tconst size = renderer.getSize( _size );\r\n\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\r\n\t\tthis._cameraNear.value = camera.near;\r\n\t\tthis._cameraFar.value = camera.far;\r\n\r\n\t\tfor ( const name in this._previousTextures ) {\r\n\r\n\t\t\tthis.toggleTexture( name );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( this.renderTarget );\r\n\t\trenderer.setMRT( this._mrt );\r\n\r\n\t\trenderer.render( scene, camera );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\r\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\r\n\r\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t}\r\n\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this._width, this._height );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.renderTarget.dispose();\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nPassNode.COLOR = 'color';\r\nPassNode.DEPTH = 'depth';\r\n\r\nexport default PassNode;\r\n\r\nexport const pass = ( scene, camera, options ) => nodeObject( new PassNode( PassNode.COLOR, scene, camera, options ) );\r\nexport const passTexture = ( pass, texture ) => nodeObject( new PassTextureNode( pass, texture ) );\r\nexport const depthPass = ( scene, camera ) => nodeObject( new PassNode( PassNode.DEPTH, scene, camera ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, Fn, float, vec2, vec4 } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { mul } from '../math/OperatorNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\n// WebGPU: The use of a single QuadMesh for both gaussian blur passes results in a single RenderObject with a SampledTexture binding that\r\n// alternates between source textures and triggers creation of new BindGroups and BindGroupLayouts every frame.\r\n\r\nconst _quadMesh1 = /*@__PURE__*/ new QuadMesh();\r\nconst _quadMesh2 = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass GaussianBlurNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'GaussianBlurNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, directionNode = null, sigma = 2 ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.directionNode = directionNode;\r\n\t\tthis.sigma = sigma;\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\t\tthis._passDirection = uniform( new Vector2() );\r\n\r\n\t\tthis._horizontalRT = new RenderTarget();\r\n\t\tthis._horizontalRT.texture.name = 'GaussianBlurNode.horizontal';\r\n\t\tthis._verticalRT = new RenderTarget();\r\n\t\tthis._verticalRT.texture.name = 'GaussianBlurNode.vertical';\r\n\r\n\t\tthis._textureNode = passTexture( this, this._verticalRT.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis.resolution = new Vector2( 1, 1 );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\r\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\r\n\r\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\r\n\t\tthis._horizontalRT.setSize( width, height );\r\n\t\tthis._verticalRT.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst map = textureNode.value;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\r\n\t\tconst currentTexture = textureNode.value;\r\n\r\n\t\t_quadMesh1.material = this._material;\r\n\t\t_quadMesh2.material = this._material;\r\n\r\n\t\tthis.setSize( map.image.width, map.image.height );\r\n\r\n\t\tconst textureType = map.type;\r\n\r\n\t\tthis._horizontalRT.texture.type = textureType;\r\n\t\tthis._verticalRT.texture.type = textureType;\r\n\r\n\t\t// clear\r\n\r\n\t\trenderer.setMRT( null );\r\n\r\n\t\t// horizontal\r\n\r\n\t\trenderer.setRenderTarget( this._horizontalRT );\r\n\r\n\t\tthis._passDirection.value.set( 1, 0 );\r\n\r\n\t\t_quadMesh1.render( renderer );\r\n\r\n\t\t// vertical\r\n\r\n\t\ttextureNode.value = this._horizontalRT.texture;\r\n\t\trenderer.setRenderTarget( this._verticalRT );\r\n\r\n\t\tthis._passDirection.value.set( 0, 1 );\r\n\r\n\t\t_quadMesh2.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\ttextureNode.value = currentTexture;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\r\n\t\tif ( textureNode.isTextureNode !== true ) {\r\n\r\n\t\t\tconsole.error( 'GaussianBlurNode requires a TextureNode.' );\r\n\r\n\t\t\treturn vec4();\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\t\tconst directionNode = vec2( this.directionNode || 1 );\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst blur = Fn( () => {\r\n\r\n\t\t\tconst kernelSize = 3 + ( 2 * this.sigma );\r\n\t\t\tconst gaussianCoefficients = this._getCoefficients( kernelSize );\r\n\r\n\t\t\tconst invSize = this._invSize;\r\n\t\t\tconst direction = directionNode.mul( this._passDirection );\r\n\r\n\t\t\tconst weightSum = float( gaussianCoefficients[ 0 ] ).toVar();\r\n\t\t\tconst diffuseSum = vec4( sampleTexture( uvNode ).mul( weightSum ) ).toVar();\r\n\r\n\t\t\tfor ( let i = 1; i < kernelSize; i ++ ) {\r\n\r\n\t\t\t\tconst x = float( i );\r\n\t\t\t\tconst w = float( gaussianCoefficients[ i ] );\r\n\r\n\t\t\t\tconst uvOffset = vec2( direction.mul( invSize.mul( x ) ) ).toVar();\r\n\r\n\t\t\t\tconst sample1 = vec4( sampleTexture( uvNode.add( uvOffset ) ) );\r\n\t\t\t\tconst sample2 = vec4( sampleTexture( uvNode.sub( uvOffset ) ) );\r\n\r\n\t\t\t\tdiffuseSum.addAssign( sample1.add( sample2 ).mul( w ) );\r\n\t\t\t\tweightSum.addAssign( mul( 2.0, w ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn diffuseSum.div( weightSum );\r\n\r\n\t\t} );\r\n\r\n\t\t//\r\n\r\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\r\n\t\tmaterial.fragmentNode = blur().context( builder.getSharedContext() );\r\n\t\tmaterial.name = 'Gaussian_blur';\r\n\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.textureNode = textureNode;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._horizontalRT.dispose();\r\n\t\tthis._verticalRT.dispose();\r\n\r\n\t}\r\n\r\n\t_getCoefficients( kernelRadius ) {\r\n\r\n\t\tconst coefficients = [];\r\n\r\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\r\n\r\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\r\n\r\n\t\t}\r\n\r\n\t\treturn coefficients;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default GaussianBlurNode;\r\n\r\nexport const gaussianBlur = ( node, directionNode, sigma ) => nodeObject( new GaussianBlurNode( convertToTexture( node ), directionNode, sigma ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, Fn, float, vec4 } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { sign, max } from '../math/MathNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nconst _quadMeshComp = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass AfterImageNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AfterImageNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, damp = 0.96 ) {\r\n\r\n\t\tsuper( textureNode );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.textureNodeOld = texture();\r\n\t\tthis.damp = uniform( damp );\r\n\r\n\t\tthis._compRT = new RenderTarget();\r\n\t\tthis._compRT.texture.name = 'AfterImageNode.comp';\r\n\r\n\t\tthis._oldRT = new RenderTarget();\r\n\t\tthis._oldRT.texture.name = 'AfterImageNode.old';\r\n\r\n\t\tthis._textureNode = passTexture( this, this._compRT.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._compRT.setSize( width, height );\r\n\t\tthis._oldRT.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst map = textureNode.value;\r\n\r\n\t\tconst textureType = map.type;\r\n\r\n\t\tthis._compRT.texture.type = textureType;\r\n\t\tthis._oldRT.texture.type = textureType;\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\tthis.setSize( _size.x, _size.y );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentTexture = textureNode.value;\r\n\r\n\t\tthis.textureNodeOld.value = this._oldRT.texture;\r\n\r\n\t\t// comp\r\n\t\trenderer.setRenderTarget( this._compRT );\r\n\t\t_quadMeshComp.render( renderer );\r\n\r\n\t\t// Swap the textures\r\n\t\tconst temp = this._oldRT;\r\n\t\tthis._oldRT = this._compRT;\r\n\t\tthis._compRT = temp;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\ttextureNode.value = currentTexture;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst textureNodeOld = this.textureNodeOld;\r\n\r\n\t\t//\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\ttextureNodeOld.uvNode = uvNode;\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst when_gt = Fn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\t\t\tconst y = float( y_immutable ).toVar();\r\n\t\t\tconst x = vec4( x_immutable ).toVar();\r\n\r\n\t\t\treturn max( sign( x.sub( y ) ), 0.0 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst afterImg = Fn( () => {\r\n\r\n\t\t\tconst texelOld = vec4( textureNodeOld );\r\n\t\t\tconst texelNew = vec4( sampleTexture( uvNode ) );\r\n\r\n\t\t\ttexelOld.mulAssign( this.damp.mul( when_gt( texelOld, 0.1 ) ) );\r\n\t\t\treturn max( texelNew, texelOld );\r\n\r\n\t\t} );\r\n\r\n\t\t//\r\n\r\n\t\tconst materialComposed = this._materialComposed || ( this._materialComposed = new NodeMaterial() );\r\n\t\tmaterialComposed.name = 'AfterImage';\r\n\t\tmaterialComposed.fragmentNode = afterImg();\r\n\r\n\t\t_quadMeshComp.material = materialComposed;\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.textureNode = textureNode;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._compRT.dispose();\r\n\t\tthis._oldRT.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const afterImage = ( node, damp ) => nodeObject( new AfterImageNode( convertToTexture( node ), damp ) );\r\n\r\nexport default AfterImageNode;\r\n", "import { dot, mix } from '../math/MathNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { Fn, float, vec3 } from '../tsl/TSLBase.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nexport const grayscale = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\treturn luminance( color.rgb );\r\n\r\n} );\r\n\r\nexport const saturation = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\r\n\r\n\treturn adjustment.mix( luminance( color.rgb ), color.rgb );\r\n\r\n} );\r\n\r\nexport const vibrance = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\r\n\r\n\tconst average = add( color.r, color.g, color.b ).div( 3.0 );\r\n\r\n\tconst mx = color.r.max( color.g.max( color.b ) );\r\n\tconst amt = mx.sub( average ).mul( adjustment ).mul( - 3.0 );\r\n\r\n\treturn mix( color.rgb, mx, amt );\r\n\r\n} );\r\n\r\nexport const hue = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\r\n\r\n\tconst k = vec3( 0.57735, 0.57735, 0.57735 );\r\n\r\n\tconst cosAngle = adjustment.cos();\r\n\r\n\treturn vec3( color.rgb.mul( cosAngle ).add( k.cross( color.rgb ).mul( adjustment.sin() ).add( k.mul( dot( k, color.rgb ).mul( cosAngle.oneMinus() ) ) ) ) );\r\n\r\n} );\r\n\r\nconst _luminanceCoefficients = /*@__PURE__*/ new Vector3();\r\nexport const luminance = (\r\n\tcolor,\r\n\tluminanceCoefficients = vec3( ... ColorManagement.getLuminanceCoefficients( _luminanceCoefficients ) )\r\n) => dot( color, luminanceCoefficients );\r\n\r\nexport const threshold = ( color, threshold ) => mix( vec3( 0.0 ), color, luminance( color ).sub( threshold ).max( 0 ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, Fn, float, vec2, vec3 } from '../tsl/TSLBase.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { threshold } from './ColorAdjustment.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass AnamorphicNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AnamorphicNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, tresholdNode, scaleNode, samples ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.tresholdNode = tresholdNode;\r\n\t\tthis.scaleNode = scaleNode;\r\n\t\tthis.colorNode = vec3( 0.1, 0.0, 1.0 );\r\n\t\tthis.samples = samples;\r\n\t\tthis.resolution = new Vector2( 1, 1 );\r\n\r\n\t\tthis._renderTarget = new RenderTarget();\r\n\t\tthis._renderTarget.texture.name = 'anamorphic';\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\r\n\t\tthis._textureNode = passTexture( this, this._renderTarget.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\r\n\r\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\r\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\r\n\r\n\t\tthis._renderTarget.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst map = textureNode.value;\r\n\r\n\t\tthis._renderTarget.texture.type = map.type;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentTexture = textureNode.value;\r\n\r\n\t\t_quadMesh.material = this._material;\r\n\r\n\t\tthis.setSize( map.image.width, map.image.height );\r\n\r\n\t\t// render\r\n\r\n\t\trenderer.setRenderTarget( this._renderTarget );\r\n\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\ttextureNode.value = currentTexture;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst anamorph = Fn( () => {\r\n\r\n\t\t\tconst samples = this.samples;\r\n\t\t\tconst halfSamples = Math.floor( samples / 2 );\r\n\r\n\t\t\tconst total = vec3( 0 ).toVar();\r\n\r\n\t\t\tLoop( { start: - halfSamples, end: halfSamples }, ( { i } ) => {\r\n\r\n\t\t\t\tconst softness = float( i ).abs().div( halfSamples ).oneMinus();\r\n\r\n\t\t\t\tconst uv = vec2( uvNode.x.add( this._invSize.x.mul( i ).mul( this.scaleNode ) ), uvNode.y );\r\n\t\t\t\tconst color = sampleTexture( uv );\r\n\t\t\t\tconst pass = threshold( color, this.tresholdNode ).mul( softness );\r\n\r\n\t\t\t\ttotal.addAssign( pass );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn total.mul( this.colorNode );\r\n\r\n\t\t} );\r\n\r\n\t\t//\r\n\r\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\r\n\t\tmaterial.name = 'Anamorphic';\r\n\t\tmaterial.fragmentNode = anamorph();\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.textureNode = textureNode;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._renderTarget.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const anamorphic = ( node, threshold = .9, scale = 3, samples = 32 ) => nodeObject( new AnamorphicNode( convertToTexture( node ), nodeObject( threshold ), nodeObject( scale ), samples ) );\r\n\r\nexport default AnamorphicNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { luminance } from './ColorAdjustment.js';\r\nimport { Fn, nodeObject, vec2, vec3, vec4, mat3 } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass SobelOperatorNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SobelOperatorNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._invSize.value.set( 1 / map.image.width, 1 / map.image.height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNode } = this;\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst sobel = Fn( () => {\r\n\r\n\t\t\t// Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\r\n\r\n\t\t\tconst texel = this._invSize;\r\n\r\n\t\t\t// kernel definition (in glsl matrices are filled in column-major order)\r\n\r\n\t\t\tconst Gx = mat3( - 1, - 2, - 1, 0, 0, 0, 1, 2, 1 ); // x direction kernel\r\n\t\t\tconst Gy = mat3( - 1, 0, 1, - 2, 0, 2, - 1, 0, 1 ); // y direction kernel\r\n\r\n\t\t\t// fetch the 3x3 neighbourhood of a fragment\r\n\r\n\t\t\t// first column\r\n\r\n\t\t\tconst tx0y0 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( - 1, - 1 ) ) ) ).xyz );\r\n\t\t\tconst tx0y1 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( - 1, 0 ) ) ) ).xyz );\r\n\t\t\tconst tx0y2 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( - 1, 1 ) ) ) ).xyz );\r\n\r\n\t\t\t// second column\r\n\r\n\t\t\tconst tx1y0 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 0, - 1 ) ) ) ).xyz );\r\n\t\t\tconst tx1y1 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 0, 0 ) ) ) ).xyz );\r\n\t\t\tconst tx1y2 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 0, 1 ) ) ) ).xyz );\r\n\r\n\t\t\t// third column\r\n\r\n\t\t\tconst tx2y0 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 1, - 1 ) ) ) ).xyz );\r\n\t\t\tconst tx2y1 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 1, 0 ) ) ) ).xyz );\r\n\t\t\tconst tx2y2 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 1, 1 ) ) ) ).xyz );\r\n\r\n\t\t\t// gradient value in x direction\r\n\r\n\t\t\tconst valueGx = add(\r\n\t\t\t\tGx[ 0 ][ 0 ].mul( tx0y0 ),\r\n\t\t\t\tGx[ 1 ][ 0 ].mul( tx1y0 ),\r\n\t\t\t\tGx[ 2 ][ 0 ].mul( tx2y0 ),\r\n\t\t\t\tGx[ 0 ][ 1 ].mul( tx0y1 ),\r\n\t\t\t\tGx[ 1 ][ 1 ].mul( tx1y1 ),\r\n\t\t\t\tGx[ 2 ][ 1 ].mul( tx2y1 ),\r\n\t\t\t\tGx[ 0 ][ 2 ].mul( tx0y2 ),\r\n\t\t\t\tGx[ 1 ][ 2 ].mul( tx1y2 ),\r\n\t\t\t\tGx[ 2 ][ 2 ].mul( tx2y2 )\r\n\t\t\t);\r\n\r\n\r\n\t\t\t// gradient value in y direction\r\n\r\n\t\t\tconst valueGy = add(\r\n\t\t\t\tGy[ 0 ][ 0 ].mul( tx0y0 ),\r\n\t\t\t\tGy[ 1 ][ 0 ].mul( tx1y0 ),\r\n\t\t\t\tGy[ 2 ][ 0 ].mul( tx2y0 ),\r\n\t\t\t\tGy[ 0 ][ 1 ].mul( tx0y1 ),\r\n\t\t\t\tGy[ 1 ][ 1 ].mul( tx1y1 ),\r\n\t\t\t\tGy[ 2 ][ 1 ].mul( tx2y1 ),\r\n\t\t\t\tGy[ 0 ][ 2 ].mul( tx0y2 ),\r\n\t\t\t\tGy[ 1 ][ 2 ].mul( tx1y2 ),\r\n\t\t\t\tGy[ 2 ][ 2 ].mul( tx2y2 )\r\n\t\t\t);\r\n\r\n\t\t\t// magnitute of the total gradient\r\n\r\n\t\t\tconst G = valueGx.mul( valueGx ).add( valueGy.mul( valueGy ) ).sqrt();\r\n\r\n\t\t\treturn vec4( vec3( G ), 1 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = sobel();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SobelOperatorNode;\r\n\r\nexport const sobel = ( node ) => nodeObject( new SobelOperatorNode( convertToTexture( node ) ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { Fn, nodeObject, vec2, vec4 } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { clamp } from '../math/MathNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\n\r\nclass DepthOfFieldNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'DepthOfFieldNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, viewZNode, focusNode, apertureNode, maxblurNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.viewZNode = viewZNode;\r\n\r\n\t\tthis.focusNode = focusNode;\r\n\t\tthis.apertureNode = apertureNode;\r\n\t\tthis.maxblurNode = maxblurNode;\r\n\r\n\t\tthis._aspect = uniform( 0 );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._aspect.value = map.image.width / map.image.height;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst dof = Fn( () => {\r\n\r\n\t\t\tconst aspectcorrect = vec2( 1.0, this._aspect );\r\n\r\n\t\t\tconst factor = this.focusNode.add( this.viewZNode );\r\n\r\n\t\t\tconst dofblur = vec2( clamp( factor.mul( this.apertureNode ), this.maxblurNode.negate(), this.maxblurNode ) );\r\n\r\n\t\t\tconst dofblur9 = dofblur.mul( 0.9 );\r\n\t\t\tconst dofblur7 = dofblur.mul( 0.7 );\r\n\t\t\tconst dofblur4 = dofblur.mul( 0.4 );\r\n\r\n\t\t\tlet col = vec4( 0.0 );\r\n\r\n\t\t\tcol = col.add( sampleTexture( uvNode ) );\r\n\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, 0.4 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.40, 0.0 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, - 0.4 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.40, 0.0 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, - 0.4 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, 0.4 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, - 0.4 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, 0.4 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\r\n\t\t\tcol = col.div( 41 );\r\n\t\t\tcol.a = 1;\r\n\r\n\t\t\treturn vec4( col );\r\n\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = dof();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DepthOfFieldNode;\r\n\r\nexport const dof = ( node, viewZNode, focus = 1, aperture = 0.025, maxblur = 1 ) => nodeObject( new DepthOfFieldNode( convertToTexture( node ), nodeObject( viewZNode ), nodeObject( focus ), nodeObject( aperture ), nodeObject( maxblur ) ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, Fn, vec2, vec3, vec4 } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { sin, cos } from '../math/MathNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { screenSize } from './ScreenNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass DotScreenNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'DotScreenNode';\r\n\r\n\t}\r\n\r\n\tconstructor( inputNode, center = new Vector2( 0.5, 0.5 ), angle = 1.57, scale = 1 ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.center = uniform( center );\r\n\t\tthis.angle = uniform( angle );\r\n\t\tthis.scale = uniform( scale );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst inputNode = this.inputNode;\r\n\r\n\t\tconst pattern = Fn( () => {\r\n\r\n\t\t\tconst s = sin( this.angle );\r\n\t\t\tconst c = cos( this.angle );\r\n\r\n\t\t\tconst tex = uv().mul( screenSize ).sub( this.center );\r\n\t\t\tconst point = vec2( c.mul( tex.x ).sub( s.mul( tex.y ) ), s.mul( tex.x ).add( c.mul( tex.y ) ) ).mul( this.scale );\r\n\r\n\t\t\treturn sin( point.x ).mul( sin( point.y ) ).mul( 4 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst dotScreen = Fn( () => {\r\n\r\n\t\t\tconst color = inputNode;\r\n\r\n\t\t\tconst average = add( color.r, color.g, color.b ).div( 3 );\r\n\r\n\t\t\treturn vec4( vec3( average.mul( 10 ).sub( 5 ).add( pattern() ) ), color.a );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = dotScreen();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DotScreenNode;\r\n\r\nexport const dotScreen = ( node, center, angle, scale ) => nodeObject( new DotScreenNode( nodeObject( node ), center, angle, scale ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, Fn, vec2, vec4 } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { sin, cos } from '../math/MathNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\n\r\nclass RGBShiftNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RGBShiftNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, amount = 0.005, angle = 0 ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.amount = uniform( amount );\r\n\t\tthis.angle = uniform( angle );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNode } = this;\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst rgbShift = Fn( () => {\r\n\r\n\t\t\tconst offset = vec2( cos( this.angle ), sin( this.angle ) ).mul( this.amount );\r\n\t\t\tconst cr = sampleTexture( uvNode.add( offset ) );\r\n\t\t\tconst cga = sampleTexture( uvNode );\r\n\t\t\tconst cb = sampleTexture( uvNode.sub( offset ) );\r\n\r\n\t\t\treturn vec4( cr.r, cga.g, cb.b, cga.a );\r\n\r\n\t\t} );\r\n\r\n\t\treturn rgbShift();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RGBShiftNode;\r\n\r\nexport const rgbShift = ( node, amount, angle ) => nodeObject( new RGBShiftNode( convertToTexture( node ), amount, angle ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { Fn, nodeProxy, vec4 } from '../tsl/TSLBase.js';\r\nimport { mix, fract, clamp, rand } from '../math/MathNode.js';\r\nimport { timerLocal } from '../utils/TimerNode.js';\r\n\r\nclass FilmNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FilmNode';\r\n\r\n\t}\r\n\r\n\tconstructor( inputNode, intensityNode = null, uvNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.intensityNode = intensityNode;\r\n\t\tthis.uvNode = uvNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst uvNode = this.uvNode || uv();\r\n\r\n\t\tconst film = Fn( () => {\r\n\r\n\t\t\tconst base = this.inputNode.rgb;\r\n\t\t\tconst noise = rand( fract( uvNode.add( timerLocal() ) ) );\r\n\r\n\t\t\tlet color = base.add( base.mul( clamp( noise.add( 0.1 ), 0, 1 ) ) );\r\n\r\n\t\t\tif ( this.intensityNode !== null ) {\r\n\r\n\t\t\t\tcolor = mix( base, color, this.intensityNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn vec4( color, this.inputNode.a );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = film();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FilmNode;\r\n\r\nexport const film = /*@__PURE__*/ nodeProxy( FilmNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { Fn, nodeObject, vec3, vec4, float } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\n\r\nclass Lut3DNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Lut3DNode';\r\n\r\n\t}\r\n\r\n\tconstructor( inputNode, lutNode, size, intensityNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.lutNode = lutNode;\r\n\t\tthis.size = uniform( size );\r\n\t\tthis.intensityNode = intensityNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { inputNode, lutNode } = this;\r\n\r\n\t\tconst sampleLut = ( uv ) => lutNode.uv( uv );\r\n\r\n\t\tconst lut3D = Fn( () => {\r\n\r\n\t\t\tconst base = inputNode;\r\n\r\n\t\t\t// pull the sample in by half a pixel so the sample begins at the center of the edge pixels.\r\n\r\n\t\t\tconst pixelWidth = float( 1.0 ).div( this.size );\r\n\t\t\tconst halfPixelWidth = float( 0.5 ).div( this.size );\r\n\t\t\tconst uvw = vec3( halfPixelWidth ).add( base.rgb.mul( float( 1.0 ).sub( pixelWidth ) ) );\r\n\r\n\t\t\tconst lutValue = vec4( sampleLut( uvw ).rgb, base.a );\r\n\r\n\t\t\treturn vec4( mix( base, lutValue, this.intensityNode ) );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = lut3D();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Lut3DNode;\r\n\r\nexport const lut3D = ( node, lut, size, intensity ) => nodeObject( new Lut3DNode( nodeObject( node ), nodeObject( lut ), size, nodeObject( intensity ) ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { textureSize } from '../accessors/TextureSizeNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { nodeObject, Fn, mat3, vec2, vec3, vec4, float, int, If } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { DataTexture } from '../../textures/DataTexture.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { PI, cos, sin, pow, clamp, abs, max, mix, sqrt, acos, dot, normalize, cross } from '../math/MathNode.js';\r\nimport { div, mul, add, sub } from '../math/OperatorNode.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { RepeatWrapping } from '../../constants.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { Color } from '../../math/Color.js';\r\n\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\nconst _currentClearColor = /*@__PURE__*/ new Color();\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass GTAONode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'GTAONode';\r\n\r\n\t}\r\n\r\n\tconstructor( depthNode, normalNode, camera ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.depthNode = depthNode;\r\n\t\tthis.normalNode = normalNode;\r\n\r\n\t\tthis.radius = uniform( 0.25 );\r\n\t\tthis.resolution = uniform( new Vector2() );\r\n\t\tthis.thickness = uniform( 1 );\r\n\t\tthis.distanceExponent = uniform( 1 );\r\n\t\tthis.distanceFallOff = uniform( 1 );\r\n\t\tthis.scale = uniform( 1 );\r\n\t\tthis.noiseNode = texture( generateMagicSquareNoise() );\r\n\r\n\t\tthis.cameraProjectionMatrix = uniform( camera.projectionMatrix );\r\n\t\tthis.cameraProjectionMatrixInverse = uniform( camera.projectionMatrixInverse );\r\n\r\n\t\tthis.SAMPLES = uniform( 16 );\r\n\r\n\t\tthis._aoRenderTarget = new RenderTarget();\r\n\t\tthis._aoRenderTarget.texture.name = 'GTAONode.AO';\r\n\r\n\t\tthis._material = null;\r\n\t\tthis._textureNode = passTexture( this, this._aoRenderTarget.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.resolution.value.set( width, height );\r\n\t\tthis._aoRenderTarget.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst size = renderer.getDrawingBufferSize( _size );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\trenderer.getClearColor( _currentClearColor );\r\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\t_quadMesh.material = this._material;\r\n\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\t// clear\r\n\r\n\t\trenderer.setMRT( null );\r\n\t\trenderer.setClearColor( 0xffffff, 1 );\r\n\r\n\t\t// ao\r\n\r\n\t\trenderer.setRenderTarget( this._aoRenderTarget );\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\trenderer.setClearColor( _currentClearColor, currentClearAlpha );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst uvNode = uv();\r\n\r\n\t\tconst sampleDepth = ( uv ) => this.depthNode.uv( uv ).x;\r\n\t\tconst sampleNoise = ( uv ) => this.noiseNode.uv( uv );\r\n\r\n\t\tconst getSceneUvAndDepth = Fn( ( [ sampleViewPos ] )=> {\r\n\r\n\t\t\tconst sampleClipPos = this.cameraProjectionMatrix.mul( vec4( sampleViewPos, 1.0 ) );\r\n\t\t\tlet sampleUv = sampleClipPos.xy.div( sampleClipPos.w ).mul( 0.5 ).add( 0.5 ).toVar();\r\n\t\t\tsampleUv = vec2( sampleUv.x, sampleUv.y.oneMinus() );\r\n\t\t\tconst sampleSceneDepth = sampleDepth( sampleUv );\r\n\t\t\treturn vec3( sampleUv, sampleSceneDepth );\r\n\r\n\t\t} );\r\n\r\n\t\tconst getViewPosition = Fn( ( [ screenPosition, depth ] ) => {\r\n\r\n\t\t\tscreenPosition = vec2( screenPosition.x, screenPosition.y.oneMinus() ).mul( 2.0 ).sub( 1.0 );\r\n\r\n\t\t\tconst clipSpacePosition = vec4( vec3( screenPosition, depth ), 1.0 );\r\n\t\t\tconst viewSpacePosition = vec4( this.cameraProjectionMatrixInverse.mul( clipSpacePosition ) );\r\n\r\n\t\t\treturn viewSpacePosition.xyz.div( viewSpacePosition.w );\r\n\r\n\t\t} );\r\n\r\n\t\tconst ao = Fn( () => {\r\n\r\n\t\t\tconst depth = sampleDepth( uvNode );\r\n\r\n\t\t\tdepth.greaterThanEqual( 1.0 ).discard();\r\n\r\n\t\t\tconst viewPosition = getViewPosition( uvNode, depth );\r\n\t\t\tconst viewNormal = this.normalNode.rgb.normalize();\r\n\r\n\t\t\tconst radiusToUse = this.radius;\r\n\r\n\t\t\tconst noiseResolution = textureSize( this.noiseNode, 0 );\r\n\t\t\tlet noiseUv = vec2( uvNode.x, uvNode.y.oneMinus() );\r\n\t\t\tnoiseUv = noiseUv.mul( this.resolution.div( noiseResolution ) );\r\n\t\t\tconst noiseTexel = sampleNoise( noiseUv );\r\n\t\t\tconst randomVec = noiseTexel.xyz.mul( 2.0 ).sub( 1.0 );\r\n\t\t\tconst tangent = vec3( randomVec.xy, 0.0 ).normalize();\r\n\t\t\tconst bitangent = vec3( tangent.y.mul( - 1.0 ), tangent.x, 0.0 );\r\n\t\t\tconst kernelMatrix = mat3( tangent, bitangent, vec3( 0.0, 0.0, 1.0 ) );\r\n\r\n\t\t\tconst DIRECTIONS = this.SAMPLES.lessThan( 30 ).select( 3, 5 );\r\n\t\t\tconst STEPS = add( this.SAMPLES, DIRECTIONS.sub( 1 ) ).div( DIRECTIONS );\r\n\r\n\t\t\tconst ao = float( 0 ).toVar();\r\n\r\n\t\t\tLoop( { start: int( 0 ), end: DIRECTIONS, type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\t\t\tconst angle = float( i ).div( float( DIRECTIONS ) ).mul( PI );\r\n\t\t\t\tconst sampleDir = vec4( cos( angle ), sin( angle ), 0., add( 0.5, mul( 0.5, noiseTexel.w ) ) );\r\n\t\t\t\tsampleDir.xyz = normalize( kernelMatrix.mul( sampleDir.xyz ) );\r\n\r\n\t\t\t\tconst viewDir = normalize( viewPosition.xyz.negate() );\r\n\t\t\t\tconst sliceBitangent = normalize( cross( sampleDir.xyz, viewDir ) );\r\n\t\t\t\tconst sliceTangent = cross( sliceBitangent, viewDir );\r\n\t\t\t\tconst normalInSlice = normalize( viewNormal.sub( sliceBitangent.mul( dot( viewNormal, sliceBitangent ) ) ) );\r\n\r\n\t\t\t\tconst tangentToNormalInSlice = cross( normalInSlice, sliceBitangent );\r\n\t\t\t\tconst cosHorizons = vec2( dot( viewDir, tangentToNormalInSlice ), dot( viewDir, tangentToNormalInSlice.negate() ) ).toVar();\r\n\r\n\t\t\t\tLoop( { end: STEPS, type: 'int', name: 'j', condition: '<' }, ( { j } ) => {\r\n\r\n\t\t\t\t\tconst sampleViewOffset = sampleDir.xyz.mul( radiusToUse ).mul( sampleDir.w ).mul( pow( div( float( j ).add( 1.0 ), float( STEPS ) ), this.distanceExponent ) );\r\n\r\n\t\t\t\t\t// x\r\n\r\n\t\t\t\t\tconst sampleSceneUvDepthX = getSceneUvAndDepth( viewPosition.add( sampleViewOffset ) );\r\n\t\t\t\t\tconst sampleSceneViewPositionX = getViewPosition( sampleSceneUvDepthX.xy, sampleSceneUvDepthX.z );\r\n\t\t\t\t\tconst viewDeltaX = sampleSceneViewPositionX.sub( viewPosition );\r\n\r\n\t\t\t\t\tIf( abs( viewDeltaX.z ).lessThan( this.thickness ), () => {\r\n\r\n\t\t\t\t\t\tconst sampleCosHorizon = dot( viewDir, normalize( viewDeltaX ) );\r\n\t\t\t\t\t\tcosHorizons.x.addAssign( max( 0, mul( sampleCosHorizon.sub( cosHorizons.x ), mix( 1.0, float( 2.0 ).div( float( j ).add( 2 ) ), this.distanceFallOff ) ) ) );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t// y\r\n\r\n\t\t\t\t\tconst sampleSceneUvDepthY = getSceneUvAndDepth( viewPosition.sub( sampleViewOffset ) );\r\n\t\t\t\t\tconst sampleSceneViewPositionY = getViewPosition( sampleSceneUvDepthY.xy, sampleSceneUvDepthY.z );\r\n\t\t\t\t\tconst viewDeltaY = sampleSceneViewPositionY.sub( viewPosition );\r\n\r\n\t\t\t\t\tIf( abs( viewDeltaY.z ).lessThan( this.thickness ), () => {\r\n\r\n\t\t\t\t\t\tconst sampleCosHorizon = dot( viewDir, normalize( viewDeltaY ) );\r\n\t\t\t\t\t\tcosHorizons.y.addAssign( max( 0, mul( sampleCosHorizon.sub( cosHorizons.y ), mix( 1.0, float( 2.0 ).div( float( j ).add( 2 ) ), this.distanceFallOff ) ) ) );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tconst sinHorizons = sqrt( sub( 1.0, cosHorizons.mul( cosHorizons ) ) );\r\n\t\t\t\tconst nx = dot( normalInSlice, sliceTangent );\r\n\t\t\t\tconst ny = dot( normalInSlice, viewDir );\r\n\t\t\t\tconst nxb = mul( 0.5, acos( cosHorizons.y ).sub( acos( cosHorizons.x ) ).add( sinHorizons.x.mul( cosHorizons.x ).sub( sinHorizons.y.mul( cosHorizons.y ) ) ) );\r\n\t\t\t\tconst nyb = mul( 0.5, sub( 2.0, cosHorizons.x.mul( cosHorizons.x ) ).sub( cosHorizons.y.mul( cosHorizons.y ) ) );\r\n\t\t\t\tconst occlusion = nx.mul( nxb ).add( ny.mul( nyb ) );\r\n\t\t\t\tao.addAssign( occlusion );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tao.assign( clamp( ao.div( DIRECTIONS ), 0, 1 ) );\r\n\t\t\tao.assign( pow( ao, this.scale ) );\r\n\r\n\t\t\treturn vec4( vec3( ao ), 1.0 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\r\n\t\tmaterial.fragmentNode = ao().context( builder.getSharedContext() );\r\n\t\tmaterial.name = 'GTAO';\r\n\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._aoRenderTarget.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default GTAONode;\r\n\r\nfunction generateMagicSquareNoise( size = 5 ) {\r\n\r\n\tconst noiseSize = Math.floor( size ) % 2 === 0 ? Math.floor( size ) + 1 : Math.floor( size );\r\n\tconst magicSquare = generateMagicSquare( noiseSize );\r\n\tconst noiseSquareSize = magicSquare.length;\r\n\tconst data = new Uint8Array( noiseSquareSize * 4 );\r\n\r\n\tfor ( let inx = 0; inx < noiseSquareSize; ++ inx ) {\r\n\r\n\t\tconst iAng = magicSquare[ inx ];\r\n\t\tconst angle = ( 2 * Math.PI * iAng ) / noiseSquareSize;\r\n\t\tconst randomVec = new Vector3(\r\n\t\t\tMath.cos( angle ),\r\n\t\t\tMath.sin( angle ),\r\n\t\t\t0\r\n\t\t).normalize();\r\n\t\tdata[ inx * 4 ] = ( randomVec.x * 0.5 + 0.5 ) * 255;\r\n\t\tdata[ inx * 4 + 1 ] = ( randomVec.y * 0.5 + 0.5 ) * 255;\r\n\t\tdata[ inx * 4 + 2 ] = 127;\r\n\t\tdata[ inx * 4 + 3 ] = 255;\r\n\r\n\t}\r\n\r\n\tconst noiseTexture = new DataTexture( data, noiseSize, noiseSize );\r\n\tnoiseTexture.wrapS = RepeatWrapping;\r\n\tnoiseTexture.wrapT = RepeatWrapping;\r\n\tnoiseTexture.needsUpdate = true;\r\n\r\n\treturn noiseTexture;\r\n\r\n}\r\n\r\nfunction generateMagicSquare( size ) {\r\n\r\n\tconst noiseSize = Math.floor( size ) % 2 === 0 ? Math.floor( size ) + 1 : Math.floor( size );\r\n\tconst noiseSquareSize = noiseSize * noiseSize;\r\n\tconst magicSquare = Array( noiseSquareSize ).fill( 0 );\r\n\tlet i = Math.floor( noiseSize / 2 );\r\n\tlet j = noiseSize - 1;\r\n\r\n\tfor ( let num = 1; num <= noiseSquareSize; ) {\r\n\r\n\t\tif ( i === - 1 && j === noiseSize ) {\r\n\r\n\t\t\tj = noiseSize - 2;\r\n\t\t\ti = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( j === noiseSize ) {\r\n\r\n\t\t\t\tj = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( i < 0 ) {\r\n\r\n\t\t\t\ti = noiseSize - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( magicSquare[ i * noiseSize + j ] !== 0 ) {\r\n\r\n\t\t\tj -= 2;\r\n\t\t\ti ++;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmagicSquare[ i * noiseSize + j ] = num ++;\r\n\r\n\t\t}\r\n\r\n\t\tj ++;\r\n\t\ti --;\r\n\r\n\t}\r\n\r\n\treturn magicSquare;\r\n\r\n}\r\n\r\nexport const ao = ( depthNode, normalNode, camera ) => nodeObject( new GTAONode( nodeObject( depthNode ), nodeObject( normalNode ), camera ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { Fn, nodeObject, float, int, vec2, vec3, vec4, mat2, If } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uniformArray } from '../accessors/UniformArrayNode.js';\r\nimport { abs, dot, sin, cos, PI, pow, max } from '../math/MathNode.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { luminance } from './ColorAdjustment.js';\r\nimport { textureSize } from '../accessors/TextureSizeNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nclass DenoiseNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'DenoiseNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, depthNode, normalNode, noiseNode, camera ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.depthNode = depthNode;\r\n\t\tthis.normalNode = normalNode;\r\n\t\tthis.noiseNode = noiseNode;\r\n\r\n\t\tthis.cameraProjectionMatrixInverse = uniform( camera.projectionMatrixInverse );\r\n\t\tthis.lumaPhi = uniform( 5 );\r\n\t\tthis.depthPhi = uniform( 5 );\r\n\t\tthis.normalPhi = uniform( 5 );\r\n\t\tthis.radius = uniform( 5 );\r\n\t\tthis.index = uniform( 0 );\r\n\r\n\t\tthis._resolution = uniform( new Vector2() );\r\n\t\tthis._sampleVectors = uniformArray( generatePdSamplePointInitializer( 16, 2, 1 ) );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._resolution.value.set( map.image.width, map.image.height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst uvNode = uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => this.textureNode.uv( uv );\r\n\t\tconst sampleDepth = ( uv ) => this.depthNode.uv( uv ).x;\r\n\t\tconst sampleNormal = ( uv ) => this.normalNode.uv( uv );\r\n\t\tconst sampleNoise = ( uv ) => this.noiseNode.uv( uv );\r\n\r\n\t\tconst getViewPosition = Fn( ( [ screenPosition, depth ] ) => {\r\n\r\n\t\t\tscreenPosition = vec2( screenPosition.x, screenPosition.y.oneMinus() ).mul( 2.0 ).sub( 1.0 );\r\n\r\n\t\t\tconst clipSpacePosition = vec4( vec3( screenPosition, depth ), 1.0 );\r\n\t\t\tconst viewSpacePosition = vec4( this.cameraProjectionMatrixInverse.mul( clipSpacePosition ) );\r\n\r\n\t\t\treturn viewSpacePosition.xyz.div( viewSpacePosition.w );\r\n\r\n\t\t} );\r\n\r\n\t\tconst denoiseSample = Fn( ( [ center, viewNormal, viewPosition, sampleUv ] ) => {\r\n\r\n\t\t\tconst texel = sampleTexture( sampleUv );\r\n\t\t\tconst depth = sampleDepth( sampleUv );\r\n\t\t\tconst normal = sampleNormal( sampleUv ).rgb.normalize();\r\n\t\t\tconst neighborColor = texel.rgb;\r\n\t\t\tconst viewPos = getViewPosition( sampleUv, depth );\r\n\r\n\t\t\tconst normalDiff = dot( viewNormal, normal ).toVar();\r\n\t\t\tconst normalSimilarity = pow( max( normalDiff, 0 ), this.normalPhi ).toVar();\r\n\t\t\tconst lumaDiff = abs( luminance( neighborColor ).sub( luminance( center ) ) ).toVar();\r\n\t\t\tconst lumaSimilarity = max( float( 1.0 ).sub( lumaDiff.div( this.lumaPhi ) ), 0 ).toVar();\r\n\t\t\tconst depthDiff = abs( dot( viewPosition.sub( viewPos ), viewNormal ) ).toVar();\r\n\t\t\tconst depthSimilarity = max( float( 1.0 ).sub( depthDiff.div( this.depthPhi ) ), 0 );\r\n\t\t\tconst w = lumaSimilarity.mul( depthSimilarity ).mul( normalSimilarity );\r\n\r\n\t\t\treturn vec4( neighborColor.mul( w ), w );\r\n\r\n\t\t} );\r\n\r\n\t\tconst denoise = Fn( ( [ uvNode ] ) => {\r\n\r\n\t\t\tconst depth = sampleDepth( uvNode );\r\n\t\t\tconst viewNormal = sampleNormal( uvNode ).rgb.normalize();\r\n\r\n\t\t\tconst texel = sampleTexture( uvNode );\r\n\r\n\t\t\tIf( depth.greaterThanEqual( 1.0 ).or( dot( viewNormal, viewNormal ).equal( 0.0 ) ), () => {\r\n\r\n\t\t\t\treturn texel;\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst center = vec3( texel.rgb );\r\n\r\n\t\t\tconst viewPosition = getViewPosition( uvNode, depth );\r\n\r\n\t\t\tconst noiseResolution = textureSize( this.noiseNode, 0 );\r\n\t\t\tlet noiseUv = vec2( uvNode.x, uvNode.y.oneMinus() );\r\n\t\t\tnoiseUv = noiseUv.mul( this._resolution.div( noiseResolution ) );\r\n\t\t\tconst noiseTexel = sampleNoise( noiseUv );\r\n\r\n\t\t\tconst x = sin( noiseTexel.element( this.index.mod( 4 ).mul( 2 ).mul( PI ) ) );\r\n\t\t\tconst y = cos( noiseTexel.element( this.index.mod( 4 ).mul( 2 ).mul( PI ) ) );\r\n\r\n\t\t\tconst noiseVec = vec2( x, y );\r\n\t\t\tconst rotationMatrix = mat2( noiseVec.x, noiseVec.y.negate(), noiseVec.x, noiseVec.y );\r\n\r\n\t\t\tconst totalWeight = float( 1.0 ).toVar();\r\n\t\t\tconst denoised = vec3( texel.rgb ).toVar();\r\n\r\n\t\t\tLoop( { start: int( 0 ), end: int( 16 ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\t\t\tconst sampleDir = this._sampleVectors.element( i ).toVar();\r\n\t\t\t\tconst offset = rotationMatrix.mul( sampleDir.xy.mul( float( 1.0 ).add( sampleDir.z.mul( this.radius.sub( 1 ) ) ) ) ).div( this._resolution ).toVar();\r\n\t\t\t\tconst sampleUv = uvNode.add( offset ).toVar();\r\n\r\n\t\t\t\tconst result = denoiseSample( center, viewNormal, viewPosition, sampleUv );\r\n\r\n\t\t\t\tdenoised.addAssign( result.xyz );\r\n\t\t\t\ttotalWeight.addAssign( result.w );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tIf( totalWeight.greaterThan( float( 0 ) ), () => {\r\n\r\n\t\t\t\tdenoised.divAssign( totalWeight );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn vec4( denoised, texel.a );\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'denoise',\r\n\t\t\ttype: 'vec4',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'uv', type: 'vec2' }\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tconst output = Fn( () => {\r\n\r\n\t\t\treturn denoise( uvNode );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = output();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DenoiseNode;\r\n\r\nfunction generatePdSamplePointInitializer( samples, rings, radiusExponent ) {\r\n\r\n\tconst poissonDisk = generateDenoiseSamples( samples, rings, radiusExponent );\r\n\r\n\tconst array = [];\r\n\r\n\tfor ( let i = 0; i < samples; i ++ ) {\r\n\r\n\t\tconst sample = poissonDisk[ i ];\r\n\t\tarray.push( sample );\r\n\r\n\t}\r\n\r\n\treturn array;\r\n\r\n}\r\n\r\nfunction generateDenoiseSamples( numSamples, numRings, radiusExponent ) {\r\n\r\n\tconst samples = [];\r\n\r\n\tfor ( let i = 0; i < numSamples; i ++ ) {\r\n\r\n\t\tconst angle = 2 * Math.PI * numRings * i / numSamples;\r\n\t\tconst radius = Math.pow( i / ( numSamples - 1 ), radiusExponent );\r\n\t\tsamples.push( new Vector3( Math.cos( angle ), Math.sin( angle ), radius ) );\r\n\r\n\t}\r\n\r\n\treturn samples;\r\n\r\n}\r\n\r\nexport const denoise = ( node, depthNode, normalNode, noiseNode, camera ) => nodeObject( new DenoiseNode( convertToTexture( node ), nodeObject( depthNode ), nodeObject( normalNode ), nodeObject( noiseNode ), camera ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { Fn, nodeObject, float, vec2, vec4, int, If } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { abs, max, min, mix, pow } from '../math/MathNode.js';\r\nimport { sub } from '../math/OperatorNode.js';\r\nimport { Loop, Break } from '../utils/LoopNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass FXAANode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FXAANode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._invSize.value.set( 1 / map.image.width, 1 / map.image.height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst textureNode = this.textureNode.bias( - 100 );\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\t// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\r\n\r\n\t\t//----------------------------------------------------------------------------------\r\n\t\t// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\r\n\t\t// SDK Version: v3.00\r\n\t\t// Email:       gameworks@nvidia.com\r\n\t\t// Site:        http://developer.nvidia.com/\r\n\t\t//\r\n\t\t// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\r\n\t\t//\r\n\t\t// Redistribution and use in source and binary forms, with or without\r\n\t\t// modification, are permitted provided that the following conditions\r\n\t\t// are met:\r\n\t\t//  * Redistributions of source code must retain the above copyright\r\n\t\t//    notice, this list of conditions and the following disclaimer.\r\n\t\t//  * Redistributions in binary form must reproduce the above copyright\r\n\t\t//    notice, this list of conditions and the following disclaimer in the\r\n\t\t//    documentation and/or other materials provided with the distribution.\r\n\t\t//  * Neither the name of NVIDIA CORPORATION nor the names of its\r\n\t\t//    contributors may be used to endorse or promote products derived\r\n\t\t//    from this software without specific prior written permission.\r\n\t\t//\r\n\t\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY\r\n\t\t// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t\t// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n\t\t// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n\t\t// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n\t\t// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n\t\t// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n\t\t// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n\t\t// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n\t\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n\t\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\t\t//\r\n\t\t//----------------------------------------------------------------------------------\r\n\r\n\t\tconst FxaaTexTop = ( p ) => textureNode.uv( p );\r\n\t\tconst FxaaTexOff = ( p, o, r ) => textureNode.uv( p.add( o.mul( r ) ) );\r\n\r\n\t\tconst NUM_SAMPLES = int( 5 );\r\n\r\n\t\tconst contrast = Fn( ( [ a_immutable, b_immutable ] ) => {\r\n\r\n\t\t\t// assumes colors have premultipliedAlpha, so that the calculated color contrast is scaled by alpha\r\n\r\n\t\t\tconst b = vec4( b_immutable ).toVar();\r\n\t\t\tconst a = vec4( a_immutable ).toVar();\r\n\t\t\tconst diff = vec4( abs( a.sub( b ) ) ).toVar();\r\n\r\n\t\t\treturn max( max( max( diff.r, diff.g ), diff.b ), diff.a );\r\n\r\n\t\t} );\r\n\r\n\t\t// FXAA3 QUALITY - PC\r\n\r\n\t\tconst FxaaPixelShader = Fn( ( [ uv, fxaaQualityRcpFrame, fxaaQualityEdgeThreshold, fxaaQualityinvEdgeThreshold ] ) => {\r\n\r\n\t\t\tconst rgbaM = FxaaTexTop( uv ).toVar();\r\n\t\t\tconst rgbaS = FxaaTexOff( uv, vec2( 0.0, - 1.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\tconst rgbaE = FxaaTexOff( uv, vec2( 1.0, 0.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\tconst rgbaN = FxaaTexOff( uv, vec2( 0.0, 1.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\tconst rgbaW = FxaaTexOff( uv, vec2( - 1.0, 0.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\t// . S .\r\n\t\t\t// W M E\r\n\t\t\t// . N .\r\n\r\n\t\t\tconst contrastN = contrast( rgbaM, rgbaN ).toVar();\r\n\t\t\tconst contrastS = contrast( rgbaM, rgbaS ).toVar();\r\n\t\t\tconst contrastE = contrast( rgbaM, rgbaE ).toVar();\r\n\t\t\tconst contrastW = contrast( rgbaM, rgbaW ).toVar();\r\n\r\n\t\t\tconst maxValue = max( contrastN, max( contrastS, max( contrastE, contrastW ) ) ).toVar();\r\n\r\n\t\t\t// . 0 .\r\n\t\t\t// 0 0 0\r\n\t\t\t// . 0 .\r\n\r\n\t\t\tIf( maxValue.lessThan( fxaaQualityEdgeThreshold ), () => {\r\n\r\n\t\t\t\treturn rgbaM; // assuming define FXAA_DISCARD is always 0\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst relativeVContrast = sub( contrastN.add( contrastS ), ( contrastE.add( contrastW ) ) ).toVar();\r\n\t\t\trelativeVContrast.mulAssign( fxaaQualityinvEdgeThreshold );\r\n\r\n\t\t\t// 45 deg edge detection and corners of objects, aka V/H contrast is too similar\r\n\r\n\t\t\tIf( abs( relativeVContrast ).lessThan( 0.3 ), () => {\r\n\r\n\t\t\t\t// locate the edge\r\n\r\n\t\t\t\tconst x = contrastE.greaterThan( contrastW ).select( 1, - 1 ).toVar();\r\n\t\t\t\tconst y = contrastS.greaterThan( contrastN ).select( 1, - 1 ).toVar();\r\n\r\n\t\t\t\tconst dirToEdge = vec2( x, y ).toVar();\r\n\t\t\t\t// . 2 .      . 1 .\r\n\t\t\t\t// 1 0 2  ~=  0 0 1\r\n\t\t\t\t// . 1 .      . 0 .\r\n\r\n\t\t\t\t// tap 2 pixels and see which ones are \"outside\" the edge, to\r\n\t\t\t\t// determine if the edge is vertical or horizontal\r\n\r\n\t\t\t\tconst rgbaAlongH = FxaaTexOff( uv, vec2( dirToEdge.x, dirToEdge.y ), fxaaQualityRcpFrame.xy );\r\n\t\t\t\tconst matchAlongH = contrast( rgbaM, rgbaAlongH ).toVar();\r\n\t\t\t\t// . 1 .\r\n\t\t\t\t// 0 0 1\r\n\t\t\t\t// . 0 H\r\n\r\n\t\t\t\tconst rgbaAlongV = FxaaTexOff( uv, vec2( dirToEdge.x.negate(), dirToEdge.y.negate() ), fxaaQualityRcpFrame.xy );\r\n\t\t\t\tconst matchAlongV = contrast( rgbaM, rgbaAlongV ).toVar();\r\n\t\t\t\t// V 1 .\r\n\t\t\t\t// 0 0 1\r\n\t\t\t\t// . 0 .\r\n\r\n\t\t\t\trelativeVContrast.assign( matchAlongV.sub( matchAlongH ) );\r\n\t\t\t\trelativeVContrast.mulAssign( fxaaQualityinvEdgeThreshold );\r\n\r\n\t\t\t\tIf( abs( relativeVContrast ).lessThan( 0.3 ), () => { // 45 deg edge\r\n\r\n\t\t\t\t\t// 1 1 .\r\n\t\t\t\t\t// 0 0 1\r\n\t\t\t\t\t// . 0 1\r\n\r\n\t\t\t\t\t// do a simple blur\r\n\t\t\t\t\tconst sum = rgbaN.add( rgbaS ).add( rgbaE ).add( rgbaW );\r\n\t\t\t\t\treturn mix( rgbaM, sum.mul( 0.25 ), 0.4 );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst offNP = vec2().toVar();\r\n\r\n\t\t\tIf( relativeVContrast.lessThanEqual( 0 ), () => {\r\n\r\n\t\t\t\trgbaN.assign( rgbaW );\r\n\t\t\t\trgbaS.assign( rgbaE );\r\n\r\n\t\t\t\t// . 0 .      1\r\n\t\t\t\t// 1 0 1  ->  0\r\n\t\t\t\t// . 0 .      1\r\n\r\n\t\t\t\toffNP.x.assign( 0 );\r\n\t\t\t\toffNP.y.assign( fxaaQualityRcpFrame.y );\r\n\r\n\t\t\t } ).Else( () => {\r\n\r\n\t\t\t\toffNP.x.assign( fxaaQualityRcpFrame.x );\r\n\t\t\t\toffNP.y.assign( 0 );\r\n\r\n\t\t\t } );\r\n\r\n\t\t\tconst mn = contrast( rgbaM, rgbaN ).toVar();\r\n\t\t\tconst ms = contrast( rgbaM, rgbaS ).toVar();\r\n\r\n\t\t\tIf( mn.lessThanEqual( ms ), () => {\r\n\r\n\t\t\t\trgbaN.assign( rgbaS );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst doneN = int( 0 ).toVar();\r\n\t\t\tconst doneP = int( 0 ).toVar();\r\n\r\n\t\t\tconst nDist = float( 0 ).toVar();\r\n\t\t\tconst pDist = float( 0 ).toVar();\r\n\r\n\t\t\tconst posN = vec2( uv ).toVar();\r\n\t\t\tconst posP = vec2( uv ).toVar();\r\n\r\n\t\t\tconst iterationsUsedN = int( 0 ).toVar();\r\n\t\t\tconst iterationsUsedP = int( 0 ).toVar();\r\n\r\n\t\t\tLoop( NUM_SAMPLES, ( { i } ) => {\r\n\r\n\t\t\t\tconst increment = i.add( 1 ).toVar();\r\n\r\n\t\t\t\tIf( doneN.equal( 0 ), () => {\r\n\r\n\t\t\t\t\tnDist.addAssign( increment );\r\n\t\t\t\t\tposN.assign( uv.add( offNP.mul( nDist ) ) );\r\n\t\t\t\t\tconst rgbaEndN = FxaaTexTop( posN.xy );\r\n\r\n\t\t\t\t\tconst nm = contrast( rgbaEndN, rgbaM ).toVar();\r\n\t\t\t\t\tconst nn = contrast( rgbaEndN, rgbaN ).toVar();\r\n\r\n\t\t\t\t\tIf( nm.greaterThan( nn ), () => {\r\n\r\n\t\t\t\t\t\tdoneN.assign( 1 );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\titerationsUsedN.assign( i );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tIf( doneP.equal( 0 ), () => {\r\n\r\n\t\t\t\t\tpDist.addAssign( increment );\r\n\t\t\t\t\tposP.assign( uv.sub( offNP.mul( pDist ) ) );\r\n\t\t\t\t\tconst rgbaEndP = FxaaTexTop( posP.xy );\r\n\r\n\t\t\t\t\tconst pm = contrast( rgbaEndP, rgbaM ).toVar();\r\n\t\t\t\t\tconst pn = contrast( rgbaEndP, rgbaN ).toVar();\r\n\r\n\t\t\t\t\tIf( pm.greaterThan( pn ), () => {\r\n\r\n\t\t\t\t\t\tdoneP.assign( 1 );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\titerationsUsedP.assign( i );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tIf( doneN.equal( 1 ).or( doneP.equal( 1 ) ), () => {\r\n\r\n\t\t\t\t\tBreak();\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tIf( doneN.equal( 0 ).and( doneP.equal( 0 ) ), () => {\r\n\r\n\t\t\t\treturn rgbaM; // failed to find end of edge\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst distN = float( 1 ).toVar();\r\n\t\t\tconst distP = float( 1 ).toVar();\r\n\r\n\t\t\tIf( doneN.equal( 1 ), () => {\r\n\r\n\t\t\t\tdistN.assign( float( iterationsUsedN ).div( float( NUM_SAMPLES.sub( 1 ) ) ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tIf( doneP.equal( 1 ), () => {\r\n\r\n\t\t\t\tdistP.assign( float( iterationsUsedP ).div( float( NUM_SAMPLES.sub( 1 ) ) ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst dist = min( distN, distP );\r\n\r\n\t\t\t// hacky way of reduces blurriness of mostly diagonal edges\r\n\t\t\t// but reduces AA quality\r\n\t\t\tdist.assign( pow( dist, 0.5 ) );\r\n\t\t\tdist.assign( float( 1 ).sub( dist ) );\r\n\r\n\t\t\treturn mix( rgbaM, rgbaN, dist.mul( 0.5 ) );\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'FxaaPixelShader',\r\n\t\t\ttype: 'vec4',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'uv', type: 'vec2' },\r\n\t\t\t\t{ name: 'fxaaQualityRcpFrame', type: 'vec2' },\r\n\t\t\t\t{ name: 'fxaaQualityEdgeThreshold', type: 'float' },\r\n\t\t\t\t{ name: 'fxaaQualityinvEdgeThreshold', type: 'float' },\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tconst fxaa = Fn( () => {\r\n\r\n\t\t\tconst edgeDetectionQuality = float( 0.2 );\r\n\t\t\tconst invEdgeDetectionQuality = float( 1 ).div( edgeDetectionQuality );\r\n\r\n\t\t\treturn FxaaPixelShader( uvNode, this._invSize, edgeDetectionQuality, invEdgeDetectionQuality );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = fxaa();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FXAANode;\r\n\r\nexport const fxaa = ( node ) => nodeObject( new FXAANode( convertToTexture( node ) ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { Fn, nodeObject, float, vec4, int } from '../tsl/TSLBase.js';\r\nimport { mix, smoothstep } from '../math/MathNode.js';\r\nimport { luminance } from './ColorAdjustment.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uniformArray } from '../accessors/UniformArrayNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { HalfFloatType } from '../../constants.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\n\r\nconst _clearColor = /*@__PURE__*/ new Color( 0, 0, 0 );\r\nconst _currentClearColor = /*@__PURE__*/ new Color();\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nconst _BlurDirectionX = /*@__PURE__*/ new Vector2( 1.0, 0.0 );\r\nconst _BlurDirectionY = /*@__PURE__*/ new Vector2( 0.0, 1.0 );\r\n\r\nclass BloomNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BloomNode';\r\n\r\n\t}\r\n\r\n\tconstructor( inputNode, strength = 1, radius = 0, threshold = 0 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.strength = uniform( strength );\r\n\t\tthis.radius = uniform( radius );\r\n\t\tthis.threshold = uniform( threshold );\r\n\r\n\t\tthis.smoothWidth = uniform( 0.01 );\r\n\r\n\t\t//\r\n\r\n\t\tthis._renderTargetsHorizontal = [];\r\n\t\tthis._renderTargetsVertical = [];\r\n\t\tthis._nMips = 5;\r\n\r\n\t\t// render targets\r\n\r\n\t\tthis._renderTargetBright = new RenderTarget( 1, 1, { type: HalfFloatType } );\r\n\t\tthis._renderTargetBright.texture.name = 'UnrealBloomPass.bright';\r\n\t\tthis._renderTargetBright.texture.generateMipmaps = false;\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\tconst renderTargetHorizontal = new RenderTarget( 1, 1, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetHorizontal.texture.name = 'UnrealBloomPass.h' + i;\r\n\t\t\trenderTargetHorizontal.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis._renderTargetsHorizontal.push( renderTargetHorizontal );\r\n\r\n\t\t\tconst renderTargetVertical = new RenderTarget( 1, 1, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\r\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis._renderTargetsVertical.push( renderTargetVertical );\r\n\r\n\t\t}\r\n\r\n\t\t// materials\r\n\r\n\t\tthis._compositeMaterial = null;\r\n\t\tthis._highPassFilterMaterial = null;\r\n\t\tthis._separableBlurMaterials = [];\r\n\r\n\t\t// pass and texture nodes\r\n\r\n\t\tthis._textureNodeBright = texture( this._renderTargetBright.texture );\r\n\t\tthis._textureNodeBlur0 = texture( this._renderTargetsVertical[ 0 ].texture );\r\n\t\tthis._textureNodeBlur1 = texture( this._renderTargetsVertical[ 1 ].texture );\r\n\t\tthis._textureNodeBlur2 = texture( this._renderTargetsVertical[ 2 ].texture );\r\n\t\tthis._textureNodeBlur3 = texture( this._renderTargetsVertical[ 3 ].texture );\r\n\t\tthis._textureNodeBlur4 = texture( this._renderTargetsVertical[ 4 ].texture );\r\n\r\n\t\tthis._textureOutput = passTexture( this, this._renderTargetsHorizontal[ 0 ].texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureOutput;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tlet resx = Math.round( width / 2 );\r\n\t\tlet resy = Math.round( height / 2 );\r\n\r\n\t\tthis._renderTargetBright.setSize( resx, resy );\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\tthis._renderTargetsHorizontal[ i ].setSize( resx, resy );\r\n\t\t\tthis._renderTargetsVertical[ i ].setSize( resx, resy );\r\n\r\n\t\t\tthis._separableBlurMaterials[ i ].invSize.value.set( 1 / resx, 1 / resy );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst size = renderer.getDrawingBufferSize( _size );\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\trenderer.getClearColor( _currentClearColor );\r\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\trenderer.setMRT( null );\r\n\t\trenderer.setClearColor( _clearColor, 0 );\r\n\r\n\t\t// 1. Extract Bright Areas\r\n\r\n\t\trenderer.setRenderTarget( this._renderTargetBright );\r\n\t\t_quadMesh.material = this._highPassFilterMaterial;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// 2. Blur All the mips progressively\r\n\r\n\t\tlet inputRenderTarget = this._renderTargetBright;\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\t_quadMesh.material = this._separableBlurMaterials[ i ];\r\n\r\n\t\t\tthis._separableBlurMaterials[ i ].colorTexture.value = inputRenderTarget.texture;\r\n\t\t\tthis._separableBlurMaterials[ i ].direction.value = _BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this._renderTargetsHorizontal[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\t_quadMesh.render( renderer );\r\n\r\n\t\t\tthis._separableBlurMaterials[ i ].colorTexture.value = this._renderTargetsHorizontal[ i ].texture;\r\n\t\t\tthis._separableBlurMaterials[ i ].direction.value = _BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this._renderTargetsVertical[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\t_quadMesh.render( renderer );\r\n\r\n\t\t\tinputRenderTarget = this._renderTargetsVertical[ i ];\r\n\r\n\t\t}\r\n\r\n\t\t// 3. Composite All the mips\r\n\r\n\t\trenderer.setRenderTarget( this._renderTargetsHorizontal[ 0 ] );\r\n\t\trenderer.clear();\r\n\t\t_quadMesh.material = this._compositeMaterial;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\trenderer.setClearColor( _currentClearColor, currentClearAlpha );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// luminosity high pass material\r\n\r\n\t\tconst luminosityHighPass = Fn( () => {\r\n\r\n\t\t\tconst texel = this.inputNode;\r\n\t\t\tconst v = luminance( texel.rgb );\r\n\r\n\t\t\tconst alpha = smoothstep( this.threshold, this.threshold.add( this.smoothWidth ), v );\r\n\r\n\t\t\treturn mix( vec4( 0 ), texel, alpha );\r\n\r\n\t\t} );\r\n\r\n\t\tthis._highPassFilterMaterial = this._highPassFilterMaterial || new NodeMaterial();\r\n\t\tthis._highPassFilterMaterial.fragmentNode = luminosityHighPass().context( builder.getSharedContext() );\r\n\t\tthis._highPassFilterMaterial.name = 'Bloom_highPass';\r\n\t\tthis._highPassFilterMaterial.needsUpdate = true;\r\n\r\n\t\t// gaussian blur materials\r\n\r\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\tthis._separableBlurMaterials.push( this._getSeperableBlurMaterial( builder, kernelSizeArray[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\t// composite material\r\n\r\n\t\tconst bloomFactors = uniformArray( [ 1.0, 0.8, 0.6, 0.4, 0.2 ] );\r\n\t\tconst bloomTintColors = uniformArray( [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ] );\r\n\r\n\t\tconst lerpBloomFactor = Fn( ( [ factor, radius ] ) => {\r\n\r\n\t\t\tconst mirrorFactor = float( 1.2 ).sub( factor );\r\n\t\t\treturn mix( factor, mirrorFactor, radius );\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'lerpBloomFactor',\r\n\t\t\ttype: 'float',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'factor', type: 'float' },\r\n\t\t\t\t{ name: 'radius', type: 'float' },\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\r\n\t\tconst compositePass = Fn( () => {\r\n\r\n\t\t\tconst color0 = lerpBloomFactor( bloomFactors.element( 0 ), this.radius ).mul( vec4( bloomTintColors.element( 0 ), 1.0 ) ).mul( this._textureNodeBlur0 );\r\n\t\t\tconst color1 = lerpBloomFactor( bloomFactors.element( 1 ), this.radius ).mul( vec4( bloomTintColors.element( 1 ), 1.0 ) ).mul( this._textureNodeBlur1 );\r\n\t\t\tconst color2 = lerpBloomFactor( bloomFactors.element( 2 ), this.radius ).mul( vec4( bloomTintColors.element( 2 ), 1.0 ) ).mul( this._textureNodeBlur2 );\r\n\t\t\tconst color3 = lerpBloomFactor( bloomFactors.element( 3 ), this.radius ).mul( vec4( bloomTintColors.element( 3 ), 1.0 ) ).mul( this._textureNodeBlur3 );\r\n\t\t\tconst color4 = lerpBloomFactor( bloomFactors.element( 4 ), this.radius ).mul( vec4( bloomTintColors.element( 4 ), 1.0 ) ).mul( this._textureNodeBlur4 );\r\n\r\n\t\t\tconst sum = color0.add( color1 ).add( color2 ).add( color3 ).add( color4 );\r\n\r\n\t\t\treturn sum.mul( this.strength );\r\n\r\n\t\t} );\r\n\r\n\t\tthis._compositeMaterial = this._compositeMaterial || new NodeMaterial();\r\n\t\tthis._compositeMaterial.fragmentNode = compositePass().context( builder.getSharedContext() );\r\n\t\tthis._compositeMaterial.name = 'Bloom_comp';\r\n\t\tthis._compositeMaterial.needsUpdate = true;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureOutput;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tfor ( let i = 0; i < this._renderTargetsHorizontal.length; i ++ ) {\r\n\r\n\t\t\tthis._renderTargetsHorizontal[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < this._renderTargetsVertical.length; i ++ ) {\r\n\r\n\t\t\tthis._renderTargetsVertical[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis._renderTargetBright.dispose();\r\n\r\n\t}\r\n\r\n\t_getSeperableBlurMaterial( builder, kernelRadius ) {\r\n\r\n\t\tconst coefficients = [];\r\n\r\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\r\n\r\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst colorTexture = texture();\r\n\t\tconst gaussianCoefficients = uniformArray( coefficients );\r\n\t\tconst invSize = uniform( new Vector2() );\r\n\t\tconst direction = uniform( new Vector2( 0.5, 0.5 ) );\r\n\r\n\t\tconst uvNode = uv();\r\n\t\tconst sampleTexel = ( uv ) => colorTexture.uv( uv );\r\n\r\n\t\tconst seperableBlurPass = Fn( () => {\r\n\r\n\t\t\tconst weightSum = gaussianCoefficients.element( 0 ).toVar();\r\n\t\t\tconst diffuseSum = sampleTexel( uvNode ).rgb.mul( weightSum ).toVar();\r\n\r\n\t\t\tLoop( { start: int( 1 ), end: int( kernelRadius ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\t\t\tconst x = float( i );\r\n\t\t\t\tconst w = gaussianCoefficients.element( i );\r\n\t\t\t\tconst uvOffset = direction.mul( invSize ).mul( x );\r\n\t\t\t\tconst sample1 = sampleTexel( uvNode.add( uvOffset ) ).rgb;\r\n\t\t\t\tconst sample2 = sampleTexel( uvNode.sub( uvOffset ) ).rgb;\r\n\t\t\t\tdiffuseSum.addAssign( add( sample1, sample2 ).mul( w ) );\r\n\t\t\t\tweightSum.addAssign( float( 2.0 ).mul( w ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn vec4( diffuseSum.div( weightSum ), 1.0 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst seperableBlurMaterial = new NodeMaterial();\r\n\t\tseperableBlurMaterial.fragmentNode = seperableBlurPass().context( builder.getSharedContext() );\r\n\t\tseperableBlurMaterial.name = 'Bloom_seperable';\r\n\t\tseperableBlurMaterial.needsUpdate = true;\r\n\r\n\t\t// uniforms\r\n\t\tseperableBlurMaterial.colorTexture = colorTexture;\r\n\t\tseperableBlurMaterial.direction = direction;\r\n\t\tseperableBlurMaterial.invSize = invSize;\r\n\r\n\t\treturn seperableBlurMaterial;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const bloom = ( node, strength, radius, threshold ) => nodeObject( new BloomNode( nodeObject( node ), strength, radius, threshold ) );\r\n\r\nexport default BloomNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { Fn, nodeObject, float, int, vec4, If } from '../tsl/TSLBase.js';\r\nimport { clamp, mix } from '../math/MathNode.js';\r\nimport { sub } from '../math/OperatorNode.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\n\r\nclass TransitionNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TransitionNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// Input textures\r\n\r\n\t\tthis.textureNodeA = textureNodeA;\r\n\t\tthis.textureNodeB = textureNodeB;\r\n\t\tthis.mixTextureNode = mixTextureNode;\r\n\r\n\t\t// Uniforms\r\n\r\n\t\tthis.mixRatioNode = mixRatioNode;\r\n\t\tthis.thresholdNode = thresholdNode;\r\n\t\tthis.useTextureNode = useTextureNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode } = this;\r\n\r\n\t\tconst sampleTexture = ( textureNode ) => {\r\n\r\n\t\t\tconst uvNodeTexture = textureNode.uvNode || uv();\r\n\t\t\treturn textureNode.uv( uvNodeTexture );\r\n\r\n\t\t};\r\n\r\n\t\tconst transition = Fn( () => {\r\n\r\n\t\t\tconst texelOne = sampleTexture( textureNodeA );\r\n\t\t\tconst texelTwo = sampleTexture( textureNodeB );\r\n\r\n\t\t\tconst color = vec4().toVar();\r\n\r\n\t\t\tIf( useTextureNode.equal( int( 1 ) ), () => {\r\n\r\n\t\t\t\tconst transitionTexel = sampleTexture( mixTextureNode );\r\n\t\t\t\tconst r = mixRatioNode.mul( thresholdNode.mul( 2.0 ).add( 1.0 ) ).sub( thresholdNode );\r\n\t\t\t\tconst mixf = clamp( sub( transitionTexel.r, r ).mul( float( 1.0 ).div( thresholdNode ) ), 0.0, 1.0 );\r\n\r\n\t\t\t\tcolor.assign( mix( texelOne, texelTwo, mixf ) );\r\n\r\n\t\t\t} ).Else( () => {\r\n\r\n\t\t\t\tcolor.assign( mix( texelTwo, texelOne, mixRatioNode ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = transition();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TransitionNode;\r\n\r\nexport const transition = ( nodeA, nodeB, mixTexture, mixRatio = 0.0, threshold = 0.1, useTexture = 0 ) => nodeObject( new TransitionNode( convertToTexture( nodeA ), convertToTexture( nodeB ), convertToTexture( mixTexture ), nodeObject( mixRatio ), nodeObject( threshold ), nodeObject( useTexture ) ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { Fn, nodeObject, vec2, vec3, float, If } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { dot, clamp, smoothstep, sign, step, floor } from '../math/MathNode.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { output, property } from '../core/PropertyNode.js';\r\nimport PassNode from './PassNode.js';\r\nimport { mrt } from '../core/MRTNode.js';\r\nimport { normalView } from '../accessors/Normal.js';\r\nimport { convertToTexture } from '../utils/RTTNode.js';\r\n\r\nimport { NearestFilter } from '../../constants.js';\r\n\r\nclass PixelationNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PixelationNode';\r\n\r\n\t}\r\n\r\n\tconstructor( textureNode, depthNode, normalNode, pixelSize, normalEdgeStrength, depthEdgeStrength ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// Input textures\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.depthNode = depthNode;\r\n\t\tthis.normalNode = normalNode;\r\n\r\n\t\t// Input uniforms\r\n\r\n\t\tthis.pixelSize = pixelSize;\r\n\t\tthis.normalEdgeStrength = normalEdgeStrength;\r\n\t\tthis.depthEdgeStrength = depthEdgeStrength;\r\n\r\n\t\t// Private uniforms\r\n\r\n\t\tthis._resolution = uniform( new Vector4() );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tconst width = map.image.width;\r\n\t\tconst height = map.image.height;\r\n\r\n\t\tthis._resolution.value.set( width, height, 1 / width, 1 / height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNode, depthNode, normalNode } = this;\r\n\r\n\t\tconst uvNodeTexture = textureNode.uvNode || uv();\r\n\t\tconst uvNodeDepth = depthNode.uvNode || uv();\r\n\t\tconst uvNodeNormal = normalNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = () => textureNode.uv( uvNodeTexture );\r\n\r\n\t\tconst sampleDepth = ( x, y ) => depthNode.uv( uvNodeDepth.add( vec2( x, y ).mul( this._resolution.zw ) ) ).r;\r\n\r\n\t\tconst sampleNormal = ( x, y ) => normalNode.uv( uvNodeNormal.add( vec2( x, y ).mul( this._resolution.zw ) ) ).rgb.normalize();\r\n\r\n\t\tconst depthEdgeIndicator = ( depth ) => {\r\n\r\n\t\t\tconst diff = property( 'float', 'diff' );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( 1, 0 ).sub( depth ) ) );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( - 1, 0 ).sub( depth ) ) );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( 0, 1 ).sub( depth ) ) );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( 0, - 1 ).sub( depth ) ) );\r\n\r\n\t\t\treturn floor( smoothstep( 0.01, 0.02, diff ).mul( 2 ) ).div( 2 );\r\n\r\n\t\t};\r\n\r\n\t\tconst neighborNormalEdgeIndicator = ( x, y, depth, normal ) => {\r\n\r\n\t\t\tconst depthDiff = sampleDepth( x, y ).sub( depth );\r\n\t\t\tconst neighborNormal = sampleNormal( x, y );\r\n\r\n\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\r\n\r\n\t\t\tconst normalEdgeBias = vec3( 1, 1, 1 ); // This should probably be a parameter.\r\n\t\t\tconst normalDiff = dot( normal.sub( neighborNormal ), normalEdgeBias );\r\n\t\t\tconst normalIndicator = clamp( smoothstep( - 0.01, 0.01, normalDiff ), 0.0, 1.0 );\r\n\r\n\t\t\t// Only the shallower pixel should detect the normal edge.\r\n\r\n\t\t\tconst depthIndicator = clamp( sign( depthDiff.mul( .25 ).add( .0025 ) ), 0.0, 1.0 );\r\n\r\n\t\t\treturn float( 1.0 ).sub( dot( normal, neighborNormal ) ).mul( depthIndicator ).mul( normalIndicator );\r\n\r\n\t\t};\r\n\r\n\t\tconst normalEdgeIndicator = ( depth, normal ) => {\r\n\r\n\t\t\tconst indicator = property( 'float', 'indicator' );\r\n\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 0, - 1, depth, normal ) );\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 0, 1, depth, normal ) );\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( - 1, 0, depth, normal ) );\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 1, 0, depth, normal ) );\r\n\r\n\t\t\treturn step( 0.1, indicator );\r\n\r\n\t\t};\r\n\r\n\t\tconst pixelation = Fn( () => {\r\n\r\n\t\t\tconst texel = sampleTexture();\r\n\r\n\t\t\tconst depth = property( 'float', 'depth' );\r\n\t\t\tconst normal = property( 'vec3', 'normal' );\r\n\r\n\t\t\tIf( this.depthEdgeStrength.greaterThan( 0.0 ).or( this.normalEdgeStrength.greaterThan( 0.0 ) ), () => {\r\n\r\n\t\t\t\tdepth.assign( sampleDepth( 0, 0 ) );\r\n\t\t\t\tnormal.assign( sampleNormal( 0, 0 ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst dei = property( 'float', 'dei' );\r\n\r\n\t\t\tIf( this.depthEdgeStrength.greaterThan( 0.0 ), () => {\r\n\r\n\t\t\t\tdei.assign( depthEdgeIndicator( depth ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst nei = property( 'float', 'nei' );\r\n\r\n\t\t\tIf( this.normalEdgeStrength.greaterThan( 0.0 ), () => {\r\n\r\n\t\t\t\tnei.assign( normalEdgeIndicator( depth, normal ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst strength = dei.greaterThan( 0 ).select( float( 1.0 ).sub( dei.mul( this.depthEdgeStrength ) ), nei.mul( this.normalEdgeStrength ).add( 1 ) );\r\n\r\n\t\t\treturn texel.mul( strength );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = pixelation();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst pixelation = ( node, depthNode, normalNode, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4 ) => nodeObject( new PixelationNode( convertToTexture( node ), convertToTexture( depthNode ), convertToTexture( normalNode ), nodeObject( pixelSize ), nodeObject( normalEdgeStrength ), nodeObject( depthEdgeStrength ) ) );\r\n\r\nclass PixelationPassNode extends PassNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PixelationPassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scene, camera, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4 ) {\r\n\r\n\t\tsuper( 'color', scene, camera, { minFilter: NearestFilter, magFilter: NearestFilter } );\r\n\r\n\t\tthis.pixelSize = pixelSize;\r\n\t\tthis.normalEdgeStrength = normalEdgeStrength;\r\n\t\tthis.depthEdgeStrength = depthEdgeStrength;\r\n\r\n\t\tthis.isPixelationPassNode = true;\r\n\r\n\t\tthis._mrt = mrt( {\r\n\t\t\toutput: output,\r\n\t\t\tnormal: normalView\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tconst pixelSize = this.pixelSize.value ? this.pixelSize.value : this.pixelSize;\r\n\r\n\t\tconst adjustedWidth = Math.floor( width / pixelSize );\r\n\t\tconst adjustedHeight = Math.floor( height / pixelSize );\r\n\r\n\t\tsuper.setSize( adjustedWidth, adjustedHeight );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst color = super.getTextureNode( 'output' );\r\n\t\tconst depth = super.getTextureNode( 'depth' );\r\n\t\tconst normal = super.getTextureNode( 'normal' );\r\n\r\n\t\treturn pixelation( color, depth, normal, this.pixelSize, this.normalEdgeStrength, this.depthEdgeStrength );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const pixelationPass = ( scene, camera, pixelSize, normalEdgeStrength, depthEdgeStrength ) => nodeObject( new PixelationPassNode( scene, camera, pixelSize, normalEdgeStrength, depthEdgeStrength ) );\r\n\r\nexport default PixelationPassNode;\r\n", "import { nodeObject } from '../tsl/TSLBase.js';\r\nimport PassNode from './PassNode.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { AdditiveBlending } from '../../constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { mrt, getTextureIndex } from '../core/MRTNode.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\n/**\r\n*\r\n* Supersample Anti-Aliasing Render Pass\r\n*\r\n* This manual approach to SSAA re-renders the scene ones for each sample with camera jitter and accumulates the results.\r\n*\r\n* References: https://en.wikipedia.org/wiki/Supersampling\r\n*\r\n*/\r\n\r\nclass SSAAPassNode extends PassNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SSAAPassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper( PassNode.COLOR, scene, camera );\r\n\r\n\t\tthis.isSSAAPassNode = true;\r\n\r\n\t\tthis.sampleLevel = 4; // specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\r\n\t\tthis.unbiased = true;\r\n\t\tthis.clearColor = new Color( 0x000000 );\r\n\t\tthis.clearAlpha = 0;\r\n\r\n\t\tthis._currentClearColor = new Color();\r\n\r\n\t\tthis.sampleWeight = uniform( 1 );\r\n\r\n\t\tthis.sampleRenderTarget = null;\r\n\r\n\t\tthis._quadMesh = new QuadMesh();\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\t\tconst { scene, camera } = this;\r\n\r\n\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tconst size = renderer.getSize( _size );\r\n\r\n\t\tthis.setSize( size.width, size.height );\r\n\t\tthis.sampleRenderTarget.setSize( this.renderTarget.width, this.renderTarget.height );\r\n\r\n\t\t// save current renderer settings\r\n\r\n\t\trenderer.getClearColor( this._currentClearColor );\r\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\tconst currentAutoClear = renderer.autoClear;\r\n\r\n\t\t//\r\n\r\n\t\tthis._cameraNear.value = camera.near;\r\n\t\tthis._cameraFar.value = camera.far;\r\n\r\n\t\trenderer.setMRT( this.getMRT() );\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tconst jitterOffsets = _JitterVectors[ Math.max( 0, Math.min( this.sampleLevel, 5 ) ) ];\r\n\r\n\t\tconst baseSampleWeight = 1.0 / jitterOffsets.length;\r\n\t\tconst roundingRange = 1 / 32;\r\n\r\n\t\tconst viewOffset = {\r\n\r\n\t\t\tfullWidth: this.renderTarget.width,\r\n\t\t\tfullHeight: this.renderTarget.height,\r\n\t\t\toffsetX: 0,\r\n\t\t\toffsetY: 0,\r\n\t\t\twidth: this.renderTarget.width,\r\n\t\t\theight: this.renderTarget.height\r\n\r\n\t\t};\r\n\r\n\t\tconst originalViewOffset = Object.assign( {}, camera.view );\r\n\r\n\t\tif ( originalViewOffset.enabled ) Object.assign( viewOffset, originalViewOffset );\r\n\r\n\t\t// render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\r\n\r\n\t\tfor ( let i = 0; i < jitterOffsets.length; i ++ ) {\r\n\r\n\t\t\tconst jitterOffset = jitterOffsets[ i ];\r\n\r\n\t\t\tif ( camera.setViewOffset ) {\r\n\r\n\t\t\t\tcamera.setViewOffset(\r\n\r\n\t\t\t\t\tviewOffset.fullWidth, viewOffset.fullHeight,\r\n\r\n\t\t\t\t\tviewOffset.offsetX + jitterOffset[ 0 ] * 0.0625, viewOffset.offsetY + jitterOffset[ 1 ] * 0.0625, // 0.0625 = 1 / 16\r\n\r\n\t\t\t\t\tviewOffset.width, viewOffset.height\r\n\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.sampleWeight.value = baseSampleWeight;\r\n\r\n\t\t\tif ( this.unbiased ) {\r\n\r\n\t\t\t\t// the theory is that equal weights for each sample lead to an accumulation of rounding errors.\r\n\t\t\t\t// The following equation varies the sampleWeight per sample so that it is uniformly distributed\r\n\t\t\t\t// across a range of values whose rounding errors cancel each other out.\r\n\r\n\t\t\t\tconst uniformCenteredDistribution = ( - 0.5 + ( i + 0.5 ) / jitterOffsets.length );\r\n\t\t\t\tthis.sampleWeight.value += roundingRange * uniformCenteredDistribution;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\r\n\t\t\trenderer.setRenderTarget( this.sampleRenderTarget );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( scene, camera );\r\n\r\n\t\t\t// accumulation\r\n\r\n\t\t\trenderer.setRenderTarget( this.renderTarget );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\trenderer.setClearColor( 0x000000, 0.0 );\r\n\t\t\t\trenderer.clear();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._quadMesh.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.copyTextureToTexture( this.sampleRenderTarget.depthTexture, this.renderTarget.depthTexture );\r\n\r\n\t\t// restore\r\n\r\n\t\tif ( camera.setViewOffset && originalViewOffset.enabled ) {\r\n\r\n\t\t\tcamera.setViewOffset(\r\n\r\n\t\t\t\toriginalViewOffset.fullWidth, originalViewOffset.fullHeight,\r\n\r\n\t\t\t\toriginalViewOffset.offsetX, originalViewOffset.offsetY,\r\n\r\n\t\t\t\toriginalViewOffset.width, originalViewOffset.height\r\n\r\n\t\t\t);\r\n\r\n\t\t} else if ( camera.clearViewOffset ) {\r\n\r\n\t\t\tcamera.clearViewOffset();\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\r\n\t\trenderer.autoClear = currentAutoClear;\r\n\t\trenderer.setClearColor( this._currentClearColor, currentClearAlpha );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this.sampleRenderTarget === null ) {\r\n\r\n\t\t\tthis.sampleRenderTarget = this.renderTarget.clone();\r\n\r\n\t\t}\r\n\r\n\t\tlet sampleTexture;\r\n\r\n\t\tconst passMRT = this.getMRT();\r\n\r\n\t\tif ( passMRT !== null ) {\r\n\r\n\t\t\tconst outputs = {};\r\n\r\n\t\t\tfor ( const name in passMRT.outputNodes ) {\r\n\r\n\t\t\t\tconst index = getTextureIndex( this.sampleRenderTarget.textures, name );\r\n\r\n\t\t\t\tif ( index >= 0 ) {\r\n\r\n\t\t\t\t\toutputs[ name ] = texture( this.sampleRenderTarget.textures[ index ] ).mul( this.sampleWeight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsampleTexture = mrt( outputs );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsampleTexture = texture( this.sampleRenderTarget.texture ).mul( this.sampleWeight );\r\n\r\n\t\t}\r\n\r\n\t\tthis._quadMesh.material = new NodeMaterial();\r\n\t\tthis._quadMesh.material.fragmentNode = sampleTexture;\r\n\t\tthis._quadMesh.material.transparent = true;\r\n\t\tthis._quadMesh.material.depthTest = false;\r\n\t\tthis._quadMesh.material.depthWrite = false;\r\n\t\tthis._quadMesh.material.premultipliedAlpha = true;\r\n\t\tthis._quadMesh.material.blending = AdditiveBlending;\r\n\t\tthis._quadMesh.material.normals = false;\r\n\t\tthis._quadMesh.material.name = 'SSAA';\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t\tif ( this.sampleRenderTarget !== null ) {\r\n\r\n\t\t\tthis.sampleRenderTarget.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SSAAPassNode;\r\n\r\n// These jitter vectors are specified in integers because it is easier.\r\n// I am assuming a [-8,8) integer grid, but it needs to be mapped onto [-0.5,0.5)\r\n// before being used, thus these integers need to be scaled by 1/16.\r\n//\r\n// Sample patterns reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\r\nconst _JitterVectors = [\r\n\t[\r\n\t\t[ 0, 0 ]\r\n\t],\r\n\t[\r\n\t\t[ 4, 4 ], [ - 4, - 4 ]\r\n\t],\r\n\t[\r\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\r\n\t],\r\n\t[\r\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\r\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\r\n\t],\r\n\t[\r\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\r\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\r\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\r\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\r\n\t],\r\n\t[\r\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\r\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\r\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\r\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\r\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\r\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\r\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\r\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\r\n\t]\r\n];\r\n\r\nexport const ssaaPass = ( scene, camera ) => nodeObject( new SSAAPassNode( scene, camera ) );\r\n", "import { nodeObject } from '../tsl/TSLBase.js';\r\nimport PassNode from './PassNode.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { StereoCamera } from '../../cameras/StereoCamera.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass StereoPassNode extends PassNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StereoPassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper( PassNode.COLOR, scene, camera );\r\n\r\n\t\tthis.isStereoPassNode = true;\r\n\r\n\t\tthis.stereo = new StereoCamera();\r\n\t\tthis.stereo.aspect = 0.5;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\t\tconst { scene, camera, stereo, renderTarget } = this;\r\n\r\n\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tstereo.cameraL.coordinateSystem = renderer.coordinateSystem;\r\n\t\tstereo.cameraR.coordinateSystem = renderer.coordinateSystem;\r\n\t\tstereo.update( camera );\r\n\r\n\t\tconst size = renderer.getSize( _size );\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\tconst currentAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\r\n\t\tthis._cameraNear.value = camera.near;\r\n\t\tthis._cameraFar.value = camera.far;\r\n\r\n\t\tfor ( const name in this._previousTextures ) {\r\n\r\n\t\t\tthis.toggleTexture( name );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\trenderer.setMRT( this._mrt );\r\n\t\trenderer.clear();\r\n\r\n\t\trenderTarget.scissorTest = true;\r\n\r\n\t\trenderTarget.scissor.set( 0, 0, renderTarget.width / 2, renderTarget.height );\r\n\t\trenderTarget.viewport.set( 0, 0, renderTarget.width / 2, renderTarget.height );\r\n\t\trenderer.render( scene, stereo.cameraL );\r\n\r\n\t\trenderTarget.scissor.set( renderTarget.width / 2, 0, renderTarget.width / 2, renderTarget.height );\r\n\t\trenderTarget.viewport.set( renderTarget.width / 2, 0, renderTarget.width / 2, renderTarget.height );\r\n\t\trenderer.render( scene, stereo.cameraR );\r\n\r\n\t\trenderTarget.scissorTest = false;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\r\n\t\trenderer.autoClear = currentAutoClear;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StereoPassNode;\r\n\r\nexport const stereoPass = ( scene, camera ) => nodeObject( new StereoPassNode( scene, camera ) );\r\n", "\r\nimport PassNode from './PassNode.js';\r\nimport { StereoCamera } from '../../cameras/StereoCamera.js';\r\nimport { HalfFloatType, LinearFilter, NearestFilter } from '../../constants.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass StereoCompositePassNode extends PassNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StereoCompositePassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper( PassNode.COLOR, scene, camera );\r\n\r\n\t\tthis.isStereoCompositePassNode = true;\r\n\r\n\t\tthis.stereo = new StereoCamera();\r\n\t\tconst _params = { minFilter: LinearFilter, magFilter: NearestFilter, type: HalfFloatType };\r\n\r\n\t\tthis._renderTargetL = new RenderTarget( 1, 1, _params );\r\n\t\tthis._renderTargetR = new RenderTarget( 1, 1, _params );\r\n\r\n\t\tthis._mapLeft = texture( this._renderTargetL.texture );\r\n\t\tthis._mapRight = texture( this._renderTargetR.texture );\r\n\r\n\t\tthis._material = null;\r\n\r\n\t}\r\n\r\n\tupdateStereoCamera( coordinateSystem ) {\r\n\r\n\t\tthis.stereo.cameraL.coordinateSystem = coordinateSystem;\r\n\t\tthis.stereo.cameraR.coordinateSystem = coordinateSystem;\r\n\t\tthis.stereo.update( this.camera );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tsuper.setSize( width, height );\r\n\r\n\t\tthis._renderTargetL.setSize( this.renderTarget.width, this.renderTarget.height );\r\n\t\tthis._renderTargetR.setSize( this.renderTarget.width, this.renderTarget.height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\t\tconst { scene, stereo, renderTarget } = this;\r\n\r\n\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tthis.updateStereoCamera( renderer.coordinateSystem );\r\n\r\n\t\tconst size = renderer.getSize( _size );\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t// left\r\n\r\n\t\trenderer.setRenderTarget( this._renderTargetL );\r\n\t\trenderer.render( scene, stereo.cameraL );\r\n\r\n\t\t// right\r\n\r\n\t\trenderer.setRenderTarget( this._renderTargetR );\r\n\t\trenderer.render( scene, stereo.cameraR );\r\n\r\n\t\t// composite\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\t_quadMesh.material = this._material;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t\tthis._renderTargetL.dispose();\r\n\t\tthis._renderTargetR.dispose();\r\n\r\n\t\tif ( this._material !== null ) {\r\n\r\n\t\t\tthis._material.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StereoCompositePassNode;\r\n", "import { Fn, nodeObject, vec4 } from '../tsl/TSLBase.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { clamp, max } from '../math/MathNode.js';\r\nimport StereoCompositePassNode from './StereoCompositePassNode.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nclass AnaglyphPassNode extends StereoCompositePassNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AnaglyphPassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper( scene, camera );\r\n\r\n\t\tthis.isAnaglyphPassNode = true;\r\n\r\n\t\t// Dubois matrices from https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4\r\n\r\n\t\tthis._colorMatrixLeft = uniform( new Matrix3().fromArray( [\r\n\t\t\t0.456100, - 0.0400822, - 0.0152161,\r\n\t\t\t0.500484, - 0.0378246, - 0.0205971,\r\n\t\t\t0.176381, - 0.0157589, - 0.00546856\r\n\t\t] ) );\r\n\r\n\t\tthis._colorMatrixRight = uniform( new Matrix3().fromArray( [\r\n\t\t\t- 0.0434706, 0.378476, - 0.0721527,\r\n\t\t\t- 0.0879388, 0.73364, - 0.112961,\r\n\t\t\t- 0.00155529, - 0.0184503, 1.2264\r\n\t\t] ) );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst uvNode = uv();\r\n\r\n\t\tconst anaglyph = Fn( () => {\r\n\r\n\t\t\tconst colorL = this._mapLeft.uv( uvNode );\r\n\t\t\tconst colorR = this._mapRight.uv( uvNode );\r\n\r\n\t\t\tconst color = clamp( this._colorMatrixLeft.mul( colorL.rgb ).add( this._colorMatrixRight.mul( colorR.rgb ) ) );\r\n\r\n\t\t\treturn vec4( color.rgb, max( colorL.a, colorR.a ) );\r\n\r\n\t\t} );\r\n\r\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\r\n\t\tmaterial.fragmentNode = anaglyph().context( builder.getSharedContext() );\r\n\t\tmaterial.name = 'Anaglyph';\r\n\t\tmaterial.needsUpdate = true;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AnaglyphPassNode;\r\n\r\nexport const anaglyphPass = ( scene, camera ) => nodeObject( new AnaglyphPassNode( scene, camera ) );\r\n", "import { Fn, If, nodeObject, vec4 } from '../tsl/TSLBase.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { mod } from '../math/MathNode.js';\r\nimport { screenCoordinate } from './ScreenNode.js';\r\nimport StereoCompositePassNode from './StereoCompositePassNode.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nclass ParallaxBarrierPassNode extends StereoCompositePassNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ParallaxBarrierPassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper( scene, camera );\r\n\r\n\t\tthis.isParallaxBarrierPassNode = true;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst uvNode = uv();\r\n\r\n\t\tconst parallaxBarrier = Fn( () => {\r\n\r\n\t\t\tconst color = vec4().toVar();\r\n\r\n\t\t\tIf( mod( screenCoordinate.y, 2 ).greaterThan( 1 ), () => {\r\n\r\n\t\t\t\tcolor.assign( this._mapLeft.uv( uvNode ) );\r\n\r\n\t\t\t} ).Else( () => {\r\n\r\n\t\t\t\tcolor.assign( this._mapRight.uv( uvNode ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t} );\r\n\r\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\r\n\t\tmaterial.fragmentNode = parallaxBarrier().context( builder.getSharedContext() );\r\n\t\tmaterial.needsUpdate = true;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ParallaxBarrierPassNode;\r\n\r\nexport const parallaxBarrierPass = ( scene, camera ) => nodeObject( new ParallaxBarrierPassNode( scene, camera ) );\r\n", "import { float, nodeObject, normalize, vec4 } from '../tsl/TSLBase.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\nimport { cameraProjectionMatrix } from '../../nodes/accessors/Camera.js';\r\nimport { modelViewMatrix } from '../../nodes/accessors/ModelNode.js';\r\nimport { positionLocal } from '../../nodes/accessors/Position.js';\r\nimport { normalLocal } from '../../nodes/accessors/Normal.js';\r\nimport { BackSide } from '../../constants.js';\r\nimport PassNode from './PassNode.js';\r\n\r\nclass ToonOutlinePassNode extends PassNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ToonOutlinePassNode';\r\n\r\n\t}\r\n\r\n\tconstructor( scene, camera, colorNode, thicknessNode, alphaNode ) {\r\n\r\n\t\tsuper( PassNode.COLOR, scene, camera );\r\n\r\n\t\tthis.colorNode = colorNode;\r\n\t\tthis.thicknessNode = thicknessNode;\r\n\t\tthis.alphaNode = alphaNode;\r\n\r\n\t\tthis._materialCache = new WeakMap();\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\r\n\r\n\t\trenderer.setRenderObjectFunction( ( object, scene, camera, geometry, material, group, lightsNode ) => {\r\n\r\n\t\t\t// only render outline for supported materials\r\n\r\n\t\t\tif ( material.isMeshToonMaterial || material.isMeshToonNodeMaterial ) {\r\n\r\n\t\t\t\tif ( material.wireframe === false ) {\r\n\r\n\t\t\t\t\tconst outlineMaterial = this._getOutlineMaterial( material );\r\n\t\t\t\t\trenderer.renderObject( object, scene, camera, geometry, outlineMaterial, group, lightsNode );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// default\r\n\r\n\t\t\trenderer.renderObject( object, scene, camera, geometry, material, group, lightsNode );\r\n\r\n\t\t} );\r\n\r\n\t\tsuper.updateBefore( frame );\r\n\r\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\r\n\r\n\t}\r\n\r\n\t_createMaterial() {\r\n\r\n\t\tconst material = new NodeMaterial();\r\n\t\tmaterial.isMeshToonOutlineMaterial = true;\r\n\t\tmaterial.name = 'Toon_Outline';\r\n\t\tmaterial.side = BackSide;\r\n\r\n\t\t// vertex node\r\n\r\n\t\tconst outlineNormal = normalLocal.negate();\r\n\t\tconst mvp = cameraProjectionMatrix.mul( modelViewMatrix );\r\n\r\n\t\tconst ratio = float( 1.0 ); // TODO: support outline thickness ratio for each vertex\r\n\t\tconst pos = mvp.mul( vec4( positionLocal, 1.0 ) );\r\n\t\tconst pos2 = mvp.mul( vec4( positionLocal.add( outlineNormal ), 1.0 ) );\r\n\t\tconst norm = normalize( pos.sub( pos2 ) ); // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\r\n\r\n\t\tmaterial.vertexNode = pos.add( norm.mul( this.thicknessNode ).mul( pos.w ).mul( ratio ) );\r\n\r\n\t\t// color node\r\n\r\n\t\tmaterial.colorNode = vec4( this.colorNode, this.alphaNode );\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\t_getOutlineMaterial( originalMaterial ) {\r\n\r\n\t\tlet outlineMaterial = this._materialCache.get( originalMaterial );\r\n\r\n\t\tif ( outlineMaterial === undefined ) {\r\n\r\n\t\t\toutlineMaterial = this._createMaterial();\r\n\r\n\t\t\tthis._materialCache.set( originalMaterial, outlineMaterial );\r\n\r\n\t\t}\r\n\r\n\t\treturn outlineMaterial;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ToonOutlinePassNode;\r\n\r\nexport const toonOutlinePass = ( scene, camera, color = new Color( 0, 0, 0 ), thickness = 0.003, alpha = 1 ) => nodeObject( new ToonOutlinePassNode( scene, camera, nodeObject( color ), nodeObject( thickness ), nodeObject( alpha ) ) );\r\n", "import Node from '../core/Node.js';\r\nimport { arrayBufferToBase64, base64ToArrayBuffer } from '../core/NodeUtils.js';\r\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\r\n\r\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\r\n\r\nclass ScriptableValueNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ScriptableValueNode';\r\n\r\n\t}\r\n\r\n\tconstructor( value = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._cache = null;\r\n\r\n\t\tthis.inputType = null;\r\n\t\tthis.outpuType = null;\r\n\r\n\t\tthis.events = new EventDispatcher();\r\n\r\n\t\tthis.isScriptableValueNode = true;\r\n\r\n\t}\r\n\r\n\tget isScriptableOutputNode() {\r\n\r\n\t\treturn this.outputType !== null;\r\n\r\n\t}\r\n\r\n\tset value( val ) {\r\n\r\n\t\tif ( this._value === val ) return;\r\n\r\n\t\tif ( this._cache && this.inputType === 'URL' && this.value.value instanceof ArrayBuffer ) {\r\n\r\n\t\t\tURL.revokeObjectURL( this._cache );\r\n\r\n\t\t\tthis._cache = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis._value = val;\r\n\r\n\t\tthis.events.dispatchEvent( { type: 'change' } );\r\n\r\n\t\tthis.refresh();\r\n\r\n\t}\r\n\r\n\tget value() {\r\n\r\n\t\treturn this._value;\r\n\r\n\t}\r\n\r\n\trefresh() {\r\n\r\n\t\tthis.events.dispatchEvent( { type: 'refresh' } );\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\tconst value = this.value;\r\n\r\n\t\tif ( value && this._cache === null && this.inputType === 'URL' && value.value instanceof ArrayBuffer ) {\r\n\r\n\t\t\tthis._cache = URL.createObjectURL( new Blob( [ value.value ] ) );\r\n\r\n\t\t} else if ( value && value.value !== null && value.value !== undefined && (\r\n\t\t\t( ( this.inputType === 'URL' || this.inputType === 'String' ) && typeof value.value === 'string' ) ||\r\n\t\t\t( this.inputType === 'Number' && typeof value.value === 'number' ) ||\r\n\t\t\t( this.inputType === 'Vector2' && value.value.isVector2 ) ||\r\n\t\t\t( this.inputType === 'Vector3' && value.value.isVector3 ) ||\r\n\t\t\t( this.inputType === 'Vector4' && value.value.isVector4 ) ||\r\n\t\t\t( this.inputType === 'Color' && value.value.isColor ) ||\r\n\t\t\t( this.inputType === 'Matrix3' && value.value.isMatrix3 ) ||\r\n\t\t\t( this.inputType === 'Matrix4' && value.value.isMatrix4 )\r\n\t\t) ) {\r\n\r\n\t\t\treturn value.value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._cache || value;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.value && this.value.isNode ? this.value.getNodeType( builder ) : 'float';\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.value && this.value.isNode ? this.value : float();\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tif ( this.value !== null ) {\r\n\r\n\t\t\tif ( this.inputType === 'ArrayBuffer' ) {\r\n\r\n\t\t\t\tdata.value = arrayBufferToBase64( this.value );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.value = this.value ? this.value.toJSON( data.meta ).uuid : null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.value = null;\r\n\r\n\t\t}\r\n\r\n\t\tdata.inputType = this.inputType;\r\n\t\tdata.outputType = this.outputType;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tlet value = null;\r\n\r\n\t\tif ( data.value !== null ) {\r\n\r\n\t\t\tif ( data.inputType === 'ArrayBuffer' ) {\r\n\r\n\t\t\t\tvalue = base64ToArrayBuffer( data.value );\r\n\r\n\t\t\t} else if ( data.inputType === 'Texture' ) {\r\n\r\n\t\t\t\tvalue = data.meta.textures[ data.value ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalue = data.meta.nodes[ data.value ] || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.value = value;\r\n\r\n\t\tthis.inputType = data.inputType;\r\n\t\tthis.outputType = data.outputType;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ScriptableValueNode;\r\n\r\nexport const scriptableValue = /*@__PURE__*/ nodeProxy( ScriptableValueNode );\r\n", "import Node from '../core/Node.js';\r\nimport { scriptableValue } from './ScriptableValueNode.js';\r\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\r\nimport { hashArray, hashString } from '../core/NodeUtils.js';\r\n\r\nclass Resources extends Map {\r\n\r\n\tget( key, callback = null, ...params ) {\r\n\r\n\t\tif ( this.has( key ) ) return super.get( key );\r\n\r\n\t\tif ( callback !== null ) {\r\n\r\n\t\t\tconst value = callback( ...params );\r\n\t\t\tthis.set( key, value );\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Parameters {\r\n\r\n\tconstructor( scriptableNode ) {\r\n\r\n\t\tthis.scriptableNode = scriptableNode;\r\n\r\n\t}\r\n\r\n\tget parameters() {\r\n\r\n\t\treturn this.scriptableNode.parameters;\r\n\r\n\t}\r\n\r\n\tget layout() {\r\n\r\n\t\treturn this.scriptableNode.getLayout();\r\n\r\n\t}\r\n\r\n\tgetInputLayout( id ) {\r\n\r\n\t\treturn this.scriptableNode.getInputLayout( id );\r\n\r\n\t}\r\n\r\n\tget( name ) {\r\n\r\n\t\tconst param = this.parameters[ name ];\r\n\t\tconst value = param ? param.getValue() : null;\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const global = new Resources();\r\n\r\nclass ScriptableNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ScriptableNode';\r\n\r\n\t}\r\n\r\n\tconstructor( codeNode = null, parameters = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.codeNode = codeNode;\r\n\t\tthis.parameters = parameters;\r\n\r\n\t\tthis._local = new Resources();\r\n\t\tthis._output = scriptableValue();\r\n\t\tthis._outputs = {};\r\n\t\tthis._source = this.source;\r\n\t\tthis._method = null;\r\n\t\tthis._object = null;\r\n\t\tthis._value = null;\r\n\t\tthis._needsOutputUpdate = true;\r\n\r\n\t\tthis.onRefresh = this.onRefresh.bind( this );\r\n\r\n\t\tthis.isScriptableNode = true;\r\n\r\n\t}\r\n\r\n\tget source() {\r\n\r\n\t\treturn this.codeNode ? this.codeNode.code : '';\r\n\r\n\t}\r\n\r\n\tsetLocal( name, value ) {\r\n\r\n\t\treturn this._local.set( name, value );\r\n\r\n\t}\r\n\r\n\tgetLocal( name ) {\r\n\r\n\t\treturn this._local.get( name );\r\n\r\n\t}\r\n\r\n\tonRefresh() {\r\n\r\n\t\tthis._refresh();\r\n\r\n\t}\r\n\r\n\tgetInputLayout( id ) {\r\n\r\n\t\tfor ( const element of this.getLayout() ) {\r\n\r\n\t\t\tif ( element.inputType && ( element.id === id || element.name === id ) ) {\r\n\r\n\t\t\t\treturn element;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetOutputLayout( id ) {\r\n\r\n\t\tfor ( const element of this.getLayout() ) {\r\n\r\n\t\t\tif ( element.outputType && ( element.id === id || element.name === id ) ) {\r\n\r\n\t\t\t\treturn element;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetOutput( name, value ) {\r\n\r\n\t\tconst outputs = this._outputs;\r\n\r\n\t\tif ( outputs[ name ] === undefined ) {\r\n\r\n\t\t\toutputs[ name ] = scriptableValue( value );\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutputs[ name ].value = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetOutput( name ) {\r\n\r\n\t\treturn this._outputs[ name ];\r\n\r\n\t}\r\n\r\n\tgetParameter( name ) {\r\n\r\n\t\treturn this.parameters[ name ];\r\n\r\n\t}\r\n\r\n\tsetParameter( name, value ) {\r\n\r\n\t\tconst parameters = this.parameters;\r\n\r\n\t\tif ( value && value.isScriptableNode ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t\tparameters[ name ] = value;\r\n\t\t\tparameters[ name ].getDefaultOutput().events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else if ( value && value.isScriptableValueNode ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t\tparameters[ name ] = value;\r\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else if ( parameters[ name ] === undefined ) {\r\n\r\n\t\t\tparameters[ name ] = scriptableValue( value );\r\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tparameters[ name ].value = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.getDefaultOutput().getValue();\r\n\r\n\t}\r\n\r\n\tdeleteParameter( name ) {\r\n\r\n\t\tlet valueNode = this.parameters[ name ];\r\n\r\n\t\tif ( valueNode ) {\r\n\r\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\r\n\r\n\t\t\tvalueNode.events.removeEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclearParameters() {\r\n\r\n\t\tfor ( const name of Object.keys( this.parameters ) ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcall( name, ...params ) {\r\n\r\n\t\tconst object = this.getObject();\r\n\t\tconst method = object[ name ];\r\n\r\n\t\tif ( typeof method === 'function' ) {\r\n\r\n\t\t\treturn method( ...params );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tasync callAsync( name, ...params ) {\r\n\r\n\t\tconst object = this.getObject();\r\n\t\tconst method = object[ name ];\r\n\r\n\t\tif ( typeof method === 'function' ) {\r\n\r\n\t\t\treturn method.constructor.name === 'AsyncFunction' ? await method( ...params ) : method( ...params );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getDefaultOutputNode().getNodeType( builder );\r\n\r\n\t}\r\n\r\n\trefresh( output = null ) {\r\n\r\n\t\tif ( output !== null ) {\r\n\r\n\t\t\tthis.getOutput( output ).refresh();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._refresh();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetObject() {\r\n\r\n\t\tif ( this.needsUpdate ) this.dispose();\r\n\t\tif ( this._object !== null ) return this._object;\r\n\r\n\t\t//\r\n\r\n\t\tconst refresh = () => this.refresh();\r\n\t\tconst setOutput = ( id, value ) => this.setOutput( id, value );\r\n\r\n\t\tconst parameters = new Parameters( this );\r\n\r\n\t\tconst THREE = global.get( 'THREE' );\r\n\t\tconst TSL = global.get( 'TSL' );\r\n\r\n\t\tconst method = this.getMethod( this.codeNode );\r\n\t\tconst params = [ parameters, this._local, global, refresh, setOutput, THREE, TSL ];\r\n\r\n\t\tthis._object = method( ...params );\r\n\r\n\t\tconst layout = this._object.layout;\r\n\r\n\t\tif ( layout ) {\r\n\r\n\t\t\tif ( layout.cache === false ) {\r\n\r\n\t\t\t\tthis._local.clear();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// default output\r\n\t\t\tthis._output.outputType = layout.outputType || null;\r\n\r\n\t\t\tif ( Array.isArray( layout.elements ) ) {\r\n\r\n\t\t\t\tfor ( const element of layout.elements ) {\r\n\r\n\t\t\t\t\tconst id = element.id || element.name;\r\n\r\n\t\t\t\t\tif ( element.inputType ) {\r\n\r\n\t\t\t\t\t\tif ( this.getParameter( id ) === undefined ) this.setParameter( id, null );\r\n\r\n\t\t\t\t\t\tthis.getParameter( id ).inputType = element.inputType;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( element.outputType ) {\r\n\r\n\t\t\t\t\t\tif ( this.getOutput( id ) === undefined ) this.setOutput( id, null );\r\n\r\n\t\t\t\t\t\tthis.getOutput( id ).outputType = element.outputType;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this._object;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tfor ( const name in this.parameters ) {\r\n\r\n\t\t\tlet valueNode = this.parameters[ name ];\r\n\r\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\r\n\r\n\t\t\tvalueNode.events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetLayout() {\r\n\r\n\t\treturn this.getObject().layout;\r\n\r\n\t}\r\n\r\n\tgetDefaultOutputNode() {\r\n\r\n\t\tconst output = this.getDefaultOutput().value;\r\n\r\n\t\tif ( output && output.isNode ) {\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t}\r\n\r\n\t\treturn float();\r\n\r\n\t}\r\n\r\n\tgetDefaultOutput()\t{\r\n\r\n\t\treturn this._exec()._output;\r\n\r\n\t}\r\n\r\n\tgetMethod() {\r\n\r\n\t\tif ( this.needsUpdate ) this.dispose();\r\n\t\tif ( this._method !== null ) return this._method;\r\n\r\n\t\t//\r\n\r\n\t\tconst parametersProps = [ 'parameters', 'local', 'global', 'refresh', 'setOutput', 'THREE', 'TSL' ];\r\n\t\tconst interfaceProps = [ 'layout', 'init', 'main', 'dispose' ];\r\n\r\n\t\tconst properties = interfaceProps.join( ', ' );\r\n\t\tconst declarations = 'var ' + properties + '; var output = {};\\n';\r\n\t\tconst returns = '\\nreturn { ...output, ' + properties + ' };';\r\n\r\n\t\tconst code = declarations + this.codeNode.code + returns;\r\n\r\n\t\t//\r\n\r\n\t\tthis._method = new Function( ...parametersProps, code );\r\n\r\n\t\treturn this._method;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tif ( this._method === null ) return;\r\n\r\n\t\tif ( this._object && typeof this._object.dispose === 'function' ) {\r\n\r\n\t\t\tthis._object.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis._method = null;\r\n\t\tthis._object = null;\r\n\t\tthis._source = null;\r\n\t\tthis._value = null;\r\n\t\tthis._needsOutputUpdate = true;\r\n\t\tthis._output.value = null;\r\n\t\tthis._outputs = {};\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.getDefaultOutputNode();\r\n\r\n\t}\r\n\r\n\tgetCacheKey( force ) {\r\n\r\n\t\tconst values = [ hashString( this.source ), this.getDefaultOutputNode().getCacheKey( force ) ];\r\n\r\n\t\tfor ( const param in this.parameters ) {\r\n\r\n\t\t\tvalues.push( this.parameters[ param ].getCacheKey( force ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn hashArray( values );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.dispose();\r\n\r\n\t}\r\n\r\n\tget needsUpdate() {\r\n\r\n\t\treturn this.source !== this._source;\r\n\r\n\t}\r\n\r\n\t_exec()\t{\r\n\r\n\t\tif ( this.codeNode === null ) return this;\r\n\r\n\t\tif ( this._needsOutputUpdate === true ) {\r\n\r\n\t\t\tthis._value = this.call( 'main' );\r\n\r\n\t\t\tthis._needsOutputUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis._output.value = this._value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_refresh() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\tthis._exec();\r\n\r\n\t\tthis._output.refresh();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ScriptableNode;\r\n\r\nexport const scriptable = /*@__PURE__*/ nodeProxy( ScriptableNode );\r\n", "import Node from '../core/Node.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass FogNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FogNode';\r\n\r\n\t}\r\n\r\n\tconstructor( colorNode, factorNode ) {\r\n\r\n\t\tsuper( 'float' );\r\n\r\n\t\tthis.isFogNode = true;\r\n\r\n\t\tthis.colorNode = colorNode;\r\n\t\tthis.factorNode = factorNode;\r\n\r\n\t}\r\n\r\n\tgetViewZNode( builder ) {\r\n\r\n\t\tlet viewZ;\r\n\r\n\t\tconst getViewZ = builder.context.getViewZ;\r\n\r\n\t\tif ( getViewZ !== undefined ) {\r\n\r\n\t\t\tviewZ = getViewZ( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn ( viewZ || positionView.z ).negate();\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.factorNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FogNode;\r\n\r\nexport const fog = /*@__PURE__*/ nodeProxy( FogNode );\r\n", "import FogNode from './FogNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass FogRangeNode extends FogNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FogRangeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( colorNode, nearNode, farNode ) {\r\n\r\n\t\tsuper( colorNode );\r\n\r\n\t\tthis.isFogRangeNode = true;\r\n\r\n\t\tthis.nearNode = nearNode;\r\n\t\tthis.farNode = farNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst viewZ = this.getViewZNode( builder );\r\n\r\n\t\treturn smoothstep( this.nearNode, this.farNode, viewZ );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FogRangeNode;\r\n\r\nexport const rangeFog = /*@__PURE__*/ nodeProxy( FogRangeNode );\r\n", "import FogNode from './FogNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\nclass FogExp2Node extends FogNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FogExp2Node';\r\n\r\n\t}\r\n\r\n\tconstructor( colorNode, densityNode ) {\r\n\r\n\t\tsuper( colorNode );\r\n\r\n\t\tthis.isFogExp2Node = true;\r\n\r\n\t\tthis.densityNode = densityNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst viewZ = this.getViewZNode( builder );\r\n\t\tconst density = this.densityNode;\r\n\r\n\t\treturn density.mul( density, viewZ, viewZ ).negate().exp().oneMinus();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FogExp2Node;\r\n\r\nexport const densityFog = /*@__PURE__*/ nodeProxy( FogExp2Node );\r\n", "import Node from '../core/Node.js';\r\nimport { getValueType } from '../core/NodeUtils.js';\r\nimport { buffer } from '../accessors/BufferNode.js';\r\nimport { instancedBufferAttribute } from '../accessors/BufferAttributeNode.js';\r\nimport { instanceIndex } from '../core/IndexNode.js';\r\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\r\n\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { MathUtils } from '../../math/MathUtils.js';\r\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\r\n\r\nlet min = null;\r\nlet max = null;\r\n\r\nclass RangeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RangeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( minNode = float(), maxNode = float() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.minNode = minNode;\r\n\t\tthis.maxNode = maxNode;\r\n\r\n\t}\r\n\r\n\tgetVectorLength( builder ) {\r\n\r\n\t\tconst minLength = builder.getTypeLength( getValueType( this.minNode.value ) );\r\n\t\tconst maxLength = builder.getTypeLength( getValueType( this.maxNode.value ) );\r\n\r\n\t\treturn minLength > maxLength ? minLength : maxLength;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.object.count > 1 ? builder.getTypeFromLength( this.getVectorLength( builder ) ) : 'float';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst object = builder.object;\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( object.count > 1 ) {\r\n\r\n\t\t\tconst minValue = this.minNode.value;\r\n\t\t\tconst maxValue = this.maxNode.value;\r\n\r\n\t\t\tconst minLength = builder.getTypeLength( getValueType( minValue ) );\r\n\t\t\tconst maxLength = builder.getTypeLength( getValueType( maxValue ) );\r\n\r\n\t\t\tmin = min || new Vector4();\r\n\t\t\tmax = max || new Vector4();\r\n\r\n\t\t\tmin.setScalar( 0 );\r\n\t\t\tmax.setScalar( 0 );\r\n\r\n\t\t\tif ( minLength === 1 ) min.setScalar( minValue );\r\n\t\t\telse if ( minValue.isColor ) min.set( minValue.r, minValue.g, minValue.b );\r\n\t\t\telse min.set( minValue.x, minValue.y, minValue.z || 0, minValue.w || 0 );\r\n\r\n\t\t\tif ( maxLength === 1 ) max.setScalar( maxValue );\r\n\t\t\telse if ( maxValue.isColor ) max.set( maxValue.r, maxValue.g, maxValue.b );\r\n\t\t\telse max.set( maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0 );\r\n\r\n\t\t\tconst stride = 4;\r\n\r\n\t\t\tconst length = stride * object.count;\r\n\t\t\tconst array = new Float32Array( length );\r\n\r\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i % stride;\r\n\r\n\t\t\t\tconst minElementValue = min.getComponent( index );\r\n\t\t\t\tconst maxElementValue = max.getComponent( index );\r\n\r\n\t\t\t\tarray[ i ] = MathUtils.lerp( minElementValue, maxElementValue, Math.random() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\t\tif ( object.count <= 4096 ) {\r\n\r\n\t\t\t\toutput = buffer( array, 'vec4', object.count ).element( instanceIndex ).convert( nodeType );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// TODO: Improve anonymous buffer attribute creation removing this part\r\n\t\t\t\tconst bufferAttribute = new InstancedBufferAttribute( array, 4 );\r\n\t\t\t\tbuilder.geometry.setAttribute( '__range' + this.id, bufferAttribute );\r\n\r\n\t\t\t\toutput = instancedBufferAttribute( bufferAttribute ).convert( nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutput = float( 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RangeNode;\r\n\r\nexport const range = /*@__PURE__*/ nodeProxy( RangeNode );\r\n", "import LightingNode from './LightingNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { float, vec2, vec3, vec4, If, int, Fn } from '../tsl/TSLBase.js';\r\nimport { reference } from '../accessors/ReferenceNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { positionWorld } from '../accessors/Position.js';\r\nimport { normalWorld } from '../accessors/Normal.js';\r\nimport { mix, fract, step, max, clamp, sqrt } from '../math/MathNode.js';\r\nimport { add, sub } from '../math/OperatorNode.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { screenCoordinate } from '../display/ScreenNode.js';\r\nimport { HalfFloatType, LessCompare, RGFormat, VSMShadowMap, WebGPUCoordinateSystem } from '../../constants.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { hash } from '../core/NodeUtils.js';\r\n\r\nconst BasicShadowMap = Fn( ( { depthTexture, shadowCoord } ) => {\r\n\r\n\treturn texture( depthTexture, shadowCoord.xy ).compare( shadowCoord.z );\r\n\r\n} );\r\n\r\nconst PCFShadowMap = Fn( ( { depthTexture, shadowCoord, shadow } ) => {\r\n\r\n\tconst depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );\r\n\r\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\r\n\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\r\n\r\n\tconst texelSize = vec2( 1 ).div( mapSize );\r\n\tconst dx0 = texelSize.x.negate().mul( radius );\r\n\tconst dy0 = texelSize.y.negate().mul( radius );\r\n\tconst dx1 = texelSize.x.mul( radius );\r\n\tconst dy1 = texelSize.y.mul( radius );\r\n\tconst dx2 = dx0.div( 2 );\r\n\tconst dy2 = dy0.div( 2 );\r\n\tconst dx3 = dx1.div( 2 );\r\n\tconst dy3 = dy1.div( 2 );\r\n\r\n\treturn add(\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy, shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy1 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy1 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy1 ) ), shadowCoord.z )\r\n\t).mul( 1 / 17 );\r\n\r\n} );\r\n\r\nconst PCFSoftShadowMap = Fn( ( { depthTexture, shadowCoord, shadow } ) => {\r\n\r\n\tconst depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );\r\n\r\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\r\n\r\n\tconst texelSize = vec2( 1 ).div( mapSize );\r\n\tconst dx = texelSize.x;\r\n\tconst dy = texelSize.y;\r\n\r\n\tconst uv = shadowCoord.xy;\r\n\tconst f = fract( uv.mul( mapSize ).add( 0.5 ) );\r\n\tuv.subAssign( f.mul( texelSize ) );\r\n\r\n\treturn add(\r\n\t\tdepthCompare( uv, shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( vec2( dx, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( vec2( 0, dy ) ), shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( texelSize ), shadowCoord.z ),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), 0 ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), 0 ) ), shadowCoord.z ),\r\n\t\t\tf.x\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy ) ), shadowCoord.z ),\r\n\t\t\tf.x\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.negate() ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\tf.y\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.negate() ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\tf.y\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tmix(\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.negate() ) ), shadowCoord.z ),\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.negate() ) ), shadowCoord.z ),\r\n\t\t\t\tf.x\r\n\t\t\t),\r\n\t\t\tmix(\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\t\tf.x\r\n\t\t\t),\r\n\t\t\tf.y\r\n\t\t)\r\n\t).mul( 1 / 9 );\r\n\r\n} );\r\n\r\n// VSM\r\n\r\nconst VSMShadowMapNode = Fn( ( { depthTexture, shadowCoord } ) => {\r\n\r\n\tconst occlusion = float( 1 ).toVar();\r\n\r\n\tconst distribution = texture( depthTexture ).uv( shadowCoord.xy ).rg;\r\n\r\n\tconst hardShadow = step( shadowCoord.z, distribution.x );\r\n\r\n\tIf( hardShadow.notEqual( float( 1.0 ) ), () => {\r\n\r\n\t\tconst distance = shadowCoord.z.sub( distribution.x );\r\n\t\tconst variance = max( 0, distribution.y.mul( distribution.y ) );\r\n\t\tlet softnessProbability = variance.div( variance.add( distance.mul( distance ) ) ); // Chebeyshevs inequality\r\n\t\tsoftnessProbability = clamp( sub( softnessProbability, 0.3 ).div( 0.95 - 0.3 ) );\r\n\t\tocclusion.assign( clamp( max( hardShadow, softnessProbability ) ) );\r\n\r\n\t} );\r\n\r\n\treturn occlusion;\r\n\r\n} );\r\n\r\nconst VSMPassVertical = Fn( ( { samples, radius, size, shadowPass } ) => {\r\n\r\n\tconst mean = float( 0 ).toVar();\r\n\tconst squaredMean = float( 0 ).toVar();\r\n\r\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\r\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );\r\n\r\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\r\n\r\n\t\tconst depth = shadowPass.uv( add( screenCoordinate.xy, vec2( 0, uvOffset ).mul( radius ) ).div( size ) ).x;\r\n\t\tmean.addAssign( depth );\r\n\t\tsquaredMean.addAssign( depth.mul( depth ) );\r\n\r\n\t} );\r\n\r\n\tmean.divAssign( samples );\r\n\tsquaredMean.divAssign( samples );\r\n\r\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\r\n\treturn vec2( mean, std_dev );\r\n\r\n} );\r\n\r\nconst VSMPassHorizontal = Fn( ( { samples, radius, size, shadowPass } ) => {\r\n\r\n\tconst mean = float( 0 ).toVar();\r\n\tconst squaredMean = float( 0 ).toVar();\r\n\r\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\r\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );\r\n\r\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\r\n\r\n\t\tconst distribution = shadowPass.uv( add( screenCoordinate.xy, vec2( uvOffset, 0 ).mul( radius ) ).div( size ) );\r\n\t\tmean.addAssign( distribution.x );\r\n\t\tsquaredMean.addAssign( add( distribution.y.mul( distribution.y ), distribution.x.mul( distribution.x ) ) );\r\n\r\n\t} );\r\n\r\n\tmean.divAssign( samples );\r\n\tsquaredMean.divAssign( samples );\r\n\r\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\r\n\treturn vec2( mean, std_dev );\r\n\r\n} );\r\n\r\nconst _shadowFilterLib = [ BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, VSMShadowMapNode ];\r\n\r\n//\r\n\r\nlet _overrideMaterial = null;\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass AnalyticLightNode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AnalyticLightNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.color = new Color();\r\n\t\tthis.colorNode = uniform( this.color ).setGroup( renderGroup );\r\n\r\n\t\tthis.baseColorNode = null;\r\n\r\n\t\tthis.shadowMap = null;\r\n\t\tthis.shadowNode = null;\r\n\t\tthis.shadowColorNode = null;\r\n\r\n\t\tthis.vsmShadowMapVertical = null;\r\n\t\tthis.vsmShadowMapHorizontal = null;\r\n\r\n\t\tthis.vsmMaterialVertical = null;\r\n\t\tthis.vsmMaterialHorizontal = null;\r\n\r\n\t\tthis.isAnalyticLightNode = true;\r\n\r\n\t}\r\n\r\n\tgetCacheKey() {\r\n\r\n\t\treturn hash( super.getCacheKey(), this.light.id, this.light.castShadow ? 1 : 0 );\r\n\r\n\t}\r\n\r\n\tgetHash() {\r\n\r\n\t\treturn this.light.uuid;\r\n\r\n\t}\r\n\r\n\tsetupShadow( builder ) {\r\n\r\n\t\tconst { object, renderer } = builder;\r\n\r\n\t\tif ( renderer.shadowMap.enabled === false ) return;\r\n\r\n\t\tlet shadowColorNode = this.shadowColorNode;\r\n\r\n\t\tif ( shadowColorNode === null ) {\r\n\r\n\t\t\tif ( _overrideMaterial === null ) {\r\n\r\n\t\t\t\t_overrideMaterial = new NodeMaterial();\r\n\t\t\t\t_overrideMaterial.fragmentNode = vec4( 0, 0, 0, 1 );\r\n\t\t\t\t_overrideMaterial.isShadowNodeMaterial = true; // Use to avoid other overrideMaterial override material.fragmentNode unintentionally when using material.shadowNode\r\n\t\t\t\t_overrideMaterial.name = 'ShadowMaterial';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst shadowMapType = renderer.shadowMap.type;\r\n\t\t\tconst shadow = this.light.shadow;\r\n\r\n\t\t\tconst depthTexture = new DepthTexture();\r\n\t\t\tdepthTexture.compareFunction = LessCompare;\r\n\r\n\t\t\tconst shadowMap = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height );\r\n\t\t\tshadowMap.depthTexture = depthTexture;\r\n\r\n\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t// VSM\r\n\r\n\t\t\tif ( shadowMapType === VSMShadowMap ) {\r\n\r\n\t\t\t\tdepthTexture.compareFunction = null; // VSM does not use textureSampleCompare()/texture2DCompare()\r\n\r\n\t\t\t\tthis.vsmShadowMapVertical = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType } );\r\n\t\t\t\tthis.vsmShadowMapHorizontal = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType } );\r\n\r\n\t\t\t\tconst shadowPassVertical = texture( depthTexture );\r\n\t\t\t\tconst shadowPassHorizontal = texture( this.vsmShadowMapVertical.texture );\r\n\r\n\t\t\t\tconst samples = reference( 'blurSamples', 'float', shadow ).setGroup( renderGroup );\r\n\t\t\t\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\r\n\t\t\t\tconst size = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\r\n\r\n\t\t\t\tlet material = this.vsmMaterialVertical || ( this.vsmMaterialVertical = new NodeMaterial() );\r\n\t\t\t\tmaterial.fragmentNode = VSMPassVertical( { samples, radius, size, shadowPass: shadowPassVertical } ).context( builder.getSharedContext() );\r\n\t\t\t\tmaterial.name = 'VSMVertical';\r\n\r\n\t\t\t\tmaterial = this.vsmMaterialHorizontal || ( this.vsmMaterialHorizontal = new NodeMaterial() );\r\n\t\t\t\tmaterial.fragmentNode = VSMPassHorizontal( { samples, radius, size, shadowPass: shadowPassHorizontal } ).context( builder.getSharedContext() );\r\n\t\t\t\tmaterial.name = 'VSMHorizontal';\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst shadowIntensity = reference( 'intensity', 'float', shadow ).setGroup( renderGroup );\r\n\t\t\tconst bias = reference( 'bias', 'float', shadow ).setGroup( renderGroup );\r\n\t\t\tconst normalBias = reference( 'normalBias', 'float', shadow ).setGroup( renderGroup );\r\n\r\n\t\t\tconst position = object.material.shadowPositionNode || positionWorld;\r\n\r\n\t\t\tlet shadowCoord = uniform( shadow.matrix ).setGroup( renderGroup ).mul( position.add( normalWorld.mul( normalBias ) ) );\r\n\t\t\tshadowCoord = shadowCoord.xyz.div( shadowCoord.w );\r\n\r\n\t\t\tlet coordZ = shadowCoord.z.add( bias );\r\n\r\n\t\t\tif ( renderer.coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\t\tcoordZ = coordZ.mul( 2 ).sub( 1 ); // WebGPU: Convertion [ 0, 1 ] to [ - 1, 1 ]\r\n\r\n\t\t\t}\r\n\r\n\t\t\tshadowCoord = vec3(\r\n\t\t\t\tshadowCoord.x,\r\n\t\t\t\tshadowCoord.y.oneMinus(), // follow webgpu standards\r\n\t\t\t\tcoordZ\r\n\t\t\t);\r\n\r\n\t\t\tconst frustumTest = shadowCoord.x.greaterThanEqual( 0 )\r\n\t\t\t\t.and( shadowCoord.x.lessThanEqual( 1 ) )\r\n\t\t\t\t.and( shadowCoord.y.greaterThanEqual( 0 ) )\r\n\t\t\t\t.and( shadowCoord.y.lessThanEqual( 1 ) )\r\n\t\t\t\t.and( shadowCoord.z.lessThanEqual( 1 ) );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst filterFn = shadow.filterNode || _shadowFilterLib[ renderer.shadowMap.type ] || null;\r\n\r\n\t\t\tif ( filterFn === null ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.WebGPURenderer: Shadow map type not supported yet.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst shadowColor = texture( shadowMap.texture, shadowCoord );\r\n\t\t\tconst shadowNode = frustumTest.select( filterFn( { depthTexture: ( shadowMapType === VSMShadowMap ) ? this.vsmShadowMapHorizontal.texture : depthTexture, shadowCoord, shadow } ), float( 1 ) );\r\n\r\n\t\t\tthis.shadowMap = shadowMap;\r\n\t\t\tthis.light.shadow.map = shadowMap;\r\n\r\n\t\t\tthis.shadowNode = shadowNode;\r\n\t\t\tthis.shadowColorNode = shadowColorNode = this.colorNode.mul( mix( 1, shadowNode.rgb.mix( shadowColor, 1 ), shadowIntensity.mul( shadowColor.a ) ) );\r\n\r\n\t\t\tthis.baseColorNode = this.colorNode;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.colorNode = shadowColorNode;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.colorNode = this.baseColorNode || this.colorNode;\r\n\r\n\t\tif ( this.light.castShadow ) {\r\n\r\n\t\t\tif ( builder.object.receiveShadow ) {\r\n\r\n\t\t\t\tthis.setupShadow( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.shadowNode !== null ) {\r\n\r\n\t\t\tthis.disposeShadow();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateShadow( frame ) {\r\n\r\n\t\tconst { shadowMap, light } = this;\r\n\t\tconst { renderer, scene, camera } = frame;\r\n\r\n\t\tconst shadowType = renderer.shadowMap.type;\r\n\r\n\t\tconst depthVersion = shadowMap.depthTexture.version;\r\n\t\tthis._depthVersionCached = depthVersion;\r\n\r\n\t\tconst currentOverrideMaterial = scene.overrideMaterial;\r\n\r\n\t\tscene.overrideMaterial = _overrideMaterial;\r\n\r\n\t\tshadowMap.setSize( light.shadow.mapSize.width, light.shadow.mapSize.height );\r\n\r\n\t\tlight.shadow.updateMatrices( light );\r\n\t\tlight.shadow.camera.layers.mask = camera.layers.mask;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\r\n\r\n\t\trenderer.setRenderObjectFunction( ( object, ...params ) => {\r\n\r\n\t\t\tif ( object.castShadow === true || ( object.receiveShadow && shadowType === VSMShadowMap ) ) {\r\n\r\n\t\t\t\trenderer.renderObject( object, ...params );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\trenderer.setRenderTarget( shadowMap );\r\n\t\trenderer.render( scene, light.shadow.camera );\r\n\r\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\r\n\r\n\t\t// vsm blur pass\r\n\r\n\t\tif ( light.isPointLight !== true && shadowType === VSMShadowMap ) {\r\n\r\n\t\t\tthis.vsmPass( frame, light );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\tscene.overrideMaterial = currentOverrideMaterial;\r\n\r\n\t}\r\n\r\n\tvsmPass( frame, light ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tthis.vsmShadowMapVertical.setSize( light.shadow.mapSize.width, light.shadow.mapSize.height );\r\n\t\tthis.vsmShadowMapHorizontal.setSize( light.shadow.mapSize.width, light.shadow.mapSize.height );\r\n\r\n\t\trenderer.setRenderTarget( this.vsmShadowMapVertical );\r\n\t\t_quadMesh.material = this.vsmMaterialVertical;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\trenderer.setRenderTarget( this.vsmShadowMapHorizontal );\r\n\t\t_quadMesh.material = this.vsmMaterialHorizontal;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t}\r\n\r\n\tdisposeShadow() {\r\n\r\n\t\tthis.shadowMap.dispose();\r\n\t\tthis.shadowMap = null;\r\n\r\n\t\tif ( this.vsmShadowMapVertical !== null ) {\r\n\r\n\t\t\tthis.vsmShadowMapVertical.dispose();\r\n\t\t\tthis.vsmShadowMapVertical = null;\r\n\r\n\t\t\tthis.vsmMaterialVertical.dispose();\r\n\t\t\tthis.vsmMaterialVertical = null;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.vsmShadowMapHorizontal !== null ) {\r\n\r\n\t\t\tthis.vsmShadowMapHorizontal.dispose();\r\n\t\t\tthis.vsmShadowMapHorizontal = null;\r\n\r\n\t\t\tthis.vsmMaterialHorizontal.dispose();\r\n\t\t\tthis.vsmMaterialHorizontal = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis.shadowNode = null;\r\n\t\tthis.shadowColorNode = null;\r\n\r\n\t\tthis.baseColorNode = null;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst shadow = this.light.shadow;\r\n\r\n\t\tconst needsUpdate = shadow.needsUpdate || shadow.autoUpdate;\r\n\r\n\t\tif ( needsUpdate ) {\r\n\r\n\t\t\tthis.updateShadow( frame );\r\n\r\n\t\t\tif ( this.shadowMap.depthTexture.version === this._depthVersionCached ) {\r\n\r\n\t\t\t\tshadow.needsUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tthis.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AnalyticLightNode;\r\n", "import { Fn } from '../tsl/TSLBase.js';\r\n\r\nexport const getDistanceAttenuation = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\tconst { lightDistance, cutoffDistance, decayExponent } = inputs;\r\n\r\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\r\n\t// page 32, equation 26: E[window1]\r\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\tconst distanceFalloff = lightDistance.pow( decayExponent ).max( 0.01 ).reciprocal();\r\n\r\n\treturn cutoffDistance.greaterThan( 0 ).select(\r\n\t\tdistanceFalloff.mul( lightDistance.div( cutoffDistance ).pow4().oneMinus().clamp().pow2() ),\r\n\t\tdistanceFalloff\r\n\t);\r\n\r\n} ); // validated\r\n", "import { uniform } from '../core/UniformNode.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\n\r\nlet uniformsLib;\r\n\r\nfunction getLightData( light ) {\r\n\r\n\tuniformsLib = uniformsLib || new WeakMap();\r\n\r\n\tlet uniforms = uniformsLib.get( light );\r\n\r\n\tif ( uniforms === undefined ) uniformsLib.set( light, uniforms = {} );\r\n\r\n\treturn uniforms;\r\n\r\n}\r\n\r\nexport function lightPosition( light ) {\r\n\r\n\tconst data = getLightData( light );\r\n\r\n\treturn data.position || ( data.position = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.matrixWorld ) ) );\r\n\r\n}\r\n\r\nexport function lightTargetPosition( light ) {\r\n\r\n\tconst data = getLightData( light );\r\n\r\n\treturn data.targetPosition || ( data.targetPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.target.matrixWorld ) ) );\r\n\r\n}\r\n\r\nexport function lightViewPosition( light ) {\r\n\r\n\tconst data = getLightData( light );\r\n\r\n\treturn data.viewPosition || ( data.viewPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => {\r\n\r\n\t\tself.value = self.value || new Vector3();\r\n\t\tself.value.setFromMatrixPosition( light.matrixWorld );\r\n\r\n\t\tself.value.applyMatrix4( camera.matrixWorldInverse );\r\n\r\n\t} ) );\r\n\r\n}\r\n\r\nexport const lightTargetDirection = ( light ) => cameraViewMatrix.transformDirection( lightPosition( light ).sub( lightTargetPosition( light ) ) );\r\n", "import { Fn } from '../tsl/TSLBase.js';\r\n\r\nexport const hash = /*@__PURE__*/ Fn( ( [ seed ] ) => {\r\n\r\n\t// Taken from https://www.shadertoy.com/view/XlGcRh, originally from pcg-random.org\r\n\r\n\tconst state = seed.toUint().mul( 747796405 ).add( 2891336453 );\r\n\tconst word = state.shiftRight( state.shiftRight( 28 ).add( 4 ) ).bitXor( state ).mul( 277803737 );\r\n\tconst result = word.shiftRight( 22 ).bitXor( word );\r\n\r\n\treturn result.toFloat().mul( 1 / 2 ** 32 ); // Convert to range [0, 1)\r\n\r\n} );\r\n", "import { sub, mul, div, add } from './OperatorNode.js';\r\nimport { PI, pow, sin } from './MathNode.js';\r\n\r\n// remapping functions https://iquilezles.org/articles/functions/\r\nexport const parabola = ( x, k ) => pow( mul( 4.0, x.mul( sub( 1.0, x ) ) ), k );\r\nexport const gain = ( x, k ) => x.lessThan( 0.5 ) ? parabola( x.mul( 2.0 ), k ).div( 2.0 ) : sub( 1.0, parabola( mul( sub( 1.0, x ), 2.0 ), k ).div( 2.0 ) );\r\nexport const pcurve = ( x, a, b ) => pow( div( pow( x, a ), add( pow( x, a ), pow( sub( 1.0, x ), b ) ) ), 1.0 / a );\r\nexport const sinc = ( x, k ) => sin( PI.mul( k.mul( x ).sub( 1.0 ) ) ).div( PI.mul( k.mul( x ).sub( 1.0 ) ) );\r\n", "// https://github.com/cabbibo/glsl-tri-noise-3d\r\n\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { float, vec3, Fn } from '../tsl/TSLBase.js';\r\n\r\nexport const tri = /*@__PURE__*/ Fn( ( [ x ] ) => {\r\n\r\n\treturn x.fract().sub( .5 ).abs();\r\n\r\n} ).setLayout( {\r\n\tname: 'tri',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const tri3 = /*@__PURE__*/ Fn( ( [ p ] ) => {\r\n\r\n\treturn vec3( tri( p.z.add( tri( p.y.mul( 1. ) ) ) ), tri( p.z.add( tri( p.x.mul( 1. ) ) ) ), tri( p.y.add( tri( p.x.mul( 1. ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'tri3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const triNoise3D = /*@__PURE__*/ Fn( ( [ p_immutable, spd, time ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst z = float( 1.4 ).toVar();\r\n\tconst rz = float( 0.0 ).toVar();\r\n\tconst bp = vec3( p ).toVar();\r\n\r\n\tLoop( { start: float( 0.0 ), end: float( 3.0 ), type: 'float', condition: '<=' }, () => {\r\n\r\n\t\tconst dg = vec3( tri3( bp.mul( 2.0 ) ) ).toVar();\r\n\t\tp.addAssign( dg.add( time.mul( float( 0.1 ).mul( spd ) ) ) );\r\n\t\tbp.mulAssign( 1.8 );\r\n\t\tz.mulAssign( 1.5 );\r\n\t\tp.mulAssign( 1.2 );\r\n\r\n\t\tconst t = float( tri( p.z.add( tri( p.x.add( tri( p.y ) ) ) ) ) ).toVar();\r\n\t\trz.addAssign( t.div( z ) );\r\n\t\tbp.addAssign( 0.14 );\r\n\r\n\t} );\r\n\r\n\treturn rz;\r\n\r\n} ).setLayout( {\r\n\tname: 'triNoise3D',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'spd', type: 'float' },\r\n\t\t{ name: 'time', type: 'float' }\r\n\t]\r\n} );\r\n", "import { Fn, vec2 } from '../tsl/TSLBase.js';\r\nimport { rotate } from './RotateNode.js';\r\n\r\nexport const rotateUV = /*@__PURE__*/ Fn( ( [ uv, rotation, center = vec2( 0.5 ) ] ) => {\r\n\r\n\treturn rotate( uv.sub( center ), rotation ).add( center );\r\n\r\n} );\r\n\r\nexport const spherizeUV = /*@__PURE__*/ Fn( ( [ uv, strength, center = vec2( 0.5 ) ] ) => {\r\n\r\n\tconst delta = uv.sub( center );\r\n\tconst delta2 = delta.dot( delta );\r\n\tconst delta4 = delta2.mul( delta2 );\r\n\tconst deltaOffset = delta4.mul( strength );\r\n\r\n\treturn uv.add( delta.mul( deltaOffset ) );\r\n\r\n} );\r\n", "import { modelWorldMatrix } from '../accessors/ModelNode.js';\r\nimport { cameraViewMatrix, cameraProjectionMatrix } from '../accessors/Camera.js';\r\nimport { positionLocal } from '../accessors/Position.js';\r\nimport { Fn, defined } from '../tsl/TSLBase.js';\r\n\r\nexport const billboarding = /*@__PURE__*/ Fn( ( { position = null, horizontal = true, vertical = false } ) => {\r\n\r\n\tlet worldMatrix;\r\n\r\n\tif ( position !== null ) {\r\n\r\n\t\tworldMatrix = modelWorldMatrix.toVar();\r\n\t\tworldMatrix[ 3 ][ 0 ] = position.x;\r\n\t\tworldMatrix[ 3 ][ 1 ] = position.y;\r\n\t\tworldMatrix[ 3 ][ 2 ] = position.z;\r\n\r\n\t} else {\r\n\r\n\t\tworldMatrix = modelWorldMatrix;\r\n\r\n\t}\r\n\r\n\tconst modelViewMatrix = cameraViewMatrix.mul( worldMatrix );\r\n\r\n\tif ( defined( horizontal ) ) {\r\n\r\n\t\tmodelViewMatrix[ 0 ][ 0 ] = modelWorldMatrix[ 0 ].length();\r\n\t\tmodelViewMatrix[ 0 ][ 1 ] = 0;\r\n\t\tmodelViewMatrix[ 0 ][ 2 ] = 0;\r\n\r\n\t}\r\n\r\n\tif ( defined( vertical ) ) {\r\n\r\n\t\tmodelViewMatrix[ 1 ][ 0 ] = 0;\r\n\t\tmodelViewMatrix[ 1 ][ 1 ] = modelWorldMatrix[ 1 ].length();\r\n\t\tmodelViewMatrix[ 1 ][ 2 ] = 0;\r\n\r\n\t}\r\n\r\n\tmodelViewMatrix[ 2 ][ 0 ] = 0;\r\n\tmodelViewMatrix[ 2 ][ 1 ] = 0;\r\n\tmodelViewMatrix[ 2 ][ 2 ] = 1;\r\n\r\n\treturn cameraProjectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\r\n\r\n} );\r\n", "import { Fn } from '../tsl/TSLBase.js';\r\nimport { screenUV } from '../display/ScreenNode.js';\r\nimport { viewportDepthTexture } from '../display/ViewportDepthTextureNode.js';\r\nimport { linearDepth } from '../display/ViewportDepthNode.js';\r\n\r\nexport const viewportSafeUV = /*@__PURE__*/ Fn( ( [ uv = null ] ) => {\r\n\r\n\tconst depth = linearDepth();\r\n\tconst depthDiff = linearDepth( viewportDepthTexture( uv ) ).sub( depth );\r\n\tconst finalUV = depthDiff.lessThan( 0 ).select( screenUV, uv );\r\n\r\n\treturn finalUV;\r\n\r\n} );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\nimport { positionLocal, positionPrevious } from './Position.js';\r\nimport { nodeImmutable } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { sub } from '../math/OperatorNode.js';\r\nimport { cameraProjectionMatrix } from './Camera.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\n\r\nconst _objectData = new WeakMap();\r\n\r\nclass VelocityNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VelocityNode';\r\n\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\t\tthis.updateAfterType = NodeUpdateType.OBJECT;\r\n\r\n\t\tthis.previousModelWorldMatrix = uniform( new Matrix4() );\r\n\t\tthis.previousProjectionMatrix = uniform( new Matrix4() ).setGroup( renderGroup );\r\n\t\tthis.previousCameraViewMatrix = uniform( new Matrix4() );\r\n\r\n\t}\r\n\r\n\tupdate( { frameId, camera, object } ) {\r\n\r\n\t\tconst previousModelMatrix = getPreviousMatrix( object );\r\n\r\n\t\tthis.previousModelWorldMatrix.value.copy( previousModelMatrix );\r\n\r\n\t\t//\r\n\r\n\t\tconst cameraData = getData( camera );\r\n\r\n\t\tif ( cameraData.frameId !== frameId ) {\r\n\r\n\t\t\tcameraData.frameId = frameId;\r\n\r\n\t\t\tif ( cameraData.previousProjectionMatrix === undefined ) {\r\n\r\n\t\t\t\tcameraData.previousProjectionMatrix = new Matrix4();\r\n\t\t\t\tcameraData.previousCameraViewMatrix = new Matrix4();\r\n\r\n\t\t\t\tcameraData.currentProjectionMatrix = new Matrix4();\r\n\t\t\t\tcameraData.currentCameraViewMatrix = new Matrix4();\r\n\r\n\t\t\t\tcameraData.previousProjectionMatrix.copy( camera.projectionMatrix );\r\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( camera.matrixWorldInverse );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcameraData.previousProjectionMatrix.copy( cameraData.currentProjectionMatrix );\r\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( cameraData.currentCameraViewMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcameraData.currentProjectionMatrix.copy( camera.projectionMatrix );\r\n\t\t\tcameraData.currentCameraViewMatrix.copy( camera.matrixWorldInverse );\r\n\r\n\t\t\tthis.previousProjectionMatrix.value.copy( cameraData.previousProjectionMatrix );\r\n\t\t\tthis.previousCameraViewMatrix.value.copy( cameraData.previousCameraViewMatrix );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateAfter( { object } ) {\r\n\r\n\t\tgetPreviousMatrix( object ).copy( object.matrixWorld );\r\n\r\n\t}\r\n\r\n\tsetup( /*builder*/ ) {\r\n\r\n\t\tconst previousModelViewMatrix = this.previousCameraViewMatrix.mul( this.previousModelWorldMatrix );\r\n\r\n\t\tconst clipPositionCurrent = cameraProjectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\r\n\t\tconst clipPositionPrevious = this.previousProjectionMatrix.mul( previousModelViewMatrix ).mul( positionPrevious );\r\n\r\n\t\tconst ndcPositionCurrent = clipPositionCurrent.xy.div( clipPositionCurrent.w );\r\n\t\tconst ndcPositionPrevious = clipPositionPrevious.xy.div( clipPositionPrevious.w );\r\n\r\n\t\tconst velocity = sub( ndcPositionCurrent, ndcPositionPrevious );\r\n\r\n\t\treturn velocity;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction getData( object ) {\r\n\r\n\tlet objectData = _objectData.get( object );\r\n\r\n\tif ( objectData === undefined ) {\r\n\r\n\t\tobjectData = {};\r\n\t\t_objectData.set( object, objectData );\r\n\r\n\t}\r\n\r\n\treturn objectData;\r\n\r\n}\r\n\r\nfunction getPreviousMatrix( object, index = 0 ) {\r\n\r\n\tconst objectData = getData( object );\r\n\r\n\tlet matrix = objectData[ index ];\r\n\r\n\tif ( matrix === undefined ) {\r\n\r\n\t\tobjectData[ index ] = matrix = new Matrix4();\r\n\r\n\t}\r\n\r\n\treturn matrix;\r\n\r\n}\r\n\r\nexport default VelocityNode;\r\n\r\nexport const velocity = /*@__PURE__*/ nodeImmutable( VelocityNode );\r\n", "import { Fn } from '../tsl/TSLBase.js';\r\nimport { mix, min, step } from '../math/MathNode.js';\r\n\r\nexport const burn = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn min( 1.0, base.oneMinus().div( blend ) ).oneMinus();\r\n\r\n} ).setLayout( {\r\n\tname: 'burnBlend',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const dodge = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn min( base.div( blend.oneMinus() ), 1.0 );\r\n\r\n} ).setLayout( {\r\n\tname: 'dodgeBlend',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const screen = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn base.oneMinus().mul( blend.oneMinus() ).oneMinus();\r\n\r\n} ).setLayout( {\r\n\tname: 'screenBlend',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const overlay = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn mix( base.mul( 2.0 ).mul( blend ), base.oneMinus().mul( 2.0 ).mul( blend.oneMinus() ).oneMinus(), step( 0.5, base ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'overlayBlend',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n", "import { float, int, Fn } from '../tsl/TSLBase.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\n\r\nexport const motionBlur = /*@__PURE__*/ Fn( ( [ inputNode, velocity, numSamples = int( 16 ) ] ) => {\r\n\r\n\tconst sampleColor = ( uv ) => inputNode.uv( uv );\r\n\r\n\tconst uvs = uv();\r\n\r\n\tconst colorResult = sampleColor( uvs ).toVar();\r\n\tconst fSamples = float( numSamples );\r\n\r\n\tLoop( { start: int( 1 ), end: numSamples, type: 'int', condition: '<=' }, ( { i } ) => {\r\n\r\n\t\tconst offset = velocity.mul( float( i ).div( fSamples.sub( 1 ) ).sub( 0.5 ) );\r\n\t\tcolorResult.addAssign( sampleColor( uvs.add( offset ) ) );\r\n\r\n\t} );\r\n\r\n\tcolorResult.divAssign( fSamples );\r\n\r\n\treturn colorResult;\r\n\r\n} );\r\n", "import { float, Fn, vec3, vec4 } from '../tsl/TSLBase.js';\r\nimport { min, max, mix } from '../math/MathNode.js';\r\nimport { luminance } from './ColorAdjustment.js';\r\n\r\nexport const bleach = /*@__PURE__*/ Fn( ( [ color, opacity = 1 ] ) => {\r\n\r\n\tconst base = color;\r\n\tconst lum = luminance( base.rgb );\r\n\tconst blend = vec3( lum );\r\n\r\n\tconst L = min( 1.0, max( 0.0, float( 10.0 ).mul( lum.sub( 0.45 ) ) ) );\r\n\r\n\tconst result1 = blend.mul( base.rgb ).mul( 2.0 );\r\n\tconst result2 = float( 2.0 ).mul( blend.oneMinus() ).mul( base.rgb.oneMinus() ).oneMinus();\r\n\r\n\tconst newColor = mix( result1, result2, L );\r\n\r\n\tconst A2 = base.a.mul( opacity );\r\n\r\n\tconst mixRGB = A2.mul( newColor.rgb );\r\n\r\n\tmixRGB.addAssign( base.rgb.mul( A2.oneMinus() ) );\r\n\r\n\treturn vec4( mixRGB, base.a );\r\n\r\n} );\r\n", "import { Fn, vec3, vec4 } from '../tsl/TSLBase.js';\r\nimport { dot } from '../math/MathNode.js';\r\n\r\nexport const sepia = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tconst c = vec3( color );\r\n\r\n\t// https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/sepia.js\r\n\r\n\treturn vec4(\r\n\t\tdot( c, vec3( 0.393, 0.769, 0.189 ) ),\r\n\t\tdot( c, vec3( 0.349, 0.686, 0.168 ) ),\r\n\t\tdot( c, vec3( 0.272, 0.534, 0.131 ) ),\r\n\t\tcolor.a\r\n\t);\r\n\r\n} );\r\n", "import { mix } from '../math/MathNode.js';\r\nimport { Fn } from '../tsl/TSLBase.js';\r\n\r\nexport const sRGBToLinearSRGB = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tconst a = color.mul( 0.9478672986 ).add( 0.0521327014 ).pow( 2.4 );\r\n\tconst b = color.mul( 0.0773993808 );\r\n\tconst factor = color.lessThanEqual( 0.04045 );\r\n\r\n\tconst rgbResult = mix( a, b, factor );\r\n\r\n\treturn rgbResult;\r\n\r\n} ).setLayout( {\r\n\tname: 'sRGBToLinearSRGB',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const linearSRGBTosRGB = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tconst a = color.pow( 0.41666 ).mul( 1.055 ).sub( 0.055 );\r\n\tconst b = color.mul( 12.92 );\r\n\tconst factor = color.lessThanEqual( 0.0031308 );\r\n\r\n\tconst rgbResult = mix( a, b, factor );\r\n\r\n\treturn rgbResult;\r\n\r\n} ).setLayout( {\r\n\tname: 'linearSRGBTosRGB',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' }\r\n\t]\r\n} );\r\n", "import { Fn, float, mat3, vec3, If } from '../tsl/TSLBase.js';\r\nimport { select } from '../math/ConditionalNode.js';\r\nimport { clamp, log2, max, min, pow, mix } from '../math/MathNode.js';\r\nimport { mul, sub, div } from '../math/OperatorNode.js';\r\n\r\n// exposure only\r\n\r\nexport const linearToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\treturn color.mul( exposure ).clamp();\r\n\r\n} ).setLayout( {\r\n\tname: 'linearToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\r\n\r\nexport const reinhardToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\tcolor = color.mul( exposure );\r\n\r\n\treturn color.div( color.add( 1.0 ) ).clamp();\r\n\r\n} ).setLayout( {\r\n\tname: 'reinhardToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\r\n\r\nexport const cineonToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\t// filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\tcolor = color.mul( exposure );\r\n\tcolor = color.sub( 0.004 ).max( 0.0 );\r\n\r\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\r\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\r\n\r\n\treturn a.div( b ).pow( 2.2 );\r\n\r\n} ).setLayout( {\r\n\tname: 'cineonToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\r\n\r\nconst RRTAndODTFit = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\r\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\r\n\r\n\treturn a.div( b );\r\n\r\n} );\r\n\r\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\r\n\r\nexport const acesFilmicToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\r\n\tconst ACESInputMat = mat3(\r\n\t\t0.59719, 0.35458, 0.04823,\r\n\t\t0.07600, 0.90834, 0.01566,\r\n\t\t0.02840, 0.13383, 0.83777\r\n\t);\r\n\r\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\r\n\tconst ACESOutputMat = mat3(\r\n\t\t1.60475, - 0.53108, - 0.07367,\r\n\t\t- 0.10208, 1.10813, - 0.00605,\r\n\t\t- 0.00327, - 0.07276, 1.07602\r\n\t);\r\n\r\n\tcolor = color.mul( exposure ).div( 0.6 );\r\n\r\n\tcolor = ACESInputMat.mul( color );\r\n\r\n\t// Apply RRT and ODT\r\n\tcolor = RRTAndODTFit( color );\r\n\r\n\tcolor = ACESOutputMat.mul( color );\r\n\r\n\t// Clamp to [0, 1]\r\n\treturn color.clamp();\r\n\r\n} ).setLayout( {\r\n\tname: 'acesFilmicToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst LINEAR_REC2020_TO_LINEAR_SRGB = /*@__PURE__*/ mat3( vec3( 1.6605, - 0.1246, - 0.0182 ), vec3( - 0.5876, 1.1329, - 0.1006 ), vec3( - 0.0728, - 0.0083, 1.1187 ) );\r\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = /*@__PURE__*/ mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );\r\n\r\nconst agxDefaultContrastApprox = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = vec3( x_immutable ).toVar();\r\n\tconst x2 = vec3( x.mul( x ) ).toVar();\r\n\tconst x4 = vec3( x2.mul( x2 ) ).toVar();\r\n\r\n\treturn float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );\r\n\r\n} );\r\n\r\nexport const agxToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\tconst colortone = vec3( color ).toVar();\r\n\tconst AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );\r\n\tconst AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ), vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ), vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ) );\r\n\tconst AgxMinEv = float( - 12.47393 );\r\n\tconst AgxMaxEv = float( 4.026069 );\r\n\tcolortone.mulAssign( exposure );\r\n\tcolortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );\r\n\tcolortone.assign( AgXInsetMatrix.mul( colortone ) );\r\n\tcolortone.assign( max( colortone, 1e-10 ) );\r\n\tcolortone.assign( log2( colortone ) );\r\n\tcolortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );\r\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\r\n\tcolortone.assign( agxDefaultContrastApprox( colortone ) );\r\n\tcolortone.assign( AgXOutsetMatrix.mul( colortone ) );\r\n\tcolortone.assign( pow( max( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );\r\n\tcolortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );\r\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\r\n\r\n\treturn colortone;\r\n\r\n} ).setLayout( {\r\n\tname: 'agxToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// https://modelviewer.dev/examples/tone-mapping\r\n\r\nexport const neutralToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\tconst StartCompression = float( 0.8 - 0.04 );\r\n\tconst Desaturation = float( 0.15 );\r\n\r\n\tcolor = color.mul( exposure );\r\n\r\n\tconst x = min( color.r, min( color.g, color.b ) );\r\n\tconst offset = select( x.lessThan( 0.08 ), x.sub( mul( 6.25, x.mul( x ) ) ), 0.04 );\r\n\r\n\tcolor.subAssign( offset );\r\n\r\n\tconst peak = max( color.r, max( color.g, color.b ) );\r\n\r\n\tIf( peak.lessThan( StartCompression ), () => {\r\n\r\n\t\treturn color;\r\n\r\n\t} );\r\n\r\n\tconst d = sub( 1, StartCompression );\r\n\tconst newPeak = sub( 1, d.mul( d ).div( peak.add( d.sub( StartCompression ) ) ) );\r\n\tcolor.mulAssign( newPeak.div( peak ) );\r\n\tconst g = sub( 1, div( 1, Desaturation.mul( peak.sub( newPeak ) ).add( 1 ) ) );\r\n\r\n\treturn mix( color, vec3( newPeak ), g );\r\n\r\n} ).setLayout( {\r\n\tname: 'neutralToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\nclass ComputeBuiltinNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ComputeBuiltinNode';\r\n\r\n\t}\r\n\r\n\tconstructor( builtinName, nodeType ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis._builtinName = builtinName;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.getBuiltinName( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tsetBuiltinName( builtinName ) {\r\n\r\n\t\tthis._builtinName = builtinName;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetBuiltinName( /*builder*/ ) {\r\n\r\n\t\treturn this._builtinName;\r\n\r\n\t}\r\n\r\n\thasBuiltin( builder ) {\r\n\r\n\t\tbuilder.hasBuiltin( this._builtinName );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst builtinName = this.getBuiltinName( builder );\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tif ( builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\treturn builder.format( builtinName, nodeType, output );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( `ComputeBuiltinNode: Compute built-in value ${builtinName} can not be accessed in the ${builder.shaderStage} stage` );\r\n\t\t\treturn builder.generateConst( nodeType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.global = this.global;\r\n\t\tdata._builtinName = this._builtinName;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.global = data.global;\r\n\t\tthis._builtinName = data._builtinName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ComputeBuiltinNode;\r\n\r\nconst computeBuiltin = ( name, nodeType ) => nodeObject( new ComputeBuiltinNode( name, nodeType ) );\r\n\r\nexport const numWorkgroups = /*@__PURE__*/ computeBuiltin( 'numWorkgroups', 'uvec3' );\r\nexport const workgroupId = /*@__PURE__*/ computeBuiltin( 'workgroupId', 'uvec3' );\r\nexport const localId = /*@__PURE__*/ computeBuiltin( 'localId', 'uvec3' );\r\nexport const subgroupSize = /*@__PURE__*/ computeBuiltin( 'subgroupSize', 'uint' );\r\n\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass BarrierNode extends Node {\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { scope } = this;\r\n\t\tconst { renderer } = builder;\r\n\r\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\r\n\r\n\t\t\tbuilder.addFlowCode( `\\t// ${scope}Barrier \\n` );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${scope}Barrier()`, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BarrierNode;\r\n\r\nconst barrier = nodeProxy( BarrierNode );\r\n\r\nexport const workgroupBarrier = () => barrier( 'workgroup' ).append();\r\nexport const storageBarrier = () => barrier( 'storage' ).append();\r\nexport const textureBarrier = () => barrier( 'texture' ).append();\r\n\r\n", "import ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport { nodeObject } from '../tsl/TSLCore.js';\r\nimport Node from '../core/Node.js';\r\n\r\nclass WorkgroupInfoElementNode extends ArrayElementNode {\r\n\r\n\tconstructor( workgroupInfoNode, indexNode ) {\r\n\r\n\t\tsuper( workgroupInfoNode, indexNode );\r\n\r\n\t\tthis.isWorkgroupInfoElementNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tconst isAssignContext = builder.context.assign;\r\n\t\tsnippet = super.generate( builder );\r\n\r\n\t\tif ( isAssignContext !== true ) {\r\n\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\t\tsnippet = builder.format( snippet, type, output );\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Possibly activate clip distance index on index access rather than from clipping context\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WorkgroupInfoNode extends Node {\r\n\r\n\tconstructor( scope, bufferType, bufferCount = 0 ) {\r\n\r\n\t\tsuper( bufferType );\r\n\r\n\t\tthis.bufferType = bufferType;\r\n\t\tthis.bufferCount = bufferCount;\r\n\r\n\t\tthis.isWorkgroupInfoNode = true;\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tlabel( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetHash() {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tsetScope( scope ) {\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn `${this.scope}Array`;\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new WorkgroupInfoElementNode( this, indexNode ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\treturn builder.getScopedArray( this.name || `${this.scope}Array_${this.id}`, this.scope.toLowerCase(), this.bufferType, this.bufferCount );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default WorkgroupInfoNode;\r\n\r\nexport const workgroupArray = ( type, count ) => nodeObject( new WorkgroupInfoNode( 'Workgroup', type, count ) );\r\n\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nclass AtomicFunctionNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AtomicFunctionNode';\r\n\r\n\t}\r\n\r\n\tconstructor( method, pointerNode, valueNode, storeNode = null ) {\r\n\r\n\t\tsuper( 'uint' );\r\n\r\n\t\tthis.method = method;\r\n\r\n\t\tthis.pointerNode = pointerNode;\r\n\t\tthis.valueNode = valueNode;\r\n\t\tthis.storeNode = storeNode;\r\n\r\n\t}\r\n\r\n\tgetInputType( builder ) {\r\n\r\n\t\treturn this.pointerNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getInputType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst inputType = this.getInputType( builder );\r\n\r\n\t\tconst a = this.pointerNode;\r\n\t\tconst b = this.valueNode;\r\n\r\n\t\tconst params = [];\r\n\r\n\t\tparams.push( `&${ a.build( builder, inputType ) }` );\r\n\t\tparams.push( b.build( builder, inputType ) );\r\n\r\n\t\tconst methodSnippet = `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`;\r\n\r\n\t\tif ( this.storeNode !== null ) {\r\n\r\n\t\t\tconst varSnippet = this.storeNode.build( builder, inputType );\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${varSnippet} = ${methodSnippet}`, this );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbuilder.addLineFlowCode( methodSnippet, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nAtomicFunctionNode.ATOMIC_LOAD = 'atomicLoad';\r\nAtomicFunctionNode.ATOMIC_STORE = 'atomicStore';\r\nAtomicFunctionNode.ATOMIC_ADD = 'atomicAdd';\r\nAtomicFunctionNode.ATOMIC_SUB = 'atomicSub';\r\nAtomicFunctionNode.ATOMIC_MAX = 'atomicMax';\r\nAtomicFunctionNode.ATOMIC_MIN = 'atomicMin';\r\nAtomicFunctionNode.ATOMIC_AND = 'atomicAnd';\r\nAtomicFunctionNode.ATOMIC_OR = 'atomicOr';\r\nAtomicFunctionNode.ATOMIC_XOR = 'atomicXor';\r\n\r\nexport default AtomicFunctionNode;\r\n\r\nconst atomicNode = nodeProxy( AtomicFunctionNode );\r\n\r\nexport const atomicFunc = ( method, pointerNode, valueNode, storeNode ) => {\r\n\r\n\tconst node = atomicNode( method, pointerNode, valueNode, storeNode );\r\n\tnode.append();\r\n\r\n\treturn node;\r\n\r\n};\r\n\r\nexport const atomicStore = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_STORE, pointerNode, valueNode, storeNode );\r\nexport const atomicAdd = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_ADD, pointerNode, valueNode, storeNode );\r\nexport const atomicSub = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_SUB, pointerNode, valueNode, storeNode );\r\nexport const atomicMax = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_MAX, pointerNode, valueNode, storeNode );\r\nexport const atomicMin = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_MIN, pointerNode, valueNode, storeNode );\r\nexport const atomicAnd = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_AND, pointerNode, valueNode, storeNode );\r\nexport const atomicOr = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_OR, pointerNode, valueNode, storeNode );\r\nexport const atomicXor = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_XOR, pointerNode, valueNode, storeNode );\r\n", "import { uv } from '../accessors/UV.js';\r\nimport { Fn } from '../tsl/TSLBase.js';\r\n\r\nexport const checker = /*@__PURE__*/ Fn( ( [ coord = uv() ] ) => {\r\n\r\n\tconst uv = coord.mul( 2.0 );\r\n\r\n\tconst cx = uv.x.floor();\r\n\tconst cy = uv.y.floor();\r\n\tconst result = cx.add( cy ).mod( 2.0 );\r\n\r\n\treturn result.sign();\r\n\r\n} );\r\n", "// Three.js Transpiler\r\n// https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/libraries/stdlib/genglsl/lib/mx_noise.glsl\r\n\r\nimport { int, uint, float, vec3, bool, uvec3, vec2, vec4, If, Fn } from '../../tsl/TSLBase.js';\r\nimport { select } from '../../math/ConditionalNode.js';\r\nimport { sub, mul } from '../../math/OperatorNode.js';\r\nimport { floor, abs, max, dot, min, sqrt } from '../../math/MathNode.js';\r\nimport { overloadingFn } from '../../utils/FunctionOverloadingNode.js';\r\nimport { Loop } from '../../utils/LoopNode.js';\r\n\r\n\r\nexport const mx_select = /*@__PURE__*/ Fn( ( [ b_immutable, t_immutable, f_immutable ] ) => {\r\n\r\n\tconst f = float( f_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst b = bool( b_immutable ).toVar();\r\n\r\n\treturn select( b, t, f );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_select',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'b', type: 'bool' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'f', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_negate_if = /*@__PURE__*/ Fn( ( [ val_immutable, b_immutable ] ) => {\r\n\r\n\tconst b = bool( b_immutable ).toVar();\r\n\tconst val = float( val_immutable ).toVar();\r\n\r\n\treturn select( b, val.negate(), val );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_negate_if',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'val', type: 'float' },\r\n\t\t{ name: 'b', type: 'bool' }\r\n\t]\r\n} );\r\n\r\nexport const mx_floor = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = float( x_immutable ).toVar();\r\n\r\n\treturn int( floor( x ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_floor',\r\n\ttype: 'int',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_floorfrac = /*@__PURE__*/ Fn( ( [ x_immutable, i ] ) => {\r\n\r\n\tconst x = float( x_immutable ).toVar();\r\n\ti.assign( mx_floor( x ) );\r\n\r\n\treturn x.sub( float( i ) );\r\n\r\n} );\r\n\r\nexport const mx_bilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v3 = float( v3_immutable ).toVar();\r\n\tconst v2 = float( v2_immutable ).toVar();\r\n\tconst v1 = float( v1_immutable ).toVar();\r\n\tconst v0 = float( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\r\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bilerp_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'float' },\r\n\t\t{ name: 'v1', type: 'float' },\r\n\t\t{ name: 'v2', type: 'float' },\r\n\t\t{ name: 'v3', type: 'float' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v3 = vec3( v3_immutable ).toVar();\r\n\tconst v2 = vec3( v2_immutable ).toVar();\r\n\tconst v1 = vec3( v1_immutable ).toVar();\r\n\tconst v0 = vec3( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\r\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bilerp_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'vec3' },\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' },\r\n\t\t{ name: 'v3', type: 'vec3' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bilerp = /*@__PURE__*/ overloadingFn( [ mx_bilerp_0, mx_bilerp_1 ] );\r\n\r\nexport const mx_trilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\r\n\r\n\tconst r = float( r_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v7 = float( v7_immutable ).toVar();\r\n\tconst v6 = float( v6_immutable ).toVar();\r\n\tconst v5 = float( v5_immutable ).toVar();\r\n\tconst v4 = float( v4_immutable ).toVar();\r\n\tconst v3 = float( v3_immutable ).toVar();\r\n\tconst v2 = float( v2_immutable ).toVar();\r\n\tconst v1 = float( v1_immutable ).toVar();\r\n\tconst v0 = float( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\r\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\r\n\r\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_trilerp_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'float' },\r\n\t\t{ name: 'v1', type: 'float' },\r\n\t\t{ name: 'v2', type: 'float' },\r\n\t\t{ name: 'v3', type: 'float' },\r\n\t\t{ name: 'v4', type: 'float' },\r\n\t\t{ name: 'v5', type: 'float' },\r\n\t\t{ name: 'v6', type: 'float' },\r\n\t\t{ name: 'v7', type: 'float' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'r', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_trilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\r\n\r\n\tconst r = float( r_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v7 = vec3( v7_immutable ).toVar();\r\n\tconst v6 = vec3( v6_immutable ).toVar();\r\n\tconst v5 = vec3( v5_immutable ).toVar();\r\n\tconst v4 = vec3( v4_immutable ).toVar();\r\n\tconst v3 = vec3( v3_immutable ).toVar();\r\n\tconst v2 = vec3( v2_immutable ).toVar();\r\n\tconst v1 = vec3( v1_immutable ).toVar();\r\n\tconst v0 = vec3( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\r\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\r\n\r\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_trilerp_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'vec3' },\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' },\r\n\t\t{ name: 'v3', type: 'vec3' },\r\n\t\t{ name: 'v4', type: 'vec3' },\r\n\t\t{ name: 'v5', type: 'vec3' },\r\n\t\t{ name: 'v6', type: 'vec3' },\r\n\t\t{ name: 'v7', type: 'vec3' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'r', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_trilerp = /*@__PURE__*/ overloadingFn( [ mx_trilerp_0, mx_trilerp_1 ] );\r\n\r\nexport const mx_gradient_float_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uint( hash_immutable ).toVar();\r\n\tconst h = uint( hash.bitAnd( uint( 7 ) ) ).toVar();\r\n\tconst u = float( mx_select( h.lessThan( uint( 4 ) ), x, y ) ).toVar();\r\n\tconst v = float( mul( 2.0, mx_select( h.lessThan( uint( 4 ) ), y, x ) ) ).toVar();\r\n\r\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uint' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_float_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = float( z_immutable ).toVar();\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uint( hash_immutable ).toVar();\r\n\tconst h = uint( hash.bitAnd( uint( 15 ) ) ).toVar();\r\n\tconst u = float( mx_select( h.lessThan( uint( 8 ) ), x, y ) ).toVar();\r\n\tconst v = float( mx_select( h.lessThan( uint( 4 ) ), y, mx_select( h.equal( uint( 12 ) ).or( h.equal( uint( 14 ) ) ), x, z ) ) ).toVar();\r\n\r\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uint' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' },\r\n\t\t{ name: 'z', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_float = /*@__PURE__*/ overloadingFn( [ mx_gradient_float_0, mx_gradient_float_1 ] );\r\n\r\nexport const mx_gradient_vec3_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uvec3( hash_immutable ).toVar();\r\n\r\n\treturn vec3( mx_gradient_float( hash.x, x, y ), mx_gradient_float( hash.y, x, y ), mx_gradient_float( hash.z, x, y ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uvec3' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_vec3_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = float( z_immutable ).toVar();\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uvec3( hash_immutable ).toVar();\r\n\r\n\treturn vec3( mx_gradient_float( hash.x, x, y, z ), mx_gradient_float( hash.y, x, y, z ), mx_gradient_float( hash.z, x, y, z ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uvec3' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' },\r\n\t\t{ name: 'z', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_vec3 = /*@__PURE__*/ overloadingFn( [ mx_gradient_vec3_0, mx_gradient_vec3_1 ] );\r\n\r\nexport const mx_gradient_scale2d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = float( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.6616, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale2d_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale3d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = float( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.9820, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale3d_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale2d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = vec3( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.6616, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale2d_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale2d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale2d_0, mx_gradient_scale2d_1 ] );\r\n\r\nexport const mx_gradient_scale3d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = vec3( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.9820, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale3d_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale3d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale3d_0, mx_gradient_scale3d_1 ] );\r\n\r\nexport const mx_rotl32 = /*@__PURE__*/ Fn( ( [ x_immutable, k_immutable ] ) => {\r\n\r\n\tconst k = int( k_immutable ).toVar();\r\n\tconst x = uint( x_immutable ).toVar();\r\n\r\n\treturn x.shiftLeft( k ).bitOr( x.shiftRight( int( 32 ).sub( k ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_rotl32',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'uint' },\r\n\t\t{ name: 'k', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bjmix = /*@__PURE__*/ Fn( ( [ a, b, c ] ) => {\r\n\r\n\ta.subAssign( c );\r\n\ta.bitXorAssign( mx_rotl32( c, int( 4 ) ) );\r\n\tc.addAssign( b );\r\n\tb.subAssign( a );\r\n\tb.bitXorAssign( mx_rotl32( a, int( 6 ) ) );\r\n\ta.addAssign( c );\r\n\tc.subAssign( b );\r\n\tc.bitXorAssign( mx_rotl32( b, int( 8 ) ) );\r\n\tb.addAssign( a );\r\n\ta.subAssign( c );\r\n\ta.bitXorAssign( mx_rotl32( c, int( 16 ) ) );\r\n\tc.addAssign( b );\r\n\tb.subAssign( a );\r\n\tb.bitXorAssign( mx_rotl32( a, int( 19 ) ) );\r\n\ta.addAssign( c );\r\n\tc.subAssign( b );\r\n\tc.bitXorAssign( mx_rotl32( b, int( 4 ) ) );\r\n\tb.addAssign( a );\r\n\r\n} );\r\n\r\nexport const mx_bjfinal = /*@__PURE__*/ Fn( ( [ a_immutable, b_immutable, c_immutable ] ) => {\r\n\r\n\tconst c = uint( c_immutable ).toVar();\r\n\tconst b = uint( b_immutable ).toVar();\r\n\tconst a = uint( a_immutable ).toVar();\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 14 ) ) );\r\n\ta.bitXorAssign( c );\r\n\ta.subAssign( mx_rotl32( c, int( 11 ) ) );\r\n\tb.bitXorAssign( a );\r\n\tb.subAssign( mx_rotl32( a, int( 25 ) ) );\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 16 ) ) );\r\n\ta.bitXorAssign( c );\r\n\ta.subAssign( mx_rotl32( c, int( 4 ) ) );\r\n\tb.bitXorAssign( a );\r\n\tb.subAssign( mx_rotl32( a, int( 14 ) ) );\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 24 ) ) );\r\n\r\n\treturn c;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bjfinal',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'a', type: 'uint' },\r\n\t\t{ name: 'b', type: 'uint' },\r\n\t\t{ name: 'c', type: 'uint' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bits_to_01 = /*@__PURE__*/ Fn( ( [ bits_immutable ] ) => {\r\n\r\n\tconst bits = uint( bits_immutable ).toVar();\r\n\r\n\treturn float( bits ).div( float( uint( int( 0xffffffff ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bits_to_01',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'bits', type: 'uint' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fade = /*@__PURE__*/ Fn( ( [ t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\r\n\treturn t.mul( t ).mul( t ).mul( t.mul( t.mul( 6.0 ).sub( 15.0 ) ).add( 10.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fade',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_0 = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 1 ) ).toVar();\r\n\tconst seed = uint( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ).toVar();\r\n\r\n\treturn mx_bjfinal( seed.add( uint( x ) ), seed, seed );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_0',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 2 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_1',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_2 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 3 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_2',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_3 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable ] ) => {\r\n\r\n\tconst xx = int( xx_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 4 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\tmx_bjmix( a, b, c );\r\n\ta.addAssign( uint( xx ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_3',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xx', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_4 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable ] ) => {\r\n\r\n\tconst yy = int( yy_immutable ).toVar();\r\n\tconst xx = int( xx_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 5 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\tmx_bjmix( a, b, c );\r\n\ta.addAssign( uint( xx ) );\r\n\tb.addAssign( uint( yy ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_4',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xx', type: 'int' },\r\n\t\t{ name: 'yy', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int = /*@__PURE__*/ overloadingFn( [ mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4 ] );\r\n\r\nexport const mx_hash_vec3_0 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst h = uint( mx_hash_int( x, y ) ).toVar();\r\n\tconst result = uvec3().toVar();\r\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\r\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\r\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_vec3_0',\r\n\ttype: 'uvec3',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_vec3_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst h = uint( mx_hash_int( x, y, z ) ).toVar();\r\n\tconst result = uvec3().toVar();\r\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\r\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\r\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_vec3_1',\r\n\ttype: 'uvec3',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_vec3 = /*@__PURE__*/ overloadingFn( [ mx_hash_vec3_0, mx_hash_vec3_1 ] );\r\n\r\nexport const mx_perlin_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst result = float( mx_bilerp( mx_gradient_float( mx_hash_int( X, Y ), fx, fy ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\r\n\r\n\treturn mx_gradient_scale2d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst w = float( mx_fade( fz ) ).toVar();\r\n\tconst result = float( mx_trilerp( mx_gradient_float( mx_hash_int( X, Y, Z ), fx, fy, fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\r\n\r\n\treturn mx_gradient_scale3d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_float = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_float_0, mx_perlin_noise_float_1 ] );\r\n\r\nexport const mx_perlin_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst result = vec3( mx_bilerp( mx_gradient_vec3( mx_hash_vec3( X, Y ), fx, fy ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\r\n\r\n\treturn mx_gradient_scale2d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst w = float( mx_fade( fz ) ).toVar();\r\n\tconst result = vec3( mx_trilerp( mx_gradient_vec3( mx_hash_vec3( X, Y, Z ), fx, fy, fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\r\n\r\n\treturn mx_gradient_scale3d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1 ] );\r\n\r\nexport const mx_cell_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = float( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_2',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec4( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\tconst iw = int( mx_floor( p.w ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz, iw ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_3',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec4' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3 ] );\r\n\r\nexport const mx_cell_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = float( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_2',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec4( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\tconst iw = int( mx_floor( p.w ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec4' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3 ] );\r\n\r\nexport const mx_fractal_noise_float = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst result = float( 0.0 ).toVar();\r\n\tconst amplitude = float( 1.0 ).toVar();\r\n\r\n\tLoop( octaves, () => {\r\n\r\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_float( p ) ) );\r\n\t\tamplitude.mulAssign( diminish );\r\n\t\tp.mulAssign( lacunarity );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_float',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec3 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst result = vec3( 0.0 ).toVar();\r\n\tconst amplitude = float( 1.0 ).toVar();\r\n\r\n\tLoop( octaves, () => {\r\n\r\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_vec3( p ) ) );\r\n\t\tamplitude.mulAssign( diminish );\r\n\t\tp.mulAssign( lacunarity );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec2 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\r\n\treturn vec2( mx_fractal_noise_float( p, octaves, lacunarity, diminish ), mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec2',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec4 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst c = vec3( mx_fractal_noise_vec3( p, octaves, lacunarity, diminish ) ).toVar();\r\n\tconst f = float( mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) ).toVar();\r\n\r\n\treturn vec4( c, f );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec4',\r\n\ttype: 'vec4',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance_0 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst yoff = int( yoff_immutable ).toVar();\r\n\tconst xoff = int( xoff_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst tmp = vec3( mx_cell_noise_vec3( vec2( x.add( xoff ), y.add( yoff ) ) ) ).toVar();\r\n\tconst off = vec2( tmp.x, tmp.y ).toVar();\r\n\toff.subAssign( 0.5 );\r\n\toff.mulAssign( jitter );\r\n\toff.addAssign( 0.5 );\r\n\tconst cellpos = vec2( vec2( float( x ), float( y ) ).add( off ) ).toVar();\r\n\tconst diff = vec2( cellpos.sub( p ) ).toVar();\r\n\r\n\tIf( metric.equal( int( 2 ) ), () => {\r\n\r\n\t\treturn abs( diff.x ).add( abs( diff.y ) );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 3 ) ), () => {\r\n\r\n\t\treturn max( abs( diff.x ), abs( diff.y ) );\r\n\r\n\t} );\r\n\r\n\treturn dot( diff, diff );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_distance_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'xoff', type: 'int' },\r\n\t\t{ name: 'yoff', type: 'int' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance_1 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst zoff = int( zoff_immutable ).toVar();\r\n\tconst yoff = int( yoff_immutable ).toVar();\r\n\tconst xoff = int( xoff_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst off = vec3( mx_cell_noise_vec3( vec3( x.add( xoff ), y.add( yoff ), z.add( zoff ) ) ) ).toVar();\r\n\toff.subAssign( 0.5 );\r\n\toff.mulAssign( jitter );\r\n\toff.addAssign( 0.5 );\r\n\tconst cellpos = vec3( vec3( float( x ), float( y ), float( z ) ).add( off ) ).toVar();\r\n\tconst diff = vec3( cellpos.sub( p ) ).toVar();\r\n\r\n\tIf( metric.equal( int( 2 ) ), () => {\r\n\r\n\t\treturn abs( diff.x ).add( abs( diff.y ) ).add( abs( diff.z ) );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 3 ) ), () => {\r\n\r\n\t\treturn max( max( abs( diff.x ), abs( diff.y ) ), abs( diff.z ) );\r\n\r\n\t} );\r\n\r\n\treturn dot( diff, diff );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_distance_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xoff', type: 'int' },\r\n\t\t{ name: 'yoff', type: 'int' },\r\n\t\t{ name: 'zoff', type: 'int' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance = /*@__PURE__*/ overloadingFn( [ mx_worley_distance_0, mx_worley_distance_1 ] );\r\n\r\nexport const mx_worley_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = float( 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\t\t\tsqdist.assign( min( sqdist, dist ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec2_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\r\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec2_0',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\r\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( dist );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = float( 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\t\t\t\tsqdist.assign( min( sqdist, dist ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_float = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_float_0, mx_worley_noise_float_1 ] );\r\n\r\nexport const mx_worley_noise_vec2_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\r\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec2_1',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec2 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec2_0, mx_worley_noise_vec2_1 ] );\r\n\r\nexport const mx_worley_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\r\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( dist );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec3_0, mx_worley_noise_vec3_1 ] );\r\n", "// Three.js Transpiler\r\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_hsv.glsl\r\n\r\nimport { int, float, vec3, If, Fn } from '../../tsl/TSLBase.js';\r\nimport { add } from '../../math/OperatorNode.js';\r\nimport { floor, trunc, max, min } from '../../math/MathNode.js';\r\n\r\nexport const mx_hsvtorgb = /*@__PURE__*/ Fn( ( [ hsv ] ) => {\r\n\r\n\tconst s = hsv.y;\r\n\tconst v = hsv.z;\r\n\r\n\tconst result = vec3().toVar();\r\n\r\n\tIf( s.lessThan( 0.0001 ), () => {\r\n\r\n\t\tresult.assign( vec3( v, v, v ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tlet h = hsv.x;\r\n\t\th = h.sub( floor( h ) ).mul( 6.0 ).toVar(); // TODO: check what .toVar() is needed in node system cache\r\n\t\tconst hi = int( trunc( h ) );\r\n\t\tconst f = h.sub( float( hi ) );\r\n\t\tconst p = v.mul( s.oneMinus() );\r\n\t\tconst q = v.mul( s.mul( f ).oneMinus() );\r\n\t\tconst t = v.mul( s.mul( f.oneMinus() ).oneMinus() );\r\n\r\n\t\tIf( hi.equal( int( 0 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( v, t, p ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 1 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( q, v, p ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 2 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( p, v, t ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 3 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( p, q, v ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 4 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( t, p, v ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\tresult.assign( vec3( v, p, q ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hsvtorgb',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hsv', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_rgbtohsv = /*@__PURE__*/ Fn( ( [ c_immutable ] ) => {\r\n\r\n\tconst c = vec3( c_immutable ).toVar();\r\n\tconst r = float( c.x ).toVar();\r\n\tconst g = float( c.y ).toVar();\r\n\tconst b = float( c.z ).toVar();\r\n\tconst mincomp = float( min( r, min( g, b ) ) ).toVar();\r\n\tconst maxcomp = float( max( r, max( g, b ) ) ).toVar();\r\n\tconst delta = float( maxcomp.sub( mincomp ) ).toVar();\r\n\tconst h = float().toVar(), s = float().toVar(), v = float().toVar();\r\n\tv.assign( maxcomp );\r\n\r\n\tIf( maxcomp.greaterThan( 0.0 ), () => {\r\n\r\n\t\ts.assign( delta.div( maxcomp ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\ts.assign( 0.0 );\r\n\r\n\t} );\r\n\r\n\tIf( s.lessThanEqual( 0.0 ), () => {\r\n\r\n\t\th.assign( 0.0 );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tIf( r.greaterThanEqual( maxcomp ), () => {\r\n\r\n\t\t\th.assign( g.sub( b ).div( delta ) );\r\n\r\n\t\t} ).ElseIf( g.greaterThanEqual( maxcomp ), () => {\r\n\r\n\t\t\th.assign( add( 2.0, b.sub( r ).div( delta ) ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\th.assign( add( 4.0, r.sub( g ).div( delta ) ) );\r\n\r\n\t\t} );\r\n\r\n\t\th.mulAssign( 1.0 / 6.0 );\r\n\r\n\t\tIf( h.lessThan( 0.0 ), () => {\r\n\r\n\t\t\th.addAssign( 1.0 );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn vec3( h, s, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_rgbtohsv',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'c', type: 'vec3' }\r\n\t]\r\n} );\r\n", "// Three.js Transpiler\r\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_transform_color.glsl\r\n\r\nimport { bvec3, vec3, Fn } from '../../tsl/TSLBase.js';\r\nimport { greaterThan } from '../../math/OperatorNode.js';\r\nimport { max, pow, mix } from '../../math/MathNode.js';\r\n\r\nexport const mx_srgb_texture_to_lin_rec709 = /*@__PURE__*/ Fn( ( [ color_immutable ] ) => {\r\n\r\n\tconst color = vec3( color_immutable ).toVar();\r\n\tconst isAbove = bvec3( greaterThan( color, vec3( 0.04045 ) ) ).toVar();\r\n\tconst linSeg = vec3( color.div( 12.92 ) ).toVar();\r\n\tconst powSeg = vec3( pow( max( color.add( vec3( 0.055 ) ), vec3( 0.0 ) ).div( 1.055 ), vec3( 2.4 ) ) ).toVar();\r\n\r\n\treturn mix( linSeg, powSeg, isAbove );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_srgb_texture_to_lin_rec709',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' }\r\n\t]\r\n} );\r\n", "import {\r\n\tmx_perlin_noise_float, mx_perlin_noise_vec3,\r\n\tmx_worley_noise_float as worley_noise_float, mx_worley_noise_vec2 as worley_noise_vec2, mx_worley_noise_vec3 as worley_noise_vec3,\r\n\tmx_cell_noise_float as cell_noise_float,\r\n\tmx_fractal_noise_float as fractal_noise_float, mx_fractal_noise_vec2 as fractal_noise_vec2, mx_fractal_noise_vec3 as fractal_noise_vec3, mx_fractal_noise_vec4 as fractal_noise_vec4\r\n} from './lib/mx_noise.js';\r\nimport { mx_hsvtorgb, mx_rgbtohsv } from './lib/mx_hsv.js';\r\nimport { mx_srgb_texture_to_lin_rec709 } from './lib/mx_transform_color.js';\r\nimport { mix, smoothstep } from '../math/MathNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { float, vec2, vec4, int } from '../tsl/TSLBase.js';\r\n\r\nexport const mx_aastep = ( threshold, value ) => {\r\n\r\n\tthreshold = float( threshold );\r\n\tvalue = float( value );\r\n\r\n\tconst afwidth = vec2( value.dFdx(), value.dFdy() ).length().mul( 0.70710678118654757 );\r\n\r\n\treturn smoothstep( threshold.sub( afwidth ), threshold.add( afwidth ), value );\r\n\r\n};\r\n\r\nconst _ramp = ( a, b, uv, p ) => mix( a, b, uv[ p ].clamp() );\r\nexport const mx_ramplr = ( valuel, valuer, texcoord = uv() ) => _ramp( valuel, valuer, texcoord, 'x' );\r\nexport const mx_ramptb = ( valuet, valueb, texcoord = uv() ) => _ramp( valuet, valueb, texcoord, 'y' );\r\n\r\nconst _split = ( a, b, center, uv, p ) => mix( a, b, mx_aastep( center, uv[ p ] ) );\r\nexport const mx_splitlr = ( valuel, valuer, center, texcoord = uv() ) => _split( valuel, valuer, center, texcoord, 'x' );\r\nexport const mx_splittb = ( valuet, valueb, center, texcoord = uv() ) => _split( valuet, valueb, center, texcoord, 'y' );\r\n\r\nexport const mx_transform_uv = ( uv_scale = 1, uv_offset = 0, uv_geo = uv() ) => uv_geo.mul( uv_scale ).add( uv_offset );\r\n\r\nexport const mx_safepower = ( in1, in2 = 1 ) => {\r\n\r\n\tin1 = float( in1 );\r\n\r\n\treturn in1.abs().pow( in2 ).mul( in1.sign() );\r\n\r\n};\r\n\r\nexport const mx_contrast = ( input, amount = 1, pivot = .5 ) => float( input ).sub( pivot ).mul( amount ).add( pivot );\r\n\r\nexport const mx_noise_float = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_float( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\r\n//export const mx_noise_vec2 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_vec3( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\r\nexport const mx_noise_vec3 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_vec3( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\r\nexport const mx_noise_vec4 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => {\r\n\r\n\ttexcoord = texcoord.convert( 'vec2|vec3' ); // overloading type\r\n\r\n\tconst noise_vec4 = vec4( mx_perlin_noise_vec3( texcoord ), mx_perlin_noise_float( texcoord.add( vec2( 19, 73 ) ) ) );\r\n\r\n\treturn noise_vec4.mul( amplitude ).add( pivot );\r\n\r\n};\r\n\r\nexport const mx_worley_noise_float = ( texcoord = uv(), jitter = 1 ) => worley_noise_float( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\r\nexport const mx_worley_noise_vec2 = ( texcoord = uv(), jitter = 1 ) => worley_noise_vec2( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\r\nexport const mx_worley_noise_vec3 = ( texcoord = uv(), jitter = 1 ) => worley_noise_vec3( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\r\n\r\nexport const mx_cell_noise_float = ( texcoord = uv() ) => cell_noise_float( texcoord.convert( 'vec2|vec3' ) );\r\n\r\nexport const mx_fractal_noise_float = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_float( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\r\nexport const mx_fractal_noise_vec2 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_vec2( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\r\nexport const mx_fractal_noise_vec3 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_vec3( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\r\nexport const mx_fractal_noise_vec4 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_vec4( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\r\n\r\nexport { mx_hsvtorgb, mx_rgbtohsv, mx_srgb_texture_to_lin_rec709 };\r\n", "import { Fn, mul } from '../../tsl/TSLBase.js';\r\n\r\nconst getShIrradianceAt = /*@__PURE__*/ Fn( ( [ normal, shCoefficients ] ) => {\r\n\r\n\t// normal is assumed to have unit length\r\n\r\n\tconst x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t// band 0\r\n\tlet result = shCoefficients.element( 0 ).mul( 0.886227 );\r\n\r\n\t// band 1\r\n\tresult = result.add( shCoefficients.element( 1 ).mul( 2.0 * 0.511664 ).mul( y ) );\r\n\tresult = result.add( shCoefficients.element( 2 ).mul( 2.0 * 0.511664 ).mul( z ) );\r\n\tresult = result.add( shCoefficients.element( 3 ).mul( 2.0 * 0.511664 ).mul( x ) );\r\n\r\n\t// band 2\r\n\tresult = result.add( shCoefficients.element( 4 ).mul( 2.0 * 0.429043 ).mul( x ).mul( y ) );\r\n\tresult = result.add( shCoefficients.element( 5 ).mul( 2.0 * 0.429043 ).mul( y ).mul( z ) );\r\n\tresult = result.add( shCoefficients.element( 6 ).mul( z.mul( z ).mul( 0.743125 ).sub( 0.247708 ) ) );\r\n\tresult = result.add( shCoefficients.element( 7 ).mul( 2.0 * 0.429043 ).mul( x ).mul( z ) );\r\n\tresult = result.add( shCoefficients.element( 8 ).mul( 0.429043 ).mul( mul( x, x ).sub( mul( y, y ) ) ) );\r\n\r\n\treturn result;\r\n\r\n} );\r\n\r\nexport default getShIrradianceAt;\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { getDistanceAttenuation } from './LightUtils.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { lightViewPosition } from '../accessors/Lights.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { renderGroup } from '../TSL.js';\r\n\r\nclass PointLightNode extends AnalyticLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PointLightNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\r\n\t\tthis.decayExponentNode = uniform( 0 ).setGroup( renderGroup );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tthis.cutoffDistanceNode.value = light.distance;\r\n\t\tthis.decayExponentNode.value = light.decay;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\r\n\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst lVector = lightViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\r\n\r\n\t\tconst lightDirection = lVector.normalize();\r\n\t\tconst lightDistance = lVector.length();\r\n\r\n\t\tconst lightAttenuation = getDistanceAttenuation( {\r\n\t\t\tlightDistance,\r\n\t\t\tcutoffDistance: cutoffDistanceNode,\r\n\t\t\tdecayExponent: decayExponentNode\r\n\t\t} );\r\n\r\n\t\tconst lightColor = colorNode.mul( lightAttenuation );\r\n\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.direct( {\r\n\t\t\tlightDirection,\r\n\t\t\tlightColor,\r\n\t\t\treflectedLight\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointLightNode;\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { lightTargetDirection } from '../accessors/Lights.js';\r\n\r\nclass DirectionalLightNode extends AnalyticLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'DirectionalLightNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst lightColor = this.colorNode;\r\n\t\tconst lightDirection = lightTargetDirection( this.light );\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.direct( {\r\n\t\t\tlightDirection,\r\n\t\t\tlightColor,\r\n\t\t\treflectedLight\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DirectionalLightNode;\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { lightViewPosition } from '../accessors/Lights.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\n\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nconst _matrix41 = /*@__PURE__*/ new Matrix4();\r\nconst _matrix42 = /*@__PURE__*/ new Matrix4();\r\n\r\nlet ltcLib = null;\r\n\r\nclass RectAreaLightNode extends AnalyticLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RectAreaLightNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.halfHeight = uniform( new Vector3() ).setGroup( renderGroup );\r\n\t\tthis.halfWidth = uniform( new Vector3() ).setGroup( renderGroup );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tconst viewMatrix = frame.camera.matrixWorldInverse;\r\n\r\n\t\t_matrix42.identity();\r\n\t\t_matrix41.copy( light.matrixWorld );\r\n\t\t_matrix41.premultiply( viewMatrix );\r\n\t\t_matrix42.extractRotation( _matrix41 );\r\n\r\n\t\tthis.halfWidth.value.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\tthis.halfHeight.value.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\tthis.halfWidth.value.applyMatrix4( _matrix42 );\r\n\t\tthis.halfHeight.value.applyMatrix4( _matrix42 );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tlet ltc_1, ltc_2;\r\n\r\n\t\tif ( builder.isAvailable( 'float32Filterable' ) ) {\r\n\r\n\t\t\tltc_1 = texture( ltcLib.LTC_FLOAT_1 );\r\n\t\t\tltc_2 = texture( ltcLib.LTC_FLOAT_2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tltc_1 = texture( ltcLib.LTC_HALF_1 );\r\n\t\t\tltc_2 = texture( ltcLib.LTC_HALF_2 );\r\n\r\n\t\t}\r\n\r\n\t\tconst { colorNode, light } = this;\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst lightPosition = lightViewPosition( light );\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.directRectArea( {\r\n\t\t\tlightColor: colorNode,\r\n\t\t\tlightPosition,\r\n\t\t\thalfWidth: this.halfWidth,\r\n\t\t\thalfHeight: this.halfHeight,\r\n\t\t\treflectedLight,\r\n\t\t\tltc_1,\r\n\t\t\tltc_2\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n\tstatic setLTC( ltc ) {\r\n\r\n\t\tltcLib = ltc;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RectAreaLightNode;\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { getDistanceAttenuation } from './LightUtils.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { lightViewPosition, lightTargetDirection } from '../accessors/Lights.js';\r\n\r\nclass SpotLightNode extends AnalyticLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SpotLightNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.coneCosNode = uniform( 0 ).setGroup( renderGroup );\r\n\t\tthis.penumbraCosNode = uniform( 0 ).setGroup( renderGroup );\r\n\r\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\r\n\t\tthis.decayExponentNode = uniform( 0 ).setGroup( renderGroup );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tthis.coneCosNode.value = Math.cos( light.angle );\r\n\t\tthis.penumbraCosNode.value = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\r\n\t\tthis.cutoffDistanceNode.value = light.distance;\r\n\t\tthis.decayExponentNode.value = light.decay;\r\n\r\n\t}\r\n\r\n\tgetSpotAttenuation( angleCosine ) {\r\n\r\n\t\tconst { coneCosNode, penumbraCosNode } = this;\r\n\r\n\t\treturn smoothstep( coneCosNode, penumbraCosNode, angleCosine );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\r\n\r\n\t\tconst lVector = lightViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\r\n\r\n\t\tconst lightDirection = lVector.normalize();\r\n\t\tconst angleCos = lightDirection.dot( lightTargetDirection( light ) );\r\n\t\tconst spotAttenuation = this.getSpotAttenuation( angleCos );\r\n\r\n\t\tconst lightDistance = lVector.length();\r\n\r\n\t\tconst lightAttenuation = getDistanceAttenuation( {\r\n\t\t\tlightDistance,\r\n\t\t\tcutoffDistance: cutoffDistanceNode,\r\n\t\t\tdecayExponent: decayExponentNode\r\n\t\t} );\r\n\r\n\t\tconst lightColor = colorNode.mul( spotAttenuation ).mul( lightAttenuation );\r\n\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.direct( {\r\n\t\t\tlightDirection,\r\n\t\t\tlightColor,\r\n\t\t\treflectedLight\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpotLightNode;\r\n", "import SpotLightNode from './SpotLightNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { vec2 } from '../tsl/TSLBase.js';\r\n\r\nclass IESSpotLightNode extends SpotLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'IESSpotLightNode';\r\n\r\n\t}\r\n\r\n\tgetSpotAttenuation( angleCosine ) {\r\n\r\n\t\tconst iesMap = this.light.iesMap;\r\n\r\n\t\tlet spotAttenuation = null;\r\n\r\n\t\tif ( iesMap && iesMap.isTexture === true ) {\r\n\r\n\t\t\tconst angle = angleCosine.acos().mul( 1.0 / Math.PI );\r\n\r\n\t\t\tspotAttenuation = texture( iesMap, vec2( angle, 0 ), 0 ).r;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tspotAttenuation = super.getSpotAttenuation( angleCosine );\r\n\r\n\t\t}\r\n\r\n\t\treturn spotAttenuation;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default IESSpotLightNode;\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\n\r\nclass AmbientLightNode extends AnalyticLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AmbientLightNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t}\r\n\r\n\tsetup( { context } ) {\r\n\r\n\t\tcontext.irradiance.addAssign( this.colorNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AmbientLightNode;\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { normalView } from '../accessors/Normal.js';\r\nimport { lightPosition } from '../accessors/Lights.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\n\r\nimport { Color } from '../../math/Color.js';\r\n\r\nclass HemisphereLightNode extends AnalyticLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'HemisphereLightNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.lightPositionNode = lightPosition( light );\r\n\t\tthis.lightDirectionNode = this.lightPositionNode.normalize();\r\n\r\n\t\tthis.groundColorNode = uniform( new Color() ).setGroup( renderGroup );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tthis.lightPositionNode.object3d = light;\r\n\r\n\t\tthis.groundColorNode.value.copy( light.groundColor ).multiplyScalar( light.intensity );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { colorNode, groundColorNode, lightDirectionNode } = this;\r\n\r\n\t\tconst dotNL = normalView.dot( lightDirectionNode );\r\n\t\tconst hemiDiffuseWeight = dotNL.mul( 0.5 ).add( 0.5 );\r\n\r\n\t\tconst irradiance = mix( groundColorNode, colorNode, hemiDiffuseWeight );\r\n\r\n\t\tbuilder.context.irradiance.addAssign( irradiance );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default HemisphereLightNode;\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { normalWorld } from '../accessors/Normal.js';\r\nimport { uniformArray } from '../accessors/UniformArrayNode.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport getShIrradianceAt from '../functions/material/getShIrradianceAt.js';\r\n\r\nclass LightProbeNode extends AnalyticLightNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LightProbeNode';\r\n\r\n\t}\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tconst array = [];\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) array.push( new Vector3() );\r\n\r\n\t\tthis.lightProbe = uniformArray( array );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\t//\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.lightProbe.array[ i ].copy( light.sh.coefficients[ i ] ).multiplyScalar( light.intensity );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst irradiance = getShIrradianceAt( normalWorld, this.lightProbe );\r\n\r\n\t\tbuilder.context.irradiance.addAssign( irradiance );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightProbeNode;\r\n", "class NodeParser {\r\n\r\n\tparseFunction( /*source*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeParser;\r\n", "class NodeFunction {\r\n\r\n\tconstructor( type, inputs, name = '', precision = '' ) {\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.inputs = inputs;\r\n\t\tthis.name = name;\r\n\t\tthis.precision = precision;\r\n\r\n\t}\r\n\r\n\tgetCode( /*name = this.name*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nNodeFunction.isNodeFunction = true;\r\n\r\nexport default NodeFunction;\r\n", "import NodeFunction from '../core/NodeFunction.js';\r\nimport NodeFunctionInput from '../core/NodeFunctionInput.js';\r\n\r\nconst declarationRegexp = /^\\s*(highp|mediump|lowp)?\\s*([a-z_0-9]+)\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)/i;\r\nconst propertiesRegexp = /[a-z_0-9]+/ig;\r\n\r\nconst pragmaMain = '#pragma main';\r\n\r\nconst parse = ( source ) => {\r\n\r\n\tsource = source.trim();\r\n\r\n\tconst pragmaMainIndex = source.indexOf( pragmaMain );\r\n\r\n\tconst mainCode = pragmaMainIndex !== - 1 ? source.slice( pragmaMainIndex + pragmaMain.length ) : source;\r\n\r\n\tconst declaration = mainCode.match( declarationRegexp );\r\n\r\n\tif ( declaration !== null && declaration.length === 5 ) {\r\n\r\n\t\t// tokenizer\r\n\r\n\t\tconst inputsCode = declaration[ 4 ];\r\n\t\tconst propsMatches = [];\r\n\r\n\t\tlet nameMatch = null;\r\n\r\n\t\twhile ( ( nameMatch = propertiesRegexp.exec( inputsCode ) ) !== null ) {\r\n\r\n\t\t\tpropsMatches.push( nameMatch );\r\n\r\n\t\t}\r\n\r\n\t\t// parser\r\n\r\n\t\tconst inputs = [];\r\n\r\n\t\tlet i = 0;\r\n\r\n\t\twhile ( i < propsMatches.length ) {\r\n\r\n\t\t\tconst isConst = propsMatches[ i ][ 0 ] === 'const';\r\n\r\n\t\t\tif ( isConst === true ) {\r\n\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet qualifier = propsMatches[ i ][ 0 ];\r\n\r\n\t\t\tif ( qualifier === 'in' || qualifier === 'out' || qualifier === 'inout' ) {\r\n\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tqualifier = '';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst type = propsMatches[ i ++ ][ 0 ];\r\n\r\n\t\t\tlet count = Number.parseInt( propsMatches[ i ][ 0 ] );\r\n\r\n\t\t\tif ( Number.isNaN( count ) === false ) i ++;\r\n\t\t\telse count = null;\r\n\r\n\t\t\tconst name = propsMatches[ i ++ ][ 0 ];\r\n\r\n\t\t\tinputs.push( new NodeFunctionInput( type, name, count, qualifier, isConst ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst blockCode = mainCode.substring( declaration[ 0 ].length );\r\n\r\n\t\tconst name = declaration[ 3 ] !== undefined ? declaration[ 3 ] : '';\r\n\t\tconst type = declaration[ 2 ];\r\n\r\n\t\tconst precision = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';\r\n\r\n\t\tconst headerCode = pragmaMainIndex !== - 1 ? source.slice( 0, pragmaMainIndex ) : '';\r\n\r\n\t\treturn {\r\n\t\t\ttype,\r\n\t\t\tinputs,\r\n\t\t\tname,\r\n\t\t\tprecision,\r\n\t\t\tinputsCode,\r\n\t\t\tblockCode,\r\n\t\t\theaderCode\r\n\t\t};\r\n\r\n\t} else {\r\n\r\n\t\tthrow new Error( 'FunctionNode: Function is not a GLSL code.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nclass GLSLNodeFunction extends NodeFunction {\r\n\r\n\tconstructor( source ) {\r\n\r\n\t\tconst { type, inputs, name, precision, inputsCode, blockCode, headerCode } = parse( source );\r\n\r\n\t\tsuper( type, inputs, name, precision );\r\n\r\n\t\tthis.inputsCode = inputsCode;\r\n\t\tthis.blockCode = blockCode;\r\n\t\tthis.headerCode = headerCode;\r\n\r\n\t}\r\n\r\n\tgetCode( name = this.name ) {\r\n\r\n\t\tlet code;\r\n\r\n\t\tconst blockCode = this.blockCode;\r\n\r\n\t\tif ( blockCode !== '' ) {\r\n\r\n\t\t\tconst { type, inputsCode, headerCode, precision } = this;\r\n\r\n\t\t\tlet declarationCode = `${ type } ${ name } ( ${ inputsCode.trim() } )`;\r\n\r\n\t\t\tif ( precision !== '' ) {\r\n\r\n\t\t\t\tdeclarationCode = `${ precision } ${ declarationCode }`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcode = headerCode + declarationCode + blockCode;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// interface function\r\n\r\n\t\t\tcode = '';\r\n\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default GLSLNodeFunction;\r\n", "import NodeParser from '../core/NodeParser.js';\r\nimport GLSLNodeFunction from './GLSLNodeFunction.js';\r\n\r\nclass GLSLNodeParser extends NodeParser {\r\n\r\n\tparseFunction( source ) {\r\n\r\n\t\treturn new GLSLNodeFunction( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default GLSLNodeParser;\r\n", "class NodeLibrary {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.lightNodes = new WeakMap();\r\n\t\tthis.materialNodes = new Map();\r\n\t\tthis.toneMappingNodes = new Map();\r\n\t\tthis.colorSpaceNodes = new Map();\r\n\r\n\t}\r\n\r\n\tfromMaterial( material ) {\r\n\r\n\t\tif ( material.isNodeMaterial ) return material;\r\n\r\n\t\tlet nodeMaterial = null;\r\n\r\n\t\tconst nodeMaterialClass = this.getMaterialNodeClass( material.type );\r\n\r\n\t\tif ( nodeMaterialClass !== null ) {\r\n\r\n\t\t\tnodeMaterial = new nodeMaterialClass();\r\n\r\n\t\t\tfor ( const key in material ) {\r\n\r\n\t\t\t\tnodeMaterial[ key ] = material[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeMaterial;\r\n\r\n\t}\r\n\r\n\taddColorSpace( colorSpaceNode, colorSpace ) {\r\n\r\n\t\tthis.addType( colorSpaceNode, colorSpace, this.colorSpaceNodes );\r\n\r\n\t}\r\n\r\n\tgetColorSpaceFunction( colorSpace ) {\r\n\r\n\t\treturn this.colorSpaceNodes.get( colorSpace ) || null;\r\n\r\n\t}\r\n\r\n\taddToneMapping( toneMappingNode, toneMapping ) {\r\n\r\n\t\tthis.addType( toneMappingNode, toneMapping, this.toneMappingNodes );\r\n\r\n\t}\r\n\r\n\tgetToneMappingFunction( toneMapping ) {\r\n\r\n\t\treturn this.toneMappingNodes.get( toneMapping ) || null;\r\n\r\n\t}\r\n\r\n\tgetMaterialNodeClass( materialType ) {\r\n\r\n\t\treturn this.materialNodes.get( materialType ) || null;\r\n\r\n\t}\r\n\r\n\taddMaterial( materialNodeClass, materialClass ) {\r\n\r\n\t\tthis.addType( materialNodeClass, materialClass.name, this.materialNodes );\r\n\r\n\t}\r\n\r\n\tgetLightNodeClass( light ) {\r\n\r\n\t\treturn this.lightNodes.get( light ) || null;\r\n\r\n\t}\r\n\r\n\taddLight( lightNodeClass, lightClass ) {\r\n\r\n\t\tthis.addClass( lightNodeClass, lightClass, this.lightNodes );\r\n\r\n\t}\r\n\r\n\taddType( nodeClass, type, library ) {\r\n\r\n\t\tif ( library.has( type ) ) {\r\n\r\n\t\t\tconsole.warn( `Redefinition of node ${ type }` );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );\r\n\t\tif ( typeof type === 'function' || typeof type === 'object' ) throw new Error( `Base class ${ type } is not a class.` );\r\n\r\n\t\tlibrary.set( type, nodeClass );\r\n\r\n\t}\r\n\r\n\taddClass( nodeClass, baseClass, library ) {\r\n\r\n\t\tif ( library.has( baseClass ) ) {\r\n\r\n\t\t\tconsole.warn( `Redefinition of node ${ baseClass.name }` );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );\r\n\t\tif ( typeof baseClass !== 'function' ) throw new Error( `Base class ${ baseClass.name } is not a class.` );\r\n\r\n\t\tlibrary.set( baseClass, nodeClass );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeLibrary;\r\n", "import { SpotLight } from '../SpotLight.js';\r\n\r\nclass IESSpotLight extends SpotLight {\r\n\r\n\tconstructor( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\t\tsuper( color, intensity, distance, angle, penumbra, decay );\r\n\r\n\t\tthis.iesMap = null;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.iesMap = source.iesMap;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default IESSpotLight;\r\n", "import NodeLibrary from '../../common/nodes/NodeLibrary.js';\r\n\r\n// Lights\r\nimport { PointLight } from '../../../lights/PointLight.js';\r\nimport { PointLightNode } from '../../../nodes/Nodes.js';\r\nimport { DirectionalLight } from '../../../lights/DirectionalLight.js';\r\nimport { DirectionalLightNode } from '../../../nodes/Nodes.js';\r\nimport { RectAreaLight } from '../../../lights/RectAreaLight.js';\r\nimport { RectAreaLightNode } from '../../../nodes/Nodes.js';\r\nimport { SpotLight } from '../../../lights/SpotLight.js';\r\nimport { SpotLightNode } from '../../../nodes/Nodes.js';\r\nimport { AmbientLight } from '../../../lights/AmbientLight.js';\r\nimport { AmbientLightNode } from '../../../nodes/Nodes.js';\r\nimport { HemisphereLight } from '../../../lights/HemisphereLight.js';\r\nimport { HemisphereLightNode } from '../../../nodes/Nodes.js';\r\nimport { LightProbe } from '../../../lights/LightProbe.js';\r\nimport { LightProbeNode } from '../../../nodes/Nodes.js';\r\nimport IESSpotLight from '../../../lights/webgpu/IESSpotLight.js';\r\nimport { IESSpotLightNode } from '../../../nodes/Nodes.js';\r\n\r\n// Tone Mapping\r\nimport { LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping, AgXToneMapping, NeutralToneMapping } from '../../../constants.js';\r\nimport { linearToneMapping, reinhardToneMapping, cineonToneMapping, acesFilmicToneMapping, agxToneMapping, neutralToneMapping } from '../../../nodes/display/ToneMappingFunctions.js';\r\n\r\n// Color Space\r\nimport { LinearSRGBColorSpace, SRGBColorSpace } from '../../../constants.js';\r\nimport { linearSRGBTosRGB, sRGBToLinearSRGB } from '../../../nodes/display/ColorSpaceFunctions.js';\r\nimport { getColorSpaceMethod } from '../../../nodes/display/ColorSpaceNode.js';\r\n\r\nclass BasicNodeLibrary extends NodeLibrary {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.addLight( PointLightNode, PointLight );\r\n\t\tthis.addLight( DirectionalLightNode, DirectionalLight );\r\n\t\tthis.addLight( RectAreaLightNode, RectAreaLight );\r\n\t\tthis.addLight( SpotLightNode, SpotLight );\r\n\t\tthis.addLight( AmbientLightNode, AmbientLight );\r\n\t\tthis.addLight( HemisphereLightNode, HemisphereLight );\r\n\t\tthis.addLight( LightProbeNode, LightProbe );\r\n\t\tthis.addLight( IESSpotLightNode, IESSpotLight );\r\n\r\n\t\tthis.addToneMapping( linearToneMapping, LinearToneMapping );\r\n\t\tthis.addToneMapping( reinhardToneMapping, ReinhardToneMapping );\r\n\t\tthis.addToneMapping( cineonToneMapping, CineonToneMapping );\r\n\t\tthis.addToneMapping( acesFilmicToneMapping, ACESFilmicToneMapping );\r\n\t\tthis.addToneMapping( agxToneMapping, AgXToneMapping );\r\n\t\tthis.addToneMapping( neutralToneMapping, NeutralToneMapping );\r\n\r\n\t\tthis.addColorSpace( linearSRGBTosRGB, getColorSpaceMethod( LinearSRGBColorSpace, SRGBColorSpace ) );\r\n\t\tthis.addColorSpace( sRGBToLinearSRGB, getColorSpaceMethod( SRGBColorSpace, LinearSRGBColorSpace ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BasicNodeLibrary;\r\n", "import { REVISION } from './constants.js';\r\n\r\nexport { WebGLArrayRenderTarget } from './renderers/WebGLArrayRenderTarget.js';\r\nexport { WebGL3DRenderTarget } from './renderers/WebGL3DRenderTarget.js';\r\nexport { WebGLCubeRenderTarget } from './renderers/WebGLCubeRenderTarget.js';\r\nexport { WebGLRenderTarget } from './renderers/WebGLRenderTarget.js';\r\nexport { WebGLRenderer } from './renderers/WebGLRenderer.js';\r\nexport { ShaderLib } from './renderers/shaders/ShaderLib.js';\r\nexport { UniformsLib } from './renderers/shaders/UniformsLib.js';\r\nexport { UniformsUtils } from './renderers/shaders/UniformsUtils.js';\r\nexport { ShaderChunk } from './renderers/shaders/ShaderChunk.js';\r\nexport { FogExp2 } from './scenes/FogExp2.js';\r\nexport { Fog } from './scenes/Fog.js';\r\nexport { Scene } from './scenes/Scene.js';\r\nexport { Sprite } from './objects/Sprite.js';\r\nexport { LOD } from './objects/LOD.js';\r\nexport { SkinnedMesh } from './objects/SkinnedMesh.js';\r\nexport { Skeleton } from './objects/Skeleton.js';\r\nexport { Bone } from './objects/Bone.js';\r\nexport { Mesh } from './objects/Mesh.js';\r\nexport { InstancedMesh } from './objects/InstancedMesh.js';\r\nexport { BatchedMesh } from './objects/BatchedMesh.js';\r\nexport { LineSegments } from './objects/LineSegments.js';\r\nexport { LineLoop } from './objects/LineLoop.js';\r\nexport { Line } from './objects/Line.js';\r\nexport { Points } from './objects/Points.js';\r\nexport { Group } from './objects/Group.js';\r\nexport { VideoTexture } from './textures/VideoTexture.js';\r\nexport { FramebufferTexture } from './textures/FramebufferTexture.js';\r\nexport { Source } from './textures/Source.js';\r\nexport { DataTexture } from './textures/DataTexture.js';\r\nexport { DataArrayTexture } from './textures/DataArrayTexture.js';\r\nexport { Data3DTexture } from './textures/Data3DTexture.js';\r\nexport { CompressedTexture } from './textures/CompressedTexture.js';\r\nexport { CompressedArrayTexture } from './textures/CompressedArrayTexture.js';\r\nexport { CompressedCubeTexture } from './textures/CompressedCubeTexture.js';\r\nexport { CubeTexture } from './textures/CubeTexture.js';\r\nexport { CanvasTexture } from './textures/CanvasTexture.js';\r\nexport { DepthTexture } from './textures/DepthTexture.js';\r\nexport { Texture } from './textures/Texture.js';\r\nexport * from './geometries/Geometries.js';\r\nexport * from './materials/Materials.js';\r\nexport { AnimationLoader } from './loaders/AnimationLoader.js';\r\nexport { CompressedTextureLoader } from './loaders/CompressedTextureLoader.js';\r\nexport { CubeTextureLoader } from './loaders/CubeTextureLoader.js';\r\nexport { DataTextureLoader } from './loaders/DataTextureLoader.js';\r\nexport { TextureLoader } from './loaders/TextureLoader.js';\r\nexport { ObjectLoader } from './loaders/ObjectLoader.js';\r\nexport { MaterialLoader } from './loaders/MaterialLoader.js';\r\nexport { BufferGeometryLoader } from './loaders/BufferGeometryLoader.js';\r\nexport { DefaultLoadingManager, LoadingManager } from './loaders/LoadingManager.js';\r\nexport { ImageLoader } from './loaders/ImageLoader.js';\r\nexport { ImageBitmapLoader } from './loaders/ImageBitmapLoader.js';\r\nexport { FileLoader } from './loaders/FileLoader.js';\r\nexport { Loader } from './loaders/Loader.js';\r\nexport { LoaderUtils } from './loaders/LoaderUtils.js';\r\nexport { Cache } from './loaders/Cache.js';\r\nexport { AudioLoader } from './loaders/AudioLoader.js';\r\nexport { SpotLight } from './lights/SpotLight.js';\r\nexport { PointLight } from './lights/PointLight.js';\r\nexport { RectAreaLight } from './lights/RectAreaLight.js';\r\nexport { HemisphereLight } from './lights/HemisphereLight.js';\r\nexport { DirectionalLight } from './lights/DirectionalLight.js';\r\nexport { AmbientLight } from './lights/AmbientLight.js';\r\nexport { Light } from './lights/Light.js';\r\nexport { LightProbe } from './lights/LightProbe.js';\r\nexport { StereoCamera } from './cameras/StereoCamera.js';\r\nexport { PerspectiveCamera } from './cameras/PerspectiveCamera.js';\r\nexport { OrthographicCamera } from './cameras/OrthographicCamera.js';\r\nexport { CubeCamera } from './cameras/CubeCamera.js';\r\nexport { ArrayCamera } from './cameras/ArrayCamera.js';\r\nexport { Camera } from './cameras/Camera.js';\r\nexport { AudioListener } from './audio/AudioListener.js';\r\nexport { PositionalAudio } from './audio/PositionalAudio.js';\r\nexport { AudioContext } from './audio/AudioContext.js';\r\nexport { AudioAnalyser } from './audio/AudioAnalyser.js';\r\nexport { Audio } from './audio/Audio.js';\r\nexport { VectorKeyframeTrack } from './animation/tracks/VectorKeyframeTrack.js';\r\nexport { StringKeyframeTrack } from './animation/tracks/StringKeyframeTrack.js';\r\nexport { QuaternionKeyframeTrack } from './animation/tracks/QuaternionKeyframeTrack.js';\r\nexport { NumberKeyframeTrack } from './animation/tracks/NumberKeyframeTrack.js';\r\nexport { ColorKeyframeTrack } from './animation/tracks/ColorKeyframeTrack.js';\r\nexport { BooleanKeyframeTrack } from './animation/tracks/BooleanKeyframeTrack.js';\r\nexport { PropertyMixer } from './animation/PropertyMixer.js';\r\nexport { PropertyBinding } from './animation/PropertyBinding.js';\r\nexport { KeyframeTrack } from './animation/KeyframeTrack.js';\r\nexport { AnimationUtils } from './animation/AnimationUtils.js';\r\nexport { AnimationObjectGroup } from './animation/AnimationObjectGroup.js';\r\nexport { AnimationMixer } from './animation/AnimationMixer.js';\r\nexport { AnimationClip } from './animation/AnimationClip.js';\r\nexport { AnimationAction } from './animation/AnimationAction.js';\r\nexport { RenderTarget } from './core/RenderTarget.js';\r\nexport { Uniform } from './core/Uniform.js';\r\nexport { UniformsGroup } from './core/UniformsGroup.js';\r\nexport { InstancedBufferGeometry } from './core/InstancedBufferGeometry.js';\r\nexport { BufferGeometry } from './core/BufferGeometry.js';\r\nexport { InterleavedBufferAttribute } from './core/InterleavedBufferAttribute.js';\r\nexport { InstancedInterleavedBuffer } from './core/InstancedInterleavedBuffer.js';\r\nexport { InterleavedBuffer } from './core/InterleavedBuffer.js';\r\nexport { InstancedBufferAttribute } from './core/InstancedBufferAttribute.js';\r\nexport { GLBufferAttribute } from './core/GLBufferAttribute.js';\r\nexport * from './core/BufferAttribute.js';\r\nexport { Object3D } from './core/Object3D.js';\r\nexport { Raycaster } from './core/Raycaster.js';\r\nexport { Layers } from './core/Layers.js';\r\nexport { EventDispatcher } from './core/EventDispatcher.js';\r\nexport { Clock } from './core/Clock.js';\r\nexport { QuaternionLinearInterpolant } from './math/interpolants/QuaternionLinearInterpolant.js';\r\nexport { LinearInterpolant } from './math/interpolants/LinearInterpolant.js';\r\nexport { DiscreteInterpolant } from './math/interpolants/DiscreteInterpolant.js';\r\nexport { CubicInterpolant } from './math/interpolants/CubicInterpolant.js';\r\nexport { Interpolant } from './math/Interpolant.js';\r\nexport { Triangle } from './math/Triangle.js';\r\nexport { MathUtils } from './math/MathUtils.js';\r\nexport { Spherical } from './math/Spherical.js';\r\nexport { Cylindrical } from './math/Cylindrical.js';\r\nexport { Plane } from './math/Plane.js';\r\nexport { Frustum } from './math/Frustum.js';\r\nexport { Sphere } from './math/Sphere.js';\r\nexport { Ray } from './math/Ray.js';\r\nexport { Matrix4 } from './math/Matrix4.js';\r\nexport { Matrix3 } from './math/Matrix3.js';\r\nexport { Matrix2 } from './math/Matrix2.js';\r\nexport { Box3 } from './math/Box3.js';\r\nexport { Box2 } from './math/Box2.js';\r\nexport { Line3 } from './math/Line3.js';\r\nexport { Euler } from './math/Euler.js';\r\nexport { Vector4 } from './math/Vector4.js';\r\nexport { Vector3 } from './math/Vector3.js';\r\nexport { Vector2 } from './math/Vector2.js';\r\nexport { Quaternion } from './math/Quaternion.js';\r\nexport { Color } from './math/Color.js';\r\nexport { ColorManagement } from './math/ColorManagement.js';\r\nexport { SphericalHarmonics3 } from './math/SphericalHarmonics3.js';\r\nexport { SpotLightHelper } from './helpers/SpotLightHelper.js';\r\nexport { SkeletonHelper } from './helpers/SkeletonHelper.js';\r\nexport { PointLightHelper } from './helpers/PointLightHelper.js';\r\nexport { HemisphereLightHelper } from './helpers/HemisphereLightHelper.js';\r\nexport { GridHelper } from './helpers/GridHelper.js';\r\nexport { PolarGridHelper } from './helpers/PolarGridHelper.js';\r\nexport { DirectionalLightHelper } from './helpers/DirectionalLightHelper.js';\r\nexport { CameraHelper } from './helpers/CameraHelper.js';\r\nexport { BoxHelper } from './helpers/BoxHelper.js';\r\nexport { Box3Helper } from './helpers/Box3Helper.js';\r\nexport { PlaneHelper } from './helpers/PlaneHelper.js';\r\nexport { ArrowHelper } from './helpers/ArrowHelper.js';\r\nexport { AxesHelper } from './helpers/AxesHelper.js';\r\nexport * from './extras/curves/Curves.js';\r\nexport { Shape } from './extras/core/Shape.js';\r\nexport { Path } from './extras/core/Path.js';\r\nexport { ShapePath } from './extras/core/ShapePath.js';\r\nexport { CurvePath } from './extras/core/CurvePath.js';\r\nexport { Curve } from './extras/core/Curve.js';\r\nexport { Controls } from './extras/Controls.js';\r\nexport { DataUtils } from './extras/DataUtils.js';\r\nexport { ImageUtils } from './extras/ImageUtils.js';\r\nexport { ShapeUtils } from './extras/ShapeUtils.js';\r\nexport { TextureUtils } from './extras/TextureUtils.js';\r\nexport { PMREMGenerator } from './extras/PMREMGenerator.js';\r\nexport { WebGLUtils } from './renderers/webgl/WebGLUtils.js';\r\nexport { createCanvasElement } from './utils.js';\r\nexport * from './constants.js';\r\nexport * from './Three.Legacy.js';\r\n\r\nexport * from './materials/nodes/NodeMaterials.js';\r\nexport { default as NodeLoader } from './loaders/nodes/NodeLoader.js';\r\nexport { default as NodeObjectLoader } from './loaders/nodes/NodeObjectLoader.js';\r\nexport { default as NodeMaterialLoader } from './loaders/nodes/NodeMaterialLoader.js';\r\nexport * from './nodes/Nodes.js';\r\nexport * from './nodes/TSL.js';\r\nexport { default as BasicNodeLibrary } from './renderers/webgpu/nodes/BasicNodeLibrary.js';\r\n\r\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\r\n\t\trevision: REVISION,\r\n\t} } ) );\r\n\r\n}\r\n\r\nif ( typeof window !== 'undefined' ) {\r\n\r\n\ttry {\r\n\r\n\t\tif ( import.meta ) {\r\n\r\n\t\t\tif ( ! window.__THREE__IMPORTS__) window.__THREE__IMPORTS__ = [];\r\n\t\t\twindow.__THREE__IMPORTS__.push( { url: import.meta.url, revision: REVISION } );\r\n\r\n\t\t}\r\n\r\n\t} catch { }\r\n\r\n\tif ( window.__THREE__ ) {\r\n\r\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported. Existing: ' + window.__THREE__ + ', new: ' + REVISION );\r\n\t\tconsole.warn( window.__THREE__IMPORTS__ );\r\n\r\n\t} else {\r\n\r\n\t\twindow.__THREE__ = REVISION;\r\n\r\n\t}\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": ["min", "max", "length", "range", "degrees", "radians", "cos", "sin", "attribute", "tmp", "buffer", "color", "context", "output", "anisotropy", "uv", "texture", "depth", "w0", "w1", "step", "normal", "lengthSq", "direction", "sign", "distance", "id", "element", "cache", "string", "hue", "saturation", "data", "tmp2", "indices", "intersects", "intersect", "width", "height", "property", "uniforms", "uniform", "fov", "aspect", "renderer", "scene", "alpha", "attributes", "precision", "mapTextureMapping", "onTextureDispose", "_lodMax", "toneMapping", "x", "fill", "self", "code", "clipping", "lights", "fog", "hash", "_frustum", "viewport", "drawBuffers", "scissor", "_canvas", "convert", "threshold", "i", "cameraL", "cameraR", "cameras", "cameraXR", "uniformArray", "info", "chunkOffset", "_currentClearColor", "_projScreenMatrix", "_vector3", "stencil", "drawCount", "materials", "currentRenderList", "parameters", "framebuffer", "reference", "l", "pow", "vertex", "detail", "radius", "azimuth", "pass", "tan", "px", "py", "bs", "contour", "p", "q", "label", "json", "arrayBuffer", "bufferAttribute", "mix", "subTreeNode", "now", "loop", "cross", "shapes", "tmpPath", "tmpShape", "notEqual", "h1", "toJSON", "nodeObject", "bool", "uint", "int", "float", "stack", "varying", "snippet", "ReferenceElementNode", "normalMap", "size", "y", "j", "mrt", "lightNode", "RECIPROCAL_PI", "roughness", "alphaT", "w2", "normalView", "specularColor", "specularF90", "thickness", "ior", "modelScale", "attenuationColor", "attenuationDistance", "diffuseColor", "dispersion", "iridescenceIOR", "clearcoat", "sheen", "iridescence", "transmission", "lightPosition", "outputDirection", "modelViewProjection", "Uniform", "PMREMGenerator", "value", "userData", "cameraNear", "cameraFar", "blur", "damp", "temp", "sobel", "dof", "dotScreen", "rgbShift", "film", "lut3D", "ao", "denoise", "uvNode", "fxaa", "transition", "pixelation", "modelViewMatrix", "frameId", "velocity", "type", "name"]
}
