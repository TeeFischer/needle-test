{
  "version": 3,
  "sources": ["../../@needle-tools/engine/node_modules/three/examples/jsm/renderers/webgl-legacy/nodes/SlotNode.js", "../../@needle-tools/engine/node_modules/three/examples/jsm/renderers/webgl-legacy/nodes/WebGLNodeBuilder.js"],
  "sourcesContent": ["import { Node } from 'three';\r\n\r\nclass SlotNode extends Node {\r\n\r\n\tconstructor( params ) {\r\n\r\n\t\tsuper( params.nodeType );\r\n\r\n\t\tthis.node = null;\r\n\t\tthis.source = null;\r\n\t\tthis.target = null;\r\n\t\tthis.inclusionType = 'replace';\r\n\r\n\t\tObject.assign( this, params );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\treturn this.node.build( builder, this.getNodeType( builder ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SlotNode;\r\n", "import { defaultShaderStages, NodeFrame, GLSLNodeParser, NodeBuilder, normalView } from 'three';\r\nimport SlotNode from './SlotNode.js';\r\nimport { PerspectiveCamera, ShaderChunk, ShaderLib, UniformsUtils, UniformsLib } from 'three';\r\n\r\nconst nodeFrame = new NodeFrame();\r\nnodeFrame.camera = new PerspectiveCamera();\r\nexport { nodeFrame };\r\n\r\nconst nodeShaderLib = {\r\n\tLineBasicNodeMaterial: ShaderLib.basic,\r\n\tMeshBasicNodeMaterial: ShaderLib.basic,\r\n\tPointsNodeMaterial: ShaderLib.points,\r\n\tMeshStandardNodeMaterial: ShaderLib.standard,\r\n\tMeshPhysicalNodeMaterial: ShaderLib.physical,\r\n\tMeshPhongNodeMaterial: ShaderLib.phong\r\n};\r\n\r\nconst glslMethods = {\r\n\t[ 'atan2' ]: 'atan'\r\n};\r\n\r\nconst precisionLib = {\r\n\tlow: 'lowp',\r\n\tmedium: 'mediump',\r\n\thigh: 'highp'\r\n};\r\n\r\nfunction getIncludeSnippet( name ) {\r\n\r\n\treturn `#include <${name}>`;\r\n\r\n}\r\n\r\nfunction getShaderStageProperty( shaderStage ) {\r\n\r\n\treturn `${shaderStage}Shader`;\r\n\r\n}\r\n\r\nclass WebGLNodeBuilder extends NodeBuilder {\r\n\r\n\tconstructor( object, renderer, shader, material = null ) {\r\n\r\n\t\tsuper( object, renderer, new GLSLNodeParser(), null, material );\r\n\r\n\t\tthis.shader = shader;\r\n\t\tthis.slots = { vertex: [], fragment: [] };\r\n\r\n\t\tthis._parseShaderLib();\r\n\t\tthis._parseInclude( 'fragment', 'lights_physical_fragment', 'clearcoat_normal_fragment_begin', 'transmission_fragment' );\r\n\t\tthis._parseObject();\r\n\r\n\t\tthis._sortSlotsToFlow();\r\n\r\n\t\tthis.useComparisonMethod = true;\r\n\r\n\t}\r\n\r\n\tgetMethod( method ) {\r\n\r\n\t\treturn glslMethods[ method ] || method;\r\n\r\n\t}\r\n\r\n\taddSlot( shaderStage, slotNode ) {\r\n\r\n\t\tthis.slots[ shaderStage ].push( slotNode );\r\n\r\n\t}\r\n\r\n\t_parseShaderLib() {\r\n\r\n\t\tconst material = this.material;\r\n\r\n\t\tlet type = material.type;\r\n\r\n\t\t// see https://github.com/mrdoob/three.js/issues/23707\r\n\r\n\t\tif ( material.isMeshPhysicalNodeMaterial ) type = 'MeshPhysicalNodeMaterial';\r\n\t\telse if ( material.isMeshStandardNodeMaterial ) type = 'MeshStandardNodeMaterial';\r\n\t\telse if ( material.isMeshPhongNodeMaterial ) type = 'MeshPhongNodeMaterial';\r\n\t\telse if ( material.isMeshBasicNodeMaterial ) type = 'MeshBasicNodeMaterial';\r\n\t\telse if ( material.isPointsNodeMaterial ) type = 'PointsNodeMaterial';\r\n\t\telse if ( material.isLineBasicNodeMaterial ) type = 'LineBasicNodeMaterial';\r\n\r\n\t\t// shader lib\r\n\r\n\t\tif ( nodeShaderLib[ type ] !== undefined ) {\r\n\r\n\t\t\tconst shaderLib = nodeShaderLib[ type ];\r\n\t\t\tconst shader = this.shader;\r\n\r\n\t\t\tshader.vertexShader = shaderLib.vertexShader;\r\n\t\t\tshader.fragmentShader = shaderLib.fragmentShader;\r\n\t\t\tshader.uniforms = UniformsUtils.merge( [ shaderLib.uniforms, UniformsLib.lights ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_parseObject() {\r\n\r\n\t\tconst { material, renderer } = this;\r\n\r\n\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\tnode: normalView,\r\n\t\t\tnodeType: 'vec3',\r\n\t\t\tsource: 'void main() {',\r\n\t\t\ttarget: 'vec3 TransformedNormalView = %RESULT%;',\r\n\t\t\tinclusionType: 'append'\r\n\t\t} ) );\r\n\r\n\t\tif ( renderer.toneMappingNode && renderer.toneMappingNode.isNode === true ) {\r\n\r\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\tnode: material.colorNode,\r\n\t\t\t\tnodeType: 'vec4',\r\n\t\t\t\tsource: getIncludeSnippet( 'tonemapping_fragment' ),\r\n\t\t\t\ttarget: ''\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t\t// parse inputs\r\n\r\n\t\tif ( material.colorNode && material.colorNode.isNode ) {\r\n\r\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\tnode: material.colorNode,\r\n\t\t\t\tnodeType: 'vec4',\r\n\t\t\t\tsource: 'vec4 diffuseColor = vec4( diffuse, opacity );',\r\n\t\t\t\ttarget: 'vec4 diffuseColor = %RESULT%; diffuseColor.a *= opacity;',\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.opacityNode && material.opacityNode.isNode ) {\r\n\r\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\tnode: material.opacityNode,\r\n\t\t\t\tnodeType: 'float',\r\n\t\t\t\tsource: getIncludeSnippet( 'alphatest_fragment' ),\r\n\t\t\t\ttarget: 'diffuseColor.a = %RESULT%;',\r\n\t\t\t\tinclusionType: 'append'\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalNode && material.normalNode.isNode ) {\r\n\r\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\tnode: material.normalNode,\r\n\t\t\t\tnodeType: 'vec3',\r\n\t\t\t\tsource: getIncludeSnippet( 'normal_fragment_begin' ),\r\n\t\t\t\ttarget: 'normal = %RESULT%;',\r\n\t\t\t\tinclusionType: 'append'\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveNode && material.emissiveNode.isNode ) {\r\n\r\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\tnode: material.emissiveNode,\r\n\t\t\t\tnodeType: 'vec3',\r\n\t\t\t\tsource: getIncludeSnippet( 'emissivemap_fragment' ),\r\n\t\t\t\ttarget: 'totalEmissiveRadiance = %RESULT%;',\r\n\t\t\t\tinclusionType: 'append'\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.isMeshStandardNodeMaterial ) {\r\n\r\n\t\t\tif ( material.metalnessNode && material.metalnessNode.isNode ) {\r\n\r\n\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\tnode: material.metalnessNode,\r\n\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\tsource: getIncludeSnippet( 'metalnessmap_fragment' ),\r\n\t\t\t\t\ttarget: 'metalnessFactor = %RESULT%;',\r\n\t\t\t\t\tinclusionType: 'append'\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.roughnessNode && material.roughnessNode.isNode ) {\r\n\r\n\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\tnode: material.roughnessNode,\r\n\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\tsource: getIncludeSnippet( 'roughnessmap_fragment' ),\r\n\t\t\t\t\ttarget: 'roughnessFactor = %RESULT%;',\r\n\t\t\t\t\tinclusionType: 'append'\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isMeshPhysicalNodeMaterial ) {\r\n\r\n\t\t\t\tif ( material.clearcoatNode && material.clearcoatNode.isNode ) {\r\n\r\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\tnode: material.clearcoatNode,\r\n\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\tsource: 'material.clearcoat = clearcoat;',\r\n\t\t\t\t\t\ttarget: 'material.clearcoat = %RESULT%;'\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\tif ( material.clearcoatRoughnessNode && material.clearcoatRoughnessNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.clearcoatRoughnessNode,\r\n\t\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\t\tsource: 'material.clearcoatRoughness = clearcoatRoughness;',\r\n\t\t\t\t\t\t\ttarget: 'material.clearcoatRoughness = %RESULT%;'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( material.clearcoatNormalNode && material.clearcoatNormalNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.clearcoatNormalNode,\r\n\t\t\t\t\t\t\tnodeType: 'vec3',\r\n\t\t\t\t\t\t\tsource: 'vec3 clearcoatNormal = nonPerturbedNormal;',\r\n\t\t\t\t\t\t\ttarget: 'vec3 clearcoatNormal = %RESULT%;'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmaterial.defines.USE_CLEARCOAT = '';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdelete material.defines.USE_CLEARCOAT;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.sheenNode && material.sheenNode.isNode ) {\r\n\r\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\tnode: material.sheenNode,\r\n\t\t\t\t\t\tnodeType: 'vec3',\r\n\t\t\t\t\t\tsource: 'material.sheenColor = sheenColor;',\r\n\t\t\t\t\t\ttarget: 'material.sheenColor = %RESULT%;'\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\tif ( material.sheenRoughnessNode && material.sheenRoughnessNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.sheenRoughnessNode,\r\n\t\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\t\tsource: 'material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );',\r\n\t\t\t\t\t\t\ttarget: 'material.sheenRoughness = clamp( %RESULT%, 0.07, 1.0 );'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmaterial.defines.USE_SHEEN = '';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdelete material.defines.USE_SHEEN;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.iridescenceNode && material.iridescenceNode.isNode ) {\r\n\r\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\tnode: material.iridescenceNode,\r\n\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\tsource: 'material.iridescence = iridescence;',\r\n\t\t\t\t\t\ttarget: 'material.iridescence = %RESULT%;'\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\tif ( material.iridescenceIORNode && material.iridescenceIORNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.iridescenceIORNode,\r\n\t\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\t\tsource: 'material.iridescenceIOR = iridescenceIOR;',\r\n\t\t\t\t\t\t\ttarget: 'material.iridescenceIOR = %RESULT%;'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( material.iridescenceThicknessNode && material.iridescenceThicknessNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.iridescenceThicknessNode,\r\n\t\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\t\tsource: 'material.iridescenceThickness = iridescenceThicknessMaximum;',\r\n\t\t\t\t\t\t\ttarget: 'material.iridescenceThickness = %RESULT%;'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmaterial.defines.USE_IRIDESCENCE = '';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdelete material.defines.USE_IRIDESCENCE;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.iorNode && material.iorNode.isNode ) {\r\n\r\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\tnode: material.iorNode,\r\n\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\tsource: 'material.ior = ior;',\r\n\t\t\t\t\t\ttarget: 'material.ior = %RESULT%;'\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.specularColorNode && material.specularColorNode.isNode ) {\r\n\r\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\tnode: material.specularColorNode,\r\n\t\t\t\t\t\tnodeType: 'vec3',\r\n\t\t\t\t\t\tsource: 'vec3 specularColorFactor = specularColor;',\r\n\t\t\t\t\t\ttarget: 'vec3 specularColorFactor = %RESULT%;'\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.specularIntensityNode && material.specularIntensityNode.isNode ) {\r\n\r\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\tnode: material.specularIntensityNode,\r\n\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\tsource: 'float specularIntensityFactor = specularIntensity;',\r\n\t\t\t\t\t\ttarget: 'float specularIntensityFactor = %RESULT%;'\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.transmissionNode && material.transmissionNode.isNode ) {\r\n\r\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\tnode: material.transmissionNode,\r\n\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\tsource: 'material.transmission = transmission;',\r\n\t\t\t\t\t\ttarget: 'material.transmission = %RESULT%;'\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\tif ( material.thicknessNode && material.thicknessNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.thicknessNode,\r\n\t\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\t\tsource: 'material.thickness = thickness;',\r\n\t\t\t\t\t\t\ttarget: 'material.thickness = %RESULT%;'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( material.attenuationDistanceNode && material.attenuationDistanceNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.attenuationDistanceNode,\r\n\t\t\t\t\t\t\tnodeType: 'float',\r\n\t\t\t\t\t\t\tsource: 'material.attenuationDistance = attenuationDistance;',\r\n\t\t\t\t\t\t\ttarget: 'material.attenuationDistance = %RESULT%;'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( material.attenuationColorNode && material.attenuationColorNode.isNode ) {\r\n\r\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\r\n\t\t\t\t\t\t\tnode: material.attenuationColorNode,\r\n\t\t\t\t\t\t\tnodeType: 'vec3',\r\n\t\t\t\t\t\t\tsource: 'material.attenuationColor = attenuationColor;',\r\n\t\t\t\t\t\t\ttarget: 'material.attenuationColor = %RESULT%;'\r\n\t\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmaterial.transmission = 1;\r\n\t\t\t\t\tmaterial.defines.USE_TRANSMISSION = '';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial.transmission = 0;\r\n\t\t\t\t\tdelete material.defines.USE_TRANSMISSION;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( material.positionNode && material.positionNode.isNode ) {\r\n\r\n\t\t\tthis.addSlot( 'vertex', new SlotNode( {\r\n\t\t\t\tnode: material.positionNode,\r\n\t\t\t\tnodeType: 'vec3',\r\n\t\t\t\tsource: getIncludeSnippet( 'begin_vertex' ),\r\n\t\t\t\ttarget: 'transformed = %RESULT%;',\r\n\t\t\t\tinclusionType: 'append'\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.sizeNode && material.sizeNode.isNode ) {\r\n\r\n\t\t\tthis.addSlot( 'vertex', new SlotNode( {\r\n\t\t\t\tnode: material.sizeNode,\r\n\t\t\t\tnodeType: 'float',\r\n\t\t\t\tsource: 'gl_PointSize = size;',\r\n\t\t\t\ttarget: 'gl_PointSize = %RESULT%;'\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerateTexture( texture, textureProperty, uvSnippet ) {\r\n\r\n\t\tif ( texture.isTextureCube ) {\r\n\r\n\t\t\treturn `textureCube( ${textureProperty}, ${uvSnippet} )`;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn `texture2D( ${textureProperty}, ${uvSnippet} )`;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, biasSnippet ) {\r\n\r\n\t\treturn `textureLod( ${textureProperty}, ${uvSnippet}, ${biasSnippet} )`;\r\n\r\n\t}\r\n\r\n\tbuildFunctionCode( shaderNode ) {\r\n\r\n\t\tconst layout = shaderNode.layout;\r\n\t\tconst flowData = this.flowShaderNode( shaderNode );\r\n\r\n\t\tconst parameters = [];\r\n\r\n\t\tfor ( const input of layout.inputs ) {\r\n\r\n\t\t\tparameters.push( this.getType( input.type ) + ' ' + input.name );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst code = `${ this.getType( layout.type ) } ${ layout.name }( ${ parameters.join( ', ' ) } ) {\r\n\r\n\t${ flowData.vars }\r\n\r\n${ flowData.code }\r\n\treturn ${ flowData.result };\r\n\r\n}`;\r\n\r\n\t\t//\r\n\r\n\t\treturn code;\r\n\r\n\t}\r\n\r\n\tgetUniforms( shaderStage ) {\r\n\r\n\t\tconst uniforms = this.uniforms[ shaderStage ];\r\n\r\n\t\tlet output = '';\r\n\r\n\t\tfor ( const uniform of uniforms ) {\r\n\r\n\t\t\tif ( /^(modelViewMatrix|projectionMatrix)$/.test( uniform.name ) )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tlet snippet = null;\r\n\r\n\t\t\tif ( uniform.type === 'texture' ) {\r\n\r\n\t\t\t\tsnippet = `sampler2D ${uniform.name}; `;\r\n\r\n\t\t\t} else if ( uniform.type === 'cubeTexture' ) {\r\n\r\n\t\t\t\tsnippet = `samplerCube ${uniform.name}; `;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst vectorType = this.getVectorType( uniform.type );\r\n\r\n\t\t\t\tsnippet = `${vectorType} ${uniform.name}; `;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst precision = uniform.node.precision;\r\n\r\n\t\t\tif ( precision !== null ) {\r\n\r\n\t\t\t\tsnippet = 'uniform ' + precisionLib[ precision ] + ' ' + snippet;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = 'uniform ' + snippet;\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput += snippet;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tgetAttributes( shaderStage ) {\r\n\r\n\t\tlet snippet = '';\r\n\r\n\t\tif ( shaderStage === 'vertex' ) {\r\n\r\n\t\t\tconst attributes = this.attributes;\r\n\r\n\t\t\tfor ( const attribute of attributes ) {\r\n\r\n\t\t\t\t// ignore common attributes to prevent redefinitions\r\n\t\t\t\tif ( /^(position|normal|uv[1-3]?)$/.test( attribute.name ) )\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\tsnippet += `attribute ${attribute.type} ${attribute.name}; `;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tgetVaryings( shaderStage ) {\r\n\r\n\t\tlet snippet = '';\r\n\r\n\t\tconst varyings = this.varyings;\r\n\r\n\t\tif ( shaderStage === 'vertex' ) {\r\n\r\n\t\t\tfor ( const varying of varyings ) {\r\n\r\n\t\t\t\tsnippet += `${varying.needsInterpolation ? 'varying' : '/*varying*/'} ${varying.type} ${varying.name}; `;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( shaderStage === 'fragment' ) {\r\n\r\n\t\t\tfor ( const varying of varyings ) {\r\n\r\n\t\t\t\tif ( varying.needsInterpolation ) {\r\n\r\n\t\t\t\t\tsnippet += `varying ${varying.type} ${varying.name}; `;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\taddCode( shaderStage, source, code, scope = this ) {\r\n\r\n\t\tconst shaderProperty = getShaderStageProperty( shaderStage );\r\n\r\n\t\tlet snippet = scope[ shaderProperty ];\r\n\r\n\t\tconst index = snippet.indexOf( source );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tconst start = snippet.substring( 0, index + source.length );\r\n\t\t\tconst end = snippet.substring( index + source.length );\r\n\r\n\t\t\tsnippet = `${start}\\n${code}\\n${end}`;\r\n\r\n\t\t}\r\n\r\n\t\tscope[ shaderProperty ] = snippet;\r\n\r\n\t}\r\n\r\n\treplaceCode( shaderStage, source, target, scope = this ) {\r\n\r\n\t\tconst shaderProperty = getShaderStageProperty( shaderStage );\r\n\r\n\t\tscope[ shaderProperty ] = scope[ shaderProperty ].replaceAll( source, target );\r\n\r\n\t}\r\n\r\n\tgetVertexIndex() {\r\n\r\n\t\treturn 'gl_VertexID';\r\n\r\n\t}\r\n\r\n\tgetFrontFacing() {\r\n\r\n\t\treturn 'gl_FrontFacing';\r\n\r\n\t}\r\n\r\n\tgetFragCoord() {\r\n\r\n\t\treturn 'gl_FragCoord';\r\n\r\n\t}\r\n\r\n\tisFlipY() {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tbuildCode() {\r\n\r\n\t\tconst shaderData = {};\r\n\r\n\t\tfor ( const shaderStage of defaultShaderStages ) {\r\n\r\n\t\t\tconst uniforms = this.getUniforms( shaderStage );\r\n\t\t\tconst attributes = this.getAttributes( shaderStage );\r\n\t\t\tconst varyings = this.getVaryings( shaderStage );\r\n\t\t\tconst vars = this.getVars( shaderStage );\r\n\t\t\tconst codes = this.getCodes( shaderStage );\r\n\r\n\t\t\tshaderData[ shaderStage ] = `${this.getSignature()}\r\n// <node_builder>\r\n\r\n// uniforms\r\n${uniforms}\r\n\r\n// attributes\r\n${attributes}\r\n\r\n// varyings\r\n${varyings}\r\n\r\n// vars\r\n${vars}\r\n\r\n// codes\r\n${codes}\r\n\r\n// </node_builder>\r\n\r\n${this.shader[ getShaderStageProperty( shaderStage ) ]}\r\n`;\r\n\r\n\t\t}\r\n\r\n\t\tthis.vertexShader = shaderData.vertex;\r\n\t\tthis.fragmentShader = shaderData.fragment;\r\n\r\n\t}\r\n\r\n\tbuild() {\r\n\r\n\t\tsuper.build( false );\r\n\r\n\t\tthis._addSnippets();\r\n\t\tthis._addUniforms();\r\n\r\n\t\tthis._updateUniforms();\r\n\r\n\t\tthis.shader.vertexShader = this.vertexShader;\r\n\t\tthis.shader.fragmentShader = this.fragmentShader;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_parseInclude( shaderStage, ...includes ) {\r\n\r\n\t\tfor ( const name of includes ) {\r\n\r\n\t\t\tconst includeSnippet = getIncludeSnippet( name );\r\n\t\t\tconst code = ShaderChunk[ name ];\r\n\r\n\t\t\tconst shaderProperty = getShaderStageProperty( shaderStage );\r\n\r\n\t\t\tthis.shader[ shaderProperty ] = this.shader[ shaderProperty ].replaceAll( includeSnippet, code );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_sortSlotsToFlow() {\r\n\r\n\t\tfor ( const shaderStage of defaultShaderStages ) {\r\n\r\n\t\t\tconst sourceCode = this.shader[ getShaderStageProperty( shaderStage ) ];\r\n\r\n\t\t\tconst slots = this.slots[ shaderStage ].sort( ( slotA, slotB ) => {\r\n\r\n\t\t\t\treturn sourceCode.indexOf( slotA.source ) > sourceCode.indexOf( slotB.source ) ? 1 : - 1;\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tfor ( const slotNode of slots ) {\r\n\r\n\t\t\t\tthis.addFlow( shaderStage, slotNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_addSnippets() {\r\n\r\n\t\tfor ( const shaderStage of defaultShaderStages ) {\r\n\r\n\t\t\tfor ( const slotNode of this.slots[ shaderStage ] ) {\r\n\r\n\t\t\t\tconst flowData = this.getFlowData( slotNode/*, shaderStage*/ );\r\n\r\n\t\t\t\tconst inclusionType = slotNode.inclusionType;\r\n\t\t\t\tconst source = slotNode.source;\r\n\t\t\t\tconst target = flowData.code + '\\n\\t' + slotNode.target.replace( '%RESULT%', flowData.result );\r\n\r\n\t\t\t\tif ( inclusionType === 'append' ) {\r\n\r\n\t\t\t\t\tthis.addCode( shaderStage, source, target );\r\n\r\n\t\t\t\t} else if ( inclusionType === 'replace' ) {\r\n\r\n\t\t\t\t\tthis.replaceCode( shaderStage, source, target );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( `Inclusion type \"${ inclusionType }\" not compatible.` );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addCode(\r\n\t\t\t\tshaderStage,\r\n\t\t\t\t'main() {',\r\n\t\t\t\t'\\n\\t' + this.flowCode[ shaderStage ]\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_addUniforms() {\r\n\r\n\t\tfor ( const shaderStage of defaultShaderStages ) {\r\n\r\n\t\t\t// uniforms\r\n\r\n\t\t\tfor ( const uniform of this.uniforms[ shaderStage ] ) {\r\n\r\n\t\t\t\tthis.shader.uniforms[ uniform.name ] = uniform;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_updateUniforms() {\r\n\r\n\t\tnodeFrame.object = this.object;\r\n\t\tnodeFrame.renderer = this.renderer;\r\n\t\tnodeFrame.material = this.material;\r\n\t\tnodeFrame.scene = this.scene;\r\n\r\n\t\tfor ( const node of this.updateNodes ) {\r\n\r\n\t\t\tnodeFrame.updateNode( node );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGLNodeBuilder };\r\n"],
  "mappings": "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",
  "names": []
}
