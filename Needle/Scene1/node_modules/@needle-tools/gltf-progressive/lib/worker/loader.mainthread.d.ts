import { BufferGeometry, Texture, WebGLRenderer } from "three";
import type { KTX2LoaderWorkerConfig } from "three/examples/jsm/loaders/KTX2Loader.js";
type GLTFLoaderWorkerOptions = {
    debug?: boolean;
};
type WorkerLoadResult = {
    url: string;
    geometries: Array<{
        geometry: BufferGeometry;
        meshIndex: number;
        primitiveIndex: number;
        extensions: Record<string, any>;
    }>;
    textures: Array<{
        texture: Texture;
        textureIndex: number;
        extensions: Record<string, any>;
    }>;
};
export declare function getWorker(opts?: GLTFLoaderWorkerOptions): Promise<GLTFLoaderWorker>;
export type { GLTFLoaderWorker, GLTFLoaderWorkerOptions, WorkerLoadResult };
/** @internal */
export type GLTFLoaderWorker_Message = {
    type: 'init';
} | {
    type: 'load';
    url: string;
    dracoDecoderPath: string;
    ktx2TranscoderPath: string;
    ktx2LoaderConfig: KTX2LoaderWorkerConfig;
} | {
    type: "loaded-gltf";
    result: WorkerLoadResult;
};
declare class GLTFLoaderWorker {
    private readonly worker;
    static createWorker(opts: GLTFLoaderWorkerOptions): Promise<GLTFLoaderWorker>;
    private _running;
    private _webglRenderer;
    load(url: string | URL, opts?: {
        renderer?: WebGLRenderer;
    }): Promise<WorkerLoadResult>;
    private _debug;
    private constructor();
}
