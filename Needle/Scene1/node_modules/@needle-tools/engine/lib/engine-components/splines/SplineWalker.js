var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Object3D } from "three";
import { Mathf } from "../../engine/engine_math.js";
import { serializeable } from "../../engine/engine_serialization_decorator.js";
import { Behaviour } from "../Component.js";
import { SplineContainer } from "./Spline.js";
/**
 * Moves an object along a spline. Use this with a SplineContainer component.
 */
export class SplineWalker extends Behaviour {
    /**
     * The spline to use/walk along. Add a SplineContainer component to an object and assign it here.
     */
    spline = null;
    /** The object to move along the spline. If object is undefined then the spline walker will use the gameObject the component has been added to
     * @default undefined
    */
    object = undefined;
    /** The object to look at while moving along the spline
     * @default null
    */
    lookAt = null;
    /**
     * When clamp is set to true, the position01 value will be clamped between 0 and 1 and the object will not loop the spline.
     * @default false
     */
    clamp = false;
    /** The current position on the spline. The value ranges from 0 (start of the spline curve) to 1 (end of the spline curve)
     * @default 0
     */
    // @type float
    get position01() {
        return this._position01;
    }
    set position01(v) {
        this._position01 = v;
        this.updateFromPosition();
    }
    /** Resets the position to 0 */
    reset() {
        this._position01 = 0;
    }
    /**
     * If true the SplineWalker will automatically move along the spline
     * @default true
     */
    autoRun = true;
    /**
     * The duration in seconds it takes to complete the whole spline when autoWalk is enabled.
     * @default 10
     */
    duration = 10;
    // #region internal
    _position01 = 0;
    /** @internal */
    start() {
        if (this.object === undefined)
            this.object = this.gameObject;
        this.updateFromPosition();
    }
    update() {
        if (this.autoRun) {
            this._position01 += this.context.time.deltaTime / this.duration;
            this.updateFromPosition();
        }
    }
    updateFromPosition() {
        if (!this.spline || !this.spline.curve)
            return;
        if (!this.object)
            return;
        if (this.clamp)
            this._position01 = Mathf.clamp01(this._position01);
        else
            this._position01 = this._position01 % 1;
        const t = this._position01 >= 1 ? 1 : this._position01 % 1;
        const pt = this.spline.getPointAt(t);
        this.object.worldPosition = pt;
        if (!this.lookAt) {
            const tan = this.spline.getTangentAt(t);
            this.object.lookAt(pt.add(tan));
        }
        else
            this.object.lookAt(this.lookAt.worldPosition);
    }
}
__decorate([
    serializeable(SplineContainer)
], SplineWalker.prototype, "spline", void 0);
__decorate([
    serializeable(Object3D)
], SplineWalker.prototype, "object", void 0);
__decorate([
    serializeable(Object3D)
], SplineWalker.prototype, "lookAt", void 0);
__decorate([
    serializeable()
], SplineWalker.prototype, "clamp", void 0);
__decorate([
    serializeable()
], SplineWalker.prototype, "position01", null);
__decorate([
    serializeable()
], SplineWalker.prototype, "autoRun", void 0);
__decorate([
    serializeable()
], SplineWalker.prototype, "duration", void 0);
//# sourceMappingURL=SplineWalker.js.map