import { Curve, Quaternion, Vector3 } from "three";
import { Behaviour } from "../Component.js";
export declare class SplineData {
    position: Vector3;
    rotation: Quaternion;
    tangentIn: Vector3;
    tangentOut: Vector3;
}
/**
 * Holds spline data and generates a spline curve. Use with SplineWalker to move objects along the spline or call getPointAt to sample points on the spline.
 * The spline is defined by an array of knots (SplineData) which define position, rotation and tangents.
 *
 * You can create a SplineContainer from an array of points using the static method 'createFromPoints'.
 */
export declare class SplineContainer extends Behaviour {
    /**
     * Adds a knot to the end of the spline.
     */
    addKnot(knot: SplineData | {
        position: Vector3;
    }): SplineContainer;
    /**
     * Removes a knot by index or by reference.
     */
    removeKnot(index: number | SplineData): SplineContainer;
    /**
     * Gets a point on the spline in world space.
     */
    getPointAt(t: number, target?: Vector3): Vector3;
    /**
     * Marks the spline as dirty, causing it to be rebuilt on the next update.
     */
    markDirty(): void;
    /**
     * Gets the tangent vector on the spline in world space.
     */
    getTangentAt(t: number, target?: Vector3): Vector3;
    set closed(value: boolean);
    get closed(): boolean;
    private _closed;
    /** Spline data. Call 'markDirty' if modified */
    spline: SplineData[];
    /** Enable to render the spline curve for debugging */
    set debug(debug: boolean);
    /** Gets the spline curve generated from the 'spline' data */
    get curve(): Curve<Vector3> | null;
    get isDirty(): boolean;
    private _isDirty;
    private _curve;
    private _builtCurve;
    private _debugLine;
    /** @internal */
    awake(): void;
    /** @internal */
    update(): void;
    private buildCurve;
    private buildDebugCurve;
}
