
import { Object3D } from "three"

import { Mathf } from "../../engine/engine_math.js";
import { serializeable } from "../../engine/engine_serialization_decorator.js";
import { Behaviour } from "../Component.js";
import { SplineContainer } from "./Spline.js";

/**
 * Moves an object along a spline. Use this with a SplineContainer component.
 */
export class SplineWalker extends Behaviour {

    /**
     * The spline to use/walk along. Add a SplineContainer component to an object and assign it here.
     */
    @serializeable(SplineContainer)
    spline: SplineContainer | null = null;

    /** The object to move along the spline. If object is undefined then the spline walker will use the gameObject the component has been added to 
     * @default undefined
    */
    @serializeable(Object3D)
    object?: Object3D | null = undefined;

    /** The object to look at while moving along the spline 
     * @default null
    */
    @serializeable(Object3D)
    lookAt: Object3D | null = null;
    
    /**
     * When clamp is set to true, the position01 value will be clamped between 0 and 1 and the object will not loop the spline.
     * @default false
     */
    @serializeable()
    clamp: boolean = false;

    /** The current position on the spline. The value ranges from 0 (start of the spline curve) to 1 (end of the spline curve)
     * @default 0
     */
    // @type float
    @serializeable()
    get position01(): number {
        return this._position01;
    }
    set position01(v: number) {
        this._position01 = v;
        this.updateFromPosition();
    }

    /** Resets the position to 0 */
    reset() {
        this._position01 = 0;
    }

    /**
     * If true the SplineWalker will automatically move along the spline
     * @default true
     */
    @serializeable()
    autoRun: boolean = true;

    /**
     * The duration in seconds it takes to complete the whole spline when autoWalk is enabled.
     * @default 10
     */
    @serializeable()
    duration: number = 10;


    // #region internal

    private _position01: number = 0;

    /** @internal */
    start() {
        if(this.object === undefined) this.object = this.gameObject;
        this.updateFromPosition();
    }

    update() {
        if (this.autoRun) {
            this._position01 += this.context.time.deltaTime / this.duration;
            this.updateFromPosition();
        }
    }


    private updateFromPosition() {
        if (!this.spline || !this.spline.curve) return;
        if (!this.object) return;

        if (this.clamp) this._position01 = Mathf.clamp01(this._position01);
        else this._position01 = this._position01 % 1;

        const t = this._position01 >= 1 ? 1 : this._position01 % 1;
        const pt = this.spline.getPointAt(t);
        this.object.worldPosition = pt;
        if (!this.lookAt) {
            const tan = this.spline.getTangentAt(t);
            this.object.lookAt(pt.add(tan));
        }
        else this.object.lookAt(this.lookAt.worldPosition);
    }
}
